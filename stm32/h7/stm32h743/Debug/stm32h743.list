
stm32h743.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a9a4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d68  0800ac44  0800ac44  0000bc44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c9ac  0800c9ac  0000d9ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c9b4  0800c9b4  0000d9b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800c9b8  0800c9b8  0000d9b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000068  24000000  0800c9bc  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000a540  24000068  0800ca24  0000e068  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2400a5a8  0800ca24  0000e5a8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000e068  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001258f  00000000  00000000  0000e096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003b94  00000000  00000000  00020625  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000bb8  00000000  00000000  000241c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000096c  00000000  00000000  00024d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003112d  00000000  00000000  000256e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00016051  00000000  00000000  00056811  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000fb716  00000000  00000000  0006c862  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00167f78  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000033e0  00000000  00000000  00167fbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000004b  00000000  00000000  0016b39c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000068 	.word	0x24000068
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800ac2c 	.word	0x0800ac2c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400006c 	.word	0x2400006c
 80002dc:	0800ac2c 	.word	0x0800ac2c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <init_dma_desc>:
	ETH->DMACTDTPR = (unsigned int)&tx_desc[ETH_TX_DESC_NUM-1];
}


void init_dma_desc(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
  memset((void *)tx_desc, 0, sizeof(tx_desc));
 8000386:	2250      	movs	r2, #80	@ 0x50
 8000388:	2100      	movs	r1, #0
 800038a:	484f      	ldr	r0, [pc, #316]	@ (80004c8 <init_dma_desc+0x148>)
 800038c:	f009 fe27 	bl	8009fde <memset>
  memset((void *)rx_desc, 0, sizeof(rx_desc));
 8000390:	2250      	movs	r2, #80	@ 0x50
 8000392:	2100      	movs	r1, #0
 8000394:	484d      	ldr	r0, [pc, #308]	@ (80004cc <init_dma_desc+0x14c>)
 8000396:	f009 fe22 	bl	8009fde <memset>


  for (unsigned int i = 0; i < ETH_TX_DESC_NUM; i++)
 800039a:	2300      	movs	r3, #0
 800039c:	607b      	str	r3, [r7, #4]
 800039e:	e036      	b.n	800040e <init_dma_desc+0x8e>
  {
	  tx_desc[i].tdes0.bit.buf1ap = &dma_tx_buf[i];
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	f44f 62be 	mov.w	r2, #1520	@ 0x5f0
 80003a6:	fb02 f303 	mul.w	r3, r2, r3
 80003aa:	4a49      	ldr	r2, [pc, #292]	@ (80004d0 <init_dma_desc+0x150>)
 80003ac:	4413      	add	r3, r2
 80003ae:	4619      	mov	r1, r3
 80003b0:	4a45      	ldr	r2, [pc, #276]	@ (80004c8 <init_dma_desc+0x148>)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	011b      	lsls	r3, r3, #4
 80003b6:	4413      	add	r3, r2
 80003b8:	6019      	str	r1, [r3, #0]
	  tx_desc[i].tdes1.bit.buf2ap = 0;
 80003ba:	4a43      	ldr	r2, [pc, #268]	@ (80004c8 <init_dma_desc+0x148>)
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	011b      	lsls	r3, r3, #4
 80003c0:	4413      	add	r3, r2
 80003c2:	3304      	adds	r3, #4
 80003c4:	2200      	movs	r2, #0
 80003c6:	601a      	str	r2, [r3, #0]

	  tx_desc[i].tdes2.bit.b1l = TX_DMA_BUF_LEN;
 80003c8:	4a3f      	ldr	r2, [pc, #252]	@ (80004c8 <init_dma_desc+0x148>)
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	011b      	lsls	r3, r3, #4
 80003ce:	4413      	add	r3, r2
 80003d0:	f103 0208 	add.w	r2, r3, #8
 80003d4:	6813      	ldr	r3, [r2, #0]
 80003d6:	f44f 61be 	mov.w	r1, #1520	@ 0x5f0
 80003da:	f361 030d 	bfi	r3, r1, #0, #14
 80003de:	6013      	str	r3, [r2, #0]
	  tx_desc[i].tdes2.bit.b2l = 0;
 80003e0:	4a39      	ldr	r2, [pc, #228]	@ (80004c8 <init_dma_desc+0x148>)
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	011b      	lsls	r3, r3, #4
 80003e6:	4413      	add	r3, r2
 80003e8:	f103 0208 	add.w	r2, r3, #8
 80003ec:	6813      	ldr	r3, [r2, #0]
 80003ee:	f36f 431d 	bfc	r3, #16, #14
 80003f2:	6013      	str	r3, [r2, #0]

	  tx_desc[i].tdes3.bit.cic = 3;
 80003f4:	4a34      	ldr	r2, [pc, #208]	@ (80004c8 <init_dma_desc+0x148>)
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	011b      	lsls	r3, r3, #4
 80003fa:	4413      	add	r3, r2
 80003fc:	f103 0208 	add.w	r2, r3, #8
 8000400:	6853      	ldr	r3, [r2, #4]
 8000402:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 8000406:	6053      	str	r3, [r2, #4]
  for (unsigned int i = 0; i < ETH_TX_DESC_NUM; i++)
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	3301      	adds	r3, #1
 800040c:	607b      	str	r3, [r7, #4]
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	2b04      	cmp	r3, #4
 8000412:	d9c5      	bls.n	80003a0 <init_dma_desc+0x20>

  }

  for (unsigned int i = 0; i < ETH_RX_DESC_NUM; i++)
 8000414:	2300      	movs	r3, #0
 8000416:	603b      	str	r3, [r7, #0]
 8000418:	e034      	b.n	8000484 <init_dma_desc+0x104>
  {
	  rx_desc[i].rdes0.read_bit.buf1ap = (unsigned int)(&dma_rx_buf[i]);
 800041a:	683b      	ldr	r3, [r7, #0]
 800041c:	f44f 62be 	mov.w	r2, #1520	@ 0x5f0
 8000420:	fb02 f303 	mul.w	r3, r2, r3
 8000424:	4a2b      	ldr	r2, [pc, #172]	@ (80004d4 <init_dma_desc+0x154>)
 8000426:	4413      	add	r3, r2
 8000428:	4619      	mov	r1, r3
 800042a:	4a28      	ldr	r2, [pc, #160]	@ (80004cc <init_dma_desc+0x14c>)
 800042c:	683b      	ldr	r3, [r7, #0]
 800042e:	011b      	lsls	r3, r3, #4
 8000430:	4413      	add	r3, r2
 8000432:	6019      	str	r1, [r3, #0]
	  rx_desc[i].rdes2.read_bit.buf2ap = 0;
 8000434:	4a25      	ldr	r2, [pc, #148]	@ (80004cc <init_dma_desc+0x14c>)
 8000436:	683b      	ldr	r3, [r7, #0]
 8000438:	011b      	lsls	r3, r3, #4
 800043a:	4413      	add	r3, r2
 800043c:	3308      	adds	r3, #8
 800043e:	2200      	movs	r2, #0
 8000440:	601a      	str	r2, [r3, #0]
	  rx_desc[i].rdes3.read_bit.buf1v = 1;
 8000442:	4a22      	ldr	r2, [pc, #136]	@ (80004cc <init_dma_desc+0x14c>)
 8000444:	683b      	ldr	r3, [r7, #0]
 8000446:	011b      	lsls	r3, r3, #4
 8000448:	4413      	add	r3, r2
 800044a:	f103 0208 	add.w	r2, r3, #8
 800044e:	6853      	ldr	r3, [r2, #4]
 8000450:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000454:	6053      	str	r3, [r2, #4]
	  rx_desc[i].rdes3.read_bit.buf2v = 0;
 8000456:	4a1d      	ldr	r2, [pc, #116]	@ (80004cc <init_dma_desc+0x14c>)
 8000458:	683b      	ldr	r3, [r7, #0]
 800045a:	011b      	lsls	r3, r3, #4
 800045c:	4413      	add	r3, r2
 800045e:	f103 0208 	add.w	r2, r3, #8
 8000462:	6853      	ldr	r3, [r2, #4]
 8000464:	f36f 6359 	bfc	r3, #25, #1
 8000468:	6053      	str	r3, [r2, #4]
	  rx_desc[i].rdes3.read_bit.own = 1;
 800046a:	4a18      	ldr	r2, [pc, #96]	@ (80004cc <init_dma_desc+0x14c>)
 800046c:	683b      	ldr	r3, [r7, #0]
 800046e:	011b      	lsls	r3, r3, #4
 8000470:	4413      	add	r3, r2
 8000472:	f103 0208 	add.w	r2, r3, #8
 8000476:	6853      	ldr	r3, [r2, #4]
 8000478:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800047c:	6053      	str	r3, [r2, #4]
  for (unsigned int i = 0; i < ETH_RX_DESC_NUM; i++)
 800047e:	683b      	ldr	r3, [r7, #0]
 8000480:	3301      	adds	r3, #1
 8000482:	603b      	str	r3, [r7, #0]
 8000484:	683b      	ldr	r3, [r7, #0]
 8000486:	2b04      	cmp	r3, #4
 8000488:	d9c7      	bls.n	800041a <init_dma_desc+0x9a>
  }

  ETH->DMACTDLAR = (unsigned int)&tx_desc;
 800048a:	4a13      	ldr	r2, [pc, #76]	@ (80004d8 <init_dma_desc+0x158>)
 800048c:	4b0e      	ldr	r3, [pc, #56]	@ (80004c8 <init_dma_desc+0x148>)
 800048e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8000492:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114
  ETH->DMACRDLAR = (unsigned int)&rx_desc;
 8000496:	4a10      	ldr	r2, [pc, #64]	@ (80004d8 <init_dma_desc+0x158>)
 8000498:	4b0c      	ldr	r3, [pc, #48]	@ (80004cc <init_dma_desc+0x14c>)
 800049a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800049e:	f8c2 311c 	str.w	r3, [r2, #284]	@ 0x11c
//  ETH->DMACTDTPR = (unsigned int)&tx_desc[ETH_TX_DESC_NUM];
//  ETH->DMACRDTPR = (unsigned int)&rx_desc[ETH_RX_DESC_NUM];
  ETH->DMACTDRLR = ETH_TX_DESC_NUM-1;
 80004a2:	4b0d      	ldr	r3, [pc, #52]	@ (80004d8 <init_dma_desc+0x158>)
 80004a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80004a8:	461a      	mov	r2, r3
 80004aa:	2304      	movs	r3, #4
 80004ac:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c
  ETH->DMACRDRLR = ETH_RX_DESC_NUM-1;
 80004b0:	4b09      	ldr	r3, [pc, #36]	@ (80004d8 <init_dma_desc+0x158>)
 80004b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80004b6:	461a      	mov	r2, r3
 80004b8:	2304      	movs	r3, #4
 80004ba:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130
}
 80004be:	bf00      	nop
 80004c0:	3708      	adds	r7, #8
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	24003bec 	.word	0x24003bec
 80004cc:	24003c3c 	.word	0x24003c3c
 80004d0:	24000084 	.word	0x24000084
 80004d4:	24001e34 	.word	0x24001e34
 80004d8:	40028000 	.word	0x40028000

080004dc <init_mac_clk>:



void init_mac_clk(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
	RCC->APB4ENR |= (1<<1);								//syscfg
 80004e0:	4b0e      	ldr	r3, [pc, #56]	@ (800051c <init_mac_clk+0x40>)
 80004e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80004e6:	4a0d      	ldr	r2, [pc, #52]	@ (800051c <init_mac_clk+0x40>)
 80004e8:	f043 0302 	orr.w	r3, r3, #2
 80004ec:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
	RCC->AHB1ENR |= (1<<17)|(1<<16)|(1<<15);
 80004f0:	4b0a      	ldr	r3, [pc, #40]	@ (800051c <init_mac_clk+0x40>)
 80004f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80004f6:	4a09      	ldr	r2, [pc, #36]	@ (800051c <init_mac_clk+0x40>)
 80004f8:	f443 3360 	orr.w	r3, r3, #229376	@ 0x38000
 80004fc:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
	RCC->AHB4ENR |= (1<<6)|(1<<2)|(1<<1)|(1<<0);
 8000500:	4b06      	ldr	r3, [pc, #24]	@ (800051c <init_mac_clk+0x40>)
 8000502:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000506:	4a05      	ldr	r2, [pc, #20]	@ (800051c <init_mac_clk+0x40>)
 8000508:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
 800050c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
}
 8000510:	bf00      	nop
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	58024400 	.word	0x58024400

08000520 <init_mac_pin>:


void init_mac_pin(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
	//PC1,PC4,PC5
	GPIOC->MODER &= ~((0b11<<10)|(0b11<<8)|(0b11<<2));
 8000524:	4b4c      	ldr	r3, [pc, #304]	@ (8000658 <init_mac_pin+0x138>)
 8000526:	681a      	ldr	r2, [r3, #0]
 8000528:	494b      	ldr	r1, [pc, #300]	@ (8000658 <init_mac_pin+0x138>)
 800052a:	4b4c      	ldr	r3, [pc, #304]	@ (800065c <init_mac_pin+0x13c>)
 800052c:	4013      	ands	r3, r2
 800052e:	600b      	str	r3, [r1, #0]
	GPIOC->MODER |= (0b10<<10)|(0b10<<8)|(0b10<<2);
 8000530:	4b49      	ldr	r3, [pc, #292]	@ (8000658 <init_mac_pin+0x138>)
 8000532:	681a      	ldr	r2, [r3, #0]
 8000534:	4948      	ldr	r1, [pc, #288]	@ (8000658 <init_mac_pin+0x138>)
 8000536:	f640 2308 	movw	r3, #2568	@ 0xa08
 800053a:	4313      	orrs	r3, r2
 800053c:	600b      	str	r3, [r1, #0]
	GPIOC->OSPEEDR &= ~((0b11<<10)|(0b11<<8)|(0b11<<2));
 800053e:	4b46      	ldr	r3, [pc, #280]	@ (8000658 <init_mac_pin+0x138>)
 8000540:	689a      	ldr	r2, [r3, #8]
 8000542:	4945      	ldr	r1, [pc, #276]	@ (8000658 <init_mac_pin+0x138>)
 8000544:	4b45      	ldr	r3, [pc, #276]	@ (800065c <init_mac_pin+0x13c>)
 8000546:	4013      	ands	r3, r2
 8000548:	608b      	str	r3, [r1, #8]
	GPIOC->OSPEEDR |= (0b10<<10)|(0b10<<8)|(0b10<<2);
 800054a:	4b43      	ldr	r3, [pc, #268]	@ (8000658 <init_mac_pin+0x138>)
 800054c:	689a      	ldr	r2, [r3, #8]
 800054e:	4942      	ldr	r1, [pc, #264]	@ (8000658 <init_mac_pin+0x138>)
 8000550:	f640 2308 	movw	r3, #2568	@ 0xa08
 8000554:	4313      	orrs	r3, r2
 8000556:	608b      	str	r3, [r1, #8]
	GPIOC->AFR[0] &= ~((0b1111<<20)|(0b1111<<16)|(0b1111<<4));
 8000558:	4b3f      	ldr	r3, [pc, #252]	@ (8000658 <init_mac_pin+0x138>)
 800055a:	6a1a      	ldr	r2, [r3, #32]
 800055c:	493e      	ldr	r1, [pc, #248]	@ (8000658 <init_mac_pin+0x138>)
 800055e:	4b40      	ldr	r3, [pc, #256]	@ (8000660 <init_mac_pin+0x140>)
 8000560:	4013      	ands	r3, r2
 8000562:	620b      	str	r3, [r1, #32]
	GPIOC->AFR[0] |= (11<<20)|(11<<16)|(11<<4);
 8000564:	4b3c      	ldr	r3, [pc, #240]	@ (8000658 <init_mac_pin+0x138>)
 8000566:	6a1a      	ldr	r2, [r3, #32]
 8000568:	493b      	ldr	r1, [pc, #236]	@ (8000658 <init_mac_pin+0x138>)
 800056a:	4b3e      	ldr	r3, [pc, #248]	@ (8000664 <init_mac_pin+0x144>)
 800056c:	4313      	orrs	r3, r2
 800056e:	620b      	str	r3, [r1, #32]

	//PA1,PA2,PA7
	GPIOA->MODER &= ~((0b11<<14)|(0b11<<4)|(0b11<<2));
 8000570:	4b3d      	ldr	r3, [pc, #244]	@ (8000668 <init_mac_pin+0x148>)
 8000572:	681a      	ldr	r2, [r3, #0]
 8000574:	493c      	ldr	r1, [pc, #240]	@ (8000668 <init_mac_pin+0x148>)
 8000576:	4b3d      	ldr	r3, [pc, #244]	@ (800066c <init_mac_pin+0x14c>)
 8000578:	4013      	ands	r3, r2
 800057a:	600b      	str	r3, [r1, #0]
	GPIOA->MODER |= (0b10<<14)|(0b10<<4)|(0b10<<2);
 800057c:	4b3a      	ldr	r3, [pc, #232]	@ (8000668 <init_mac_pin+0x148>)
 800057e:	681a      	ldr	r2, [r3, #0]
 8000580:	4939      	ldr	r1, [pc, #228]	@ (8000668 <init_mac_pin+0x148>)
 8000582:	f248 0328 	movw	r3, #32808	@ 0x8028
 8000586:	4313      	orrs	r3, r2
 8000588:	600b      	str	r3, [r1, #0]
	GPIOA->OSPEEDR &= ~((0b11<<10)|(0b11<<8)|(0b11<<2));
 800058a:	4b37      	ldr	r3, [pc, #220]	@ (8000668 <init_mac_pin+0x148>)
 800058c:	689a      	ldr	r2, [r3, #8]
 800058e:	4936      	ldr	r1, [pc, #216]	@ (8000668 <init_mac_pin+0x148>)
 8000590:	4b32      	ldr	r3, [pc, #200]	@ (800065c <init_mac_pin+0x13c>)
 8000592:	4013      	ands	r3, r2
 8000594:	608b      	str	r3, [r1, #8]
	GPIOA->OSPEEDR |= (0b10<<10)|(0b10<<8)|(0b10<<2);
 8000596:	4b34      	ldr	r3, [pc, #208]	@ (8000668 <init_mac_pin+0x148>)
 8000598:	689a      	ldr	r2, [r3, #8]
 800059a:	4933      	ldr	r1, [pc, #204]	@ (8000668 <init_mac_pin+0x148>)
 800059c:	f640 2308 	movw	r3, #2568	@ 0xa08
 80005a0:	4313      	orrs	r3, r2
 80005a2:	608b      	str	r3, [r1, #8]
	GPIOA->AFR[0] &= ~((0b1111<<28)|(0b1111<<8)|(0b1111<<4));
 80005a4:	4b30      	ldr	r3, [pc, #192]	@ (8000668 <init_mac_pin+0x148>)
 80005a6:	6a1a      	ldr	r2, [r3, #32]
 80005a8:	492f      	ldr	r1, [pc, #188]	@ (8000668 <init_mac_pin+0x148>)
 80005aa:	4b31      	ldr	r3, [pc, #196]	@ (8000670 <init_mac_pin+0x150>)
 80005ac:	4013      	ands	r3, r2
 80005ae:	620b      	str	r3, [r1, #32]
	GPIOA->AFR[0] |= (11<<28)|(11<<8)|(11<<4);
 80005b0:	4b2d      	ldr	r3, [pc, #180]	@ (8000668 <init_mac_pin+0x148>)
 80005b2:	6a1a      	ldr	r2, [r3, #32]
 80005b4:	492c      	ldr	r1, [pc, #176]	@ (8000668 <init_mac_pin+0x148>)
 80005b6:	4b2f      	ldr	r3, [pc, #188]	@ (8000674 <init_mac_pin+0x154>)
 80005b8:	4313      	orrs	r3, r2
 80005ba:	620b      	str	r3, [r1, #32]

	//PB11
	GPIOB->MODER &= ~(0b11<<22);
 80005bc:	4b2e      	ldr	r3, [pc, #184]	@ (8000678 <init_mac_pin+0x158>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a2d      	ldr	r2, [pc, #180]	@ (8000678 <init_mac_pin+0x158>)
 80005c2:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80005c6:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0b10<<22);
 80005c8:	4b2b      	ldr	r3, [pc, #172]	@ (8000678 <init_mac_pin+0x158>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a2a      	ldr	r2, [pc, #168]	@ (8000678 <init_mac_pin+0x158>)
 80005ce:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80005d2:	6013      	str	r3, [r2, #0]
	GPIOB->OSPEEDR &= ~(0b11<<22);
 80005d4:	4b28      	ldr	r3, [pc, #160]	@ (8000678 <init_mac_pin+0x158>)
 80005d6:	689b      	ldr	r3, [r3, #8]
 80005d8:	4a27      	ldr	r2, [pc, #156]	@ (8000678 <init_mac_pin+0x158>)
 80005da:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80005de:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |= (0b10<<22);
 80005e0:	4b25      	ldr	r3, [pc, #148]	@ (8000678 <init_mac_pin+0x158>)
 80005e2:	689b      	ldr	r3, [r3, #8]
 80005e4:	4a24      	ldr	r2, [pc, #144]	@ (8000678 <init_mac_pin+0x158>)
 80005e6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80005ea:	6093      	str	r3, [r2, #8]
	GPIOB->AFR[1] &= ~((0b1111<<12));
 80005ec:	4b22      	ldr	r3, [pc, #136]	@ (8000678 <init_mac_pin+0x158>)
 80005ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005f0:	4a21      	ldr	r2, [pc, #132]	@ (8000678 <init_mac_pin+0x158>)
 80005f2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80005f6:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] |= (11<<12);
 80005f8:	4b1f      	ldr	r3, [pc, #124]	@ (8000678 <init_mac_pin+0x158>)
 80005fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005fc:	4a1e      	ldr	r2, [pc, #120]	@ (8000678 <init_mac_pin+0x158>)
 80005fe:	f443 4330 	orr.w	r3, r3, #45056	@ 0xb000
 8000602:	6253      	str	r3, [r2, #36]	@ 0x24

	//PG13,PG14
	GPIOG->MODER &= ~((0b11<<28)|(0b11<<26));
 8000604:	4b1d      	ldr	r3, [pc, #116]	@ (800067c <init_mac_pin+0x15c>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a1c      	ldr	r2, [pc, #112]	@ (800067c <init_mac_pin+0x15c>)
 800060a:	f023 5370 	bic.w	r3, r3, #1006632960	@ 0x3c000000
 800060e:	6013      	str	r3, [r2, #0]
	GPIOG->MODER |= (0b10<<28)|(0b10<<26);
 8000610:	4b1a      	ldr	r3, [pc, #104]	@ (800067c <init_mac_pin+0x15c>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a19      	ldr	r2, [pc, #100]	@ (800067c <init_mac_pin+0x15c>)
 8000616:	f043 5320 	orr.w	r3, r3, #671088640	@ 0x28000000
 800061a:	6013      	str	r3, [r2, #0]
	GPIOG->OSPEEDR &= ~((0b11<<28)|(0b11<<26));
 800061c:	4b17      	ldr	r3, [pc, #92]	@ (800067c <init_mac_pin+0x15c>)
 800061e:	689b      	ldr	r3, [r3, #8]
 8000620:	4a16      	ldr	r2, [pc, #88]	@ (800067c <init_mac_pin+0x15c>)
 8000622:	f023 5370 	bic.w	r3, r3, #1006632960	@ 0x3c000000
 8000626:	6093      	str	r3, [r2, #8]
	GPIOG->OSPEEDR |= (0b10<<28)|(0b10<<26);
 8000628:	4b14      	ldr	r3, [pc, #80]	@ (800067c <init_mac_pin+0x15c>)
 800062a:	689b      	ldr	r3, [r3, #8]
 800062c:	4a13      	ldr	r2, [pc, #76]	@ (800067c <init_mac_pin+0x15c>)
 800062e:	f043 5320 	orr.w	r3, r3, #671088640	@ 0x28000000
 8000632:	6093      	str	r3, [r2, #8]
	GPIOG->AFR[1] &= ~((0b1111<<24)|(0b1111<<20));
 8000634:	4b11      	ldr	r3, [pc, #68]	@ (800067c <init_mac_pin+0x15c>)
 8000636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000638:	4a10      	ldr	r2, [pc, #64]	@ (800067c <init_mac_pin+0x15c>)
 800063a:	f023 637f 	bic.w	r3, r3, #267386880	@ 0xff00000
 800063e:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOG->AFR[1] |= (11<<24)|(11<<20);
 8000640:	4b0e      	ldr	r3, [pc, #56]	@ (800067c <init_mac_pin+0x15c>)
 8000642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000644:	4a0d      	ldr	r2, [pc, #52]	@ (800067c <init_mac_pin+0x15c>)
 8000646:	f043 633b 	orr.w	r3, r3, #196083712	@ 0xbb00000
 800064a:	6253      	str	r3, [r2, #36]	@ 0x24
//	GPIOC->MODER &= ~((0b11<<6));
//	GPIOC->MODER |= (0b10<<6);
//	GPIOC->AFR[0] &= ~(0b1111<<12);
//	GPIOC->AFR[0] |= (11<<12);

}
 800064c:	bf00      	nop
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	58020800 	.word	0x58020800
 800065c:	fffff0f3 	.word	0xfffff0f3
 8000660:	ff00ff0f 	.word	0xff00ff0f
 8000664:	00bb00b0 	.word	0x00bb00b0
 8000668:	58020000 	.word	0x58020000
 800066c:	ffff3fc3 	.word	0xffff3fc3
 8000670:	0ffff00f 	.word	0x0ffff00f
 8000674:	b0000bb0 	.word	0xb0000bb0
 8000678:	58020400 	.word	0x58020400
 800067c:	58021800 	.word	0x58021800

08000680 <write_phy>:


void write_phy(unsigned char addr, unsigned char reg, unsigned short value)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	71fb      	strb	r3, [r7, #7]
 800068a:	460b      	mov	r3, r1
 800068c:	71bb      	strb	r3, [r7, #6]
 800068e:	4613      	mov	r3, r2
 8000690:	80bb      	strh	r3, [r7, #4]
  while (ETH->MACMDIOAR & (1<<0));
 8000692:	bf00      	nop
 8000694:	4b16      	ldr	r3, [pc, #88]	@ (80006f0 <write_phy+0x70>)
 8000696:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800069a:	f003 0301 	and.w	r3, r3, #1
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d1f8      	bne.n	8000694 <write_phy+0x14>
  ETH->MACMDIOAR = (addr<<21)|(reg<<16)|(7<<12)|(0b100<<8)|(1<<2);
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	055a      	lsls	r2, r3, #21
 80006a6:	79bb      	ldrb	r3, [r7, #6]
 80006a8:	041b      	lsls	r3, r3, #16
 80006aa:	431a      	orrs	r2, r3
 80006ac:	f247 4304 	movw	r3, #29700	@ 0x7404
 80006b0:	4313      	orrs	r3, r2
 80006b2:	4a0f      	ldr	r2, [pc, #60]	@ (80006f0 <write_phy+0x70>)
 80006b4:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
  ETH->MACMDIODR = value;
 80006b8:	4a0d      	ldr	r2, [pc, #52]	@ (80006f0 <write_phy+0x70>)
 80006ba:	88bb      	ldrh	r3, [r7, #4]
 80006bc:	f8c2 3204 	str.w	r3, [r2, #516]	@ 0x204
  ETH->MACMDIOAR |= (1<<0);
 80006c0:	4b0b      	ldr	r3, [pc, #44]	@ (80006f0 <write_phy+0x70>)
 80006c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80006c6:	4a0a      	ldr	r2, [pc, #40]	@ (80006f0 <write_phy+0x70>)
 80006c8:	f043 0301 	orr.w	r3, r3, #1
 80006cc:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
  while (ETH->MACMDIOAR & (1<<0));
 80006d0:	bf00      	nop
 80006d2:	4b07      	ldr	r3, [pc, #28]	@ (80006f0 <write_phy+0x70>)
 80006d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80006d8:	f003 0301 	and.w	r3, r3, #1
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d1f8      	bne.n	80006d2 <write_phy+0x52>
}
 80006e0:	bf00      	nop
 80006e2:	bf00      	nop
 80006e4:	370c      	adds	r7, #12
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	40028000 	.word	0x40028000

080006f4 <read_phy>:

unsigned short read_phy(unsigned char addr, unsigned char reg)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4603      	mov	r3, r0
 80006fc:	460a      	mov	r2, r1
 80006fe:	71fb      	strb	r3, [r7, #7]
 8000700:	4613      	mov	r3, r2
 8000702:	71bb      	strb	r3, [r7, #6]
	while (ETH->MACMDIOAR & (1<<0));
 8000704:	bf00      	nop
 8000706:	4b12      	ldr	r3, [pc, #72]	@ (8000750 <read_phy+0x5c>)
 8000708:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800070c:	f003 0301 	and.w	r3, r3, #1
 8000710:	2b00      	cmp	r3, #0
 8000712:	d1f8      	bne.n	8000706 <read_phy+0x12>
	ETH->MACMDIOAR = (addr<<21)|(reg<<16)|(7<<12)|(0b100<<8)|(0b11<<2)|(1<<0);
 8000714:	79fb      	ldrb	r3, [r7, #7]
 8000716:	055a      	lsls	r2, r3, #21
 8000718:	79bb      	ldrb	r3, [r7, #6]
 800071a:	041b      	lsls	r3, r3, #16
 800071c:	431a      	orrs	r2, r3
 800071e:	f247 430d 	movw	r3, #29709	@ 0x740d
 8000722:	4313      	orrs	r3, r2
 8000724:	4a0a      	ldr	r2, [pc, #40]	@ (8000750 <read_phy+0x5c>)
 8000726:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
	while (ETH->MACMDIOAR & (1<<0));
 800072a:	bf00      	nop
 800072c:	4b08      	ldr	r3, [pc, #32]	@ (8000750 <read_phy+0x5c>)
 800072e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	2b00      	cmp	r3, #0
 8000738:	d1f8      	bne.n	800072c <read_phy+0x38>
	return ETH->MACMDIODR & 0xffff;
 800073a:	4b05      	ldr	r3, [pc, #20]	@ (8000750 <read_phy+0x5c>)
 800073c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8000740:	b29b      	uxth	r3, r3
}
 8000742:	4618      	mov	r0, r3
 8000744:	370c      	adds	r7, #12
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	40028000 	.word	0x40028000

08000754 <init_mac>:


void init_mac(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
	init_mac_clk();
 800075a:	f7ff febf 	bl	80004dc <init_mac_clk>
	init_mac_pin();
 800075e:	f7ff fedf 	bl	8000520 <init_mac_pin>

	SYSCFG->PMCR &= ~(0b111<<21);
 8000762:	4b7c      	ldr	r3, [pc, #496]	@ (8000954 <init_mac+0x200>)
 8000764:	685b      	ldr	r3, [r3, #4]
 8000766:	4a7b      	ldr	r2, [pc, #492]	@ (8000954 <init_mac+0x200>)
 8000768:	f423 0360 	bic.w	r3, r3, #14680064	@ 0xe00000
 800076c:	6053      	str	r3, [r2, #4]
	SYSCFG->PMCR |= (0b100<<21);
 800076e:	4b79      	ldr	r3, [pc, #484]	@ (8000954 <init_mac+0x200>)
 8000770:	685b      	ldr	r3, [r3, #4]
 8000772:	4a78      	ldr	r2, [pc, #480]	@ (8000954 <init_mac+0x200>)
 8000774:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000778:	6053      	str	r3, [r2, #4]

	ETH->DMAMR |= (1<<0);
 800077a:	4b77      	ldr	r3, [pc, #476]	@ (8000958 <init_mac+0x204>)
 800077c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4a75      	ldr	r2, [pc, #468]	@ (8000958 <init_mac+0x204>)
 8000784:	f043 0301 	orr.w	r3, r3, #1
 8000788:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800078c:	6013      	str	r3, [r2, #0]
	while(!(ETH->DMAMR & (1<<0)));
 800078e:	bf00      	nop
 8000790:	4b71      	ldr	r3, [pc, #452]	@ (8000958 <init_mac+0x204>)
 8000792:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f003 0301 	and.w	r3, r3, #1
 800079c:	2b00      	cmp	r3, #0
 800079e:	d0f7      	beq.n	8000790 <init_mac+0x3c>

	ETH->MACMDIOAR &= ~(0b111<<8);
 80007a0:	4b6d      	ldr	r3, [pc, #436]	@ (8000958 <init_mac+0x204>)
 80007a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80007a6:	4a6c      	ldr	r2, [pc, #432]	@ (8000958 <init_mac+0x204>)
 80007a8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80007ac:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
	ETH->MACMDIOAR |= (0b100<<8);
 80007b0:	4b69      	ldr	r3, [pc, #420]	@ (8000958 <init_mac+0x204>)
 80007b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80007b6:	4a68      	ldr	r2, [pc, #416]	@ (8000958 <init_mac+0x204>)
 80007b8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80007bc:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

	ETH->MACECR = 1520;
 80007c0:	4b65      	ldr	r3, [pc, #404]	@ (8000958 <init_mac+0x204>)
 80007c2:	f44f 62be 	mov.w	r2, #1520	@ 0x5f0
 80007c6:	605a      	str	r2, [r3, #4]

	write_phy(0 , 0 , 0x8000);
 80007c8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80007cc:	2100      	movs	r1, #0
 80007ce:	2000      	movs	r0, #0
 80007d0:	f7ff ff56 	bl	8000680 <write_phy>
	delay(0xfffff);
 80007d4:	4861      	ldr	r0, [pc, #388]	@ (800095c <init_mac+0x208>)
 80007d6:	f000 f8cb 	bl	8000970 <delay>
	while(read_phy(0 , 0))
 80007da:	bf00      	nop
 80007dc:	2100      	movs	r1, #0
 80007de:	2000      	movs	r0, #0
 80007e0:	f7ff ff88 	bl	80006f4 <read_phy>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d1f8      	bne.n	80007dc <init_mac+0x88>
		;

	write_phy(0,0,0x1000);
 80007ea:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80007ee:	2100      	movs	r1, #0
 80007f0:	2000      	movs	r0, #0
 80007f2:	f7ff ff45 	bl	8000680 <write_phy>
	delay(0xfffff);
 80007f6:	4859      	ldr	r0, [pc, #356]	@ (800095c <init_mac+0x208>)
 80007f8:	f000 f8ba 	bl	8000970 <delay>

	unsigned short read_reg = read_phy(0 , 1);
 80007fc:	2101      	movs	r1, #1
 80007fe:	2000      	movs	r0, #0
 8000800:	f7ff ff78 	bl	80006f4 <read_phy>
 8000804:	4603      	mov	r3, r0
 8000806:	80fb      	strh	r3, [r7, #6]
	while(!(read_reg & (1<<5)))
 8000808:	e008      	b.n	800081c <init_mac+0xc8>
	{
		read_reg = read_phy(0 , 1);
 800080a:	2101      	movs	r1, #1
 800080c:	2000      	movs	r0, #0
 800080e:	f7ff ff71 	bl	80006f4 <read_phy>
 8000812:	4603      	mov	r3, r0
 8000814:	80fb      	strh	r3, [r7, #6]
		delay(0xfffff);
 8000816:	4851      	ldr	r0, [pc, #324]	@ (800095c <init_mac+0x208>)
 8000818:	f000 f8aa 	bl	8000970 <delay>
	while(!(read_reg & (1<<5)))
 800081c:	88fb      	ldrh	r3, [r7, #6]
 800081e:	f003 0320 	and.w	r3, r3, #32
 8000822:	2b00      	cmp	r3, #0
 8000824:	d0f1      	beq.n	800080a <init_mac+0xb6>
	}

	delay(0xfffff);
 8000826:	484d      	ldr	r0, [pc, #308]	@ (800095c <init_mac+0x208>)
 8000828:	f000 f8a2 	bl	8000970 <delay>



	read_reg = read_phy(0 , 0x11);
 800082c:	2111      	movs	r1, #17
 800082e:	2000      	movs	r0, #0
 8000830:	f7ff ff60 	bl	80006f4 <read_phy>
 8000834:	4603      	mov	r3, r0
 8000836:	80fb      	strh	r3, [r7, #6]
	while(!read_phy(0 , 0x11))
 8000838:	bf00      	nop
 800083a:	2111      	movs	r1, #17
 800083c:	2000      	movs	r0, #0
 800083e:	f7ff ff59 	bl	80006f4 <read_phy>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d0f8      	beq.n	800083a <init_mac+0xe6>
		;

	ETH->MACCR = 0x30006800;
 8000848:	4b43      	ldr	r3, [pc, #268]	@ (8000958 <init_mac+0x204>)
 800084a:	4a45      	ldr	r2, [pc, #276]	@ (8000960 <init_mac+0x20c>)
 800084c:	601a      	str	r2, [r3, #0]
	ETH->DMASBMR = 0x0;
 800084e:	4b42      	ldr	r3, [pc, #264]	@ (8000958 <init_mac+0x204>)
 8000850:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000854:	461a      	mov	r2, r3
 8000856:	2300      	movs	r3, #0
 8000858:	6053      	str	r3, [r2, #4]
	ETH->DMACCR = 0x00000;
 800085a:	4b3f      	ldr	r3, [pc, #252]	@ (8000958 <init_mac+0x204>)
 800085c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000860:	461a      	mov	r2, r3
 8000862:	2300      	movs	r3, #0
 8000864:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
	ETH->DMACTCR = 0x10000;
 8000868:	4b3b      	ldr	r3, [pc, #236]	@ (8000958 <init_mac+0x204>)
 800086a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800086e:	461a      	mov	r2, r3
 8000870:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000874:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
	ETH->DMACRCR = (1<<16)|(1520<<1);
 8000878:	4b37      	ldr	r3, [pc, #220]	@ (8000958 <init_mac+0x204>)
 800087a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800087e:	461a      	mov	r2, r3
 8000880:	4b38      	ldr	r3, [pc, #224]	@ (8000964 <init_mac+0x210>)
 8000882:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

	ETH->MTLRQOMR = 0x28;
 8000886:	4b34      	ldr	r3, [pc, #208]	@ (8000958 <init_mac+0x204>)
 8000888:	2228      	movs	r2, #40	@ 0x28
 800088a:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30

	ETH->MACA0HR = ((unsigned int)mac_hw_addr[5] << 8) | (unsigned int)mac_hw_addr[4];
 800088e:	4b36      	ldr	r3, [pc, #216]	@ (8000968 <init_mac+0x214>)
 8000890:	795b      	ldrb	r3, [r3, #5]
 8000892:	021b      	lsls	r3, r3, #8
 8000894:	4a34      	ldr	r2, [pc, #208]	@ (8000968 <init_mac+0x214>)
 8000896:	7912      	ldrb	r2, [r2, #4]
 8000898:	4611      	mov	r1, r2
 800089a:	4a2f      	ldr	r2, [pc, #188]	@ (8000958 <init_mac+0x204>)
 800089c:	430b      	orrs	r3, r1
 800089e:	f8c2 3300 	str.w	r3, [r2, #768]	@ 0x300
	ETH->MACA0LR = ((unsigned int)mac_hw_addr[3] << 24) | (unsigned int)mac_hw_addr[2] << 16 | ((unsigned int)mac_hw_addr[1] << 8) | (unsigned int)mac_hw_addr[0];
 80008a2:	4b31      	ldr	r3, [pc, #196]	@ (8000968 <init_mac+0x214>)
 80008a4:	78db      	ldrb	r3, [r3, #3]
 80008a6:	061a      	lsls	r2, r3, #24
 80008a8:	4b2f      	ldr	r3, [pc, #188]	@ (8000968 <init_mac+0x214>)
 80008aa:	789b      	ldrb	r3, [r3, #2]
 80008ac:	041b      	lsls	r3, r3, #16
 80008ae:	431a      	orrs	r2, r3
 80008b0:	4b2d      	ldr	r3, [pc, #180]	@ (8000968 <init_mac+0x214>)
 80008b2:	785b      	ldrb	r3, [r3, #1]
 80008b4:	021b      	lsls	r3, r3, #8
 80008b6:	4313      	orrs	r3, r2
 80008b8:	4a2b      	ldr	r2, [pc, #172]	@ (8000968 <init_mac+0x214>)
 80008ba:	7812      	ldrb	r2, [r2, #0]
 80008bc:	4611      	mov	r1, r2
 80008be:	4a26      	ldr	r2, [pc, #152]	@ (8000958 <init_mac+0x204>)
 80008c0:	430b      	orrs	r3, r1
 80008c2:	f8c2 3304 	str.w	r3, [r2, #772]	@ 0x304

//	ETH->MACPFR &= ~(0b11<<6);
//	ETH->MACPFR |= (0b10<<6)|(1<<0);
	ETH->MACPFR = 0x800000c0;
 80008c6:	4b24      	ldr	r3, [pc, #144]	@ (8000958 <init_mac+0x204>)
 80008c8:	4a28      	ldr	r2, [pc, #160]	@ (800096c <init_mac+0x218>)
 80008ca:	609a      	str	r2, [r3, #8]
	ETH->MACTFCR = 0;
 80008cc:	4b22      	ldr	r3, [pc, #136]	@ (8000958 <init_mac+0x204>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	671a      	str	r2, [r3, #112]	@ 0x70
	ETH->MACHWF1R &= ~(1<<18);
 80008d2:	4b21      	ldr	r3, [pc, #132]	@ (8000958 <init_mac+0x204>)
 80008d4:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80008d8:	4a1f      	ldr	r2, [pc, #124]	@ (8000958 <init_mac+0x204>)
 80008da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80008de:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120




	init_dma_desc();
 80008e2:	f7ff fd4d 	bl	8000380 <init_dma_desc>

	ETH->MACCR |= (1<<1)|(1<<0);
 80008e6:	4b1c      	ldr	r3, [pc, #112]	@ (8000958 <init_mac+0x204>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4a1b      	ldr	r2, [pc, #108]	@ (8000958 <init_mac+0x204>)
 80008ec:	f043 0303 	orr.w	r3, r3, #3
 80008f0:	6013      	str	r3, [r2, #0]

	ETH->MTLTQOMR = (unsigned int)0xa;
 80008f2:	4b19      	ldr	r3, [pc, #100]	@ (8000958 <init_mac+0x204>)
 80008f4:	220a      	movs	r2, #10
 80008f6:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00
	ETH->MTLTQOMR |= (1<<0);
 80008fa:	4b17      	ldr	r3, [pc, #92]	@ (8000958 <init_mac+0x204>)
 80008fc:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8000900:	4a15      	ldr	r2, [pc, #84]	@ (8000958 <init_mac+0x204>)
 8000902:	f043 0301 	orr.w	r3, r3, #1
 8000906:	f8c2 3d00 	str.w	r3, [r2, #3328]	@ 0xd00
	while(ETH->MTLTQOMR & (1<<0));
 800090a:	bf00      	nop
 800090c:	4b12      	ldr	r3, [pc, #72]	@ (8000958 <init_mac+0x204>)
 800090e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	2b00      	cmp	r3, #0
 8000918:	d1f8      	bne.n	800090c <init_mac+0x1b8>

	ETH->DMACTCR |= (1<<0);
 800091a:	4b0f      	ldr	r3, [pc, #60]	@ (8000958 <init_mac+0x204>)
 800091c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000920:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8000924:	4a0c      	ldr	r2, [pc, #48]	@ (8000958 <init_mac+0x204>)
 8000926:	f043 0301 	orr.w	r3, r3, #1
 800092a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800092e:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
	ETH->DMACRCR |= (1<<0);
 8000932:	4b09      	ldr	r3, [pc, #36]	@ (8000958 <init_mac+0x204>)
 8000934:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000938:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800093c:	4a06      	ldr	r2, [pc, #24]	@ (8000958 <init_mac+0x204>)
 800093e:	f043 0301 	orr.w	r3, r3, #1
 8000942:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8000946:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108


	//enable_mac();
}
 800094a:	bf00      	nop
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	58000400 	.word	0x58000400
 8000958:	40028000 	.word	0x40028000
 800095c:	000fffff 	.word	0x000fffff
 8000960:	30006800 	.word	0x30006800
 8000964:	00010be0 	.word	0x00010be0
 8000968:	24000000 	.word	0x24000000
 800096c:	800000c0 	.word	0x800000c0

08000970 <delay>:
#include "mac.h"
#include "port.h"


void delay(unsigned int times)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
	while(times--);
 8000978:	bf00      	nop
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	1e5a      	subs	r2, r3, #1
 800097e:	607a      	str	r2, [r7, #4]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d1fa      	bne.n	800097a <delay+0xa>
}
 8000984:	bf00      	nop
 8000986:	bf00      	nop
 8000988:	370c      	adds	r7, #12
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
	...

08000994 <main>:

unsigned char tmp = 'a';

int main(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
	init_rcc();
 8000998:	f000 f80e 	bl	80009b8 <init_rcc>
	init_usart();
 800099c:	f000 f974 	bl	8000c88 <init_usart>
	//init_mac();
	port_init_lwip();
 80009a0:	f000 fb8a 	bl	80010b8 <port_init_lwip>
//	}

	  while (1)
	  {
	    //tx_mutex_get(&mutex_eth, TX_WAIT_FOREVER);
	    ethernetif_input(&gnetif);
 80009a4:	4803      	ldr	r0, [pc, #12]	@ (80009b4 <main+0x20>)
 80009a6:	f000 fb49 	bl	800103c <ethernetif_input>
	    sys_check_timeouts();
 80009aa:	f006 fd61 	bl	8007470 <sys_check_timeouts>
	  {
 80009ae:	bf00      	nop
 80009b0:	e7f8      	b.n	80009a4 <main+0x10>
 80009b2:	bf00      	nop
 80009b4:	24003c90 	.word	0x24003c90

080009b8 <init_rcc>:
#include "stm32h7xx.h"


void init_rcc(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
	SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));
 80009be:	4b33      	ldr	r3, [pc, #204]	@ (8000a8c <init_rcc+0xd4>)
 80009c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009c4:	4a31      	ldr	r2, [pc, #196]	@ (8000a8c <init_rcc+0xd4>)
 80009c6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009ca:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	PWR->D3CR |= (3<<14);
 80009ce:	4b30      	ldr	r3, [pc, #192]	@ (8000a90 <init_rcc+0xd8>)
 80009d0:	699b      	ldr	r3, [r3, #24]
 80009d2:	4a2f      	ldr	r2, [pc, #188]	@ (8000a90 <init_rcc+0xd8>)
 80009d4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80009d8:	6193      	str	r3, [r2, #24]
	FLASH->KEYR1 = 0x45670123;
 80009da:	4b2e      	ldr	r3, [pc, #184]	@ (8000a94 <init_rcc+0xdc>)
 80009dc:	4a2e      	ldr	r2, [pc, #184]	@ (8000a98 <init_rcc+0xe0>)
 80009de:	605a      	str	r2, [r3, #4]
	FLASH->KEYR1 = 0xCDEF89AB;
 80009e0:	4b2c      	ldr	r3, [pc, #176]	@ (8000a94 <init_rcc+0xdc>)
 80009e2:	4a2e      	ldr	r2, [pc, #184]	@ (8000a9c <init_rcc+0xe4>)
 80009e4:	605a      	str	r2, [r3, #4]
	FLASH->ACR = 0x1f;
 80009e6:	4b2b      	ldr	r3, [pc, #172]	@ (8000a94 <init_rcc+0xdc>)
 80009e8:	221f      	movs	r2, #31
 80009ea:	601a      	str	r2, [r3, #0]


	RCC->PLLCFGR = 0x1FF0888;
 80009ec:	4b2c      	ldr	r3, [pc, #176]	@ (8000aa0 <init_rcc+0xe8>)
 80009ee:	4a2d      	ldr	r2, [pc, #180]	@ (8000aa4 <init_rcc+0xec>)
 80009f0:	62da      	str	r2, [r3, #44]	@ 0x2c
	RCC->PLLCKSELR = 0x505052;
 80009f2:	4b2b      	ldr	r3, [pc, #172]	@ (8000aa0 <init_rcc+0xe8>)
 80009f4:	4a2c      	ldr	r2, [pc, #176]	@ (8000aa8 <init_rcc+0xf0>)
 80009f6:	629a      	str	r2, [r3, #40]	@ 0x28
	RCC->PLL1DIVR = (1<<24)|(3<<16)|(1<<9)|(159);
 80009f8:	4b29      	ldr	r3, [pc, #164]	@ (8000aa0 <init_rcc+0xe8>)
 80009fa:	4a2c      	ldr	r2, [pc, #176]	@ (8000aac <init_rcc+0xf4>)
 80009fc:	631a      	str	r2, [r3, #48]	@ 0x30
	RCC->PLL2DIVR = (1<<24)|(3<<16)|(1<<9)|(159);
 80009fe:	4b28      	ldr	r3, [pc, #160]	@ (8000aa0 <init_rcc+0xe8>)
 8000a00:	4a2a      	ldr	r2, [pc, #168]	@ (8000aac <init_rcc+0xf4>)
 8000a02:	639a      	str	r2, [r3, #56]	@ 0x38
	RCC->PLL3DIVR = (1<<24)|(3<<16)|(1<<9)|(159);
 8000a04:	4b26      	ldr	r3, [pc, #152]	@ (8000aa0 <init_rcc+0xe8>)
 8000a06:	4a29      	ldr	r2, [pc, #164]	@ (8000aac <init_rcc+0xf4>)
 8000a08:	641a      	str	r2, [r3, #64]	@ 0x40
	RCC->D1CFGR = (0b100<<4)|(0b1000);
 8000a0a:	4b25      	ldr	r3, [pc, #148]	@ (8000aa0 <init_rcc+0xe8>)
 8000a0c:	2248      	movs	r2, #72	@ 0x48
 8000a0e:	619a      	str	r2, [r3, #24]
	RCC->D2CFGR = (0b100<<8)|(0b100<<4);
 8000a10:	4b23      	ldr	r3, [pc, #140]	@ (8000aa0 <init_rcc+0xe8>)
 8000a12:	f44f 6288 	mov.w	r2, #1088	@ 0x440
 8000a16:	61da      	str	r2, [r3, #28]
	RCC->D3CFGR = (0b100<<4);
 8000a18:	4b21      	ldr	r3, [pc, #132]	@ (8000aa0 <init_rcc+0xe8>)
 8000a1a:	2240      	movs	r2, #64	@ 0x40
 8000a1c:	621a      	str	r2, [r3, #32]

	RCC->CR |= (1<<16);
 8000a1e:	4b20      	ldr	r3, [pc, #128]	@ (8000aa0 <init_rcc+0xe8>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4a1f      	ldr	r2, [pc, #124]	@ (8000aa0 <init_rcc+0xe8>)
 8000a24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000a28:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & (1<<17)));
 8000a2a:	bf00      	nop
 8000a2c:	4b1c      	ldr	r3, [pc, #112]	@ (8000aa0 <init_rcc+0xe8>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d0f9      	beq.n	8000a2c <init_rcc+0x74>

	RCC->CR |= (1<<24);
 8000a38:	4b19      	ldr	r3, [pc, #100]	@ (8000aa0 <init_rcc+0xe8>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a18      	ldr	r2, [pc, #96]	@ (8000aa0 <init_rcc+0xe8>)
 8000a3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000a42:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & (1<<25)));
 8000a44:	bf00      	nop
 8000a46:	4b16      	ldr	r3, [pc, #88]	@ (8000aa0 <init_rcc+0xe8>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d0f9      	beq.n	8000a46 <init_rcc+0x8e>

	unsigned int tmp = RCC->CFGR;
 8000a52:	4b13      	ldr	r3, [pc, #76]	@ (8000aa0 <init_rcc+0xe8>)
 8000a54:	691b      	ldr	r3, [r3, #16]
 8000a56:	607b      	str	r3, [r7, #4]
	tmp &= ~(0b111);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	f023 0307 	bic.w	r3, r3, #7
 8000a5e:	607b      	str	r3, [r7, #4]
	tmp |= 3;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	f043 0303 	orr.w	r3, r3, #3
 8000a66:	607b      	str	r3, [r7, #4]
	RCC->CFGR = tmp;
 8000a68:	4a0d      	ldr	r2, [pc, #52]	@ (8000aa0 <init_rcc+0xe8>)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	6113      	str	r3, [r2, #16]

	while((0b11<<3) != (RCC->CFGR & (0b111<<3)));
 8000a6e:	bf00      	nop
 8000a70:	4b0b      	ldr	r3, [pc, #44]	@ (8000aa0 <init_rcc+0xe8>)
 8000a72:	691b      	ldr	r3, [r3, #16]
 8000a74:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8000a78:	2b18      	cmp	r3, #24
 8000a7a:	d1f9      	bne.n	8000a70 <init_rcc+0xb8>

}
 8000a7c:	bf00      	nop
 8000a7e:	bf00      	nop
 8000a80:	370c      	adds	r7, #12
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	e000ed00 	.word	0xe000ed00
 8000a90:	58024800 	.word	0x58024800
 8000a94:	52002000 	.word	0x52002000
 8000a98:	45670123 	.word	0x45670123
 8000a9c:	cdef89ab 	.word	0xcdef89ab
 8000aa0:	58024400 	.word	0x58024400
 8000aa4:	01ff0888 	.word	0x01ff0888
 8000aa8:	00505052 	.word	0x00505052
 8000aac:	0103029f 	.word	0x0103029f

08000ab0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b086      	sub	sp, #24
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	60f8      	str	r0, [r7, #12]
 8000ab8:	60b9      	str	r1, [r7, #8]
 8000aba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000abc:	2300      	movs	r3, #0
 8000abe:	617b      	str	r3, [r7, #20]
 8000ac0:	e00a      	b.n	8000ad8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ac2:	f3af 8000 	nop.w
 8000ac6:	4601      	mov	r1, r0
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	1c5a      	adds	r2, r3, #1
 8000acc:	60ba      	str	r2, [r7, #8]
 8000ace:	b2ca      	uxtb	r2, r1
 8000ad0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	617b      	str	r3, [r7, #20]
 8000ad8:	697a      	ldr	r2, [r7, #20]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	429a      	cmp	r2, r3
 8000ade:	dbf0      	blt.n	8000ac2 <_read+0x12>
  }

  return len;
 8000ae0:	687b      	ldr	r3, [r7, #4]
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3718      	adds	r7, #24
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b086      	sub	sp, #24
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	60f8      	str	r0, [r7, #12]
 8000af2:	60b9      	str	r1, [r7, #8]
 8000af4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000af6:	2300      	movs	r3, #0
 8000af8:	617b      	str	r3, [r7, #20]
 8000afa:	e009      	b.n	8000b10 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	1c5a      	adds	r2, r3, #1
 8000b00:	60ba      	str	r2, [r7, #8]
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	4618      	mov	r0, r3
 8000b06:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	617b      	str	r3, [r7, #20]
 8000b10:	697a      	ldr	r2, [r7, #20]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	dbf1      	blt.n	8000afc <_write+0x12>
  }
  return len;
 8000b18:	687b      	ldr	r3, [r7, #4]
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3718      	adds	r7, #24
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <_close>:

int _close(int file)
{
 8000b22:	b480      	push	{r7}
 8000b24:	b083      	sub	sp, #12
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b2a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	370c      	adds	r7, #12
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr

08000b3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	b083      	sub	sp, #12
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	6078      	str	r0, [r7, #4]
 8000b42:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b4a:	605a      	str	r2, [r3, #4]
  return 0;
 8000b4c:	2300      	movs	r3, #0
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr

08000b5a <_isatty>:

int _isatty(int file)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	b083      	sub	sp, #12
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b62:	2301      	movs	r3, #1
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b085      	sub	sp, #20
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	60f8      	str	r0, [r7, #12]
 8000b78:	60b9      	str	r1, [r7, #8]
 8000b7a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b7c:	2300      	movs	r3, #0
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3714      	adds	r7, #20
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
	...

08000b8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b086      	sub	sp, #24
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b94:	4a14      	ldr	r2, [pc, #80]	@ (8000be8 <_sbrk+0x5c>)
 8000b96:	4b15      	ldr	r3, [pc, #84]	@ (8000bec <_sbrk+0x60>)
 8000b98:	1ad3      	subs	r3, r2, r3
 8000b9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ba0:	4b13      	ldr	r3, [pc, #76]	@ (8000bf0 <_sbrk+0x64>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d102      	bne.n	8000bae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ba8:	4b11      	ldr	r3, [pc, #68]	@ (8000bf0 <_sbrk+0x64>)
 8000baa:	4a12      	ldr	r2, [pc, #72]	@ (8000bf4 <_sbrk+0x68>)
 8000bac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bae:	4b10      	ldr	r3, [pc, #64]	@ (8000bf0 <_sbrk+0x64>)
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4413      	add	r3, r2
 8000bb6:	693a      	ldr	r2, [r7, #16]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	d207      	bcs.n	8000bcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bbc:	f009 fa5e 	bl	800a07c <__errno>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	220c      	movs	r2, #12
 8000bc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bc6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000bca:	e009      	b.n	8000be0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bcc:	4b08      	ldr	r3, [pc, #32]	@ (8000bf0 <_sbrk+0x64>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bd2:	4b07      	ldr	r3, [pc, #28]	@ (8000bf0 <_sbrk+0x64>)
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4413      	add	r3, r2
 8000bda:	4a05      	ldr	r2, [pc, #20]	@ (8000bf0 <_sbrk+0x64>)
 8000bdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bde:	68fb      	ldr	r3, [r7, #12]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3718      	adds	r7, #24
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	24080000 	.word	0x24080000
 8000bec:	00000400 	.word	0x00000400
 8000bf0:	24003c8c 	.word	0x24003c8c
 8000bf4:	2400a5a8 	.word	0x2400a5a8

08000bf8 <init_usart1_clk>:
#include "stm32h7xx.h"



void init_usart1_clk(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
	RCC->AHB4ENR |= (1<<0);
 8000bfc:	4b0a      	ldr	r3, [pc, #40]	@ (8000c28 <init_usart1_clk+0x30>)
 8000bfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c02:	4a09      	ldr	r2, [pc, #36]	@ (8000c28 <init_usart1_clk+0x30>)
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
	RCC->APB2ENR |= (1<<4);
 8000c0c:	4b06      	ldr	r3, [pc, #24]	@ (8000c28 <init_usart1_clk+0x30>)
 8000c0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000c12:	4a05      	ldr	r2, [pc, #20]	@ (8000c28 <init_usart1_clk+0x30>)
 8000c14:	f043 0310 	orr.w	r3, r3, #16
 8000c18:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	58024400 	.word	0x58024400

08000c2c <init_usart1_pin>:

void init_usart1_pin(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
	GPIOA->MODER &= ~(0xf<<18);
 8000c30:	4b14      	ldr	r3, [pc, #80]	@ (8000c84 <init_usart1_pin+0x58>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a13      	ldr	r2, [pc, #76]	@ (8000c84 <init_usart1_pin+0x58>)
 8000c36:	f423 1370 	bic.w	r3, r3, #3932160	@ 0x3c0000
 8000c3a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (2<<20)|(2<<18);
 8000c3c:	4b11      	ldr	r3, [pc, #68]	@ (8000c84 <init_usart1_pin+0x58>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a10      	ldr	r2, [pc, #64]	@ (8000c84 <init_usart1_pin+0x58>)
 8000c42:	f443 1320 	orr.w	r3, r3, #2621440	@ 0x280000
 8000c46:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[1] &= ~(0xf<<4);
 8000c48:	4b0e      	ldr	r3, [pc, #56]	@ (8000c84 <init_usart1_pin+0x58>)
 8000c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000c84 <init_usart1_pin+0x58>)
 8000c4e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000c52:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA->AFR[1] |= (7<<4);
 8000c54:	4b0b      	ldr	r3, [pc, #44]	@ (8000c84 <init_usart1_pin+0x58>)
 8000c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c58:	4a0a      	ldr	r2, [pc, #40]	@ (8000c84 <init_usart1_pin+0x58>)
 8000c5a:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8000c5e:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA->AFR[1] &= ~(0xf<<8);
 8000c60:	4b08      	ldr	r3, [pc, #32]	@ (8000c84 <init_usart1_pin+0x58>)
 8000c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c64:	4a07      	ldr	r2, [pc, #28]	@ (8000c84 <init_usart1_pin+0x58>)
 8000c66:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000c6a:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA->AFR[1] |= (7<<8);
 8000c6c:	4b05      	ldr	r3, [pc, #20]	@ (8000c84 <init_usart1_pin+0x58>)
 8000c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c70:	4a04      	ldr	r2, [pc, #16]	@ (8000c84 <init_usart1_pin+0x58>)
 8000c72:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000c76:	6253      	str	r3, [r2, #36]	@ 0x24
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	58020000 	.word	0x58020000

08000c88 <init_usart>:

void init_usart(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
	init_usart1_clk();
 8000c8c:	f7ff ffb4 	bl	8000bf8 <init_usart1_clk>
	init_usart1_pin();
 8000c90:	f7ff ffcc 	bl	8000c2c <init_usart1_pin>
	USART1->BRR = 0x364;
 8000c94:	4b07      	ldr	r3, [pc, #28]	@ (8000cb4 <init_usart+0x2c>)
 8000c96:	f44f 7259 	mov.w	r2, #868	@ 0x364
 8000c9a:	60da      	str	r2, [r3, #12]
	USART1->PRESC = 0;
 8000c9c:	4b05      	ldr	r3, [pc, #20]	@ (8000cb4 <init_usart+0x2c>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	62da      	str	r2, [r3, #44]	@ 0x2c
	USART1->CR1 |= (1<<3)|(1<<2)|(1<<0);
 8000ca2:	4b04      	ldr	r3, [pc, #16]	@ (8000cb4 <init_usart+0x2c>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a03      	ldr	r2, [pc, #12]	@ (8000cb4 <init_usart+0x2c>)
 8000ca8:	f043 030d 	orr.w	r3, r3, #13
 8000cac:	6013      	str	r3, [r2, #0]

}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40011000 	.word	0x40011000

08000cb8 <Reset_Handler>:
	 #LDR.W     R0, =0xE000ED88    ;
	 #LDR     R1,[R0]
	 #ORR     R1,R1,#(0xF << 20)
	 #STR     R1,[R0]

  ldr   r0, =_estack
 8000cb8:	480d      	ldr	r0, [pc, #52]	@ (8000cf0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cba:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cbc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cc0:	480c      	ldr	r0, [pc, #48]	@ (8000cf4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cc2:	490d      	ldr	r1, [pc, #52]	@ (8000cf8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cc4:	4a0d      	ldr	r2, [pc, #52]	@ (8000cfc <LoopForever+0xe>)
  movs r3, #0
 8000cc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc8:	e002      	b.n	8000cd0 <LoopCopyDataInit>

08000cca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ccc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cce:	3304      	adds	r3, #4

08000cd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd4:	d3f9      	bcc.n	8000cca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cd6:	4a0a      	ldr	r2, [pc, #40]	@ (8000d00 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cd8:	4c0a      	ldr	r4, [pc, #40]	@ (8000d04 <LoopForever+0x16>)
  movs r3, #0
 8000cda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cdc:	e001      	b.n	8000ce2 <LoopFillZerobss>

08000cde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce0:	3204      	adds	r2, #4

08000ce2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ce2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce4:	d3fb      	bcc.n	8000cde <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ce6:	f009 f9cf 	bl	800a088 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cea:	f7ff fe53 	bl	8000994 <main>

08000cee <LoopForever>:

LoopForever:
  b LoopForever
 8000cee:	e7fe      	b.n	8000cee <LoopForever>
  ldr   r0, =_estack
 8000cf0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000cf4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000cf8:	24000068 	.word	0x24000068
  ldr r2, =_sidata
 8000cfc:	0800c9bc 	.word	0x0800c9bc
  ldr r2, =_sbss
 8000d00:	24000068 	.word	0x24000068
  ldr r4, =_ebss
 8000d04:	2400a5a8 	.word	0x2400a5a8

08000d08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d08:	e7fe      	b.n	8000d08 <ADC1_2_IRQHandler>
	...

08000d0c <low_level_init>:




static void low_level_init(struct netif *netif)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  init_mac();
 8000d14:	f7ff fd1e 	bl	8000754 <init_mac>
  netif->flags |= NETIF_FLAG_LINK_UP;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8000d1e:	f043 0304 	orr.w	r3, r3, #4
 8000d22:	b2da      	uxtb	r2, r3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2206      	movs	r2, #6
 8000d2e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  mac_hw_addr[0];
 8000d32:	4b1a      	ldr	r3, [pc, #104]	@ (8000d9c <low_level_init+0x90>)
 8000d34:	781a      	ldrb	r2, [r3, #0]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  mac_hw_addr[1];
 8000d3c:	4b17      	ldr	r3, [pc, #92]	@ (8000d9c <low_level_init+0x90>)
 8000d3e:	785a      	ldrb	r2, [r3, #1]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  mac_hw_addr[2];
 8000d46:	4b15      	ldr	r3, [pc, #84]	@ (8000d9c <low_level_init+0x90>)
 8000d48:	789a      	ldrb	r2, [r3, #2]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  mac_hw_addr[3];
 8000d50:	4b12      	ldr	r3, [pc, #72]	@ (8000d9c <low_level_init+0x90>)
 8000d52:	78da      	ldrb	r2, [r3, #3]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  mac_hw_addr[4];
 8000d5a:	4b10      	ldr	r3, [pc, #64]	@ (8000d9c <low_level_init+0x90>)
 8000d5c:	791a      	ldrb	r2, [r3, #4]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  mac_hw_addr[5];
 8000d64:	4b0d      	ldr	r3, [pc, #52]	@ (8000d9c <low_level_init+0x90>)
 8000d66:	795a      	ldrb	r2, [r3, #5]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = NETIF_MTU;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000d74:	849a      	strh	r2, [r3, #36]	@ 0x24

  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8000d7c:	f043 030a 	orr.w	r3, r3, #10
 8000d80:	b2da      	uxtb	r2, r3
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

#endif /* LWIP_ARP || LWIP_ETHERNET */

    netif_set_up(netif);
 8000d88:	6878      	ldr	r0, [r7, #4]
 8000d8a:	f001 f945 	bl	8002018 <netif_set_up>
        netif_set_link_up(netif);
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f001 f9bc 	bl	800210c <netif_set_link_up>
  //init_dma_desc();
  //enable_mac();

}
 8000d94:	bf00      	nop
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	24000000 	.word	0x24000000

08000da0 <low_level_output>:




static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b086      	sub	sp, #24
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	6039      	str	r1, [r7, #0]
  err_t errval = ERR_OK;
 8000daa:	2300      	movs	r3, #0
 8000dac:	75fb      	strb	r3, [r7, #23]
  struct pbuf *q;
  unsigned int total_len = 0;
 8000dae:	2300      	movs	r3, #0
 8000db0:	60fb      	str	r3, [r7, #12]
  unsigned char* tx_buf = 0;
 8000db2:	2300      	movs	r3, #0
 8000db4:	60bb      	str	r3, [r7, #8]
  /* copy frame from pbufs to driver buffers */

  if(0 == tx_desc[curr_tx_desc].tdes3.bit.own)
 8000db6:	4b44      	ldr	r3, [pc, #272]	@ (8000ec8 <low_level_output+0x128>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a44      	ldr	r2, [pc, #272]	@ (8000ecc <low_level_output+0x12c>)
 8000dbc:	011b      	lsls	r3, r3, #4
 8000dbe:	4413      	add	r3, r2
 8000dc0:	3308      	adds	r3, #8
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f3c3 73c0 	ubfx	r3, r3, #31, #1
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d163      	bne.n	8000e96 <low_level_output+0xf6>
  {
    tx_buf = (unsigned char*)(tx_desc[curr_tx_desc].tdes0.all);
 8000dce:	4b3e      	ldr	r3, [pc, #248]	@ (8000ec8 <low_level_output+0x128>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a3e      	ldr	r2, [pc, #248]	@ (8000ecc <low_level_output+0x12c>)
 8000dd4:	011b      	lsls	r3, r3, #4
 8000dd6:	4413      	add	r3, r2
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	60bb      	str	r3, [r7, #8]

    for(q = p; q != NULL; q = q->next)
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	613b      	str	r3, [r7, #16]
 8000de0:	e01b      	b.n	8000e1a <low_level_output+0x7a>
    {
      if(total_len + q->len <= TX_DMA_BUF_LEN)
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	895b      	ldrh	r3, [r3, #10]
 8000de6:	461a      	mov	r2, r3
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	4413      	add	r3, r2
 8000dec:	f5b3 6fbe 	cmp.w	r3, #1520	@ 0x5f0
 8000df0:	d80e      	bhi.n	8000e10 <low_level_output+0x70>
      {
        memcpy(tx_buf , q->payload , q->len);
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	6859      	ldr	r1, [r3, #4]
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	895b      	ldrh	r3, [r3, #10]
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	68b8      	ldr	r0, [r7, #8]
 8000dfe:	f009 f96a 	bl	800a0d6 <memcpy>
        total_len += q->len;
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	895b      	ldrh	r3, [r3, #10]
 8000e06:	461a      	mov	r2, r3
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	e001      	b.n	8000e14 <low_level_output+0x74>
      }
      else
      {
        errval = ERR_MEM;
 8000e10:	23ff      	movs	r3, #255	@ 0xff
 8000e12:	75fb      	strb	r3, [r7, #23]
    for(q = p; q != NULL; q = q->next)
 8000e14:	693b      	ldr	r3, [r7, #16]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	613b      	str	r3, [r7, #16]
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d1e0      	bne.n	8000de2 <low_level_output+0x42>
        //return errval;
      }
    }

    tx_desc[curr_tx_desc].tdes2.bit.b1l = total_len;
 8000e20:	4b29      	ldr	r3, [pc, #164]	@ (8000ec8 <low_level_output+0x128>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	68fa      	ldr	r2, [r7, #12]
 8000e26:	f3c2 020d 	ubfx	r2, r2, #0, #14
 8000e2a:	b291      	uxth	r1, r2
 8000e2c:	4a27      	ldr	r2, [pc, #156]	@ (8000ecc <low_level_output+0x12c>)
 8000e2e:	011b      	lsls	r3, r3, #4
 8000e30:	4413      	add	r3, r2
 8000e32:	f103 0208 	add.w	r2, r3, #8
 8000e36:	6813      	ldr	r3, [r2, #0]
 8000e38:	f361 030d 	bfi	r3, r1, #0, #14
 8000e3c:	6013      	str	r3, [r2, #0]
    tx_desc[curr_tx_desc].tdes3.bit.fl = 0;
 8000e3e:	4b22      	ldr	r3, [pc, #136]	@ (8000ec8 <low_level_output+0x128>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a22      	ldr	r2, [pc, #136]	@ (8000ecc <low_level_output+0x12c>)
 8000e44:	011b      	lsls	r3, r3, #4
 8000e46:	4413      	add	r3, r2
 8000e48:	f103 0208 	add.w	r2, r3, #8
 8000e4c:	6853      	ldr	r3, [r2, #4]
 8000e4e:	f36f 030e 	bfc	r3, #0, #15
 8000e52:	6053      	str	r3, [r2, #4]
    tx_desc[curr_tx_desc].tdes3.bit.fd = 1;
 8000e54:	4b1c      	ldr	r3, [pc, #112]	@ (8000ec8 <low_level_output+0x128>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a1c      	ldr	r2, [pc, #112]	@ (8000ecc <low_level_output+0x12c>)
 8000e5a:	011b      	lsls	r3, r3, #4
 8000e5c:	4413      	add	r3, r2
 8000e5e:	f103 0208 	add.w	r2, r3, #8
 8000e62:	6853      	ldr	r3, [r2, #4]
 8000e64:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000e68:	6053      	str	r3, [r2, #4]
    tx_desc[curr_tx_desc].tdes3.bit.ld = 1;
 8000e6a:	4b17      	ldr	r3, [pc, #92]	@ (8000ec8 <low_level_output+0x128>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a17      	ldr	r2, [pc, #92]	@ (8000ecc <low_level_output+0x12c>)
 8000e70:	011b      	lsls	r3, r3, #4
 8000e72:	4413      	add	r3, r2
 8000e74:	f103 0208 	add.w	r2, r3, #8
 8000e78:	6853      	ldr	r3, [r2, #4]
 8000e7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e7e:	6053      	str	r3, [r2, #4]
    tx_desc[curr_tx_desc].tdes3.bit.own = 1;
 8000e80:	4b11      	ldr	r3, [pc, #68]	@ (8000ec8 <low_level_output+0x128>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a11      	ldr	r2, [pc, #68]	@ (8000ecc <low_level_output+0x12c>)
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	4413      	add	r3, r2
 8000e8a:	f103 0208 	add.w	r2, r3, #8
 8000e8e:	6853      	ldr	r3, [r2, #4]
 8000e90:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000e94:	6053      	str	r3, [r2, #4]

  }

  ETH->DMACTDTPR = (unsigned int)&tx_desc[ETH_TX_DESC_NUM-1];
 8000e96:	4a0e      	ldr	r2, [pc, #56]	@ (8000ed0 <low_level_output+0x130>)
 8000e98:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed4 <low_level_output+0x134>)
 8000e9a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8000e9e:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120

  curr_tx_desc++;
 8000ea2:	4b09      	ldr	r3, [pc, #36]	@ (8000ec8 <low_level_output+0x128>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	4a07      	ldr	r2, [pc, #28]	@ (8000ec8 <low_level_output+0x128>)
 8000eaa:	6013      	str	r3, [r2, #0]
  if(curr_tx_desc >= ETH_TX_DESC_NUM)
 8000eac:	4b06      	ldr	r3, [pc, #24]	@ (8000ec8 <low_level_output+0x128>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2b04      	cmp	r3, #4
 8000eb2:	d902      	bls.n	8000eba <low_level_output+0x11a>
  {
    curr_tx_desc = 0;
 8000eb4:	4b04      	ldr	r3, [pc, #16]	@ (8000ec8 <low_level_output+0x128>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
  }

  return errval;
 8000eba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3718      	adds	r7, #24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	24003be4 	.word	0x24003be4
 8000ecc:	24003bec 	.word	0x24003bec
 8000ed0:	40028000 	.word	0x40028000
 8000ed4:	24003c2c 	.word	0x24003c2c

08000ed8 <low_level_input>:



static struct pbuf * low_level_input(struct netif *netif)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  struct pbuf *p = 0;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	60fb      	str	r3, [r7, #12]
  unsigned int dma_rx_len = 0;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	60bb      	str	r3, [r7, #8]
  if(0 == rx_desc[curr_rx_desc].rdes3.read_bit.own)
 8000ee8:	4b4f      	ldr	r3, [pc, #316]	@ (8001028 <low_level_input+0x150>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a4f      	ldr	r2, [pc, #316]	@ (800102c <low_level_input+0x154>)
 8000eee:	011b      	lsls	r3, r3, #4
 8000ef0:	4413      	add	r3, r2
 8000ef2:	3308      	adds	r3, #8
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f3c3 73c0 	ubfx	r3, r3, #31, #1
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	f040 8088 	bne.w	8001012 <low_level_input+0x13a>
  {
    if((1 == rx_desc[curr_rx_desc].rdes3.write_back_bit.ld))
 8000f02:	4b49      	ldr	r3, [pc, #292]	@ (8001028 <low_level_input+0x150>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a49      	ldr	r2, [pc, #292]	@ (800102c <low_level_input+0x154>)
 8000f08:	011b      	lsls	r3, r3, #4
 8000f0a:	4413      	add	r3, r2
 8000f0c:	3308      	adds	r3, #8
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f3c3 7300 	ubfx	r3, r3, #28, #1
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d12d      	bne.n	8000f76 <low_level_input+0x9e>
    {
      dma_rx_len = rx_desc[curr_rx_desc].rdes3.write_back_bit.pl;
 8000f1a:	4b43      	ldr	r3, [pc, #268]	@ (8001028 <low_level_input+0x150>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a43      	ldr	r2, [pc, #268]	@ (800102c <low_level_input+0x154>)
 8000f20:	011b      	lsls	r3, r3, #4
 8000f22:	4413      	add	r3, r2
 8000f24:	3308      	adds	r3, #8
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000f2c:	b29b      	uxth	r3, r3
 8000f2e:	60bb      	str	r3, [r7, #8]
      p = pbuf_alloc(PBUF_RAW, dma_rx_len, PBUF_POOL);
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	b29b      	uxth	r3, r3
 8000f34:	f44f 72c1 	mov.w	r2, #386	@ 0x182
 8000f38:	4619      	mov	r1, r3
 8000f3a:	2000      	movs	r0, #0
 8000f3c:	f001 f96a 	bl	8002214 <pbuf_alloc>
 8000f40:	60f8      	str	r0, [r7, #12]
      if(p->len >= dma_rx_len)
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	895b      	ldrh	r3, [r3, #10]
 8000f46:	461a      	mov	r2, r3
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d80e      	bhi.n	8000f6c <low_level_input+0x94>
      {
        memcpy(p->payload , (void*)(&dma_rx_buf[curr_rx_desc]) , dma_rx_len);
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	6858      	ldr	r0, [r3, #4]
 8000f52:	4b35      	ldr	r3, [pc, #212]	@ (8001028 <low_level_input+0x150>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f44f 62be 	mov.w	r2, #1520	@ 0x5f0
 8000f5a:	fb02 f303 	mul.w	r3, r2, r3
 8000f5e:	4a34      	ldr	r2, [pc, #208]	@ (8001030 <low_level_input+0x158>)
 8000f60:	4413      	add	r3, r2
 8000f62:	68ba      	ldr	r2, [r7, #8]
 8000f64:	4619      	mov	r1, r3
 8000f66:	f009 f8b6 	bl	800a0d6 <memcpy>
 8000f6a:	e004      	b.n	8000f76 <low_level_input+0x9e>
      }
      else
      {
        pbuf_free(p);
 8000f6c:	68f8      	ldr	r0, [r7, #12]
 8000f6e:	f001 fbf7 	bl	8002760 <pbuf_free>
        p = NULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	60fb      	str	r3, [r7, #12]
      }

    }

    memset(&rx_desc[curr_rx_desc] , 0 , sizeof(rx_desc[curr_rx_desc]));
 8000f76:	4b2c      	ldr	r3, [pc, #176]	@ (8001028 <low_level_input+0x150>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	011b      	lsls	r3, r3, #4
 8000f7c:	4a2b      	ldr	r2, [pc, #172]	@ (800102c <low_level_input+0x154>)
 8000f7e:	4413      	add	r3, r2
 8000f80:	2210      	movs	r2, #16
 8000f82:	2100      	movs	r1, #0
 8000f84:	4618      	mov	r0, r3
 8000f86:	f009 f82a 	bl	8009fde <memset>
	rx_desc[curr_rx_desc].rdes0.read_bit.buf1ap = (unsigned int)(&dma_rx_buf[curr_rx_desc]);
 8000f8a:	4b27      	ldr	r3, [pc, #156]	@ (8001028 <low_level_input+0x150>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f44f 62be 	mov.w	r2, #1520	@ 0x5f0
 8000f92:	fb02 f303 	mul.w	r3, r2, r3
 8000f96:	4a26      	ldr	r2, [pc, #152]	@ (8001030 <low_level_input+0x158>)
 8000f98:	441a      	add	r2, r3
 8000f9a:	4b23      	ldr	r3, [pc, #140]	@ (8001028 <low_level_input+0x150>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4611      	mov	r1, r2
 8000fa0:	4a22      	ldr	r2, [pc, #136]	@ (800102c <low_level_input+0x154>)
 8000fa2:	011b      	lsls	r3, r3, #4
 8000fa4:	4413      	add	r3, r2
 8000fa6:	6019      	str	r1, [r3, #0]
	rx_desc[curr_rx_desc].rdes2.read_bit.buf2ap = 0;
 8000fa8:	4b1f      	ldr	r3, [pc, #124]	@ (8001028 <low_level_input+0x150>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a1f      	ldr	r2, [pc, #124]	@ (800102c <low_level_input+0x154>)
 8000fae:	011b      	lsls	r3, r3, #4
 8000fb0:	4413      	add	r3, r2
 8000fb2:	3308      	adds	r3, #8
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
	rx_desc[curr_rx_desc].rdes3.read_bit.buf1v = 1;
 8000fb8:	4b1b      	ldr	r3, [pc, #108]	@ (8001028 <low_level_input+0x150>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a1b      	ldr	r2, [pc, #108]	@ (800102c <low_level_input+0x154>)
 8000fbe:	011b      	lsls	r3, r3, #4
 8000fc0:	4413      	add	r3, r2
 8000fc2:	f103 0208 	add.w	r2, r3, #8
 8000fc6:	6853      	ldr	r3, [r2, #4]
 8000fc8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000fcc:	6053      	str	r3, [r2, #4]
	rx_desc[curr_rx_desc].rdes3.read_bit.buf2v = 0;
 8000fce:	4b16      	ldr	r3, [pc, #88]	@ (8001028 <low_level_input+0x150>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a16      	ldr	r2, [pc, #88]	@ (800102c <low_level_input+0x154>)
 8000fd4:	011b      	lsls	r3, r3, #4
 8000fd6:	4413      	add	r3, r2
 8000fd8:	f103 0208 	add.w	r2, r3, #8
 8000fdc:	6853      	ldr	r3, [r2, #4]
 8000fde:	f36f 6359 	bfc	r3, #25, #1
 8000fe2:	6053      	str	r3, [r2, #4]
	rx_desc[curr_rx_desc].rdes3.read_bit.own = 1;
 8000fe4:	4b10      	ldr	r3, [pc, #64]	@ (8001028 <low_level_input+0x150>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a10      	ldr	r2, [pc, #64]	@ (800102c <low_level_input+0x154>)
 8000fea:	011b      	lsls	r3, r3, #4
 8000fec:	4413      	add	r3, r2
 8000fee:	f103 0208 	add.w	r2, r3, #8
 8000ff2:	6853      	ldr	r3, [r2, #4]
 8000ff4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ff8:	6053      	str	r3, [r2, #4]

    curr_rx_desc++;
 8000ffa:	4b0b      	ldr	r3, [pc, #44]	@ (8001028 <low_level_input+0x150>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	3301      	adds	r3, #1
 8001000:	4a09      	ldr	r2, [pc, #36]	@ (8001028 <low_level_input+0x150>)
 8001002:	6013      	str	r3, [r2, #0]
    if(curr_rx_desc >= ETH_RX_DESC_NUM)
 8001004:	4b08      	ldr	r3, [pc, #32]	@ (8001028 <low_level_input+0x150>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2b04      	cmp	r3, #4
 800100a:	d902      	bls.n	8001012 <low_level_input+0x13a>
      curr_rx_desc = 0;
 800100c:	4b06      	ldr	r3, [pc, #24]	@ (8001028 <low_level_input+0x150>)
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
  }

  ETH->DMACRDTPR = (unsigned int)&rx_desc[ETH_TX_DESC_NUM-1];
 8001012:	4a08      	ldr	r2, [pc, #32]	@ (8001034 <low_level_input+0x15c>)
 8001014:	4b08      	ldr	r3, [pc, #32]	@ (8001038 <low_level_input+0x160>)
 8001016:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800101a:	f8c2 3128 	str.w	r3, [r2, #296]	@ 0x128

  return p;
 800101e:	68fb      	ldr	r3, [r7, #12]

}
 8001020:	4618      	mov	r0, r3
 8001022:	3710      	adds	r7, #16
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	24003be8 	.word	0x24003be8
 800102c:	24003c3c 	.word	0x24003c3c
 8001030:	24001e34 	.word	0x24001e34
 8001034:	40028000 	.word	0x40028000
 8001038:	24003c7c 	.word	0x24003c7c

0800103c <ethernetif_input>:



void ethernetif_input(struct netif *netif)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  volatile err_t err;
  struct pbuf *p = NULL;
 8001044:	2300      	movs	r3, #0
 8001046:	60fb      	str	r3, [r7, #12]

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f7ff ff45 	bl	8000ed8 <low_level_input>
 800104e:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL)
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d00d      	beq.n	8001072 <ethernetif_input+0x36>
    return;

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	691b      	ldr	r3, [r3, #16]
 800105a:	6879      	ldr	r1, [r7, #4]
 800105c:	68f8      	ldr	r0, [r7, #12]
 800105e:	4798      	blx	r3
 8001060:	4603      	mov	r3, r0
 8001062:	72fb      	strb	r3, [r7, #11]

  if(NULL != p)
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d004      	beq.n	8001074 <ethernetif_input+0x38>
    pbuf_free(p);
 800106a:	68f8      	ldr	r0, [r7, #12]
 800106c:	f001 fb78 	bl	8002760 <pbuf_free>
 8001070:	e000      	b.n	8001074 <ethernetif_input+0x38>
    return;
 8001072:	bf00      	nop
}
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
	...

0800107c <ethernetif_init>:




err_t ethernetif_init(struct netif *netif)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = 's';
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2273      	movs	r2, #115	@ 0x73
 8001088:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = 'b';
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2262      	movs	r2, #98	@ 0x62
 8001090:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

  netif->output = etharp_output;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4a06      	ldr	r2, [pc, #24]	@ (80010b0 <ethernetif_init+0x34>)
 8001098:	615a      	str	r2, [r3, #20]
  netif->linkoutput = low_level_output;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a05      	ldr	r2, [pc, #20]	@ (80010b4 <ethernetif_init+0x38>)
 800109e:	619a      	str	r2, [r3, #24]

  low_level_init(netif);
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f7ff fe33 	bl	8000d0c <low_level_init>

  return ERR_OK;
 80010a6:	2300      	movs	r3, #0

}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	0800808d 	.word	0x0800808d
 80010b4:	08000da1 	.word	0x08000da1

080010b8 <port_init_lwip>:




void port_init_lwip(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  /* USER CODE BEGIN 0 */
  IP4_ADDR(&ipaddr,IP_ADDR0,IP_ADDR1,IP_ADDR2,IP_ADDR3);
 80010be:	4b17      	ldr	r3, [pc, #92]	@ (800111c <port_init_lwip+0x64>)
 80010c0:	4a17      	ldr	r2, [pc, #92]	@ (8001120 <port_init_lwip+0x68>)
 80010c2:	601a      	str	r2, [r3, #0]
  IP4_ADDR(&netmask,NETMASK_ADDR0,NETMASK_ADDR1,NETMASK_ADDR2,NETMASK_ADDR3);
 80010c4:	4b17      	ldr	r3, [pc, #92]	@ (8001124 <port_init_lwip+0x6c>)
 80010c6:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 80010ca:	601a      	str	r2, [r3, #0]
  IP4_ADDR(&gw,GW_ADDR0,GW_ADDR1,GW_ADDR2,GW_ADDR3);
 80010cc:	4b16      	ldr	r3, [pc, #88]	@ (8001128 <port_init_lwip+0x70>)
 80010ce:	4a17      	ldr	r2, [pc, #92]	@ (800112c <port_init_lwip+0x74>)
 80010d0:	601a      	str	r2, [r3, #0]

  /* USER CODE END 0 */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 80010d2:	f000 f9e2 	bl	800149a <lwip_init>

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80010d6:	4b16      	ldr	r3, [pc, #88]	@ (8001130 <port_init_lwip+0x78>)
 80010d8:	9302      	str	r3, [sp, #8]
 80010da:	4b16      	ldr	r3, [pc, #88]	@ (8001134 <port_init_lwip+0x7c>)
 80010dc:	9301      	str	r3, [sp, #4]
 80010de:	2300      	movs	r3, #0
 80010e0:	9300      	str	r3, [sp, #0]
 80010e2:	4b11      	ldr	r3, [pc, #68]	@ (8001128 <port_init_lwip+0x70>)
 80010e4:	4a0f      	ldr	r2, [pc, #60]	@ (8001124 <port_init_lwip+0x6c>)
 80010e6:	490d      	ldr	r1, [pc, #52]	@ (800111c <port_init_lwip+0x64>)
 80010e8:	4813      	ldr	r0, [pc, #76]	@ (8001138 <port_init_lwip+0x80>)
 80010ea:	f000 fdfd 	bl	8001ce8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80010ee:	4812      	ldr	r0, [pc, #72]	@ (8001138 <port_init_lwip+0x80>)
 80010f0:	f000 ff82 	bl	8001ff8 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80010f4:	4b10      	ldr	r3, [pc, #64]	@ (8001138 <port_init_lwip+0x80>)
 80010f6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80010fa:	089b      	lsrs	r3, r3, #2
 80010fc:	f003 0301 	and.w	r3, r3, #1
 8001100:	b2db      	uxtb	r3, r3
 8001102:	2b00      	cmp	r3, #0
 8001104:	d003      	beq.n	800110e <port_init_lwip+0x56>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8001106:	480c      	ldr	r0, [pc, #48]	@ (8001138 <port_init_lwip+0x80>)
 8001108:	f000 ff86 	bl	8002018 <netif_set_up>
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
  }


}
 800110c:	e002      	b.n	8001114 <port_init_lwip+0x5c>
    netif_set_down(&gnetif);
 800110e:	480a      	ldr	r0, [pc, #40]	@ (8001138 <port_init_lwip+0x80>)
 8001110:	f000 ffd8 	bl	80020c4 <netif_set_down>
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	24003cc4 	.word	0x24003cc4
 8001120:	1e0ba8c0 	.word	0x1e0ba8c0
 8001124:	24003cc8 	.word	0x24003cc8
 8001128:	24003ccc 	.word	0x24003ccc
 800112c:	010ba8c0 	.word	0x010ba8c0
 8001130:	08009bf5 	.word	0x08009bf5
 8001134:	0800107d 	.word	0x0800107d
 8001138:	24003c90 	.word	0x24003c90

0800113c <sys_now>:


u32_t sys_now(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  return 0;
 8001140:	2300      	movs	r3, #0
}
 8001142:	4618      	mov	r0, r3
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8001156:	88fb      	ldrh	r3, [r7, #6]
 8001158:	021b      	lsls	r3, r3, #8
 800115a:	b21a      	sxth	r2, r3
 800115c:	88fb      	ldrh	r3, [r7, #6]
 800115e:	0a1b      	lsrs	r3, r3, #8
 8001160:	b29b      	uxth	r3, r3
 8001162:	b21b      	sxth	r3, r3
 8001164:	4313      	orrs	r3, r2
 8001166:	b21b      	sxth	r3, r3
 8001168:	b29b      	uxth	r3, r3
}
 800116a:	4618      	mov	r0, r3
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr

08001176 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8001176:	b480      	push	{r7}
 8001178:	b083      	sub	sp, #12
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	061a      	lsls	r2, r3, #24
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	021b      	lsls	r3, r3, #8
 8001186:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800118a:	431a      	orrs	r2, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	0a1b      	lsrs	r3, r3, #8
 8001190:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8001194:	431a      	orrs	r2, r3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	0e1b      	lsrs	r3, r3, #24
 800119a:	4313      	orrs	r3, r2
}
 800119c:	4618      	mov	r0, r3
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b089      	sub	sp, #36	@ 0x24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 80011b6:	2300      	movs	r3, #0
 80011b8:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 80011ba:	2300      	movs	r3, #0
 80011bc:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	f003 0301 	and.w	r3, r3, #1
 80011c4:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d00d      	beq.n	80011e8 <lwip_standard_chksum+0x40>
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	dd0a      	ble.n	80011e8 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 80011d2:	69fa      	ldr	r2, [r7, #28]
 80011d4:	1c53      	adds	r3, r2, #1
 80011d6:	61fb      	str	r3, [r7, #28]
 80011d8:	f107 030e 	add.w	r3, r7, #14
 80011dc:	3301      	adds	r3, #1
 80011de:	7812      	ldrb	r2, [r2, #0]
 80011e0:	701a      	strb	r2, [r3, #0]
    len--;
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	3b01      	subs	r3, #1
 80011e6:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 80011ec:	e00a      	b.n	8001204 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	1c9a      	adds	r2, r3, #2
 80011f2:	61ba      	str	r2, [r7, #24]
 80011f4:	881b      	ldrh	r3, [r3, #0]
 80011f6:	461a      	mov	r2, r3
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	4413      	add	r3, r2
 80011fc:	617b      	str	r3, [r7, #20]
    len -= 2;
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	3b02      	subs	r3, #2
 8001202:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	2b01      	cmp	r3, #1
 8001208:	dcf1      	bgt.n	80011ee <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	2b00      	cmp	r3, #0
 800120e:	dd04      	ble.n	800121a <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8001210:	f107 030e 	add.w	r3, r7, #14
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	7812      	ldrb	r2, [r2, #0]
 8001218:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800121a:	89fb      	ldrh	r3, [r7, #14]
 800121c:	461a      	mov	r2, r3
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	4413      	add	r3, r2
 8001222:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	0c1a      	lsrs	r2, r3, #16
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	b29b      	uxth	r3, r3
 800122c:	4413      	add	r3, r2
 800122e:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	0c1a      	lsrs	r2, r3, #16
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	b29b      	uxth	r3, r3
 8001238:	4413      	add	r3, r2
 800123a:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d007      	beq.n	8001252 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	021b      	lsls	r3, r3, #8
 8001246:	b29a      	uxth	r2, r3
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	0a1b      	lsrs	r3, r3, #8
 800124c:	b2db      	uxtb	r3, r3
 800124e:	4313      	orrs	r3, r2
 8001250:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	b29b      	uxth	r3, r3
}
 8001256:	4618      	mov	r0, r3
 8001258:	3724      	adds	r7, #36	@ 0x24
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <inet_cksum_pseudo_base>:
#endif

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_base(struct pbuf *p, u8_t proto, u16_t proto_len, u32_t acc)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b086      	sub	sp, #24
 8001266:	af00      	add	r7, sp, #0
 8001268:	60f8      	str	r0, [r7, #12]
 800126a:	607b      	str	r3, [r7, #4]
 800126c:	460b      	mov	r3, r1
 800126e:	72fb      	strb	r3, [r7, #11]
 8001270:	4613      	mov	r3, r2
 8001272:	813b      	strh	r3, [r7, #8]
  struct pbuf *q;
  int swapped = 0;
 8001274:	2300      	movs	r3, #0
 8001276:	613b      	str	r3, [r7, #16]

  /* iterate through all pbuf in chain */
  for (q = p; q != NULL; q = q->next) {
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	617b      	str	r3, [r7, #20]
 800127c:	e02b      	b.n	80012d6 <inet_cksum_pseudo_base+0x74>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
                             (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	685a      	ldr	r2, [r3, #4]
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	895b      	ldrh	r3, [r3, #10]
 8001286:	4619      	mov	r1, r3
 8001288:	4610      	mov	r0, r2
 800128a:	f7ff ff8d 	bl	80011a8 <lwip_standard_chksum>
 800128e:	4603      	mov	r3, r0
 8001290:	461a      	mov	r2, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4413      	add	r3, r2
 8001296:	607b      	str	r3, [r7, #4]
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	0c1a      	lsrs	r2, r3, #16
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	b29b      	uxth	r3, r3
 80012a0:	4413      	add	r3, r2
 80012a2:	607b      	str	r3, [r7, #4]
    if (q->len % 2 != 0) {
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	895b      	ldrh	r3, [r3, #10]
 80012a8:	f003 0301 	and.w	r3, r3, #1
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d00e      	beq.n	80012d0 <inet_cksum_pseudo_base+0x6e>
      swapped = !swapped;
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	bf0c      	ite	eq
 80012b8:	2301      	moveq	r3, #1
 80012ba:	2300      	movne	r3, #0
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	613b      	str	r3, [r7, #16]
      acc = SWAP_BYTES_IN_WORD(acc);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	021b      	lsls	r3, r3, #8
 80012c4:	b29a      	uxth	r2, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	0a1b      	lsrs	r3, r3, #8
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	4313      	orrs	r3, r2
 80012ce:	607b      	str	r3, [r7, #4]
  for (q = p; q != NULL; q = q->next) {
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	617b      	str	r3, [r7, #20]
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d1d0      	bne.n	800127e <inet_cksum_pseudo_base+0x1c>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d007      	beq.n	80012f2 <inet_cksum_pseudo_base+0x90>
    acc = SWAP_BYTES_IN_WORD(acc);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	021b      	lsls	r3, r3, #8
 80012e6:	b29a      	uxth	r2, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	0a1b      	lsrs	r3, r3, #8
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	4313      	orrs	r3, r2
 80012f0:	607b      	str	r3, [r7, #4]
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
 80012f2:	7afb      	ldrb	r3, [r7, #11]
 80012f4:	b29b      	uxth	r3, r3
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff ff28 	bl	800114c <lwip_htons>
 80012fc:	4603      	mov	r3, r0
 80012fe:	461a      	mov	r2, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4413      	add	r3, r2
 8001304:	607b      	str	r3, [r7, #4]
  acc += (u32_t)lwip_htons(proto_len);
 8001306:	893b      	ldrh	r3, [r7, #8]
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff ff1f 	bl	800114c <lwip_htons>
 800130e:	4603      	mov	r3, r0
 8001310:	461a      	mov	r2, r3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4413      	add	r3, r2
 8001316:	607b      	str	r3, [r7, #4]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	0c1a      	lsrs	r2, r3, #16
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	b29b      	uxth	r3, r3
 8001320:	4413      	add	r3, r2
 8001322:	607b      	str	r3, [r7, #4]
  acc = FOLD_U32T(acc);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	0c1a      	lsrs	r2, r3, #16
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	b29b      	uxth	r3, r3
 800132c:	4413      	add	r3, r2
 800132e:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	b29b      	uxth	r3, r3
 8001334:	43db      	mvns	r3, r3
 8001336:	b29b      	uxth	r3, r3
}
 8001338:	4618      	mov	r0, r3
 800133a:	3718      	adds	r7, #24
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <inet_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                   const ip4_addr_t *src, const ip4_addr_t *dest)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b086      	sub	sp, #24
 8001344:	af00      	add	r7, sp, #0
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	607b      	str	r3, [r7, #4]
 800134a:	460b      	mov	r3, r1
 800134c:	72fb      	strb	r3, [r7, #11]
 800134e:	4613      	mov	r3, r2
 8001350:	813b      	strh	r3, [r7, #8]
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	617b      	str	r3, [r7, #20]
  acc = (addr & 0xffffUL);
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	b29b      	uxth	r3, r3
 800135c:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	0c1b      	lsrs	r3, r3, #16
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	4413      	add	r3, r2
 8001366:	613b      	str	r3, [r7, #16]
  addr = ip4_addr_get_u32(dest);
 8001368:	6a3b      	ldr	r3, [r7, #32]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	617b      	str	r3, [r7, #20]
  acc = (u32_t)(acc + (addr & 0xffffUL));
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	b29b      	uxth	r3, r3
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	4413      	add	r3, r2
 8001376:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	0c1b      	lsrs	r3, r3, #16
 800137c:	693a      	ldr	r2, [r7, #16]
 800137e:	4413      	add	r3, r2
 8001380:	613b      	str	r3, [r7, #16]
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	0c1a      	lsrs	r2, r3, #16
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	b29b      	uxth	r3, r3
 800138a:	4413      	add	r3, r2
 800138c:	613b      	str	r3, [r7, #16]
  acc = FOLD_U32T(acc);
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	0c1a      	lsrs	r2, r3, #16
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	b29b      	uxth	r3, r3
 8001396:	4413      	add	r3, r2
 8001398:	613b      	str	r3, [r7, #16]

  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 800139a:	893a      	ldrh	r2, [r7, #8]
 800139c:	7af9      	ldrb	r1, [r7, #11]
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	68f8      	ldr	r0, [r7, #12]
 80013a2:	f7ff ff5e 	bl	8001262 <inet_cksum_pseudo_base>
 80013a6:	4603      	mov	r3, r0
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3718      	adds	r7, #24
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <ip_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                 const ip_addr_t *src, const ip_addr_t *dest)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af02      	add	r7, sp, #8
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	607b      	str	r3, [r7, #4]
 80013ba:	460b      	mov	r3, r1
 80013bc:	72fb      	strb	r3, [r7, #11]
 80013be:	4613      	mov	r3, r2
 80013c0:	813b      	strh	r3, [r7, #8]
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
 80013c2:	893a      	ldrh	r2, [r7, #8]
 80013c4:	7af9      	ldrb	r1, [r7, #11]
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	9300      	str	r3, [sp, #0]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	68f8      	ldr	r0, [r7, #12]
 80013ce:	f7ff ffb7 	bl	8001340 <inet_chksum_pseudo>
 80013d2:	4603      	mov	r3, r0
  }
#endif /* LWIP_IPV4 */
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3710      	adds	r7, #16
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}

080013dc <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	460b      	mov	r3, r1
 80013e6:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 80013e8:	887b      	ldrh	r3, [r7, #2]
 80013ea:	4619      	mov	r1, r3
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f7ff fedb 	bl	80011a8 <lwip_standard_chksum>
 80013f2:	4603      	mov	r3, r0
 80013f4:	43db      	mvns	r3, r3
 80013f6:	b29b      	uxth	r3, r3
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}

08001400 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b086      	sub	sp, #24
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 8001408:	2300      	movs	r3, #0
 800140a:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800140c:	2300      	movs	r3, #0
 800140e:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	613b      	str	r3, [r7, #16]
 8001414:	e02b      	b.n	800146e <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	685a      	ldr	r2, [r3, #4]
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	895b      	ldrh	r3, [r3, #10]
 800141e:	4619      	mov	r1, r3
 8001420:	4610      	mov	r0, r2
 8001422:	f7ff fec1 	bl	80011a8 <lwip_standard_chksum>
 8001426:	4603      	mov	r3, r0
 8001428:	461a      	mov	r2, r3
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	4413      	add	r3, r2
 800142e:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	0c1a      	lsrs	r2, r3, #16
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	b29b      	uxth	r3, r3
 8001438:	4413      	add	r3, r2
 800143a:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	895b      	ldrh	r3, [r3, #10]
 8001440:	f003 0301 	and.w	r3, r3, #1
 8001444:	b29b      	uxth	r3, r3
 8001446:	2b00      	cmp	r3, #0
 8001448:	d00e      	beq.n	8001468 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	2b00      	cmp	r3, #0
 800144e:	bf0c      	ite	eq
 8001450:	2301      	moveq	r3, #1
 8001452:	2300      	movne	r3, #0
 8001454:	b2db      	uxtb	r3, r3
 8001456:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	021b      	lsls	r3, r3, #8
 800145c:	b29a      	uxth	r2, r3
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	0a1b      	lsrs	r3, r3, #8
 8001462:	b2db      	uxtb	r3, r3
 8001464:	4313      	orrs	r3, r2
 8001466:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	613b      	str	r3, [r7, #16]
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d1d0      	bne.n	8001416 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d007      	beq.n	800148a <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	021b      	lsls	r3, r3, #8
 800147e:	b29a      	uxth	r2, r3
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	0a1b      	lsrs	r3, r3, #8
 8001484:	b2db      	uxtb	r3, r3
 8001486:	4313      	orrs	r3, r2
 8001488:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	b29b      	uxth	r3, r3
 800148e:	43db      	mvns	r3, r3
 8001490:	b29b      	uxth	r3, r3
}
 8001492:	4618      	mov	r0, r3
 8001494:	3718      	adds	r7, #24
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b082      	sub	sp, #8
 800149e:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80014a0:	2300      	movs	r3, #0
 80014a2:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80014a4:	f000 f8c0 	bl	8001628 <mem_init>
  memp_init();
 80014a8:	f000 fb86 	bl	8001bb8 <memp_init>
  pbuf_init();
  netif_init();
 80014ac:	f000 fc14 	bl	8001cd8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80014b0:	f006 f818 	bl	80074e4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80014b4:	f001 fba0 	bl	8002bf8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80014b8:	f005 ff9a 	bl	80073f0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80014bc:	bf00      	nop
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80014ce:	4b05      	ldr	r3, [pc, #20]	@ (80014e4 <ptr_to_mem+0x20>)
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	88fb      	ldrh	r3, [r7, #6]
 80014d4:	4413      	add	r3, r2
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	240064fc 	.word	0x240064fc

080014e8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80014f0:	4b05      	ldr	r3, [pc, #20]	@ (8001508 <mem_to_ptr+0x20>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	b29b      	uxth	r3, r3
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	240064fc 	.word	0x240064fc

0800150c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800150c:	b590      	push	{r4, r7, lr}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8001514:	4b3d      	ldr	r3, [pc, #244]	@ (800160c <plug_holes+0x100>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	429a      	cmp	r2, r3
 800151c:	d202      	bcs.n	8001524 <plug_holes+0x18>
 800151e:	483c      	ldr	r0, [pc, #240]	@ (8001610 <plug_holes+0x104>)
 8001520:	f008 fcf8 	bl	8009f14 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8001524:	4b3b      	ldr	r3, [pc, #236]	@ (8001614 <plug_holes+0x108>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	429a      	cmp	r2, r3
 800152c:	d302      	bcc.n	8001534 <plug_holes+0x28>
 800152e:	483a      	ldr	r0, [pc, #232]	@ (8001618 <plug_holes+0x10c>)
 8001530:	f008 fcf0 	bl	8009f14 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	791b      	ldrb	r3, [r3, #4]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d002      	beq.n	8001542 <plug_holes+0x36>
 800153c:	4837      	ldr	r0, [pc, #220]	@ (800161c <plug_holes+0x110>)
 800153e:	f008 fce9 	bl	8009f14 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	881b      	ldrh	r3, [r3, #0]
 8001546:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800154a:	d902      	bls.n	8001552 <plug_holes+0x46>
 800154c:	4834      	ldr	r0, [pc, #208]	@ (8001620 <plug_holes+0x114>)
 800154e:	f008 fce1 	bl	8009f14 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	881b      	ldrh	r3, [r3, #0]
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff ffb4 	bl	80014c4 <ptr_to_mem>
 800155c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	429a      	cmp	r2, r3
 8001564:	d024      	beq.n	80015b0 <plug_holes+0xa4>
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	791b      	ldrb	r3, [r3, #4]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d120      	bne.n	80015b0 <plug_holes+0xa4>
 800156e:	4b29      	ldr	r3, [pc, #164]	@ (8001614 <plug_holes+0x108>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	68fa      	ldr	r2, [r7, #12]
 8001574:	429a      	cmp	r2, r3
 8001576:	d01b      	beq.n	80015b0 <plug_holes+0xa4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8001578:	4b2a      	ldr	r3, [pc, #168]	@ (8001624 <plug_holes+0x118>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	68fa      	ldr	r2, [r7, #12]
 800157e:	429a      	cmp	r2, r3
 8001580:	d102      	bne.n	8001588 <plug_holes+0x7c>
      lfree = mem;
 8001582:	4a28      	ldr	r2, [pc, #160]	@ (8001624 <plug_holes+0x118>)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	881a      	ldrh	r2, [r3, #0]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	881b      	ldrh	r3, [r3, #0]
 8001594:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8001598:	d00a      	beq.n	80015b0 <plug_holes+0xa4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	881b      	ldrh	r3, [r3, #0]
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff ff90 	bl	80014c4 <ptr_to_mem>
 80015a4:	4604      	mov	r4, r0
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f7ff ff9e 	bl	80014e8 <mem_to_ptr>
 80015ac:	4603      	mov	r3, r0
 80015ae:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	885b      	ldrh	r3, [r3, #2]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff ff85 	bl	80014c4 <ptr_to_mem>
 80015ba:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80015bc:	68ba      	ldr	r2, [r7, #8]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d01f      	beq.n	8001604 <plug_holes+0xf8>
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	791b      	ldrb	r3, [r3, #4]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d11b      	bne.n	8001604 <plug_holes+0xf8>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80015cc:	4b15      	ldr	r3, [pc, #84]	@ (8001624 <plug_holes+0x118>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d102      	bne.n	80015dc <plug_holes+0xd0>
      lfree = pmem;
 80015d6:	4a13      	ldr	r2, [pc, #76]	@ (8001624 <plug_holes+0x118>)
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	881a      	ldrh	r2, [r3, #0]
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	881b      	ldrh	r3, [r3, #0]
 80015e8:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80015ec:	d00a      	beq.n	8001604 <plug_holes+0xf8>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	881b      	ldrh	r3, [r3, #0]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff ff66 	bl	80014c4 <ptr_to_mem>
 80015f8:	4604      	mov	r4, r0
 80015fa:	68b8      	ldr	r0, [r7, #8]
 80015fc:	f7ff ff74 	bl	80014e8 <mem_to_ptr>
 8001600:	4603      	mov	r3, r0
 8001602:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8001604:	bf00      	nop
 8001606:	3714      	adds	r7, #20
 8001608:	46bd      	mov	sp, r7
 800160a:	bd90      	pop	{r4, r7, pc}
 800160c:	240064fc 	.word	0x240064fc
 8001610:	0800ac44 	.word	0x0800ac44
 8001614:	24006500 	.word	0x24006500
 8001618:	0800ac5c 	.word	0x0800ac5c
 800161c:	0800ac78 	.word	0x0800ac78
 8001620:	0800ac94 	.word	0x0800ac94
 8001624:	24006504 	.word	0x24006504

08001628 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800162e:	4b18      	ldr	r3, [pc, #96]	@ (8001690 <mem_init+0x68>)
 8001630:	3303      	adds	r3, #3
 8001632:	f023 0303 	bic.w	r3, r3, #3
 8001636:	461a      	mov	r2, r3
 8001638:	4b16      	ldr	r3, [pc, #88]	@ (8001694 <mem_init+0x6c>)
 800163a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800163c:	4b15      	ldr	r3, [pc, #84]	@ (8001694 <mem_init+0x6c>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8001648:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2200      	movs	r2, #0
 800164e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2200      	movs	r2, #0
 8001654:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8001656:	f44f 5020 	mov.w	r0, #10240	@ 0x2800
 800165a:	f7ff ff33 	bl	80014c4 <ptr_to_mem>
 800165e:	4603      	mov	r3, r0
 8001660:	4a0d      	ldr	r2, [pc, #52]	@ (8001698 <mem_init+0x70>)
 8001662:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8001664:	4b0c      	ldr	r3, [pc, #48]	@ (8001698 <mem_init+0x70>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2201      	movs	r2, #1
 800166a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800166c:	4b0a      	ldr	r3, [pc, #40]	@ (8001698 <mem_init+0x70>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8001674:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8001676:	4b08      	ldr	r3, [pc, #32]	@ (8001698 <mem_init+0x70>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800167e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8001680:	4b04      	ldr	r3, [pc, #16]	@ (8001694 <mem_init+0x6c>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a05      	ldr	r2, [pc, #20]	@ (800169c <mem_init+0x74>)
 8001686:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8001688:	bf00      	nop
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	24003ce8 	.word	0x24003ce8
 8001694:	240064fc 	.word	0x240064fc
 8001698:	24006500 	.word	0x24006500
 800169c:	24006504 	.word	0x24006504

080016a0 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f7ff ff1d 	bl	80014e8 <mem_to_ptr>
 80016ae:	4603      	mov	r3, r0
 80016b0:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	881b      	ldrh	r3, [r3, #0]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff ff04 	bl	80014c4 <ptr_to_mem>
 80016bc:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	885b      	ldrh	r3, [r3, #2]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff fefe 	bl	80014c4 <ptr_to_mem>
 80016c8:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	881b      	ldrh	r3, [r3, #0]
 80016ce:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80016d2:	d818      	bhi.n	8001706 <mem_link_valid+0x66>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	885b      	ldrh	r3, [r3, #2]
 80016d8:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80016dc:	d813      	bhi.n	8001706 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80016e2:	8afa      	ldrh	r2, [r7, #22]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d004      	beq.n	80016f2 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	881b      	ldrh	r3, [r3, #0]
 80016ec:	8afa      	ldrh	r2, [r7, #22]
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d109      	bne.n	8001706 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80016f2:	4b08      	ldr	r3, [pc, #32]	@ (8001714 <mem_link_valid+0x74>)
 80016f4:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d006      	beq.n	800170a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	885b      	ldrh	r3, [r3, #2]
 8001700:	8afa      	ldrh	r2, [r7, #22]
 8001702:	429a      	cmp	r2, r3
 8001704:	d001      	beq.n	800170a <mem_link_valid+0x6a>
    return 0;
 8001706:	2300      	movs	r3, #0
 8001708:	e000      	b.n	800170c <mem_link_valid+0x6c>
  }
  return 1;
 800170a:	2301      	movs	r3, #1
}
 800170c:	4618      	mov	r0, r3
 800170e:	3718      	adds	r7, #24
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	24006500 	.word	0x24006500

08001718 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d03c      	beq.n	80017a0 <mem_free+0x88>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	f003 0303 	and.w	r3, r3, #3
 800172c:	2b00      	cmp	r3, #0
 800172e:	d003      	beq.n	8001738 <mem_free+0x20>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8001730:	481d      	ldr	r0, [pc, #116]	@ (80017a8 <mem_free+0x90>)
 8001732:	f008 fbef 	bl	8009f14 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8001736:	e034      	b.n	80017a2 <mem_free+0x8a>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	3b08      	subs	r3, #8
 800173c:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800173e:	4b1b      	ldr	r3, [pc, #108]	@ (80017ac <mem_free+0x94>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	68fa      	ldr	r2, [r7, #12]
 8001744:	429a      	cmp	r2, r3
 8001746:	d306      	bcc.n	8001756 <mem_free+0x3e>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f103 020c 	add.w	r2, r3, #12
 800174e:	4b18      	ldr	r3, [pc, #96]	@ (80017b0 <mem_free+0x98>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	429a      	cmp	r2, r3
 8001754:	d903      	bls.n	800175e <mem_free+0x46>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8001756:	4817      	ldr	r0, [pc, #92]	@ (80017b4 <mem_free+0x9c>)
 8001758:	f008 fbdc 	bl	8009f14 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800175c:	e021      	b.n	80017a2 <mem_free+0x8a>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	791b      	ldrb	r3, [r3, #4]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d103      	bne.n	800176e <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8001766:	4814      	ldr	r0, [pc, #80]	@ (80017b8 <mem_free+0xa0>)
 8001768:	f008 fbd4 	bl	8009f14 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800176c:	e019      	b.n	80017a2 <mem_free+0x8a>
  }

  if (!mem_link_valid(mem)) {
 800176e:	68f8      	ldr	r0, [r7, #12]
 8001770:	f7ff ff96 	bl	80016a0 <mem_link_valid>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d103      	bne.n	8001782 <mem_free+0x6a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800177a:	4810      	ldr	r0, [pc, #64]	@ (80017bc <mem_free+0xa4>)
 800177c:	f008 fbca 	bl	8009f14 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8001780:	e00f      	b.n	80017a2 <mem_free+0x8a>
  }

  /* mem is now unused. */
  mem->used = 0;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	2200      	movs	r2, #0
 8001786:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8001788:	4b0d      	ldr	r3, [pc, #52]	@ (80017c0 <mem_free+0xa8>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	68fa      	ldr	r2, [r7, #12]
 800178e:	429a      	cmp	r2, r3
 8001790:	d202      	bcs.n	8001798 <mem_free+0x80>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8001792:	4a0b      	ldr	r2, [pc, #44]	@ (80017c0 <mem_free+0xa8>)
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8001798:	68f8      	ldr	r0, [r7, #12]
 800179a:	f7ff feb7 	bl	800150c <plug_holes>
 800179e:	e000      	b.n	80017a2 <mem_free+0x8a>
    return;
 80017a0:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80017a2:	3710      	adds	r7, #16
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	0800acc0 	.word	0x0800acc0
 80017ac:	240064fc 	.word	0x240064fc
 80017b0:	24006500 	.word	0x24006500
 80017b4:	0800ace4 	.word	0x0800ace4
 80017b8:	0800ad00 	.word	0x0800ad00
 80017bc:	0800ad28 	.word	0x0800ad28
 80017c0:	24006504 	.word	0x24006504

080017c4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b088      	sub	sp, #32
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	460b      	mov	r3, r1
 80017ce:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80017d0:	887b      	ldrh	r3, [r7, #2]
 80017d2:	3303      	adds	r3, #3
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	f023 0303 	bic.w	r3, r3, #3
 80017da:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80017dc:	8bfb      	ldrh	r3, [r7, #30]
 80017de:	2b0b      	cmp	r3, #11
 80017e0:	d801      	bhi.n	80017e6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80017e2:	230c      	movs	r3, #12
 80017e4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80017e6:	8bfb      	ldrh	r3, [r7, #30]
 80017e8:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80017ec:	d803      	bhi.n	80017f6 <mem_trim+0x32>
 80017ee:	8bfa      	ldrh	r2, [r7, #30]
 80017f0:	887b      	ldrh	r3, [r7, #2]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d201      	bcs.n	80017fa <mem_trim+0x36>
    return NULL;
 80017f6:	2300      	movs	r3, #0
 80017f8:	e0bc      	b.n	8001974 <mem_trim+0x1b0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80017fa:	4b60      	ldr	r3, [pc, #384]	@ (800197c <mem_trim+0x1b8>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	429a      	cmp	r2, r3
 8001802:	d304      	bcc.n	800180e <mem_trim+0x4a>
 8001804:	4b5e      	ldr	r3, [pc, #376]	@ (8001980 <mem_trim+0x1bc>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	429a      	cmp	r2, r3
 800180c:	d302      	bcc.n	8001814 <mem_trim+0x50>
 800180e:	485d      	ldr	r0, [pc, #372]	@ (8001984 <mem_trim+0x1c0>)
 8001810:	f008 fb80 	bl	8009f14 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8001814:	4b59      	ldr	r3, [pc, #356]	@ (800197c <mem_trim+0x1b8>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	429a      	cmp	r2, r3
 800181c:	d304      	bcc.n	8001828 <mem_trim+0x64>
 800181e:	4b58      	ldr	r3, [pc, #352]	@ (8001980 <mem_trim+0x1bc>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	429a      	cmp	r2, r3
 8001826:	d301      	bcc.n	800182c <mem_trim+0x68>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	e0a3      	b.n	8001974 <mem_trim+0x1b0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	3b08      	subs	r3, #8
 8001830:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8001832:	69b8      	ldr	r0, [r7, #24]
 8001834:	f7ff fe58 	bl	80014e8 <mem_to_ptr>
 8001838:	4603      	mov	r3, r0
 800183a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	881a      	ldrh	r2, [r3, #0]
 8001840:	8afb      	ldrh	r3, [r7, #22]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	b29b      	uxth	r3, r3
 8001846:	3b08      	subs	r3, #8
 8001848:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800184a:	8bfa      	ldrh	r2, [r7, #30]
 800184c:	8abb      	ldrh	r3, [r7, #20]
 800184e:	429a      	cmp	r2, r3
 8001850:	d902      	bls.n	8001858 <mem_trim+0x94>
 8001852:	484d      	ldr	r0, [pc, #308]	@ (8001988 <mem_trim+0x1c4>)
 8001854:	f008 fb5e 	bl	8009f14 <iprintf>
  if (newsize > size) {
 8001858:	8bfa      	ldrh	r2, [r7, #30]
 800185a:	8abb      	ldrh	r3, [r7, #20]
 800185c:	429a      	cmp	r2, r3
 800185e:	d901      	bls.n	8001864 <mem_trim+0xa0>
    /* not supported */
    return NULL;
 8001860:	2300      	movs	r3, #0
 8001862:	e087      	b.n	8001974 <mem_trim+0x1b0>
  }
  if (newsize == size) {
 8001864:	8bfa      	ldrh	r2, [r7, #30]
 8001866:	8abb      	ldrh	r3, [r7, #20]
 8001868:	429a      	cmp	r2, r3
 800186a:	d101      	bne.n	8001870 <mem_trim+0xac>
    /* No change in size, simply return */
    return rmem;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	e081      	b.n	8001974 <mem_trim+0x1b0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	881b      	ldrh	r3, [r3, #0]
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff fe25 	bl	80014c4 <ptr_to_mem>
 800187a:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	791b      	ldrb	r3, [r3, #4]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d13b      	bne.n	80018fc <mem_trim+0x138>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	881b      	ldrh	r3, [r3, #0]
 8001888:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800188c:	d102      	bne.n	8001894 <mem_trim+0xd0>
 800188e:	483f      	ldr	r0, [pc, #252]	@ (800198c <mem_trim+0x1c8>)
 8001890:	f008 fb40 	bl	8009f14 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	881b      	ldrh	r3, [r3, #0]
 8001898:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrunk mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800189a:	8afa      	ldrh	r2, [r7, #22]
 800189c:	8bfb      	ldrh	r3, [r7, #30]
 800189e:	4413      	add	r3, r2
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	3308      	adds	r3, #8
 80018a4:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80018a6:	4b3a      	ldr	r3, [pc, #232]	@ (8001990 <mem_trim+0x1cc>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d106      	bne.n	80018be <mem_trim+0xfa>
      lfree = ptr_to_mem(ptr2);
 80018b0:	89fb      	ldrh	r3, [r7, #14]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7ff fe06 	bl	80014c4 <ptr_to_mem>
 80018b8:	4603      	mov	r3, r0
 80018ba:	4a35      	ldr	r2, [pc, #212]	@ (8001990 <mem_trim+0x1cc>)
 80018bc:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80018be:	89fb      	ldrh	r3, [r7, #14]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff fdff 	bl	80014c4 <ptr_to_mem>
 80018c6:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	2200      	movs	r2, #0
 80018cc:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	89ba      	ldrh	r2, [r7, #12]
 80018d2:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	8afa      	ldrh	r2, [r7, #22]
 80018d8:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	89fa      	ldrh	r2, [r7, #14]
 80018de:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	881b      	ldrh	r3, [r3, #0]
 80018e4:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80018e8:	d043      	beq.n	8001972 <mem_trim+0x1ae>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	881b      	ldrh	r3, [r3, #0]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7ff fde8 	bl	80014c4 <ptr_to_mem>
 80018f4:	4602      	mov	r2, r0
 80018f6:	89fb      	ldrh	r3, [r7, #14]
 80018f8:	8053      	strh	r3, [r2, #2]
 80018fa:	e03a      	b.n	8001972 <mem_trim+0x1ae>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80018fc:	8bfb      	ldrh	r3, [r7, #30]
 80018fe:	f103 0214 	add.w	r2, r3, #20
 8001902:	8abb      	ldrh	r3, [r7, #20]
 8001904:	429a      	cmp	r2, r3
 8001906:	d834      	bhi.n	8001972 <mem_trim+0x1ae>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8001908:	8afa      	ldrh	r2, [r7, #22]
 800190a:	8bfb      	ldrh	r3, [r7, #30]
 800190c:	4413      	add	r3, r2
 800190e:	b29b      	uxth	r3, r3
 8001910:	3308      	adds	r3, #8
 8001912:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	881b      	ldrh	r3, [r3, #0]
 8001918:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800191c:	d102      	bne.n	8001924 <mem_trim+0x160>
 800191e:	481b      	ldr	r0, [pc, #108]	@ (800198c <mem_trim+0x1c8>)
 8001920:	f008 faf8 	bl	8009f14 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8001924:	89fb      	ldrh	r3, [r7, #14]
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff fdcc 	bl	80014c4 <ptr_to_mem>
 800192c:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800192e:	4b18      	ldr	r3, [pc, #96]	@ (8001990 <mem_trim+0x1cc>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	429a      	cmp	r2, r3
 8001936:	d202      	bcs.n	800193e <mem_trim+0x17a>
      lfree = mem2;
 8001938:	4a15      	ldr	r2, [pc, #84]	@ (8001990 <mem_trim+0x1cc>)
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	2200      	movs	r2, #0
 8001942:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	881a      	ldrh	r2, [r3, #0]
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	8afa      	ldrh	r2, [r7, #22]
 8001950:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	89fa      	ldrh	r2, [r7, #14]
 8001956:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	881b      	ldrh	r3, [r3, #0]
 800195c:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8001960:	d007      	beq.n	8001972 <mem_trim+0x1ae>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	881b      	ldrh	r3, [r3, #0]
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff fdac 	bl	80014c4 <ptr_to_mem>
 800196c:	4602      	mov	r2, r0
 800196e:	89fb      	ldrh	r3, [r7, #14]
 8001970:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8001972:	687b      	ldr	r3, [r7, #4]
}
 8001974:	4618      	mov	r0, r3
 8001976:	3720      	adds	r7, #32
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	240064fc 	.word	0x240064fc
 8001980:	24006500 	.word	0x24006500
 8001984:	0800ad5c 	.word	0x0800ad5c
 8001988:	0800ad74 	.word	0x0800ad74
 800198c:	0800ad94 	.word	0x0800ad94
 8001990:	24006504 	.word	0x24006504

08001994 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b088      	sub	sp, #32
 8001998:	af00      	add	r7, sp, #0
 800199a:	4603      	mov	r3, r0
 800199c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800199e:	88fb      	ldrh	r3, [r7, #6]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d101      	bne.n	80019a8 <mem_malloc+0x14>
    return NULL;
 80019a4:	2300      	movs	r3, #0
 80019a6:	e0c5      	b.n	8001b34 <mem_malloc+0x1a0>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80019a8:	88fb      	ldrh	r3, [r7, #6]
 80019aa:	3303      	adds	r3, #3
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	f023 0303 	bic.w	r3, r3, #3
 80019b2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80019b4:	8bbb      	ldrh	r3, [r7, #28]
 80019b6:	2b0b      	cmp	r3, #11
 80019b8:	d801      	bhi.n	80019be <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80019ba:	230c      	movs	r3, #12
 80019bc:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80019be:	8bbb      	ldrh	r3, [r7, #28]
 80019c0:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80019c4:	d803      	bhi.n	80019ce <mem_malloc+0x3a>
 80019c6:	8bba      	ldrh	r2, [r7, #28]
 80019c8:	88fb      	ldrh	r3, [r7, #6]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d201      	bcs.n	80019d2 <mem_malloc+0x3e>
    return NULL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	e0b0      	b.n	8001b34 <mem_malloc+0x1a0>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80019d2:	4b5a      	ldr	r3, [pc, #360]	@ (8001b3c <mem_malloc+0x1a8>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff fd86 	bl	80014e8 <mem_to_ptr>
 80019dc:	4603      	mov	r3, r0
 80019de:	83fb      	strh	r3, [r7, #30]
 80019e0:	e0a0      	b.n	8001b24 <mem_malloc+0x190>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80019e2:	8bfb      	ldrh	r3, [r7, #30]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff fd6d 	bl	80014c4 <ptr_to_mem>
 80019ea:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	791b      	ldrb	r3, [r3, #4]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	f040 8090 	bne.w	8001b16 <mem_malloc+0x182>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	881b      	ldrh	r3, [r3, #0]
 80019fa:	461a      	mov	r2, r3
 80019fc:	8bfb      	ldrh	r3, [r7, #30]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	f1a3 0208 	sub.w	r2, r3, #8
 8001a04:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8001a06:	429a      	cmp	r2, r3
 8001a08:	f0c0 8085 	bcc.w	8001b16 <mem_malloc+0x182>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	881b      	ldrh	r3, [r3, #0]
 8001a10:	461a      	mov	r2, r3
 8001a12:	8bfb      	ldrh	r3, [r7, #30]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	f1a3 0208 	sub.w	r2, r3, #8
 8001a1a:	8bbb      	ldrh	r3, [r7, #28]
 8001a1c:	3314      	adds	r3, #20
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d32f      	bcc.n	8001a82 <mem_malloc+0xee>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8001a22:	8bfa      	ldrh	r2, [r7, #30]
 8001a24:	8bbb      	ldrh	r3, [r7, #28]
 8001a26:	4413      	add	r3, r2
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	3308      	adds	r3, #8
 8001a2c:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8001a2e:	8a7b      	ldrh	r3, [r7, #18]
 8001a30:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8001a34:	d102      	bne.n	8001a3c <mem_malloc+0xa8>
 8001a36:	4842      	ldr	r0, [pc, #264]	@ (8001b40 <mem_malloc+0x1ac>)
 8001a38:	f008 fa6c 	bl	8009f14 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8001a3c:	8a7b      	ldrh	r3, [r7, #18]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7ff fd40 	bl	80014c4 <ptr_to_mem>
 8001a44:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	881a      	ldrh	r2, [r3, #0]
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	8bfa      	ldrh	r2, [r7, #30]
 8001a58:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	8a7a      	ldrh	r2, [r7, #18]
 8001a5e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	2201      	movs	r2, #1
 8001a64:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	881b      	ldrh	r3, [r3, #0]
 8001a6a:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8001a6e:	d00b      	beq.n	8001a88 <mem_malloc+0xf4>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	881b      	ldrh	r3, [r3, #0]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff fd25 	bl	80014c4 <ptr_to_mem>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	8a7b      	ldrh	r3, [r7, #18]
 8001a7e:	8053      	strh	r3, [r2, #2]
 8001a80:	e002      	b.n	8001a88 <mem_malloc+0xf4>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	2201      	movs	r2, #1
 8001a86:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8001a88:	4b2c      	ldr	r3, [pc, #176]	@ (8001b3c <mem_malloc+0x1a8>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	697a      	ldr	r2, [r7, #20]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d123      	bne.n	8001ada <mem_malloc+0x146>
          struct mem *cur = lfree;
 8001a92:	4b2a      	ldr	r3, [pc, #168]	@ (8001b3c <mem_malloc+0x1a8>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8001a98:	e005      	b.n	8001aa6 <mem_malloc+0x112>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	881b      	ldrh	r3, [r3, #0]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff fd10 	bl	80014c4 <ptr_to_mem>
 8001aa4:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	791b      	ldrb	r3, [r3, #4]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d004      	beq.n	8001ab8 <mem_malloc+0x124>
 8001aae:	4b25      	ldr	r3, [pc, #148]	@ (8001b44 <mem_malloc+0x1b0>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d1f0      	bne.n	8001a9a <mem_malloc+0x106>
          }
          lfree = cur;
 8001ab8:	4a20      	ldr	r2, [pc, #128]	@ (8001b3c <mem_malloc+0x1a8>)
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8001abe:	4b1f      	ldr	r3, [pc, #124]	@ (8001b3c <mem_malloc+0x1a8>)
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	4b20      	ldr	r3, [pc, #128]	@ (8001b44 <mem_malloc+0x1b0>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d007      	beq.n	8001ada <mem_malloc+0x146>
 8001aca:	4b1c      	ldr	r3, [pc, #112]	@ (8001b3c <mem_malloc+0x1a8>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	791b      	ldrb	r3, [r3, #4]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d002      	beq.n	8001ada <mem_malloc+0x146>
 8001ad4:	481c      	ldr	r0, [pc, #112]	@ (8001b48 <mem_malloc+0x1b4>)
 8001ad6:	f008 fa1d 	bl	8009f14 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8001ada:	8bba      	ldrh	r2, [r7, #28]
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	4413      	add	r3, r2
 8001ae0:	3308      	adds	r3, #8
 8001ae2:	4a18      	ldr	r2, [pc, #96]	@ (8001b44 <mem_malloc+0x1b0>)
 8001ae4:	6812      	ldr	r2, [r2, #0]
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d902      	bls.n	8001af0 <mem_malloc+0x15c>
 8001aea:	4818      	ldr	r0, [pc, #96]	@ (8001b4c <mem_malloc+0x1b8>)
 8001aec:	f008 fa12 	bl	8009f14 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	f003 0303 	and.w	r3, r3, #3
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d002      	beq.n	8001b00 <mem_malloc+0x16c>
 8001afa:	4815      	ldr	r0, [pc, #84]	@ (8001b50 <mem_malloc+0x1bc>)
 8001afc:	f008 fa0a 	bl	8009f14 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	f003 0303 	and.w	r3, r3, #3
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d002      	beq.n	8001b10 <mem_malloc+0x17c>
 8001b0a:	4812      	ldr	r0, [pc, #72]	@ (8001b54 <mem_malloc+0x1c0>)
 8001b0c:	f008 fa02 	bl	8009f14 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	3308      	adds	r3, #8
 8001b14:	e00e      	b.n	8001b34 <mem_malloc+0x1a0>
         ptr = ptr_to_mem(ptr)->next) {
 8001b16:	8bfb      	ldrh	r3, [r7, #30]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff fcd3 	bl	80014c4 <ptr_to_mem>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	881b      	ldrh	r3, [r3, #0]
 8001b22:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8001b24:	8bfa      	ldrh	r2, [r7, #30]
 8001b26:	8bbb      	ldrh	r3, [r7, #28]
 8001b28:	f5c3 5320 	rsb	r3, r3, #10240	@ 0x2800
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	f4ff af58 	bcc.w	80019e2 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8001b32:	2300      	movs	r3, #0
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3720      	adds	r7, #32
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	24006504 	.word	0x24006504
 8001b40:	0800ad94 	.word	0x0800ad94
 8001b44:	24006500 	.word	0x24006500
 8001b48:	0800ada8 	.word	0x0800ada8
 8001b4c:	0800adc4 	.word	0x0800adc4
 8001b50:	0800adf4 	.word	0x0800adf4
 8001b54:	0800ae24 	.word	0x0800ae24

08001b58 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	3303      	adds	r3, #3
 8001b6e:	f023 0303 	bic.w	r3, r3, #3
 8001b72:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8001b74:	2300      	movs	r3, #0
 8001b76:	60fb      	str	r3, [r7, #12]
 8001b78:	e011      	b.n	8001b9e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	68ba      	ldr	r2, [r7, #8]
 8001b8a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	881b      	ldrh	r3, [r3, #0]
 8001b90:	461a      	mov	r2, r3
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	4413      	add	r3, r2
 8001b96:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	60fb      	str	r3, [r7, #12]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	885b      	ldrh	r3, [r3, #2]
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	dbe7      	blt.n	8001b7a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8001baa:	bf00      	nop
 8001bac:	bf00      	nop
 8001bae:	3714      	adds	r7, #20
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	80fb      	strh	r3, [r7, #6]
 8001bc2:	e009      	b.n	8001bd8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8001bc4:	88fb      	ldrh	r3, [r7, #6]
 8001bc6:	4a08      	ldr	r2, [pc, #32]	@ (8001be8 <memp_init+0x30>)
 8001bc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff ffc3 	bl	8001b58 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8001bd2:	88fb      	ldrh	r3, [r7, #6]
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	80fb      	strh	r3, [r7, #6]
 8001bd8:	88fb      	ldrh	r3, [r7, #6]
 8001bda:	2b08      	cmp	r3, #8
 8001bdc:	d9f2      	bls.n	8001bc4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8001bde:	bf00      	nop
 8001be0:	bf00      	nop
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	0800c900 	.word	0x0800c900

08001bec <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d00e      	beq.n	8001c20 <do_memp_malloc_pool+0x34>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	68fa      	ldr	r2, [r7, #12]
 8001c08:	6812      	ldr	r2, [r2, #0]
 8001c0a:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f003 0303 	and.w	r3, r3, #3
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d002      	beq.n	8001c1c <do_memp_malloc_pool+0x30>
 8001c16:	4805      	ldr	r0, [pc, #20]	@ (8001c2c <do_memp_malloc_pool+0x40>)
 8001c18:	f008 f97c 	bl	8009f14 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	e000      	b.n	8001c22 <do_memp_malloc_pool+0x36>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3710      	adds	r7, #16
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	0800ae48 	.word	0x0800ae48

08001c30 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4603      	mov	r3, r0
 8001c38:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8001c3a:	79fb      	ldrb	r3, [r7, #7]
 8001c3c:	2b08      	cmp	r3, #8
 8001c3e:	d901      	bls.n	8001c44 <memp_malloc+0x14>
 8001c40:	2300      	movs	r3, #0
 8001c42:	e008      	b.n	8001c56 <memp_malloc+0x26>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8001c44:	79fb      	ldrb	r3, [r7, #7]
 8001c46:	4a06      	ldr	r2, [pc, #24]	@ (8001c60 <memp_malloc+0x30>)
 8001c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff ffcd 	bl	8001bec <do_memp_malloc_pool>
 8001c52:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8001c54:	68fb      	ldr	r3, [r7, #12]
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3710      	adds	r7, #16
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	0800c900 	.word	0x0800c900

08001c64 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	f003 0303 	and.w	r3, r3, #3
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d002      	beq.n	8001c7e <do_memp_free_pool+0x1a>
 8001c78:	4808      	ldr	r0, [pc, #32]	@ (8001c9c <do_memp_free_pool+0x38>)
 8001c7a:	f008 f94b 	bl	8009f14 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	68fa      	ldr	r2, [r7, #12]
 8001c92:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8001c94:	bf00      	nop
 8001c96:	3710      	adds	r7, #16
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	0800ae80 	.word	0x0800ae80

08001ca0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	6039      	str	r1, [r7, #0]
 8001caa:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8001cac:	79fb      	ldrb	r3, [r7, #7]
 8001cae:	2b08      	cmp	r3, #8
 8001cb0:	d80c      	bhi.n	8001ccc <memp_free+0x2c>

  if (mem == NULL) {
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d008      	beq.n	8001cca <memp_free+0x2a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8001cb8:	79fb      	ldrb	r3, [r7, #7]
 8001cba:	4a06      	ldr	r2, [pc, #24]	@ (8001cd4 <memp_free+0x34>)
 8001cbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cc0:	6839      	ldr	r1, [r7, #0]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff ffce 	bl	8001c64 <do_memp_free_pool>
 8001cc8:	e000      	b.n	8001ccc <memp_free+0x2c>
    return;
 8001cca:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	0800c900 	.word	0x0800c900

08001cd8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8001cdc:	bf00      	nop
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
	...

08001ce8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
 8001cf4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d101      	bne.n	8001d00 <netif_add+0x18>
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	e093      	b.n	8001e28 <netif_add+0x140>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8001d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d101      	bne.n	8001d0a <netif_add+0x22>
 8001d06:	2300      	movs	r3, #0
 8001d08:	e08e      	b.n	8001e28 <netif_add+0x140>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d101      	bne.n	8001d14 <netif_add+0x2c>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8001d10:	4b47      	ldr	r3, [pc, #284]	@ (8001e30 <netif_add+0x148>)
 8001d12:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d101      	bne.n	8001d1e <netif_add+0x36>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8001d1a:	4b45      	ldr	r3, [pc, #276]	@ (8001e30 <netif_add+0x148>)
 8001d1c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d101      	bne.n	8001d28 <netif_add+0x40>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8001d24:	4b42      	ldr	r3, [pc, #264]	@ (8001e30 <netif_add+0x148>)
 8001d26:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2200      	movs	r2, #0
 8001d32:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2200      	movs	r2, #0
 8001d38:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	4a3d      	ldr	r2, [pc, #244]	@ (8001e34 <netif_add+0x14c>)
 8001d3e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2200      	movs	r2, #0
 8001d44:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2200      	movs	r2, #0
 8001d52:	61da      	str	r2, [r3, #28]
#if LWIP_IPV6 && LWIP_IPV6_MLD
  netif->mld_mac_filter = NULL;
#endif /* LWIP_IPV6 && LWIP_IPV6_MLD */

  /* remember netif specific state information data */
  netif->state = state;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	6a3a      	ldr	r2, [r7, #32]
 8001d58:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8001d5a:	4b37      	ldr	r3, [pc, #220]	@ (8001e38 <netif_add+0x150>)
 8001d5c:	781a      	ldrb	r2, [r3, #0]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001d68:	611a      	str	r2, [r3, #16]
  netif->reschedule_poll = 0;
#endif /* LWIP_NETIF_LOOPBACK_MULTITHREADING */
#endif /* ENABLE_LOOPBACK */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	68b9      	ldr	r1, [r7, #8]
 8001d70:	68f8      	ldr	r0, [r7, #12]
 8001d72:	f000 f8f7 	bl	8001f64 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8001d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d78:	68f8      	ldr	r0, [r7, #12]
 8001d7a:	4798      	blx	r3
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <netif_add+0x9e>
    return NULL;
 8001d82:	2300      	movs	r3, #0
 8001d84:	e050      	b.n	8001e28 <netif_add+0x140>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001d8c:	2bff      	cmp	r3, #255	@ 0xff
 8001d8e:	d103      	bne.n	8001d98 <netif_add+0xb0>
        netif->num = 0;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2200      	movs	r2, #0
 8001d94:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8001d9c:	4b27      	ldr	r3, [pc, #156]	@ (8001e3c <netif_add+0x154>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	617b      	str	r3, [r7, #20]
 8001da2:	e023      	b.n	8001dec <netif_add+0x104>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8001da4:	697a      	ldr	r2, [r7, #20]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d102      	bne.n	8001db2 <netif_add+0xca>
 8001dac:	4824      	ldr	r0, [pc, #144]	@ (8001e40 <netif_add+0x158>)
 8001dae:	f008 f8b1 	bl	8009f14 <iprintf>
        num_netifs++;
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	3301      	adds	r3, #1
 8001db6:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	2bff      	cmp	r3, #255	@ 0xff
 8001dbc:	dd02      	ble.n	8001dc4 <netif_add+0xdc>
 8001dbe:	4821      	ldr	r0, [pc, #132]	@ (8001e44 <netif_add+0x15c>)
 8001dc0:	f008 f8a8 	bl	8009f14 <iprintf>
        if (netif2->num == netif->num) {
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d108      	bne.n	8001de6 <netif_add+0xfe>
          netif->num++;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001dda:	3301      	adds	r3, #1
 8001ddc:	b2da      	uxtb	r2, r3
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 8001de4:	e005      	b.n	8001df2 <netif_add+0x10a>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	617b      	str	r3, [r7, #20]
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d1d8      	bne.n	8001da4 <netif_add+0xbc>
        }
      }
    } while (netif2 != NULL);
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d1c6      	bne.n	8001d86 <netif_add+0x9e>
  }
  if (netif->num == 254) {
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001dfe:	2bfe      	cmp	r3, #254	@ 0xfe
 8001e00:	d103      	bne.n	8001e0a <netif_add+0x122>
    netif_num = 0;
 8001e02:	4b0d      	ldr	r3, [pc, #52]	@ (8001e38 <netif_add+0x150>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	701a      	strb	r2, [r3, #0]
 8001e08:	e006      	b.n	8001e18 <netif_add+0x130>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001e10:	3301      	adds	r3, #1
 8001e12:	b2da      	uxtb	r2, r3
 8001e14:	4b08      	ldr	r3, [pc, #32]	@ (8001e38 <netif_add+0x150>)
 8001e16:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8001e18:	4b08      	ldr	r3, [pc, #32]	@ (8001e3c <netif_add+0x154>)
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8001e20:	4a06      	ldr	r2, [pc, #24]	@ (8001e3c <netif_add+0x154>)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8001e26:	68fb      	ldr	r3, [r7, #12]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3718      	adds	r7, #24
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	0800c964 	.word	0x0800c964
 8001e34:	08002159 	.word	0x08002159
 8001e38:	2400a2fc 	.word	0x2400a2fc
 8001e3c:	2400a2f4 	.word	0x2400a2f4
 8001e40:	0800aed8 	.word	0x0800aed8
 8001e44:	0800aeec 	.word	0x0800aeec

08001e48 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8001e52:	6839      	ldr	r1, [r7, #0]
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f002 f8b3 	bl	8003fc0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8001e5a:	6839      	ldr	r1, [r7, #0]
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f005 fcc1 	bl	80077e4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8001e62:	bf00      	nop
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
	...

08001e6c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d102      	bne.n	8001e84 <netif_do_set_ipaddr+0x18>
 8001e7e:	4819      	ldr	r0, [pc, #100]	@ (8001ee4 <netif_do_set_ipaddr+0x78>)
 8001e80:	f008 f848 	bl	8009f14 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d102      	bne.n	8001e90 <netif_do_set_ipaddr+0x24>
 8001e8a:	4816      	ldr	r0, [pc, #88]	@ (8001ee4 <netif_do_set_ipaddr+0x78>)
 8001e8c:	f008 f842 	bl	8009f14 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_eq(ipaddr, netif_ip4_addr(netif)) == 0) {
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	3304      	adds	r3, #4
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d01c      	beq.n	8001ed8 <netif_do_set_ipaddr+0x6c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	3304      	adds	r3, #4
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8001eae:	f107 0314 	add.w	r3, r7, #20
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f7ff ffc7 	bl	8001e48 <netif_do_ip_addr_changed>
#endif /* LWIP_ACD */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d002      	beq.n	8001ec6 <netif_do_set_ipaddr+0x5a>
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	e000      	b.n	8001ec8 <netif_do_set_ipaddr+0x5c>
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	68fa      	ldr	r2, [r7, #12]
 8001eca:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8001ecc:	2101      	movs	r1, #1
 8001ece:	68f8      	ldr	r0, [r7, #12]
 8001ed0:	f000 f8c0 	bl	8002054 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e000      	b.n	8001eda <netif_do_set_ipaddr+0x6e>
  }
  return 0; /* address unchanged */
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3718      	adds	r7, #24
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	0800af1c 	.word	0x0800af1c

08001ee8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_eq(netmask, netif_ip4_netmask(netif)) == 0) {
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	3308      	adds	r3, #8
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d00a      	beq.n	8001f18 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d002      	beq.n	8001f0e <netif_do_set_netmask+0x26>
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	e000      	b.n	8001f10 <netif_do_set_netmask+0x28>
 8001f0e:	2300      	movs	r3, #0
 8001f10:	68fa      	ldr	r2, [r7, #12]
 8001f12:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8001f14:	2301      	movs	r3, #1
 8001f16:	e000      	b.n	8001f1a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3714      	adds	r7, #20
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr

08001f26 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8001f26:	b480      	push	{r7}
 8001f28:	b085      	sub	sp, #20
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	60f8      	str	r0, [r7, #12]
 8001f2e:	60b9      	str	r1, [r7, #8]
 8001f30:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_eq(gw, netif_ip4_gw(netif)) == 0) {
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	330c      	adds	r3, #12
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d00a      	beq.n	8001f56 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d002      	beq.n	8001f4c <netif_do_set_gw+0x26>
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	e000      	b.n	8001f4e <netif_do_set_gw+0x28>
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	68fa      	ldr	r2, [r7, #12]
 8001f50:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8001f52:	2301      	movs	r3, #1
 8001f54:	e000      	b.n	8001f58 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8001f56:	2300      	movs	r3, #0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3714      	adds	r7, #20
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b088      	sub	sp, #32
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	60b9      	str	r1, [r7, #8]
 8001f6e:	607a      	str	r2, [r7, #4]
 8001f70:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8001f72:	2300      	movs	r3, #0
 8001f74:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8001f76:	2300      	movs	r3, #0
 8001f78:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d101      	bne.n	8001f84 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8001f80:	4b1c      	ldr	r3, [pc, #112]	@ (8001ff4 <netif_set_addr+0x90>)
 8001f82:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d101      	bne.n	8001f8e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8001f8a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ff4 <netif_set_addr+0x90>)
 8001f8c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d101      	bne.n	8001f98 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8001f94:	4b17      	ldr	r3, [pc, #92]	@ (8001ff4 <netif_set_addr+0x90>)
 8001f96:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d003      	beq.n	8001fa6 <netif_set_addr+0x42>
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d101      	bne.n	8001faa <netif_set_addr+0x46>
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e000      	b.n	8001fac <netif_set_addr+0x48>
 8001faa:	2300      	movs	r3, #0
 8001fac:	617b      	str	r3, [r7, #20]
  if (remove) {
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d006      	beq.n	8001fc2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8001fb4:	f107 0310 	add.w	r3, r7, #16
 8001fb8:	461a      	mov	r2, r3
 8001fba:	68b9      	ldr	r1, [r7, #8]
 8001fbc:	68f8      	ldr	r0, [r7, #12]
 8001fbe:	f7ff ff55 	bl	8001e6c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8001fc2:	69fa      	ldr	r2, [r7, #28]
 8001fc4:	6879      	ldr	r1, [r7, #4]
 8001fc6:	68f8      	ldr	r0, [r7, #12]
 8001fc8:	f7ff ff8e 	bl	8001ee8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	6839      	ldr	r1, [r7, #0]
 8001fd0:	68f8      	ldr	r0, [r7, #12]
 8001fd2:	f7ff ffa8 	bl	8001f26 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d106      	bne.n	8001fea <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8001fdc:	f107 0310 	add.w	r3, r7, #16
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	68b9      	ldr	r1, [r7, #8]
 8001fe4:	68f8      	ldr	r0, [r7, #12]
 8001fe6:	f7ff ff41 	bl	8001e6c <netif_do_set_ipaddr>
  }
  if (change_reason != LWIP_NSC_NONE) {
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8001fea:	bf00      	nop
 8001fec:	3720      	adds	r7, #32
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	0800c964 	.word	0x0800c964

08001ff8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8002000:	4a04      	ldr	r2, [pc, #16]	@ (8002014 <netif_set_default+0x1c>)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8002006:	bf00      	nop
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	2400a2f8 	.word	0x2400a2f8

08002018 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d013      	beq.n	800204e <netif_set_up+0x36>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800202c:	f003 0301 	and.w	r3, r3, #1
 8002030:	2b00      	cmp	r3, #0
 8002032:	d10c      	bne.n	800204e <netif_set_up+0x36>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800203a:	f043 0301 	orr.w	r3, r3, #1
 800203e:	b2da      	uxtb	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8002046:	2103      	movs	r1, #3
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f000 f803 	bl	8002054 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800204e:	3708      	adds	r7, #8
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	460b      	mov	r3, r1
 800205e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d102      	bne.n	800206c <netif_issue_reports+0x18>
 8002066:	4816      	ldr	r0, [pc, #88]	@ (80020c0 <netif_issue_reports+0x6c>)
 8002068:	f007 ff54 	bl	8009f14 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8002072:	f003 0304 	and.w	r3, r3, #4
 8002076:	2b00      	cmp	r3, #0
 8002078:	d01e      	beq.n	80020b8 <netif_issue_reports+0x64>
      !(netif->flags & NETIF_FLAG_UP)) {
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8002080:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8002084:	2b00      	cmp	r3, #0
 8002086:	d017      	beq.n	80020b8 <netif_issue_reports+0x64>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8002088:	78fb      	ldrb	r3, [r7, #3]
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	2b00      	cmp	r3, #0
 8002090:	d013      	beq.n	80020ba <netif_issue_reports+0x66>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	3304      	adds	r3, #4
 8002096:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8002098:	2b00      	cmp	r3, #0
 800209a:	d00e      	beq.n	80020ba <netif_issue_reports+0x66>
#if LWIP_ARP && !LWIP_ACD
    /* For Ethernet network interfaces:
     * we would like to send a "gratuitous ARP".
     * Only needs to be done here if ACD isn't configured.
     */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80020a2:	f003 0308 	and.w	r3, r3, #8
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d007      	beq.n	80020ba <netif_issue_reports+0x66>
      etharp_gratuitous(netif);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	3304      	adds	r3, #4
 80020ae:	4619      	mov	r1, r3
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f006 fac1 	bl	8008638 <etharp_request>
 80020b6:	e000      	b.n	80020ba <netif_issue_reports+0x66>
    return;
 80020b8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80020ba:	3708      	adds	r7, #8
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	0800af2c 	.word	0x0800af2c

080020c4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d019      	beq.n	8002106 <netif_set_down+0x42>

  if (netif->flags & NETIF_FLAG_UP) {
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80020d8:	f003 0301 	and.w	r3, r3, #1
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d012      	beq.n	8002106 <netif_set_down+0x42>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80020e6:	f023 0301 	bic.w	r3, r3, #1
 80020ea:	b2da      	uxtb	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80020f8:	f003 0308 	and.w	r3, r3, #8
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d002      	beq.n	8002106 <netif_set_down+0x42>
      etharp_cleanup_netif(netif);
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f005 fe77 	bl	8007df4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d01b      	beq.n	8002152 <netif_set_link_up+0x46>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8002120:	f003 0304 	and.w	r3, r3, #4
 8002124:	2b00      	cmp	r3, #0
 8002126:	d114      	bne.n	8002152 <netif_set_link_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800212e:	f043 0304 	orr.w	r3, r3, #4
 8002132:	b2da      	uxtb	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed_link_up(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800213a:	2103      	movs	r1, #3
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f7ff ff89 	bl	8002054 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	69db      	ldr	r3, [r3, #28]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d003      	beq.n	8002152 <netif_set_link_up+0x46>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	69db      	ldr	r3, [r3, #28]
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8002152:	3708      	adds	r7, #8
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}

08002158 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8002164:	f06f 030b 	mvn.w	r3, #11
}
 8002168:	4618      	mov	r0, r3
 800216a:	3714      	adds	r7, #20
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	4603      	mov	r3, r0
 800217c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800217e:	79fb      	ldrb	r3, [r7, #7]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d013      	beq.n	80021ac <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8002184:	4b0d      	ldr	r3, [pc, #52]	@ (80021bc <netif_get_by_index+0x48>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	60fb      	str	r3, [r7, #12]
 800218a:	e00c      	b.n	80021a6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002192:	3301      	adds	r3, #1
 8002194:	b2db      	uxtb	r3, r3
 8002196:	79fa      	ldrb	r2, [r7, #7]
 8002198:	429a      	cmp	r2, r3
 800219a:	d101      	bne.n	80021a0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	e006      	b.n	80021ae <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	60fb      	str	r3, [r7, #12]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d1ef      	bne.n	800218c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3714      	adds	r7, #20
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	2400a2f4 	.word	0x2400a2f4

080021c0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	4611      	mov	r1, r2
 80021cc:	461a      	mov	r2, r3
 80021ce:	460b      	mov	r3, r1
 80021d0:	80fb      	strh	r3, [r7, #6]
 80021d2:	4613      	mov	r3, r2
 80021d4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2200      	movs	r2, #0
 80021da:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	68ba      	ldr	r2, [r7, #8]
 80021e0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	88fa      	ldrh	r2, [r7, #6]
 80021e6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	88ba      	ldrh	r2, [r7, #4]
 80021ec:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80021ee:	8b3b      	ldrh	r3, [r7, #24]
 80021f0:	b2da      	uxtb	r2, r3
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	7f3a      	ldrb	r2, [r7, #28]
 80021fa:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2201      	movs	r2, #1
 8002200:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2200      	movs	r2, #0
 8002206:	73da      	strb	r2, [r3, #15]
}
 8002208:	bf00      	nop
 800220a:	3714      	adds	r7, #20
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b08c      	sub	sp, #48	@ 0x30
 8002218:	af02      	add	r7, sp, #8
 800221a:	4603      	mov	r3, r0
 800221c:	71fb      	strb	r3, [r7, #7]
 800221e:	460b      	mov	r3, r1
 8002220:	80bb      	strh	r3, [r7, #4]
 8002222:	4613      	mov	r3, r2
 8002224:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8002226:	79fb      	ldrb	r3, [r7, #7]
 8002228:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800222a:	887b      	ldrh	r3, [r7, #2]
 800222c:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8002230:	d077      	beq.n	8002322 <pbuf_alloc+0x10e>
 8002232:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8002236:	f300 80bc 	bgt.w	80023b2 <pbuf_alloc+0x19e>
 800223a:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800223e:	d010      	beq.n	8002262 <pbuf_alloc+0x4e>
 8002240:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8002244:	f300 80b5 	bgt.w	80023b2 <pbuf_alloc+0x19e>
 8002248:	2b01      	cmp	r3, #1
 800224a:	d002      	beq.n	8002252 <pbuf_alloc+0x3e>
 800224c:	2b41      	cmp	r3, #65	@ 0x41
 800224e:	f040 80b0 	bne.w	80023b2 <pbuf_alloc+0x19e>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8002252:	887a      	ldrh	r2, [r7, #2]
 8002254:	88bb      	ldrh	r3, [r7, #4]
 8002256:	4619      	mov	r1, r3
 8002258:	2000      	movs	r0, #0
 800225a:	f000 f8bd 	bl	80023d8 <pbuf_alloc_reference>
 800225e:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8002260:	e0ad      	b.n	80023be <pbuf_alloc+0x1aa>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8002262:	2300      	movs	r3, #0
 8002264:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8002266:	2300      	movs	r3, #0
 8002268:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800226a:	88bb      	ldrh	r3, [r7, #4]
 800226c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800226e:	2008      	movs	r0, #8
 8002270:	f7ff fcde 	bl	8001c30 <memp_malloc>
 8002274:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d107      	bne.n	800228c <pbuf_alloc+0x78>
          PBUF_POOL_IS_EMPTY();
          /* free chain so far allocated */
          if (p) {
 800227c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800227e:	2b00      	cmp	r3, #0
 8002280:	d002      	beq.n	8002288 <pbuf_alloc+0x74>
            pbuf_free(p);
 8002282:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002284:	f000 fa6c 	bl	8002760 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8002288:	2300      	movs	r3, #0
 800228a:	e099      	b.n	80023c0 <pbuf_alloc+0x1ac>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800228c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800228e:	3303      	adds	r3, #3
 8002290:	b29b      	uxth	r3, r3
 8002292:	f023 0303 	bic.w	r3, r3, #3
 8002296:	b29a      	uxth	r2, r3
 8002298:	f240 53f4 	movw	r3, #1524	@ 0x5f4
 800229c:	1a9b      	subs	r3, r3, r2
 800229e:	b29b      	uxth	r3, r3
 80022a0:	8b7a      	ldrh	r2, [r7, #26]
 80022a2:	4293      	cmp	r3, r2
 80022a4:	bf28      	it	cs
 80022a6:	4613      	movcs	r3, r2
 80022a8:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80022aa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80022ac:	3310      	adds	r3, #16
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	4413      	add	r3, r2
 80022b2:	3303      	adds	r3, #3
 80022b4:	f023 0303 	bic.w	r3, r3, #3
 80022b8:	4618      	mov	r0, r3
 80022ba:	89f9      	ldrh	r1, [r7, #14]
 80022bc:	8b7a      	ldrh	r2, [r7, #26]
 80022be:	2300      	movs	r3, #0
 80022c0:	9301      	str	r3, [sp, #4]
 80022c2:	887b      	ldrh	r3, [r7, #2]
 80022c4:	9300      	str	r3, [sp, #0]
 80022c6:	460b      	mov	r3, r1
 80022c8:	4601      	mov	r1, r0
 80022ca:	6938      	ldr	r0, [r7, #16]
 80022cc:	f7ff ff78 	bl	80021c0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f003 0303 	and.w	r3, r3, #3
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d002      	beq.n	80022e2 <pbuf_alloc+0xce>
 80022dc:	483a      	ldr	r0, [pc, #232]	@ (80023c8 <pbuf_alloc+0x1b4>)
 80022de:	f007 fe19 	bl	8009f14 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80022e2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80022e4:	3303      	adds	r3, #3
 80022e6:	f023 0303 	bic.w	r3, r3, #3
 80022ea:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d102      	bne.n	80022f8 <pbuf_alloc+0xe4>
 80022f2:	4836      	ldr	r0, [pc, #216]	@ (80023cc <pbuf_alloc+0x1b8>)
 80022f4:	f007 fe0e 	bl	8009f14 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80022f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d102      	bne.n	8002304 <pbuf_alloc+0xf0>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	627b      	str	r3, [r7, #36]	@ 0x24
 8002302:	e002      	b.n	800230a <pbuf_alloc+0xf6>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800230e:	8b7a      	ldrh	r2, [r7, #26]
 8002310:	89fb      	ldrh	r3, [r7, #14]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8002316:	2300      	movs	r3, #0
 8002318:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800231a:	8b7b      	ldrh	r3, [r7, #26]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d1a6      	bne.n	800226e <pbuf_alloc+0x5a>
      break;
 8002320:	e04d      	b.n	80023be <pbuf_alloc+0x1aa>
    }
    case PBUF_RAM: {
      mem_size_t payload_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8002322:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002324:	3303      	adds	r3, #3
 8002326:	b29b      	uxth	r3, r3
 8002328:	f023 0303 	bic.w	r3, r3, #3
 800232c:	b29a      	uxth	r2, r3
 800232e:	88bb      	ldrh	r3, [r7, #4]
 8002330:	3303      	adds	r3, #3
 8002332:	b29b      	uxth	r3, r3
 8002334:	f023 0303 	bic.w	r3, r3, #3
 8002338:	b29b      	uxth	r3, r3
 800233a:	4413      	add	r3, r2
 800233c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800233e:	8b3b      	ldrh	r3, [r7, #24]
 8002340:	3310      	adds	r3, #16
 8002342:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8002344:	8b3a      	ldrh	r2, [r7, #24]
 8002346:	88bb      	ldrh	r3, [r7, #4]
 8002348:	3303      	adds	r3, #3
 800234a:	f023 0303 	bic.w	r3, r3, #3
 800234e:	429a      	cmp	r2, r3
 8002350:	d306      	bcc.n	8002360 <pbuf_alloc+0x14c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8002352:	8afa      	ldrh	r2, [r7, #22]
 8002354:	88bb      	ldrh	r3, [r7, #4]
 8002356:	3303      	adds	r3, #3
 8002358:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800235c:	429a      	cmp	r2, r3
 800235e:	d201      	bcs.n	8002364 <pbuf_alloc+0x150>
        return NULL;
 8002360:	2300      	movs	r3, #0
 8002362:	e02d      	b.n	80023c0 <pbuf_alloc+0x1ac>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8002364:	8afb      	ldrh	r3, [r7, #22]
 8002366:	4618      	mov	r0, r3
 8002368:	f7ff fb14 	bl	8001994 <mem_malloc>
 800236c:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800236e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002370:	2b00      	cmp	r3, #0
 8002372:	d101      	bne.n	8002378 <pbuf_alloc+0x164>
        return NULL;
 8002374:	2300      	movs	r3, #0
 8002376:	e023      	b.n	80023c0 <pbuf_alloc+0x1ac>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8002378:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800237a:	3310      	adds	r3, #16
 800237c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800237e:	4413      	add	r3, r2
 8002380:	3303      	adds	r3, #3
 8002382:	f023 0303 	bic.w	r3, r3, #3
 8002386:	4618      	mov	r0, r3
 8002388:	88b9      	ldrh	r1, [r7, #4]
 800238a:	88ba      	ldrh	r2, [r7, #4]
 800238c:	2300      	movs	r3, #0
 800238e:	9301      	str	r3, [sp, #4]
 8002390:	887b      	ldrh	r3, [r7, #2]
 8002392:	9300      	str	r3, [sp, #0]
 8002394:	460b      	mov	r3, r1
 8002396:	4601      	mov	r1, r0
 8002398:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800239a:	f7ff ff11 	bl	80021c0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800239e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f003 0303 	and.w	r3, r3, #3
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d008      	beq.n	80023bc <pbuf_alloc+0x1a8>
 80023aa:	4809      	ldr	r0, [pc, #36]	@ (80023d0 <pbuf_alloc+0x1bc>)
 80023ac:	f007 fdb2 	bl	8009f14 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80023b0:	e004      	b.n	80023bc <pbuf_alloc+0x1a8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80023b2:	4808      	ldr	r0, [pc, #32]	@ (80023d4 <pbuf_alloc+0x1c0>)
 80023b4:	f007 fdae 	bl	8009f14 <iprintf>
      return NULL;
 80023b8:	2300      	movs	r3, #0
 80023ba:	e001      	b.n	80023c0 <pbuf_alloc+0x1ac>
      break;
 80023bc:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80023be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3728      	adds	r7, #40	@ 0x28
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	0800af50 	.word	0x0800af50
 80023cc:	0800af80 	.word	0x0800af80
 80023d0:	0800afb4 	.word	0x0800afb4
 80023d4:	0800afe0 	.word	0x0800afe0

080023d8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af02      	add	r7, sp, #8
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	460b      	mov	r3, r1
 80023e2:	807b      	strh	r3, [r7, #2]
 80023e4:	4613      	mov	r3, r2
 80023e6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80023e8:	883b      	ldrh	r3, [r7, #0]
 80023ea:	2b41      	cmp	r3, #65	@ 0x41
 80023ec:	d005      	beq.n	80023fa <pbuf_alloc_reference+0x22>
 80023ee:	883b      	ldrh	r3, [r7, #0]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d002      	beq.n	80023fa <pbuf_alloc_reference+0x22>
 80023f4:	480d      	ldr	r0, [pc, #52]	@ (800242c <pbuf_alloc_reference+0x54>)
 80023f6:	f007 fd8d 	bl	8009f14 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80023fa:	2007      	movs	r0, #7
 80023fc:	f7ff fc18 	bl	8001c30 <memp_malloc>
 8002400:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d101      	bne.n	800240c <pbuf_alloc_reference+0x34>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8002408:	2300      	movs	r3, #0
 800240a:	e00b      	b.n	8002424 <pbuf_alloc_reference+0x4c>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800240c:	8879      	ldrh	r1, [r7, #2]
 800240e:	887a      	ldrh	r2, [r7, #2]
 8002410:	2300      	movs	r3, #0
 8002412:	9301      	str	r3, [sp, #4]
 8002414:	883b      	ldrh	r3, [r7, #0]
 8002416:	9300      	str	r3, [sp, #0]
 8002418:	460b      	mov	r3, r1
 800241a:	6879      	ldr	r1, [r7, #4]
 800241c:	68f8      	ldr	r0, [r7, #12]
 800241e:	f7ff fecf 	bl	80021c0 <pbuf_init_alloced_pbuf>
  return p;
 8002422:	68fb      	ldr	r3, [r7, #12]
}
 8002424:	4618      	mov	r0, r3
 8002426:	3710      	adds	r7, #16
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	0800affc 	.word	0x0800affc

08002430 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b088      	sub	sp, #32
 8002434:	af02      	add	r7, sp, #8
 8002436:	607b      	str	r3, [r7, #4]
 8002438:	4603      	mov	r3, r0
 800243a:	73fb      	strb	r3, [r7, #15]
 800243c:	460b      	mov	r3, r1
 800243e:	81bb      	strh	r3, [r7, #12]
 8002440:	4613      	mov	r3, r2
 8002442:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8002444:	7bfb      	ldrb	r3, [r7, #15]
 8002446:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8002448:	8a7b      	ldrh	r3, [r7, #18]
 800244a:	3303      	adds	r3, #3
 800244c:	f023 0203 	bic.w	r2, r3, #3
 8002450:	89bb      	ldrh	r3, [r7, #12]
 8002452:	441a      	add	r2, r3
 8002454:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002456:	429a      	cmp	r2, r3
 8002458:	d901      	bls.n	800245e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800245a:	2300      	movs	r3, #0
 800245c:	e018      	b.n	8002490 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800245e:	6a3b      	ldr	r3, [r7, #32]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d007      	beq.n	8002474 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8002464:	8a7b      	ldrh	r3, [r7, #18]
 8002466:	3303      	adds	r3, #3
 8002468:	f023 0303 	bic.w	r3, r3, #3
 800246c:	6a3a      	ldr	r2, [r7, #32]
 800246e:	4413      	add	r3, r2
 8002470:	617b      	str	r3, [r7, #20]
 8002472:	e001      	b.n	8002478 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8002474:	2300      	movs	r3, #0
 8002476:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	89b9      	ldrh	r1, [r7, #12]
 800247c:	89ba      	ldrh	r2, [r7, #12]
 800247e:	2302      	movs	r3, #2
 8002480:	9301      	str	r3, [sp, #4]
 8002482:	897b      	ldrh	r3, [r7, #10]
 8002484:	9300      	str	r3, [sp, #0]
 8002486:	460b      	mov	r3, r1
 8002488:	6979      	ldr	r1, [r7, #20]
 800248a:	f7ff fe99 	bl	80021c0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800248e:	687b      	ldr	r3, [r7, #4]
}
 8002490:	4618      	mov	r0, r3
 8002492:	3718      	adds	r7, #24
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	460b      	mov	r3, r1
 80024a2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d102      	bne.n	80024b0 <pbuf_realloc+0x18>
 80024aa:	4837      	ldr	r0, [pc, #220]	@ (8002588 <pbuf_realloc+0xf0>)
 80024ac:	f007 fd32 	bl	8009f14 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	891b      	ldrh	r3, [r3, #8]
 80024b4:	887a      	ldrh	r2, [r7, #2]
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d262      	bcs.n	8002580 <pbuf_realloc+0xe8>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	891a      	ldrh	r2, [r3, #8]
 80024be:	887b      	ldrh	r3, [r7, #2]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	823b      	strh	r3, [r7, #16]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80024c4:	887b      	ldrh	r3, [r7, #2]
 80024c6:	827b      	strh	r3, [r7, #18]
  q = p;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80024cc:	e014      	b.n	80024f8 <pbuf_realloc+0x60>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	895b      	ldrh	r3, [r3, #10]
 80024d2:	8a7a      	ldrh	r2, [r7, #18]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	891a      	ldrh	r2, [r3, #8]
 80024dc:	8a3b      	ldrh	r3, [r7, #16]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d102      	bne.n	80024f8 <pbuf_realloc+0x60>
 80024f2:	4826      	ldr	r0, [pc, #152]	@ (800258c <pbuf_realloc+0xf4>)
 80024f4:	f007 fd0e 	bl	8009f14 <iprintf>
  while (rem_len > q->len) {
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	895b      	ldrh	r3, [r3, #10]
 80024fc:	8a7a      	ldrh	r2, [r7, #18]
 80024fe:	429a      	cmp	r2, r3
 8002500:	d8e5      	bhi.n	80024ce <pbuf_realloc+0x36>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	7b1b      	ldrb	r3, [r3, #12]
 8002506:	f003 030f 	and.w	r3, r3, #15
 800250a:	2b00      	cmp	r3, #0
 800250c:	d124      	bne.n	8002558 <pbuf_realloc+0xc0>
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	895b      	ldrh	r3, [r3, #10]
 8002512:	8a7a      	ldrh	r2, [r7, #18]
 8002514:	429a      	cmp	r2, r3
 8002516:	d01f      	beq.n	8002558 <pbuf_realloc+0xc0>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	7b5b      	ldrb	r3, [r3, #13]
 800251c:	f003 0302 	and.w	r3, r3, #2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d119      	bne.n	8002558 <pbuf_realloc+0xc0>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    struct pbuf *r = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	685a      	ldr	r2, [r3, #4]
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	b29a      	uxth	r2, r3
 800252e:	8a7b      	ldrh	r3, [r7, #18]
 8002530:	4413      	add	r3, r2
 8002532:	b29b      	uxth	r3, r3
 8002534:	4619      	mov	r1, r3
 8002536:	6978      	ldr	r0, [r7, #20]
 8002538:	f7ff f944 	bl	80017c4 <mem_trim>
 800253c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned r == NULL", r != NULL);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d102      	bne.n	800254a <pbuf_realloc+0xb2>
 8002544:	4812      	ldr	r0, [pc, #72]	@ (8002590 <pbuf_realloc+0xf8>)
 8002546:	f007 fce5 	bl	8009f14 <iprintf>
    /* help to detect faulty overridden implementation of mem_trim */
    LWIP_ASSERT("mem_trim returned r != q", r == q);
 800254a:	68fa      	ldr	r2, [r7, #12]
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	429a      	cmp	r2, r3
 8002550:	d002      	beq.n	8002558 <pbuf_realloc+0xc0>
 8002552:	4810      	ldr	r0, [pc, #64]	@ (8002594 <pbuf_realloc+0xfc>)
 8002554:	f007 fcde 	bl	8009f14 <iprintf>
    LWIP_UNUSED_ARG(r);
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	8a7a      	ldrh	r2, [r7, #18]
 800255c:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	895a      	ldrh	r2, [r3, #10]
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d004      	beq.n	8002578 <pbuf_realloc+0xe0>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4618      	mov	r0, r3
 8002574:	f000 f8f4 	bl	8002760 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	2200      	movs	r2, #0
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	e000      	b.n	8002582 <pbuf_realloc+0xea>
    return;
 8002580:	bf00      	nop

}
 8002582:	3718      	adds	r7, #24
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	0800b010 	.word	0x0800b010
 800258c:	0800b028 	.word	0x0800b028
 8002590:	0800b040 	.word	0x0800b040
 8002594:	0800b05c 	.word	0x0800b05c

08002598 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	4613      	mov	r3, r2
 80025a4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d102      	bne.n	80025b2 <pbuf_add_header_impl+0x1a>
 80025ac:	4829      	ldr	r0, [pc, #164]	@ (8002654 <pbuf_add_header_impl+0xbc>)
 80025ae:	f007 fcb1 	bl	8009f14 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d003      	beq.n	80025c0 <pbuf_add_header_impl+0x28>
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025be:	d301      	bcc.n	80025c4 <pbuf_add_header_impl+0x2c>
    return 1;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e043      	b.n	800264c <pbuf_add_header_impl+0xb4>
  }
  if (header_size_increment == 0) {
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d101      	bne.n	80025ce <pbuf_add_header_impl+0x36>
    return 0;
 80025ca:	2300      	movs	r3, #0
 80025cc:	e03e      	b.n	800264c <pbuf_add_header_impl+0xb4>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	891a      	ldrh	r2, [r3, #8]
 80025d6:	8a7b      	ldrh	r3, [r7, #18]
 80025d8:	4413      	add	r3, r2
 80025da:	b29b      	uxth	r3, r3
 80025dc:	8a7a      	ldrh	r2, [r7, #18]
 80025de:	429a      	cmp	r2, r3
 80025e0:	d901      	bls.n	80025e6 <pbuf_add_header_impl+0x4e>
    return 1;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e032      	b.n	800264c <pbuf_add_header_impl+0xb4>
  }

  type_internal = p->type_internal;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	7b1b      	ldrb	r3, [r3, #12]
 80025ea:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80025ec:	8a3b      	ldrh	r3, [r7, #16]
 80025ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d00c      	beq.n	8002610 <pbuf_add_header_impl+0x78>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	685a      	ldr	r2, [r3, #4]
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	425b      	negs	r3, r3
 80025fe:	4413      	add	r3, r2
 8002600:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	3310      	adds	r3, #16
 8002606:	697a      	ldr	r2, [r7, #20]
 8002608:	429a      	cmp	r2, r3
 800260a:	d20d      	bcs.n	8002628 <pbuf_add_header_impl+0x90>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800260c:	2301      	movs	r3, #1
 800260e:	e01d      	b.n	800264c <pbuf_add_header_impl+0xb4>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8002610:	79fb      	ldrb	r3, [r7, #7]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d006      	beq.n	8002624 <pbuf_add_header_impl+0x8c>
      payload = (u8_t *)p->payload - header_size_increment;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	685a      	ldr	r2, [r3, #4]
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	425b      	negs	r3, r3
 800261e:	4413      	add	r3, r2
 8002620:	617b      	str	r3, [r7, #20]
 8002622:	e001      	b.n	8002628 <pbuf_add_header_impl+0x90>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8002624:	2301      	movs	r3, #1
 8002626:	e011      	b.n	800264c <pbuf_add_header_impl+0xb4>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	697a      	ldr	r2, [r7, #20]
 800262c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	895a      	ldrh	r2, [r3, #10]
 8002632:	8a7b      	ldrh	r3, [r7, #18]
 8002634:	4413      	add	r3, r2
 8002636:	b29a      	uxth	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	891a      	ldrh	r2, [r3, #8]
 8002640:	8a7b      	ldrh	r3, [r7, #18]
 8002642:	4413      	add	r3, r2
 8002644:	b29a      	uxth	r2, r3
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	811a      	strh	r2, [r3, #8]


  return 0;
 800264a:	2300      	movs	r3, #0
}
 800264c:	4618      	mov	r0, r3
 800264e:	3718      	adds	r7, #24
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	0800b078 	.word	0x0800b078

08002658 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8002662:	2200      	movs	r2, #0
 8002664:	6839      	ldr	r1, [r7, #0]
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f7ff ff96 	bl	8002598 <pbuf_add_header_impl>
 800266c:	4603      	mov	r3, r0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
	...

08002678 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d102      	bne.n	800268e <pbuf_remove_header+0x16>
 8002688:	481a      	ldr	r0, [pc, #104]	@ (80026f4 <pbuf_remove_header+0x7c>)
 800268a:	f007 fc43 	bl	8009f14 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d003      	beq.n	800269c <pbuf_remove_header+0x24>
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800269a:	d301      	bcc.n	80026a0 <pbuf_remove_header+0x28>
    return 1;
 800269c:	2301      	movs	r3, #1
 800269e:	e025      	b.n	80026ec <pbuf_remove_header+0x74>
  }
  if (header_size_decrement == 0) {
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d101      	bne.n	80026aa <pbuf_remove_header+0x32>
    return 0;
 80026a6:	2300      	movs	r3, #0
 80026a8:	e020      	b.n	80026ec <pbuf_remove_header+0x74>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	895b      	ldrh	r3, [r3, #10]
 80026b2:	89fa      	ldrh	r2, [r7, #14]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d901      	bls.n	80026bc <pbuf_remove_header+0x44>
 80026b8:	2301      	movs	r3, #1
 80026ba:	e017      	b.n	80026ec <pbuf_remove_header+0x74>

  /* remember current payload pointer */
  payload = p->payload;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685a      	ldr	r2, [r3, #4]
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	441a      	add	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	895a      	ldrh	r2, [r3, #10]
 80026d2:	89fb      	ldrh	r3, [r7, #14]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	891a      	ldrh	r2, [r3, #8]
 80026e0:	89fb      	ldrh	r3, [r7, #14]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	b29a      	uxth	r2, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3710      	adds	r7, #16
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	0800b078 	.word	0x0800b078

080026f8 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	460b      	mov	r3, r1
 8002702:	807b      	strh	r3, [r7, #2]
 8002704:	4613      	mov	r3, r2
 8002706:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8002708:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800270c:	2b00      	cmp	r3, #0
 800270e:	da08      	bge.n	8002722 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8002710:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002714:	425b      	negs	r3, r3
 8002716:	4619      	mov	r1, r3
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f7ff ffad 	bl	8002678 <pbuf_remove_header>
 800271e:	4603      	mov	r3, r0
 8002720:	e007      	b.n	8002732 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8002722:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002726:	787a      	ldrb	r2, [r7, #1]
 8002728:	4619      	mov	r1, r3
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f7ff ff34 	bl	8002598 <pbuf_add_header_impl>
 8002730:	4603      	mov	r3, r0
  }
}
 8002732:	4618      	mov	r0, r3
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b082      	sub	sp, #8
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
 8002742:	460b      	mov	r3, r1
 8002744:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8002746:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800274a:	2201      	movs	r2, #1
 800274c:	4619      	mov	r1, r3
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f7ff ffd2 	bl	80026f8 <pbuf_header_impl>
 8002754:	4603      	mov	r3, r0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
	...

08002760 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b086      	sub	sp, #24
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d107      	bne.n	800277e <pbuf_free+0x1e>
    LWIP_ASSERT("p != NULL", p != NULL);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d102      	bne.n	800277a <pbuf_free+0x1a>
 8002774:	4830      	ldr	r0, [pc, #192]	@ (8002838 <pbuf_free+0xd8>)
 8002776:	f007 fbcd 	bl	8009f14 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800277a:	2300      	movs	r3, #0
 800277c:	e057      	b.n	800282e <pbuf_free+0xce>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800277e:	2300      	movs	r3, #0
 8002780:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8002782:	e050      	b.n	8002826 <pbuf_free+0xc6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	7b9b      	ldrb	r3, [r3, #14]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d102      	bne.n	8002792 <pbuf_free+0x32>
 800278c:	482b      	ldr	r0, [pc, #172]	@ (800283c <pbuf_free+0xdc>)
 800278e:	f007 fbc1 	bl	8009f14 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	7b9b      	ldrb	r3, [r3, #14]
 8002796:	3b01      	subs	r3, #1
 8002798:	b2da      	uxtb	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	739a      	strb	r2, [r3, #14]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	7b9b      	ldrb	r3, [r3, #14]
 80027a2:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80027a4:	7dbb      	ldrb	r3, [r7, #22]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d13b      	bne.n	8002822 <pbuf_free+0xc2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	7b1b      	ldrb	r3, [r3, #12]
 80027b4:	f003 030f 	and.w	r3, r3, #15
 80027b8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	7b5b      	ldrb	r3, [r3, #13]
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d00d      	beq.n	80027e2 <pbuf_free+0x82>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d102      	bne.n	80027d8 <pbuf_free+0x78>
 80027d2:	481b      	ldr	r0, [pc, #108]	@ (8002840 <pbuf_free+0xe0>)
 80027d4:	f007 fb9e 	bl	8009f14 <iprintf>
        pc->custom_free_function(p);
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	4798      	blx	r3
 80027e0:	e019      	b.n	8002816 <pbuf_free+0xb6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80027e2:	7bfb      	ldrb	r3, [r7, #15]
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d104      	bne.n	80027f2 <pbuf_free+0x92>
          memp_free(MEMP_PBUF_POOL, p);
 80027e8:	6879      	ldr	r1, [r7, #4]
 80027ea:	2008      	movs	r0, #8
 80027ec:	f7ff fa58 	bl	8001ca0 <memp_free>
 80027f0:	e011      	b.n	8002816 <pbuf_free+0xb6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80027f2:	7bfb      	ldrb	r3, [r7, #15]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d104      	bne.n	8002802 <pbuf_free+0xa2>
          memp_free(MEMP_PBUF, p);
 80027f8:	6879      	ldr	r1, [r7, #4]
 80027fa:	2007      	movs	r0, #7
 80027fc:	f7ff fa50 	bl	8001ca0 <memp_free>
 8002800:	e009      	b.n	8002816 <pbuf_free+0xb6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8002802:	7bfb      	ldrb	r3, [r7, #15]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d103      	bne.n	8002810 <pbuf_free+0xb0>
          mem_free(p);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f7fe ff85 	bl	8001718 <mem_free>
 800280e:	e002      	b.n	8002816 <pbuf_free+0xb6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8002810:	480c      	ldr	r0, [pc, #48]	@ (8002844 <pbuf_free+0xe4>)
 8002812:	f007 fb7f 	bl	8009f14 <iprintf>
        }
      }
      count++;
 8002816:	7dfb      	ldrb	r3, [r7, #23]
 8002818:	3301      	adds	r3, #1
 800281a:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	607b      	str	r3, [r7, #4]
 8002820:	e001      	b.n	8002826 <pbuf_free+0xc6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8002822:	2300      	movs	r3, #0
 8002824:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1ab      	bne.n	8002784 <pbuf_free+0x24>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800282c:	7dfb      	ldrb	r3, [r7, #23]
}
 800282e:	4618      	mov	r0, r3
 8002830:	3718      	adds	r7, #24
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	0800b078 	.word	0x0800b078
 800283c:	0800b084 	.word	0x0800b084
 8002840:	0800b09c 	.word	0x0800b09c
 8002844:	0800b0c0 	.word	0x0800b0c0

08002848 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8002848:	b480      	push	{r7}
 800284a:	b085      	sub	sp, #20
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8002850:	2300      	movs	r3, #0
 8002852:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8002854:	e005      	b.n	8002862 <pbuf_clen+0x1a>
    ++len;
 8002856:	89fb      	ldrh	r3, [r7, #14]
 8002858:	3301      	adds	r3, #1
 800285a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d1f6      	bne.n	8002856 <pbuf_clen+0xe>
  }
  return len;
 8002868:	89fb      	ldrh	r3, [r7, #14]
}
 800286a:	4618      	mov	r0, r3
 800286c:	3714      	adds	r7, #20
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
	...

08002878 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d00c      	beq.n	80028a0 <pbuf_ref+0x28>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	7b9b      	ldrb	r3, [r3, #14]
 800288a:	3301      	adds	r3, #1
 800288c:	b2da      	uxtb	r2, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	7b9b      	ldrb	r3, [r3, #14]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d102      	bne.n	80028a0 <pbuf_ref+0x28>
 800289a:	4803      	ldr	r0, [pc, #12]	@ (80028a8 <pbuf_ref+0x30>)
 800289c:	f007 fb3a 	bl	8009f14 <iprintf>
  }
}
 80028a0:	bf00      	nop
 80028a2:	3708      	adds	r7, #8
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	0800b0d4 	.word	0x0800b0d4

080028ac <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d02f      	beq.n	800291c <pbuf_cat+0x70>
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d02c      	beq.n	800291c <pbuf_cat+0x70>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	60fb      	str	r3, [r7, #12]
 80028c6:	e00a      	b.n	80028de <pbuf_cat+0x32>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	891a      	ldrh	r2, [r3, #8]
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	891b      	ldrh	r3, [r3, #8]
 80028d0:	4413      	add	r3, r2
 80028d2:	b29a      	uxth	r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	60fb      	str	r3, [r7, #12]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1f0      	bne.n	80028c8 <pbuf_cat+0x1c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	891a      	ldrh	r2, [r3, #8]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	895b      	ldrh	r3, [r3, #10]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d002      	beq.n	80028f8 <pbuf_cat+0x4c>
 80028f2:	480c      	ldr	r0, [pc, #48]	@ (8002924 <pbuf_cat+0x78>)
 80028f4:	f007 fb0e 	bl	8009f14 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d002      	beq.n	8002906 <pbuf_cat+0x5a>
 8002900:	4809      	ldr	r0, [pc, #36]	@ (8002928 <pbuf_cat+0x7c>)
 8002902:	f007 fb07 	bl	8009f14 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	891a      	ldrh	r2, [r3, #8]
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	891b      	ldrh	r3, [r3, #8]
 800290e:	4413      	add	r3, r2
 8002910:	b29a      	uxth	r2, r3
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	683a      	ldr	r2, [r7, #0]
 800291a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	0800b0e8 	.word	0x0800b0e8
 8002928:	0800b118 	.word	0x0800b118

0800292c <pbuf_copy>:
 *                 enough to hold p_from
 *         ERR_VAL if any of the pbufs are part of a queue
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  LWIP_ERROR("pbuf_copy: invalid source", p_from != NULL, return ERR_ARG;);
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d102      	bne.n	8002942 <pbuf_copy+0x16>
 800293c:	f06f 030f 	mvn.w	r3, #15
 8002940:	e007      	b.n	8002952 <pbuf_copy+0x26>
  return pbuf_copy_partial_pbuf(p_to, p_from, p_from->tot_len, 0);
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	891a      	ldrh	r2, [r3, #8]
 8002946:	2300      	movs	r3, #0
 8002948:	6839      	ldr	r1, [r7, #0]
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f000 f806 	bl	800295c <pbuf_copy_partial_pbuf>
 8002950:	4603      	mov	r3, r0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
	...

0800295c <pbuf_copy_partial_pbuf>:
 *                 or p_to is not big enough to hold copy_len at offset
 *         ERR_VAL if any of the pbufs are part of a queue
 */
err_t
pbuf_copy_partial_pbuf(struct pbuf *p_to, const struct pbuf *p_from, u16_t copy_len, u16_t offset)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b088      	sub	sp, #32
 8002960:	af00      	add	r7, sp, #0
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	60b9      	str	r1, [r7, #8]
 8002966:	4611      	mov	r1, r2
 8002968:	461a      	mov	r2, r3
 800296a:	460b      	mov	r3, r1
 800296c:	80fb      	strh	r3, [r7, #6]
 800296e:	4613      	mov	r3, r2
 8002970:	80bb      	strh	r3, [r7, #4]
  size_t offset_to = offset, offset_from = 0, len;
 8002972:	88bb      	ldrh	r3, [r7, #4]
 8002974:	61fb      	str	r3, [r7, #28]
 8002976:	2300      	movs	r3, #0
 8002978:	61bb      	str	r3, [r7, #24]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy_partial_pbuf(%p, %p, %"U16_F", %"U16_F")\n",
              (const void *)p_to, (const void *)p_from, copy_len, offset));

  /* is the copy_len in range? */
  LWIP_ERROR("pbuf_copy_partial_pbuf: copy_len bigger than source", ((p_from != NULL) &&
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d004      	beq.n	800298a <pbuf_copy_partial_pbuf+0x2e>
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	891b      	ldrh	r3, [r3, #8]
 8002984:	88fa      	ldrh	r2, [r7, #6]
 8002986:	429a      	cmp	r2, r3
 8002988:	d902      	bls.n	8002990 <pbuf_copy_partial_pbuf+0x34>
 800298a:	f06f 030f 	mvn.w	r3, #15
 800298e:	e0a4      	b.n	8002ada <pbuf_copy_partial_pbuf+0x17e>
             (p_from->tot_len >= copy_len)), return ERR_ARG;);
  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy_partial_pbuf: target not big enough", ((p_to != NULL) &&
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d007      	beq.n	80029a6 <pbuf_copy_partial_pbuf+0x4a>
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	891b      	ldrh	r3, [r3, #8]
 800299a:	4619      	mov	r1, r3
 800299c:	88ba      	ldrh	r2, [r7, #4]
 800299e:	88fb      	ldrh	r3, [r7, #6]
 80029a0:	4413      	add	r3, r2
 80029a2:	4299      	cmp	r1, r3
 80029a4:	da02      	bge.n	80029ac <pbuf_copy_partial_pbuf+0x50>
 80029a6:	f06f 030f 	mvn.w	r3, #15
 80029aa:	e096      	b.n	8002ada <pbuf_copy_partial_pbuf+0x17e>
             (p_to->tot_len >= (offset + copy_len))), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	895b      	ldrh	r3, [r3, #10]
 80029b0:	461a      	mov	r2, r3
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	1ad2      	subs	r2, r2, r3
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	895b      	ldrh	r3, [r3, #10]
 80029ba:	4619      	mov	r1, r3
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	1acb      	subs	r3, r1, r3
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d306      	bcc.n	80029d2 <pbuf_copy_partial_pbuf+0x76>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	895b      	ldrh	r3, [r3, #10]
 80029c8:	461a      	mov	r2, r3
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	617b      	str	r3, [r7, #20]
 80029d0:	e005      	b.n	80029de <pbuf_copy_partial_pbuf+0x82>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	895b      	ldrh	r3, [r3, #10]
 80029d6:	461a      	mov	r2, r3
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	617b      	str	r3, [r7, #20]
    }
    len = LWIP_MIN(copy_len, len);
 80029de:	88fb      	ldrh	r3, [r7, #6]
 80029e0:	697a      	ldr	r2, [r7, #20]
 80029e2:	4293      	cmp	r3, r2
 80029e4:	bf28      	it	cs
 80029e6:	4613      	movcs	r3, r2
 80029e8:	617b      	str	r3, [r7, #20]
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	685a      	ldr	r2, [r3, #4]
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	18d0      	adds	r0, r2, r3
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	685a      	ldr	r2, [r3, #4]
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	4413      	add	r3, r2
 80029fa:	697a      	ldr	r2, [r7, #20]
 80029fc:	4619      	mov	r1, r3
 80029fe:	f007 fb6a 	bl	800a0d6 <memcpy>
    offset_to += len;
 8002a02:	69fa      	ldr	r2, [r7, #28]
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	4413      	add	r3, r2
 8002a08:	61fb      	str	r3, [r7, #28]
    offset_from += len;
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	4413      	add	r3, r2
 8002a10:	61bb      	str	r3, [r7, #24]
    copy_len = (u16_t)(copy_len - len);
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	88fa      	ldrh	r2, [r7, #6]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	80fb      	strh	r3, [r7, #6]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	895b      	ldrh	r3, [r3, #10]
 8002a20:	461a      	mov	r2, r3
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d902      	bls.n	8002a2e <pbuf_copy_partial_pbuf+0xd2>
 8002a28:	482e      	ldr	r0, [pc, #184]	@ (8002ae4 <pbuf_copy_partial_pbuf+0x188>)
 8002a2a:	f007 fa73 	bl	8009f14 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	895b      	ldrh	r3, [r3, #10]
 8002a32:	461a      	mov	r2, r3
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d902      	bls.n	8002a40 <pbuf_copy_partial_pbuf+0xe4>
 8002a3a:	482b      	ldr	r0, [pc, #172]	@ (8002ae8 <pbuf_copy_partial_pbuf+0x18c>)
 8002a3c:	f007 fa6a 	bl	8009f14 <iprintf>
    if (offset_from >= p_from->len) {
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	895b      	ldrh	r3, [r3, #10]
 8002a44:	461a      	mov	r2, r3
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d30d      	bcc.n	8002a68 <pbuf_copy_partial_pbuf+0x10c>
      /* on to next p_from (if any) */
      offset_from = 0;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	61bb      	str	r3, [r7, #24]
      p_from = p_from->next;
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	60bb      	str	r3, [r7, #8]
      LWIP_ERROR("p_from != NULL", (p_from != NULL) || (copy_len == 0), return ERR_ARG;);
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d105      	bne.n	8002a68 <pbuf_copy_partial_pbuf+0x10c>
 8002a5c:	88fb      	ldrh	r3, [r7, #6]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d002      	beq.n	8002a68 <pbuf_copy_partial_pbuf+0x10c>
 8002a62:	f06f 030f 	mvn.w	r3, #15
 8002a66:	e038      	b.n	8002ada <pbuf_copy_partial_pbuf+0x17e>
    }
    if (offset_to == p_to->len) {
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	895b      	ldrh	r3, [r3, #10]
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d10d      	bne.n	8002a90 <pbuf_copy_partial_pbuf+0x134>
      /* on to next p_to (if any) */
      offset_to = 0;
 8002a74:	2300      	movs	r3, #0
 8002a76:	61fb      	str	r3, [r7, #28]
      p_to = p_to->next;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	60fb      	str	r3, [r7, #12]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (copy_len == 0), return ERR_ARG;);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d105      	bne.n	8002a90 <pbuf_copy_partial_pbuf+0x134>
 8002a84:	88fb      	ldrh	r3, [r7, #6]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d002      	beq.n	8002a90 <pbuf_copy_partial_pbuf+0x134>
 8002a8a:	f06f 030f 	mvn.w	r3, #15
 8002a8e:	e024      	b.n	8002ada <pbuf_copy_partial_pbuf+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00c      	beq.n	8002ab0 <pbuf_copy_partial_pbuf+0x154>
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	895a      	ldrh	r2, [r3, #10]
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	891b      	ldrh	r3, [r3, #8]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d106      	bne.n	8002ab0 <pbuf_copy_partial_pbuf+0x154>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy_partial_pbuf() does not allow packet queues!",
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d002      	beq.n	8002ab0 <pbuf_copy_partial_pbuf+0x154>
 8002aaa:	f06f 0305 	mvn.w	r3, #5
 8002aae:	e014      	b.n	8002ada <pbuf_copy_partial_pbuf+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d00c      	beq.n	8002ad0 <pbuf_copy_partial_pbuf+0x174>
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	895a      	ldrh	r2, [r3, #10]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	891b      	ldrh	r3, [r3, #8]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d106      	bne.n	8002ad0 <pbuf_copy_partial_pbuf+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy_partial_pbuf() does not allow packet queues!",
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d002      	beq.n	8002ad0 <pbuf_copy_partial_pbuf+0x174>
 8002aca:	f06f 0305 	mvn.w	r3, #5
 8002ace:	e004      	b.n	8002ada <pbuf_copy_partial_pbuf+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (copy_len);
 8002ad0:	88fb      	ldrh	r3, [r7, #6]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	f47f af6a 	bne.w	80029ac <pbuf_copy_partial_pbuf+0x50>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy_partial_pbuf: copy complete.\n"));
  return ERR_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3720      	adds	r7, #32
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	0800b164 	.word	0x0800b164
 8002ae8:	0800b17c 	.word	0x0800b17c

08002aec <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b088      	sub	sp, #32
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	4611      	mov	r1, r2
 8002af8:	461a      	mov	r2, r3
 8002afa:	460b      	mov	r3, r1
 8002afc:	80fb      	strh	r3, [r7, #6]
 8002afe:	4613      	mov	r3, r2
 8002b00:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8002b02:	2300      	movs	r3, #0
 8002b04:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8002b06:	2300      	movs	r3, #0
 8002b08:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d101      	bne.n	8002b14 <pbuf_copy_partial+0x28>
 8002b10:	2300      	movs	r3, #0
 8002b12:	e043      	b.n	8002b9c <pbuf_copy_partial+0xb0>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d101      	bne.n	8002b1e <pbuf_copy_partial+0x32>
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	e03e      	b.n	8002b9c <pbuf_copy_partial+0xb0>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	61fb      	str	r3, [r7, #28]
 8002b22:	e034      	b.n	8002b8e <pbuf_copy_partial+0xa2>
    if ((offset != 0) && (offset >= p->len)) {
 8002b24:	88bb      	ldrh	r3, [r7, #4]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d00a      	beq.n	8002b40 <pbuf_copy_partial+0x54>
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	895b      	ldrh	r3, [r3, #10]
 8002b2e:	88ba      	ldrh	r2, [r7, #4]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d305      	bcc.n	8002b40 <pbuf_copy_partial+0x54>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	895b      	ldrh	r3, [r3, #10]
 8002b38:	88ba      	ldrh	r2, [r7, #4]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	80bb      	strh	r3, [r7, #4]
 8002b3e:	e023      	b.n	8002b88 <pbuf_copy_partial+0x9c>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	895a      	ldrh	r2, [r3, #10]
 8002b44:	88bb      	ldrh	r3, [r7, #4]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8002b4a:	8b3a      	ldrh	r2, [r7, #24]
 8002b4c:	88fb      	ldrh	r3, [r7, #6]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d901      	bls.n	8002b56 <pbuf_copy_partial+0x6a>
        buf_copy_len = len;
 8002b52:	88fb      	ldrh	r3, [r7, #6]
 8002b54:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8002b56:	8b7b      	ldrh	r3, [r7, #26]
 8002b58:	68ba      	ldr	r2, [r7, #8]
 8002b5a:	18d0      	adds	r0, r2, r3
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	685a      	ldr	r2, [r3, #4]
 8002b60:	88bb      	ldrh	r3, [r7, #4]
 8002b62:	4413      	add	r3, r2
 8002b64:	8b3a      	ldrh	r2, [r7, #24]
 8002b66:	4619      	mov	r1, r3
 8002b68:	f007 fab5 	bl	800a0d6 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8002b6c:	8afa      	ldrh	r2, [r7, #22]
 8002b6e:	8b3b      	ldrh	r3, [r7, #24]
 8002b70:	4413      	add	r3, r2
 8002b72:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8002b74:	8b7a      	ldrh	r2, [r7, #26]
 8002b76:	8b3b      	ldrh	r3, [r7, #24]
 8002b78:	4413      	add	r3, r2
 8002b7a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8002b7c:	88fa      	ldrh	r2, [r7, #6]
 8002b7e:	8b3b      	ldrh	r3, [r7, #24]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8002b84:	2300      	movs	r3, #0
 8002b86:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	61fb      	str	r3, [r7, #28]
 8002b8e:	88fb      	ldrh	r3, [r7, #6]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d002      	beq.n	8002b9a <pbuf_copy_partial+0xae>
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1c4      	bne.n	8002b24 <pbuf_copy_partial+0x38>
    }
  }
  return copied_total;
 8002b9a:	8afb      	ldrh	r3, [r7, #22]
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3720      	adds	r7, #32
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	4603      	mov	r3, r0
 8002bac:	603a      	str	r2, [r7, #0]
 8002bae:	71fb      	strb	r3, [r7, #7]
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	8919      	ldrh	r1, [r3, #8]
 8002bb8:	88ba      	ldrh	r2, [r7, #4]
 8002bba:	79fb      	ldrb	r3, [r7, #7]
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7ff fb29 	bl	8002214 <pbuf_alloc>
 8002bc2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d101      	bne.n	8002bce <pbuf_clone+0x2a>
    return NULL;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	e00d      	b.n	8002bea <pbuf_clone+0x46>
  }
  err = pbuf_copy(q, p);
 8002bce:	6839      	ldr	r1, [r7, #0]
 8002bd0:	68f8      	ldr	r0, [r7, #12]
 8002bd2:	f7ff feab 	bl	800292c <pbuf_copy>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8002bda:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d002      	beq.n	8002be8 <pbuf_clone+0x44>
 8002be2:	4804      	ldr	r0, [pc, #16]	@ (8002bf4 <pbuf_clone+0x50>)
 8002be4:	f007 f996 	bl	8009f14 <iprintf>
  return q;
 8002be8:	68fb      	ldr	r3, [r7, #12]
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3710      	adds	r7, #16
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	0800b1e0 	.word	0x0800b1e0

08002bf8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RAND */
}
 8002bfc:	bf00      	nop
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
	...

08002c08 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	7d1b      	ldrb	r3, [r3, #20]
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d102      	bne.n	8002c1e <tcp_free+0x16>
 8002c18:	4805      	ldr	r0, [pc, #20]	@ (8002c30 <tcp_free+0x28>)
 8002c1a:	f007 f97b 	bl	8009f14 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8002c1e:	6879      	ldr	r1, [r7, #4]
 8002c20:	2001      	movs	r0, #1
 8002c22:	f7ff f83d 	bl	8001ca0 <memp_free>
}
 8002c26:	bf00      	nop
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	0800b26c 	.word	0x0800b26c

08002c34 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	7d1b      	ldrb	r3, [r3, #20]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d102      	bne.n	8002c4a <tcp_free_listen+0x16>
 8002c44:	4805      	ldr	r0, [pc, #20]	@ (8002c5c <tcp_free_listen+0x28>)
 8002c46:	f007 f965 	bl	8009f14 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8002c4a:	6879      	ldr	r1, [r7, #4]
 8002c4c:	2002      	movs	r0, #2
 8002c4e:	f7ff f827 	bl	8001ca0 <memp_free>
}
 8002c52:	bf00      	nop
 8002c54:	3708      	adds	r7, #8
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	0800b280 	.word	0x0800b280

08002c60 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8002c64:	f000 fdf0 	bl	8003848 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8002c68:	4b07      	ldr	r3, [pc, #28]	@ (8002c88 <tcp_tmr+0x28>)
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	b2da      	uxtb	r2, r3
 8002c70:	4b05      	ldr	r3, [pc, #20]	@ (8002c88 <tcp_tmr+0x28>)
 8002c72:	701a      	strb	r2, [r3, #0]
 8002c74:	4b04      	ldr	r3, [pc, #16]	@ (8002c88 <tcp_tmr+0x28>)
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	f003 0301 	and.w	r3, r3, #1
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d001      	beq.n	8002c84 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8002c80:	f000 faea 	bl	8003258 <tcp_slowtmr>
  }
}
 8002c84:	bf00      	nop
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	2400a315 	.word	0x2400a315

08002c8c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d102      	bne.n	8002ca2 <tcp_remove_listener+0x16>
 8002c9c:	480c      	ldr	r0, [pc, #48]	@ (8002cd0 <tcp_remove_listener+0x44>)
 8002c9e:	f007 f939 	bl	8009f14 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	60fb      	str	r3, [r7, #12]
 8002ca6:	e00a      	b.n	8002cbe <tcp_remove_listener+0x32>
    if (pcb->listener == lpcb) {
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002cac:	683a      	ldr	r2, [r7, #0]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d102      	bne.n	8002cb8 <tcp_remove_listener+0x2c>
      pcb->listener = NULL;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	679a      	str	r2, [r3, #120]	@ 0x78
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	60fb      	str	r3, [r7, #12]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d1f1      	bne.n	8002ca8 <tcp_remove_listener+0x1c>
    }
  }
}
 8002cc4:	bf00      	nop
 8002cc6:	bf00      	nop
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	0800b29c 	.word	0x0800b29c

08002cd4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d102      	bne.n	8002ce8 <tcp_listen_closed+0x14>
 8002ce2:	4810      	ldr	r0, [pc, #64]	@ (8002d24 <tcp_listen_closed+0x50>)
 8002ce4:	f007 f916 	bl	8009f14 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	7d1b      	ldrb	r3, [r3, #20]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d002      	beq.n	8002cf6 <tcp_listen_closed+0x22>
 8002cf0:	480d      	ldr	r0, [pc, #52]	@ (8002d28 <tcp_listen_closed+0x54>)
 8002cf2:	f007 f90f 	bl	8009f14 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	60fb      	str	r3, [r7, #12]
 8002cfa:	e00b      	b.n	8002d14 <tcp_listen_closed+0x40>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8002cfc:	4a0b      	ldr	r2, [pc, #44]	@ (8002d2c <tcp_listen_closed+0x58>)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	6879      	ldr	r1, [r7, #4]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7ff ffbf 	bl	8002c8c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	3301      	adds	r3, #1
 8002d12:	60fb      	str	r3, [r7, #12]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2b03      	cmp	r3, #3
 8002d18:	d9f0      	bls.n	8002cfc <tcp_listen_closed+0x28>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8002d1a:	bf00      	nop
 8002d1c:	bf00      	nop
 8002d1e:	3710      	adds	r7, #16
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	0800b2c4 	.word	0x0800b2c4
 8002d28:	0800b2d0 	.word	0x0800b2d0
 8002d2c:	0800c93c 	.word	0x0800c93c

08002d30 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8002d30:	b5b0      	push	{r4, r5, r7, lr}
 8002d32:	b088      	sub	sp, #32
 8002d34:	af04      	add	r7, sp, #16
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	460b      	mov	r3, r1
 8002d3a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d102      	bne.n	8002d48 <tcp_close_shutdown+0x18>
 8002d42:	485f      	ldr	r0, [pc, #380]	@ (8002ec0 <tcp_close_shutdown+0x190>)
 8002d44:	f007 f8e6 	bl	8009f14 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8002d48:	78fb      	ldrb	r3, [r7, #3]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d063      	beq.n	8002e16 <tcp_close_shutdown+0xe6>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	7d1b      	ldrb	r3, [r3, #20]
 8002d52:	2b04      	cmp	r3, #4
 8002d54:	d003      	beq.n	8002d5e <tcp_close_shutdown+0x2e>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	7d1b      	ldrb	r3, [r3, #20]
 8002d5a:	2b07      	cmp	r3, #7
 8002d5c:	d15b      	bne.n	8002e16 <tcp_close_shutdown+0xe6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d105      	bne.n	8002d72 <tcp_close_shutdown+0x42>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d6a:	f640 3268 	movw	r2, #2920	@ 0xb68
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d051      	beq.n	8002e16 <tcp_close_shutdown+0xe6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	8b5b      	ldrh	r3, [r3, #26]
 8002d76:	f003 0310 	and.w	r3, r3, #16
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d102      	bne.n	8002d84 <tcp_close_shutdown+0x54>
 8002d7e:	4851      	ldr	r0, [pc, #324]	@ (8002ec4 <tcp_close_shutdown+0x194>)
 8002d80:	f007 f8c8 	bl	8009f14 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8002d8c:	687d      	ldr	r5, [r7, #4]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	3304      	adds	r3, #4
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	8ad2      	ldrh	r2, [r2, #22]
 8002d96:	6879      	ldr	r1, [r7, #4]
 8002d98:	8b09      	ldrh	r1, [r1, #24]
 8002d9a:	9102      	str	r1, [sp, #8]
 8002d9c:	9201      	str	r2, [sp, #4]
 8002d9e:	9300      	str	r3, [sp, #0]
 8002da0:	462b      	mov	r3, r5
 8002da2:	4622      	mov	r2, r4
 8002da4:	4601      	mov	r1, r0
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f004 f8c8 	bl	8006f3c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f000 ffdf 	bl	8003d70 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8002db2:	4b45      	ldr	r3, [pc, #276]	@ (8002ec8 <tcp_close_shutdown+0x198>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d105      	bne.n	8002dc8 <tcp_close_shutdown+0x98>
 8002dbc:	4b42      	ldr	r3, [pc, #264]	@ (8002ec8 <tcp_close_shutdown+0x198>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	4a41      	ldr	r2, [pc, #260]	@ (8002ec8 <tcp_close_shutdown+0x198>)
 8002dc4:	6013      	str	r3, [r2, #0]
 8002dc6:	e013      	b.n	8002df0 <tcp_close_shutdown+0xc0>
 8002dc8:	4b3f      	ldr	r3, [pc, #252]	@ (8002ec8 <tcp_close_shutdown+0x198>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	60fb      	str	r3, [r7, #12]
 8002dce:	e00c      	b.n	8002dea <tcp_close_shutdown+0xba>
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d104      	bne.n	8002de4 <tcp_close_shutdown+0xb4>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	68da      	ldr	r2, [r3, #12]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	60da      	str	r2, [r3, #12]
 8002de2:	e005      	b.n	8002df0 <tcp_close_shutdown+0xc0>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	60fb      	str	r3, [r7, #12]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d1ef      	bne.n	8002dd0 <tcp_close_shutdown+0xa0>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	60da      	str	r2, [r3, #12]
 8002df6:	4b35      	ldr	r3, [pc, #212]	@ (8002ecc <tcp_close_shutdown+0x19c>)
 8002df8:	2201      	movs	r2, #1
 8002dfa:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8002dfc:	4b34      	ldr	r3, [pc, #208]	@ (8002ed0 <tcp_close_shutdown+0x1a0>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d102      	bne.n	8002e0c <tcp_close_shutdown+0xdc>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8002e06:	f002 ffd1 	bl	8005dac <tcp_trigger_input_pcb_close>
 8002e0a:	e002      	b.n	8002e12 <tcp_close_shutdown+0xe2>
      } else {
        tcp_free(pcb);
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f7ff fefb 	bl	8002c08 <tcp_free>
      }
      return ERR_OK;
 8002e12:	2300      	movs	r3, #0
 8002e14:	e050      	b.n	8002eb8 <tcp_close_shutdown+0x188>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	7d1b      	ldrb	r3, [r3, #20]
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d03b      	beq.n	8002e96 <tcp_close_shutdown+0x166>
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	dc44      	bgt.n	8002eac <tcp_close_shutdown+0x17c>
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d002      	beq.n	8002e2c <tcp_close_shutdown+0xfc>
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d02a      	beq.n	8002e80 <tcp_close_shutdown+0x150>
 8002e2a:	e03f      	b.n	8002eac <tcp_close_shutdown+0x17c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	8adb      	ldrh	r3, [r3, #22]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d021      	beq.n	8002e78 <tcp_close_shutdown+0x148>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8002e34:	4b27      	ldr	r3, [pc, #156]	@ (8002ed4 <tcp_close_shutdown+0x1a4>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d105      	bne.n	8002e4a <tcp_close_shutdown+0x11a>
 8002e3e:	4b25      	ldr	r3, [pc, #148]	@ (8002ed4 <tcp_close_shutdown+0x1a4>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	4a23      	ldr	r2, [pc, #140]	@ (8002ed4 <tcp_close_shutdown+0x1a4>)
 8002e46:	6013      	str	r3, [r2, #0]
 8002e48:	e013      	b.n	8002e72 <tcp_close_shutdown+0x142>
 8002e4a:	4b22      	ldr	r3, [pc, #136]	@ (8002ed4 <tcp_close_shutdown+0x1a4>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	60bb      	str	r3, [r7, #8]
 8002e50:	e00c      	b.n	8002e6c <tcp_close_shutdown+0x13c>
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d104      	bne.n	8002e66 <tcp_close_shutdown+0x136>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	68da      	ldr	r2, [r3, #12]
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	60da      	str	r2, [r3, #12]
 8002e64:	e005      	b.n	8002e72 <tcp_close_shutdown+0x142>
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	60bb      	str	r3, [r7, #8]
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d1ef      	bne.n	8002e52 <tcp_close_shutdown+0x122>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f7ff fec5 	bl	8002c08 <tcp_free>
      break;
 8002e7e:	e01a      	b.n	8002eb6 <tcp_close_shutdown+0x186>
    case LISTEN:
      tcp_listen_closed(pcb);
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f7ff ff27 	bl	8002cd4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8002e86:	6879      	ldr	r1, [r7, #4]
 8002e88:	4813      	ldr	r0, [pc, #76]	@ (8002ed8 <tcp_close_shutdown+0x1a8>)
 8002e8a:	f000 ffad 	bl	8003de8 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f7ff fed0 	bl	8002c34 <tcp_free_listen>
      break;
 8002e94:	e00f      	b.n	8002eb6 <tcp_close_shutdown+0x186>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8002e96:	6879      	ldr	r1, [r7, #4]
 8002e98:	480b      	ldr	r0, [pc, #44]	@ (8002ec8 <tcp_close_shutdown+0x198>)
 8002e9a:	f000 ffa5 	bl	8003de8 <tcp_pcb_remove>
 8002e9e:	4b0b      	ldr	r3, [pc, #44]	@ (8002ecc <tcp_close_shutdown+0x19c>)
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f7ff feaf 	bl	8002c08 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8002eaa:	e004      	b.n	8002eb6 <tcp_close_shutdown+0x186>
    default:
      return tcp_close_shutdown_fin(pcb);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f000 f815 	bl	8002edc <tcp_close_shutdown_fin>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	e000      	b.n	8002eb8 <tcp_close_shutdown+0x188>
  }
  return ERR_OK;
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3710      	adds	r7, #16
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bdb0      	pop	{r4, r5, r7, pc}
 8002ec0:	0800b2e8 	.word	0x0800b2e8
 8002ec4:	0800b308 	.word	0x0800b308
 8002ec8:	2400a30c 	.word	0x2400a30c
 8002ecc:	2400a314 	.word	0x2400a314
 8002ed0:	2400a34c 	.word	0x2400a34c
 8002ed4:	2400a304 	.word	0x2400a304
 8002ed8:	2400a308 	.word	0x2400a308

08002edc <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d102      	bne.n	8002ef0 <tcp_close_shutdown_fin+0x14>
 8002eea:	482c      	ldr	r0, [pc, #176]	@ (8002f9c <tcp_close_shutdown_fin+0xc0>)
 8002eec:	f007 f812 	bl	8009f14 <iprintf>

  switch (pcb->state) {
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	7d1b      	ldrb	r3, [r3, #20]
 8002ef4:	2b07      	cmp	r3, #7
 8002ef6:	d020      	beq.n	8002f3a <tcp_close_shutdown_fin+0x5e>
 8002ef8:	2b07      	cmp	r3, #7
 8002efa:	dc2b      	bgt.n	8002f54 <tcp_close_shutdown_fin+0x78>
 8002efc:	2b03      	cmp	r3, #3
 8002efe:	d002      	beq.n	8002f06 <tcp_close_shutdown_fin+0x2a>
 8002f00:	2b04      	cmp	r3, #4
 8002f02:	d00d      	beq.n	8002f20 <tcp_close_shutdown_fin+0x44>
 8002f04:	e026      	b.n	8002f54 <tcp_close_shutdown_fin+0x78>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f003 f93e 	bl	8006188 <tcp_send_fin>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8002f10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d11f      	bne.n	8002f58 <tcp_close_shutdown_fin+0x7c>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2205      	movs	r2, #5
 8002f1c:	751a      	strb	r2, [r3, #20]
      }
      break;
 8002f1e:	e01b      	b.n	8002f58 <tcp_close_shutdown_fin+0x7c>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f003 f931 	bl	8006188 <tcp_send_fin>
 8002f26:	4603      	mov	r3, r0
 8002f28:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8002f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d114      	bne.n	8002f5c <tcp_close_shutdown_fin+0x80>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2205      	movs	r2, #5
 8002f36:	751a      	strb	r2, [r3, #20]
      }
      break;
 8002f38:	e010      	b.n	8002f5c <tcp_close_shutdown_fin+0x80>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f003 f924 	bl	8006188 <tcp_send_fin>
 8002f40:	4603      	mov	r3, r0
 8002f42:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8002f44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d109      	bne.n	8002f60 <tcp_close_shutdown_fin+0x84>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2209      	movs	r2, #9
 8002f50:	751a      	strb	r2, [r3, #20]
      }
      break;
 8002f52:	e005      	b.n	8002f60 <tcp_close_shutdown_fin+0x84>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8002f54:	2300      	movs	r3, #0
 8002f56:	e01c      	b.n	8002f92 <tcp_close_shutdown_fin+0xb6>
      break;
 8002f58:	bf00      	nop
 8002f5a:	e002      	b.n	8002f62 <tcp_close_shutdown_fin+0x86>
      break;
 8002f5c:	bf00      	nop
 8002f5e:	e000      	b.n	8002f62 <tcp_close_shutdown_fin+0x86>
      break;
 8002f60:	bf00      	nop
  }

  if (err == ERR_OK) {
 8002f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d103      	bne.n	8002f72 <tcp_close_shutdown_fin+0x96>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f003 fa26 	bl	80063bc <tcp_output>
 8002f70:	e00d      	b.n	8002f8e <tcp_close_shutdown_fin+0xb2>
  } else if (err == ERR_MEM) {
 8002f72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f76:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f7a:	d108      	bne.n	8002f8e <tcp_close_shutdown_fin+0xb2>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	8b5b      	ldrh	r3, [r3, #26]
 8002f80:	f043 0308 	orr.w	r3, r3, #8
 8002f84:	b29a      	uxth	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	e001      	b.n	8002f92 <tcp_close_shutdown_fin+0xb6>
  }
  return err;
 8002f8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3710      	adds	r7, #16
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	0800b2c4 	.word	0x0800b2c4

08002fa0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d102      	bne.n	8002fb4 <tcp_close+0x14>
 8002fae:	f06f 030f 	mvn.w	r3, #15
 8002fb2:	e00f      	b.n	8002fd4 <tcp_close+0x34>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	7d1b      	ldrb	r3, [r3, #20]
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d006      	beq.n	8002fca <tcp_close+0x2a>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	8b5b      	ldrh	r3, [r3, #26]
 8002fc0:	f043 0310 	orr.w	r3, r3, #16
 8002fc4:	b29a      	uxth	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8002fca:	2101      	movs	r1, #1
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f7ff feaf 	bl	8002d30 <tcp_close_shutdown>
 8002fd2:	4603      	mov	r3, r0
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3708      	adds	r7, #8
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b08e      	sub	sp, #56	@ 0x38
 8002fe0:	af04      	add	r7, sp, #16
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	f000 808d 	beq.w	8003108 <tcp_abandon+0x12c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	7d1b      	ldrb	r3, [r3, #20]
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d102      	bne.n	8002ffc <tcp_abandon+0x20>
 8002ff6:	4846      	ldr	r0, [pc, #280]	@ (8003110 <tcp_abandon+0x134>)
 8002ff8:	f006 ff8c 	bl	8009f14 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	7d1b      	ldrb	r3, [r3, #20]
 8003000:	2b0a      	cmp	r3, #10
 8003002:	d107      	bne.n	8003014 <tcp_abandon+0x38>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8003004:	6879      	ldr	r1, [r7, #4]
 8003006:	4843      	ldr	r0, [pc, #268]	@ (8003114 <tcp_abandon+0x138>)
 8003008:	f000 feee 	bl	8003de8 <tcp_pcb_remove>
    tcp_free(pcb);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f7ff fdfb 	bl	8002c08 <tcp_free>
 8003012:	e079      	b.n	8003108 <tcp_abandon+0x12c>
  } else {
    int send_rst = 0;
 8003014:	2300      	movs	r3, #0
 8003016:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8003018:	2300      	movs	r3, #0
 800301a:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003020:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003026:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800302e:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	691b      	ldr	r3, [r3, #16]
 8003034:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	7d1b      	ldrb	r3, [r3, #20]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d126      	bne.n	800308c <tcp_abandon+0xb0>
      if (pcb->local_port != 0) {
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	8adb      	ldrh	r3, [r3, #22]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d02e      	beq.n	80030a4 <tcp_abandon+0xc8>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8003046:	4b34      	ldr	r3, [pc, #208]	@ (8003118 <tcp_abandon+0x13c>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	429a      	cmp	r2, r3
 800304e:	d105      	bne.n	800305c <tcp_abandon+0x80>
 8003050:	4b31      	ldr	r3, [pc, #196]	@ (8003118 <tcp_abandon+0x13c>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	4a30      	ldr	r2, [pc, #192]	@ (8003118 <tcp_abandon+0x13c>)
 8003058:	6013      	str	r3, [r2, #0]
 800305a:	e013      	b.n	8003084 <tcp_abandon+0xa8>
 800305c:	4b2e      	ldr	r3, [pc, #184]	@ (8003118 <tcp_abandon+0x13c>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	61fb      	str	r3, [r7, #28]
 8003062:	e00c      	b.n	800307e <tcp_abandon+0xa2>
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	429a      	cmp	r2, r3
 800306c:	d104      	bne.n	8003078 <tcp_abandon+0x9c>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	68da      	ldr	r2, [r3, #12]
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	60da      	str	r2, [r3, #12]
 8003076:	e005      	b.n	8003084 <tcp_abandon+0xa8>
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	61fb      	str	r3, [r7, #28]
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d1ef      	bne.n	8003064 <tcp_abandon+0x88>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	60da      	str	r2, [r3, #12]
 800308a:	e00b      	b.n	80030a4 <tcp_abandon+0xc8>
      }
    } else {
      send_rst = reset;
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	8adb      	ldrh	r3, [r3, #22]
 8003094:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8003096:	6879      	ldr	r1, [r7, #4]
 8003098:	4820      	ldr	r0, [pc, #128]	@ (800311c <tcp_abandon+0x140>)
 800309a:	f000 fea5 	bl	8003de8 <tcp_pcb_remove>
 800309e:	4b20      	ldr	r3, [pc, #128]	@ (8003120 <tcp_abandon+0x144>)
 80030a0:	2201      	movs	r2, #1
 80030a2:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d004      	beq.n	80030b6 <tcp_abandon+0xda>
      tcp_segs_free(pcb->unacked);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030b0:	4618      	mov	r0, r3
 80030b2:	f000 fc9d 	bl	80039f0 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d004      	beq.n	80030c8 <tcp_abandon+0xec>
      tcp_segs_free(pcb->unsent);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030c2:	4618      	mov	r0, r3
 80030c4:	f000 fc94 	bl	80039f0 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
      tcp_segs_free(pcb->ooseq);
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80030c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d00e      	beq.n	80030ec <tcp_abandon+0x110>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80030ce:	6879      	ldr	r1, [r7, #4]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	3304      	adds	r3, #4
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	8b12      	ldrh	r2, [r2, #24]
 80030d8:	9202      	str	r2, [sp, #8]
 80030da:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80030dc:	9201      	str	r2, [sp, #4]
 80030de:	9300      	str	r3, [sp, #0]
 80030e0:	460b      	mov	r3, r1
 80030e2:	697a      	ldr	r2, [r7, #20]
 80030e4:	69b9      	ldr	r1, [r7, #24]
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f003 ff28 	bl	8006f3c <tcp_rst>
    }
    last_state = pcb->state;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	7d1b      	ldrb	r3, [r3, #20]
 80030f0:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f7ff fd88 	bl	8002c08 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d004      	beq.n	8003108 <tcp_abandon+0x12c>
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	f06f 010c 	mvn.w	r1, #12
 8003104:	68f8      	ldr	r0, [r7, #12]
 8003106:	4798      	blx	r3
  }
}
 8003108:	3728      	adds	r7, #40	@ 0x28
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	0800b324 	.word	0x0800b324
 8003114:	2400a310 	.word	0x2400a310
 8003118:	2400a304 	.word	0x2400a304
 800311c:	2400a30c 	.word	0x2400a30c
 8003120:	2400a314 	.word	0x2400a314

08003124 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800312c:	2101      	movs	r1, #1
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f7ff ff54 	bl	8002fdc <tcp_abandon>
}
 8003134:	bf00      	nop
 8003136:	3708      	adds	r7, #8
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d102      	bne.n	8003150 <tcp_update_rcv_ann_wnd+0x14>
 800314a:	4821      	ldr	r0, [pc, #132]	@ (80031d0 <tcp_update_rcv_ann_wnd+0x94>)
 800314c:	f006 fee2 	bl	8009f14 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8003158:	4413      	add	r3, r2
 800315a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8003164:	f240 51b4 	movw	r1, #1460	@ 0x5b4
 8003168:	428a      	cmp	r2, r1
 800316a:	bf28      	it	cs
 800316c:	460a      	movcs	r2, r1
 800316e:	b292      	uxth	r2, r2
 8003170:	4413      	add	r3, r2
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	db08      	blt.n	800318c <tcp_update_rcv_ann_wnd+0x50>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003186:	68fa      	ldr	r2, [r7, #12]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	e01c      	b.n	80031c6 <tcp_update_rcv_ann_wnd+0x8a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	da03      	bge.n	80031a2 <tcp_update_rcv_ann_wnd+0x66>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80031a0:	e010      	b.n	80031c4 <tcp_update_rcv_ann_wnd+0x88>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031b4:	d302      	bcc.n	80031bc <tcp_update_rcv_ann_wnd+0x80>
 80031b6:	4807      	ldr	r0, [pc, #28]	@ (80031d4 <tcp_update_rcv_ann_wnd+0x98>)
 80031b8:	f006 feac 	bl	8009f14 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	b29a      	uxth	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 80031c4:	2300      	movs	r3, #0
  }
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3710      	adds	r7, #16
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	0800b378 	.word	0x0800b378
 80031d4:	0800b39c 	.word	0x0800b39c

080031d8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	460b      	mov	r3, r1
 80031e2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d030      	beq.n	800324c <tcp_recved+0x74>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	7d1b      	ldrb	r3, [r3, #20]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d102      	bne.n	80031f8 <tcp_recved+0x20>
 80031f2:	4818      	ldr	r0, [pc, #96]	@ (8003254 <tcp_recved+0x7c>)
 80031f4:	f006 fe8e 	bl	8009f14 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80031fc:	887b      	ldrh	r3, [r7, #2]
 80031fe:	4413      	add	r3, r2
 8003200:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8003202:	89fb      	ldrh	r3, [r7, #14]
 8003204:	f640 3268 	movw	r2, #2920	@ 0xb68
 8003208:	4293      	cmp	r3, r2
 800320a:	d804      	bhi.n	8003216 <tcp_recved+0x3e>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003210:	89fa      	ldrh	r2, [r7, #14]
 8003212:	429a      	cmp	r2, r3
 8003214:	d204      	bcs.n	8003220 <tcp_recved+0x48>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f640 3268 	movw	r2, #2920	@ 0xb68
 800321c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800321e:	e002      	b.n	8003226 <tcp_recved+0x4e>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	89fa      	ldrh	r2, [r7, #14]
 8003224:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f7ff ff88 	bl	800313c <tcp_update_rcv_ann_wnd>
 800322c:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	f240 22d9 	movw	r2, #729	@ 0x2d9
 8003234:	4293      	cmp	r3, r2
 8003236:	d909      	bls.n	800324c <tcp_recved+0x74>
    tcp_ack_now(pcb);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	8b5b      	ldrh	r3, [r3, #26]
 800323c:	f043 0302 	orr.w	r3, r3, #2
 8003240:	b29a      	uxth	r2, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f003 f8b8 	bl	80063bc <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800324c:	3710      	adds	r7, #16
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	0800b3b8 	.word	0x0800b3b8

08003258 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8003258:	b5b0      	push	{r4, r5, r7, lr}
 800325a:	b090      	sub	sp, #64	@ 0x40
 800325c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800325e:	2300      	movs	r3, #0
 8003260:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8003264:	4b8b      	ldr	r3, [pc, #556]	@ (8003494 <tcp_slowtmr+0x23c>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	3301      	adds	r3, #1
 800326a:	4a8a      	ldr	r2, [pc, #552]	@ (8003494 <tcp_slowtmr+0x23c>)
 800326c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800326e:	4b8a      	ldr	r3, [pc, #552]	@ (8003498 <tcp_slowtmr+0x240>)
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	3301      	adds	r3, #1
 8003274:	b2da      	uxtb	r2, r3
 8003276:	4b88      	ldr	r3, [pc, #544]	@ (8003498 <tcp_slowtmr+0x240>)
 8003278:	701a      	strb	r2, [r3, #0]
 800327a:	e000      	b.n	800327e <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800327c:	bf00      	nop
  prev = NULL;
 800327e:	2300      	movs	r3, #0
 8003280:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 8003282:	4b86      	ldr	r3, [pc, #536]	@ (800349c <tcp_slowtmr+0x244>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8003288:	e267      	b.n	800375a <tcp_slowtmr+0x502>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED", pcb->state != CLOSED);
 800328a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800328c:	7d1b      	ldrb	r3, [r3, #20]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d102      	bne.n	8003298 <tcp_slowtmr+0x40>
 8003292:	4883      	ldr	r0, [pc, #524]	@ (80034a0 <tcp_slowtmr+0x248>)
 8003294:	f006 fe3e 	bl	8009f14 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN", pcb->state != LISTEN);
 8003298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800329a:	7d1b      	ldrb	r3, [r3, #20]
 800329c:	2b01      	cmp	r3, #1
 800329e:	d102      	bne.n	80032a6 <tcp_slowtmr+0x4e>
 80032a0:	4880      	ldr	r0, [pc, #512]	@ (80034a4 <tcp_slowtmr+0x24c>)
 80032a2:	f006 fe37 	bl	8009f14 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80032a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032a8:	7d1b      	ldrb	r3, [r3, #20]
 80032aa:	2b0a      	cmp	r3, #10
 80032ac:	d102      	bne.n	80032b4 <tcp_slowtmr+0x5c>
 80032ae:	487e      	ldr	r0, [pc, #504]	@ (80034a8 <tcp_slowtmr+0x250>)
 80032b0:	f006 fe30 	bl	8009f14 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80032b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032b6:	7f9a      	ldrb	r2, [r3, #30]
 80032b8:	4b77      	ldr	r3, [pc, #476]	@ (8003498 <tcp_slowtmr+0x240>)
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d105      	bne.n	80032cc <tcp_slowtmr+0x74>
      prev = pcb;
 80032c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032c2:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80032c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 80032ca:	e246      	b.n	800375a <tcp_slowtmr+0x502>
    pcb->last_timer = tcp_timer_ctr;
 80032cc:	4b72      	ldr	r3, [pc, #456]	@ (8003498 <tcp_slowtmr+0x240>)
 80032ce:	781a      	ldrb	r2, [r3, #0]
 80032d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032d2:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 80032d4:	2300      	movs	r3, #0
 80032d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 80032da:	2300      	movs	r3, #0
 80032dc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80032e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032e2:	7d1b      	ldrb	r3, [r3, #20]
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d10a      	bne.n	80032fe <tcp_slowtmr+0xa6>
 80032e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80032ee:	2b05      	cmp	r3, #5
 80032f0:	d905      	bls.n	80032fe <tcp_slowtmr+0xa6>
      ++pcb_remove;
 80032f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80032f6:	3301      	adds	r3, #1
 80032f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80032fc:	e112      	b.n	8003524 <tcp_slowtmr+0x2cc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80032fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003300:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003304:	2b0b      	cmp	r3, #11
 8003306:	d905      	bls.n	8003314 <tcp_slowtmr+0xbc>
      ++pcb_remove;
 8003308:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800330c:	3301      	adds	r3, #1
 800330e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003312:	e107      	b.n	8003524 <tcp_slowtmr+0x2cc>
      if (pcb->persist_backoff > 0) {
 8003314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003316:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 800331a:	2b00      	cmp	r3, #0
 800331c:	d06d      	beq.n	80033fa <tcp_slowtmr+0x1a2>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800331e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003320:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003322:	2b00      	cmp	r3, #0
 8003324:	d002      	beq.n	800332c <tcp_slowtmr+0xd4>
 8003326:	4861      	ldr	r0, [pc, #388]	@ (80034ac <tcp_slowtmr+0x254>)
 8003328:	f006 fdf4 	bl	8009f14 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800332c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800332e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003330:	2b00      	cmp	r3, #0
 8003332:	d102      	bne.n	800333a <tcp_slowtmr+0xe2>
 8003334:	485e      	ldr	r0, [pc, #376]	@ (80034b0 <tcp_slowtmr+0x258>)
 8003336:	f006 fded 	bl	8009f14 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800333a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800333c:	f893 3096 	ldrb.w	r3, [r3, #150]	@ 0x96
 8003340:	2b0b      	cmp	r3, #11
 8003342:	d905      	bls.n	8003350 <tcp_slowtmr+0xf8>
          ++pcb_remove; /* max probes reached */
 8003344:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003348:	3301      	adds	r3, #1
 800334a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800334e:	e0e9      	b.n	8003524 <tcp_slowtmr+0x2cc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8003350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003352:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8003356:	3b01      	subs	r3, #1
 8003358:	4a56      	ldr	r2, [pc, #344]	@ (80034b4 <tcp_slowtmr+0x25c>)
 800335a:	5cd3      	ldrb	r3, [r2, r3]
 800335c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800335e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003360:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 8003364:	7c7a      	ldrb	r2, [r7, #17]
 8003366:	429a      	cmp	r2, r3
 8003368:	d907      	bls.n	800337a <tcp_slowtmr+0x122>
            pcb->persist_cnt++;
 800336a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800336c:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 8003370:	3301      	adds	r3, #1
 8003372:	b2da      	uxtb	r2, r3
 8003374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003376:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
          if (pcb->persist_cnt >= backoff_cnt) {
 800337a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800337c:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 8003380:	7c7a      	ldrb	r2, [r7, #17]
 8003382:	429a      	cmp	r2, r3
 8003384:	f200 80ce 	bhi.w	8003524 <tcp_slowtmr+0x2cc>
            int next_slot = 1; /* increment timer to next slot */
 8003388:	2301      	movs	r3, #1
 800338a:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800338c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800338e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8003392:	2b00      	cmp	r3, #0
 8003394:	d108      	bne.n	80033a8 <tcp_slowtmr+0x150>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8003396:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003398:	f003 feaa 	bl	80070f0 <tcp_zero_window_probe>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d014      	beq.n	80033cc <tcp_slowtmr+0x174>
                next_slot = 0; /* try probe again with current slot */
 80033a2:	2300      	movs	r3, #0
 80033a4:	623b      	str	r3, [r7, #32]
 80033a6:	e011      	b.n	80033cc <tcp_slowtmr+0x174>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80033a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80033ae:	4619      	mov	r1, r3
 80033b0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80033b2:	f002 fdb7 	bl	8005f24 <tcp_split_unsent_seg>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d107      	bne.n	80033cc <tcp_slowtmr+0x174>
                if (tcp_output(pcb) == ERR_OK) {
 80033bc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80033be:	f002 fffd 	bl	80063bc <tcp_output>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d101      	bne.n	80033cc <tcp_slowtmr+0x174>
                  next_slot = 0;
 80033c8:	2300      	movs	r3, #0
 80033ca:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 80033cc:	6a3b      	ldr	r3, [r7, #32]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	f000 80a8 	beq.w	8003524 <tcp_slowtmr+0x2cc>
              pcb->persist_cnt = 0;
 80033d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80033dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033de:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 80033e2:	2b06      	cmp	r3, #6
 80033e4:	f200 809e 	bhi.w	8003524 <tcp_slowtmr+0x2cc>
                pcb->persist_backoff++;
 80033e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033ea:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 80033ee:	3301      	adds	r3, #1
 80033f0:	b2da      	uxtb	r2, r3
 80033f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033f4:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
 80033f8:	e094      	b.n	8003524 <tcp_slowtmr+0x2cc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80033fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033fc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8003400:	2b00      	cmp	r3, #0
 8003402:	db0f      	blt.n	8003424 <tcp_slowtmr+0x1cc>
 8003404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003406:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800340a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800340e:	4293      	cmp	r3, r2
 8003410:	d008      	beq.n	8003424 <tcp_slowtmr+0x1cc>
          ++pcb->rtime;
 8003412:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003414:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8003418:	b29b      	uxth	r3, r3
 800341a:	3301      	adds	r3, #1
 800341c:	b29b      	uxth	r3, r3
 800341e:	b21a      	sxth	r2, r3
 8003420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003422:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8003424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003426:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800342a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800342c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8003430:	429a      	cmp	r2, r3
 8003432:	db77      	blt.n	8003524 <tcp_slowtmr+0x2cc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8003434:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003436:	f003 fa9b 	bl	8006970 <tcp_rexmit_rto_prepare>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d007      	beq.n	8003450 <tcp_slowtmr+0x1f8>
 8003440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003442:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003444:	2b00      	cmp	r3, #0
 8003446:	d16d      	bne.n	8003524 <tcp_slowtmr+0x2cc>
 8003448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800344a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800344c:	2b00      	cmp	r3, #0
 800344e:	d069      	beq.n	8003524 <tcp_slowtmr+0x2cc>
            if (pcb->state != SYN_SENT) {
 8003450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003452:	7d1b      	ldrb	r3, [r3, #20]
 8003454:	2b02      	cmp	r3, #2
 8003456:	d036      	beq.n	80034c6 <tcp_slowtmr+0x26e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8003458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800345a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800345e:	2b0c      	cmp	r3, #12
 8003460:	bf28      	it	cs
 8003462:	230c      	movcs	r3, #12
 8003464:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8003466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003468:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800346c:	10db      	asrs	r3, r3, #3
 800346e:	b21b      	sxth	r3, r3
 8003470:	461a      	mov	r2, r3
 8003472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003474:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8003478:	4413      	add	r3, r2
 800347a:	7efa      	ldrb	r2, [r7, #27]
 800347c:	490e      	ldr	r1, [pc, #56]	@ (80034b8 <tcp_slowtmr+0x260>)
 800347e:	5c8a      	ldrb	r2, [r1, r2]
 8003480:	4093      	lsls	r3, r2
 8003482:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800348a:	4293      	cmp	r3, r2
 800348c:	dc16      	bgt.n	80034bc <tcp_slowtmr+0x264>
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	b21a      	sxth	r2, r3
 8003492:	e015      	b.n	80034c0 <tcp_slowtmr+0x268>
 8003494:	2400a300 	.word	0x2400a300
 8003498:	2400a316 	.word	0x2400a316
 800349c:	2400a30c 	.word	0x2400a30c
 80034a0:	0800b3e0 	.word	0x0800b3e0
 80034a4:	0800b40c 	.word	0x0800b40c
 80034a8:	0800b438 	.word	0x0800b438
 80034ac:	0800b464 	.word	0x0800b464
 80034b0:	0800b498 	.word	0x0800b498
 80034b4:	0800c934 	.word	0x0800c934
 80034b8:	0800c924 	.word	0x0800c924
 80034bc:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80034c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034c2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 80034c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034c8:	2200      	movs	r2, #0
 80034ca:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80034cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034ce:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80034d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034d4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80034d8:	4293      	cmp	r3, r2
 80034da:	bf28      	it	cs
 80034dc:	4613      	movcs	r3, r2
 80034de:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80034e0:	8a7b      	ldrh	r3, [r7, #18]
 80034e2:	085b      	lsrs	r3, r3, #1
 80034e4:	b29a      	uxth	r2, r3
 80034e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034e8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80034ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034ee:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80034f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034f4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80034f6:	005b      	lsls	r3, r3, #1
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d206      	bcs.n	800350c <tcp_slowtmr+0x2b4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80034fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003500:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003502:	005b      	lsls	r3, r3, #1
 8003504:	b29a      	uxth	r2, r3
 8003506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003508:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800350c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800350e:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8003510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003512:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 8003516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003518:	2200      	movs	r2, #0
 800351a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800351e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003520:	f003 fa8e 	bl	8006a40 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8003524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003526:	7d1b      	ldrb	r3, [r3, #20]
 8003528:	2b06      	cmp	r3, #6
 800352a:	d111      	bne.n	8003550 <tcp_slowtmr+0x2f8>
      if (pcb->flags & TF_RXCLOSED) {
 800352c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800352e:	8b5b      	ldrh	r3, [r3, #26]
 8003530:	f003 0310 	and.w	r3, r3, #16
 8003534:	2b00      	cmp	r3, #0
 8003536:	d00b      	beq.n	8003550 <tcp_slowtmr+0x2f8>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8003538:	4b8d      	ldr	r3, [pc, #564]	@ (8003770 <tcp_slowtmr+0x518>)
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800353e:	6a1b      	ldr	r3, [r3, #32]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	2b28      	cmp	r3, #40	@ 0x28
 8003544:	d904      	bls.n	8003550 <tcp_slowtmr+0x2f8>
          ++pcb_remove;
 8003546:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800354a:	3301      	adds	r3, #1
 800354c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8003550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003552:	7a5b      	ldrb	r3, [r3, #9]
 8003554:	f003 0308 	and.w	r3, r3, #8
 8003558:	2b00      	cmp	r3, #0
 800355a:	d04a      	beq.n	80035f2 <tcp_slowtmr+0x39a>
        ((pcb->state == ESTABLISHED) ||
 800355c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800355e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8003560:	2b04      	cmp	r3, #4
 8003562:	d003      	beq.n	800356c <tcp_slowtmr+0x314>
         (pcb->state == CLOSE_WAIT))) {
 8003564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003566:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8003568:	2b07      	cmp	r3, #7
 800356a:	d142      	bne.n	80035f2 <tcp_slowtmr+0x39a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800356c:	4b80      	ldr	r3, [pc, #512]	@ (8003770 <tcp_slowtmr+0x518>)
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003572:	6a1b      	ldr	r3, [r3, #32]
 8003574:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8003576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003578:	f8d3 1090 	ldr.w	r1, [r3, #144]	@ 0x90
 800357c:	4b7d      	ldr	r3, [pc, #500]	@ (8003774 <tcp_slowtmr+0x51c>)
 800357e:	440b      	add	r3, r1
 8003580:	497d      	ldr	r1, [pc, #500]	@ (8003778 <tcp_slowtmr+0x520>)
 8003582:	fba1 1303 	umull	r1, r3, r1, r3
 8003586:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8003588:	429a      	cmp	r2, r3
 800358a:	d90a      	bls.n	80035a2 <tcp_slowtmr+0x34a>
        ++pcb_remove;
 800358c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003590:	3301      	adds	r3, #1
 8003592:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8003596:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800359a:	3301      	adds	r3, #1
 800359c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80035a0:	e027      	b.n	80035f2 <tcp_slowtmr+0x39a>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80035a2:	4b73      	ldr	r3, [pc, #460]	@ (8003770 <tcp_slowtmr+0x518>)
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035a8:	6a1b      	ldr	r3, [r3, #32]
 80035aa:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80035ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035ae:	f8d3 1090 	ldr.w	r1, [r3, #144]	@ 0x90
 80035b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035b4:	f893 3097 	ldrb.w	r3, [r3, #151]	@ 0x97
 80035b8:	4618      	mov	r0, r3
 80035ba:	4b70      	ldr	r3, [pc, #448]	@ (800377c <tcp_slowtmr+0x524>)
 80035bc:	fb00 f303 	mul.w	r3, r0, r3
 80035c0:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80035c2:	496d      	ldr	r1, [pc, #436]	@ (8003778 <tcp_slowtmr+0x520>)
 80035c4:	fba1 1303 	umull	r1, r3, r1, r3
 80035c8:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d911      	bls.n	80035f2 <tcp_slowtmr+0x39a>
        err = tcp_keepalive(pcb);
 80035ce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80035d0:	f003 fd56 	bl	8007080 <tcp_keepalive>
 80035d4:	4603      	mov	r3, r0
 80035d6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 80035da:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d107      	bne.n	80035f2 <tcp_slowtmr+0x39a>
          pcb->keep_cnt_sent++;
 80035e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035e4:	f893 3097 	ldrb.w	r3, [r3, #151]	@ 0x97
 80035e8:	3301      	adds	r3, #1
 80035ea:	b2da      	uxtb	r2, r3
 80035ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035ee:	f883 2097 	strb.w	r2, [r3, #151]	@ 0x97
    if (pcb->state == SYN_RCVD) {
 80035f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035f4:	7d1b      	ldrb	r3, [r3, #20]
 80035f6:	2b03      	cmp	r3, #3
 80035f8:	d10b      	bne.n	8003612 <tcp_slowtmr+0x3ba>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80035fa:	4b5d      	ldr	r3, [pc, #372]	@ (8003770 <tcp_slowtmr+0x518>)
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003600:	6a1b      	ldr	r3, [r3, #32]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	2b28      	cmp	r3, #40	@ 0x28
 8003606:	d904      	bls.n	8003612 <tcp_slowtmr+0x3ba>
        ++pcb_remove;
 8003608:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800360c:	3301      	adds	r3, #1
 800360e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8003612:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003614:	7d1b      	ldrb	r3, [r3, #20]
 8003616:	2b09      	cmp	r3, #9
 8003618:	d10b      	bne.n	8003632 <tcp_slowtmr+0x3da>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800361a:	4b55      	ldr	r3, [pc, #340]	@ (8003770 <tcp_slowtmr+0x518>)
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003620:	6a1b      	ldr	r3, [r3, #32]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	2bf0      	cmp	r3, #240	@ 0xf0
 8003626:	d904      	bls.n	8003632 <tcp_slowtmr+0x3da>
        ++pcb_remove;
 8003628:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800362c:	3301      	adds	r3, #1
 800362e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 8003632:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003636:	2b00      	cmp	r3, #0
 8003638:	d058      	beq.n	80036ec <tcp_slowtmr+0x494>
      tcp_err_fn err_fn = pcb->errf;
 800363a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800363c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003640:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8003642:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003644:	f000 fb94 	bl	8003d70 <tcp_pcb_purge>
      if (prev != NULL) {
 8003648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00c      	beq.n	8003668 <tcp_slowtmr+0x410>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800364e:	4b4c      	ldr	r3, [pc, #304]	@ (8003780 <tcp_slowtmr+0x528>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003654:	429a      	cmp	r2, r3
 8003656:	d102      	bne.n	800365e <tcp_slowtmr+0x406>
 8003658:	484a      	ldr	r0, [pc, #296]	@ (8003784 <tcp_slowtmr+0x52c>)
 800365a:	f006 fc5b 	bl	8009f14 <iprintf>
        prev->next = pcb->next;
 800365e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003660:	68da      	ldr	r2, [r3, #12]
 8003662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003664:	60da      	str	r2, [r3, #12]
 8003666:	e00b      	b.n	8003680 <tcp_slowtmr+0x428>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8003668:	4b45      	ldr	r3, [pc, #276]	@ (8003780 <tcp_slowtmr+0x528>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800366e:	429a      	cmp	r2, r3
 8003670:	d002      	beq.n	8003678 <tcp_slowtmr+0x420>
 8003672:	4845      	ldr	r0, [pc, #276]	@ (8003788 <tcp_slowtmr+0x530>)
 8003674:	f006 fc4e 	bl	8009f14 <iprintf>
        tcp_active_pcbs = pcb->next;
 8003678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	4a40      	ldr	r2, [pc, #256]	@ (8003780 <tcp_slowtmr+0x528>)
 800367e:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8003680:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003684:	2b00      	cmp	r3, #0
 8003686:	d013      	beq.n	80036b0 <tcp_slowtmr+0x458>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8003688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800368a:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800368c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800368e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8003690:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8003692:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003694:	3304      	adds	r3, #4
 8003696:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003698:	8ad2      	ldrh	r2, [r2, #22]
 800369a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800369c:	8b09      	ldrh	r1, [r1, #24]
 800369e:	9102      	str	r1, [sp, #8]
 80036a0:	9201      	str	r2, [sp, #4]
 80036a2:	9300      	str	r3, [sp, #0]
 80036a4:	462b      	mov	r3, r5
 80036a6:	4622      	mov	r2, r4
 80036a8:	4601      	mov	r1, r0
 80036aa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80036ac:	f003 fc46 	bl	8006f3c <tcp_rst>
      err_arg = pcb->callback_arg;
 80036b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036b2:	691b      	ldr	r3, [r3, #16]
 80036b4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80036b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036b8:	7d1b      	ldrb	r3, [r3, #20]
 80036ba:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80036bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036be:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80036c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 80036c6:	6838      	ldr	r0, [r7, #0]
 80036c8:	f7ff fa9e 	bl	8002c08 <tcp_free>
      tcp_active_pcbs_changed = 0;
 80036cc:	4b2f      	ldr	r3, [pc, #188]	@ (800378c <tcp_slowtmr+0x534>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d004      	beq.n	80036e2 <tcp_slowtmr+0x48a>
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f06f 010c 	mvn.w	r1, #12
 80036de:	68b8      	ldr	r0, [r7, #8]
 80036e0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80036e2:	4b2a      	ldr	r3, [pc, #168]	@ (800378c <tcp_slowtmr+0x534>)
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d037      	beq.n	800375a <tcp_slowtmr+0x502>
        goto tcp_slowtmr_start;
 80036ea:	e5c8      	b.n	800327e <tcp_slowtmr+0x26>
      prev = pcb;
 80036ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036ee:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80036f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 80036f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036f8:	7f1b      	ldrb	r3, [r3, #28]
 80036fa:	3301      	adds	r3, #1
 80036fc:	b2da      	uxtb	r2, r3
 80036fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003700:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8003702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003704:	7f1a      	ldrb	r2, [r3, #28]
 8003706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003708:	7f5b      	ldrb	r3, [r3, #29]
 800370a:	429a      	cmp	r2, r3
 800370c:	d325      	bcc.n	800375a <tcp_slowtmr+0x502>
        prev->polltmr = 0;
 800370e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003710:	2200      	movs	r2, #0
 8003712:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8003714:	4b1d      	ldr	r3, [pc, #116]	@ (800378c <tcp_slowtmr+0x534>)
 8003716:	2200      	movs	r2, #0
 8003718:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800371a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800371c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003720:	2b00      	cmp	r3, #0
 8003722:	d00b      	beq.n	800373c <tcp_slowtmr+0x4e4>
 8003724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003726:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800372a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800372c:	6912      	ldr	r2, [r2, #16]
 800372e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003730:	4610      	mov	r0, r2
 8003732:	4798      	blx	r3
 8003734:	4603      	mov	r3, r0
 8003736:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800373a:	e002      	b.n	8003742 <tcp_slowtmr+0x4ea>
 800373c:	2300      	movs	r3, #0
 800373e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 8003742:	4b12      	ldr	r3, [pc, #72]	@ (800378c <tcp_slowtmr+0x534>)
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	2b00      	cmp	r3, #0
 8003748:	f47f ad98 	bne.w	800327c <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800374c:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8003750:	2b00      	cmp	r3, #0
 8003752:	d102      	bne.n	800375a <tcp_slowtmr+0x502>
          tcp_output(prev);
 8003754:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003756:	f002 fe31 	bl	80063bc <tcp_output>
  while (pcb != NULL) {
 800375a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800375c:	2b00      	cmp	r3, #0
 800375e:	f47f ad94 	bne.w	800328a <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8003762:	2300      	movs	r3, #0
 8003764:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 8003766:	4b0a      	ldr	r3, [pc, #40]	@ (8003790 <tcp_slowtmr+0x538>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800376c:	e059      	b.n	8003822 <tcp_slowtmr+0x5ca>
 800376e:	bf00      	nop
 8003770:	2400a300 	.word	0x2400a300
 8003774:	000a4cb8 	.word	0x000a4cb8
 8003778:	10624dd3 	.word	0x10624dd3
 800377c:	000124f8 	.word	0x000124f8
 8003780:	2400a30c 	.word	0x2400a30c
 8003784:	0800b4d0 	.word	0x0800b4d0
 8003788:	0800b4fc 	.word	0x0800b4fc
 800378c:	2400a314 	.word	0x2400a314
 8003790:	2400a310 	.word	0x2400a310
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8003794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003796:	7d1b      	ldrb	r3, [r3, #20]
 8003798:	2b0a      	cmp	r3, #10
 800379a:	d002      	beq.n	80037a2 <tcp_slowtmr+0x54a>
 800379c:	4825      	ldr	r0, [pc, #148]	@ (8003834 <tcp_slowtmr+0x5dc>)
 800379e:	f006 fbb9 	bl	8009f14 <iprintf>
    pcb_remove = 0;
 80037a2:	2300      	movs	r3, #0
 80037a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80037a8:	4b23      	ldr	r3, [pc, #140]	@ (8003838 <tcp_slowtmr+0x5e0>)
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037ae:	6a1b      	ldr	r3, [r3, #32]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	2bf0      	cmp	r3, #240	@ 0xf0
 80037b4:	d904      	bls.n	80037c0 <tcp_slowtmr+0x568>
      ++pcb_remove;
 80037b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80037ba:	3301      	adds	r3, #1
 80037bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80037c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d027      	beq.n	8003818 <tcp_slowtmr+0x5c0>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80037c8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80037ca:	f000 fad1 	bl	8003d70 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80037ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d00c      	beq.n	80037ee <tcp_slowtmr+0x596>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80037d4:	4b19      	ldr	r3, [pc, #100]	@ (800383c <tcp_slowtmr+0x5e4>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037da:	429a      	cmp	r2, r3
 80037dc:	d102      	bne.n	80037e4 <tcp_slowtmr+0x58c>
 80037de:	4818      	ldr	r0, [pc, #96]	@ (8003840 <tcp_slowtmr+0x5e8>)
 80037e0:	f006 fb98 	bl	8009f14 <iprintf>
        prev->next = pcb->next;
 80037e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037e6:	68da      	ldr	r2, [r3, #12]
 80037e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037ea:	60da      	str	r2, [r3, #12]
 80037ec:	e00b      	b.n	8003806 <tcp_slowtmr+0x5ae>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80037ee:	4b13      	ldr	r3, [pc, #76]	@ (800383c <tcp_slowtmr+0x5e4>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d002      	beq.n	80037fe <tcp_slowtmr+0x5a6>
 80037f8:	4812      	ldr	r0, [pc, #72]	@ (8003844 <tcp_slowtmr+0x5ec>)
 80037fa:	f006 fb8b 	bl	8009f14 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80037fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	4a0e      	ldr	r2, [pc, #56]	@ (800383c <tcp_slowtmr+0x5e4>)
 8003804:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8003806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003808:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800380a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8003810:	69f8      	ldr	r0, [r7, #28]
 8003812:	f7ff f9f9 	bl	8002c08 <tcp_free>
 8003816:	e004      	b.n	8003822 <tcp_slowtmr+0x5ca>
    } else {
      prev = pcb;
 8003818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800381a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800381c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8003822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003824:	2b00      	cmp	r3, #0
 8003826:	d1b5      	bne.n	8003794 <tcp_slowtmr+0x53c>
    }
  }
}
 8003828:	bf00      	nop
 800382a:	bf00      	nop
 800382c:	3730      	adds	r7, #48	@ 0x30
 800382e:	46bd      	mov	sp, r7
 8003830:	bdb0      	pop	{r4, r5, r7, pc}
 8003832:	bf00      	nop
 8003834:	0800b528 	.word	0x0800b528
 8003838:	2400a300 	.word	0x2400a300
 800383c:	2400a310 	.word	0x2400a310
 8003840:	0800b558 	.word	0x0800b558
 8003844:	0800b580 	.word	0x0800b580

08003848 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800384e:	4b2d      	ldr	r3, [pc, #180]	@ (8003904 <tcp_fasttmr+0xbc>)
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	3301      	adds	r3, #1
 8003854:	b2da      	uxtb	r2, r3
 8003856:	4b2b      	ldr	r3, [pc, #172]	@ (8003904 <tcp_fasttmr+0xbc>)
 8003858:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800385a:	4b2b      	ldr	r3, [pc, #172]	@ (8003908 <tcp_fasttmr+0xc0>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8003860:	e048      	b.n	80038f4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	7f9a      	ldrb	r2, [r3, #30]
 8003866:	4b27      	ldr	r3, [pc, #156]	@ (8003904 <tcp_fasttmr+0xbc>)
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	429a      	cmp	r2, r3
 800386c:	d03f      	beq.n	80038ee <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800386e:	4b25      	ldr	r3, [pc, #148]	@ (8003904 <tcp_fasttmr+0xbc>)
 8003870:	781a      	ldrb	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	8b5b      	ldrh	r3, [r3, #26]
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	2b00      	cmp	r3, #0
 8003880:	d010      	beq.n	80038a4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	8b5b      	ldrh	r3, [r3, #26]
 8003886:	f043 0302 	orr.w	r3, r3, #2
 800388a:	b29a      	uxth	r2, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f002 fd93 	bl	80063bc <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	8b5b      	ldrh	r3, [r3, #26]
 800389a:	f023 0303 	bic.w	r3, r3, #3
 800389e:	b29a      	uxth	r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	8b5b      	ldrh	r3, [r3, #26]
 80038a8:	f003 0308 	and.w	r3, r3, #8
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d009      	beq.n	80038c4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	8b5b      	ldrh	r3, [r3, #26]
 80038b4:	f023 0308 	bic.w	r3, r3, #8
 80038b8:	b29a      	uxth	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f7ff fb0c 	bl	8002edc <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00a      	beq.n	80038e8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80038d2:	4b0e      	ldr	r3, [pc, #56]	@ (800390c <tcp_fasttmr+0xc4>)
 80038d4:	2200      	movs	r2, #0
 80038d6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f000 f819 	bl	8003910 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80038de:	4b0b      	ldr	r3, [pc, #44]	@ (800390c <tcp_fasttmr+0xc4>)
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d000      	beq.n	80038e8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80038e6:	e7b8      	b.n	800385a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	607b      	str	r3, [r7, #4]
 80038ec:	e002      	b.n	80038f4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1b3      	bne.n	8003862 <tcp_fasttmr+0x1a>
    }
  }
}
 80038fa:	bf00      	nop
 80038fc:	bf00      	nop
 80038fe:	3708      	adds	r7, #8
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	2400a316 	.word	0x2400a316
 8003908:	2400a30c 	.word	0x2400a30c
 800390c:	2400a314 	.word	0x2400a314

08003910 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8003910:	b590      	push	{r4, r7, lr}
 8003912:	b085      	sub	sp, #20
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d102      	bne.n	8003924 <tcp_process_refused_data+0x14>
 800391e:	f06f 030f 	mvn.w	r3, #15
 8003922:	e061      	b.n	80039e8 <tcp_process_refused_data+0xd8>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003928:	7b5b      	ldrb	r3, [r3, #13]
 800392a:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003930:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	675a      	str	r2, [r3, #116]	@ 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00b      	beq.n	800395a <tcp_process_refused_data+0x4a>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6918      	ldr	r0, [r3, #16]
 800394c:	2300      	movs	r3, #0
 800394e:	68ba      	ldr	r2, [r7, #8]
 8003950:	6879      	ldr	r1, [r7, #4]
 8003952:	47a0      	blx	r4
 8003954:	4603      	mov	r3, r0
 8003956:	73fb      	strb	r3, [r7, #15]
 8003958:	e007      	b.n	800396a <tcp_process_refused_data+0x5a>
 800395a:	2300      	movs	r3, #0
 800395c:	68ba      	ldr	r2, [r7, #8]
 800395e:	6879      	ldr	r1, [r7, #4]
 8003960:	2000      	movs	r0, #0
 8003962:	f000 f872 	bl	8003a4a <tcp_recv_null>
 8003966:	4603      	mov	r3, r0
 8003968:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800396a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d12b      	bne.n	80039ca <tcp_process_refused_data+0xba>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8003972:	7bbb      	ldrb	r3, [r7, #14]
 8003974:	f003 0320 	and.w	r3, r3, #32
 8003978:	2b00      	cmp	r3, #0
 800397a:	d034      	beq.n	80039e6 <tcp_process_refused_data+0xd6>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003980:	f640 3268 	movw	r2, #2920	@ 0xb68
 8003984:	4293      	cmp	r3, r2
 8003986:	d005      	beq.n	8003994 <tcp_process_refused_data+0x84>
          pcb->rcv_wnd++;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800398c:	3301      	adds	r3, #1
 800398e:	b29a      	uxth	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00b      	beq.n	80039b6 <tcp_process_refused_data+0xa6>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6918      	ldr	r0, [r3, #16]
 80039a8:	2300      	movs	r3, #0
 80039aa:	2200      	movs	r2, #0
 80039ac:	6879      	ldr	r1, [r7, #4]
 80039ae:	47a0      	blx	r4
 80039b0:	4603      	mov	r3, r0
 80039b2:	73fb      	strb	r3, [r7, #15]
 80039b4:	e001      	b.n	80039ba <tcp_process_refused_data+0xaa>
 80039b6:	2300      	movs	r3, #0
 80039b8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80039ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039be:	f113 0f0d 	cmn.w	r3, #13
 80039c2:	d110      	bne.n	80039e6 <tcp_process_refused_data+0xd6>
          return ERR_ABRT;
 80039c4:	f06f 030c 	mvn.w	r3, #12
 80039c8:	e00e      	b.n	80039e8 <tcp_process_refused_data+0xd8>
        }
      }
    } else if (err == ERR_ABRT) {
 80039ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039ce:	f113 0f0d 	cmn.w	r3, #13
 80039d2:	d102      	bne.n	80039da <tcp_process_refused_data+0xca>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80039d4:	f06f 030c 	mvn.w	r3, #12
 80039d8:	e006      	b.n	80039e8 <tcp_process_refused_data+0xd8>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	68ba      	ldr	r2, [r7, #8]
 80039de:	675a      	str	r2, [r3, #116]	@ 0x74
      return ERR_INPROGRESS;
 80039e0:	f06f 0304 	mvn.w	r3, #4
 80039e4:	e000      	b.n	80039e8 <tcp_process_refused_data+0xd8>
    }
  }
  return ERR_OK;
 80039e6:	2300      	movs	r3, #0
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3714      	adds	r7, #20
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd90      	pop	{r4, r7, pc}

080039f0 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80039f8:	e007      	b.n	8003a0a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f000 f80a 	bl	8003a1a <tcp_seg_free>
    seg = next;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1f4      	bne.n	80039fa <tcp_segs_free+0xa>
  }
}
 8003a10:	bf00      	nop
 8003a12:	bf00      	nop
 8003a14:	3710      	adds	r7, #16
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}

08003a1a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	b082      	sub	sp, #8
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d00c      	beq.n	8003a42 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d004      	beq.n	8003a3a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	4618      	mov	r0, r3
 8003a36:	f7fe fe93 	bl	8002760 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8003a3a:	6879      	ldr	r1, [r7, #4]
 8003a3c:	2003      	movs	r0, #3
 8003a3e:	f7fe f92f 	bl	8001ca0 <memp_free>
  }
}
 8003a42:	bf00      	nop
 8003a44:	3708      	adds	r7, #8
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}

08003a4a <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	b084      	sub	sp, #16
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	60f8      	str	r0, [r7, #12]
 8003a52:	60b9      	str	r1, [r7, #8]
 8003a54:	607a      	str	r2, [r7, #4]
 8003a56:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d102      	bne.n	8003a64 <tcp_recv_null+0x1a>
 8003a5e:	f06f 030f 	mvn.w	r3, #15
 8003a62:	e016      	b.n	8003a92 <tcp_recv_null+0x48>

  if (p != NULL) {
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d009      	beq.n	8003a7e <tcp_recv_null+0x34>
    tcp_recved(pcb, p->tot_len);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	891b      	ldrh	r3, [r3, #8]
 8003a6e:	4619      	mov	r1, r3
 8003a70:	68b8      	ldr	r0, [r7, #8]
 8003a72:	f7ff fbb1 	bl	80031d8 <tcp_recved>
    pbuf_free(p);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f7fe fe72 	bl	8002760 <pbuf_free>
 8003a7c:	e008      	b.n	8003a90 <tcp_recv_null+0x46>
  } else if (err == ERR_OK) {
 8003a7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d104      	bne.n	8003a90 <tcp_recv_null+0x46>
    return tcp_close(pcb);
 8003a86:	68b8      	ldr	r0, [r7, #8]
 8003a88:	f7ff fa8a 	bl	8002fa0 <tcp_close>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	e000      	b.n	8003a92 <tcp_recv_null+0x48>
  }
  return ERR_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3710      	adds	r7, #16
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
	...

08003a9c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b086      	sub	sp, #24
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8003aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	db01      	blt.n	8003ab2 <tcp_kill_prio+0x16>
 8003aae:	79fb      	ldrb	r3, [r7, #7]
 8003ab0:	e000      	b.n	8003ab4 <tcp_kill_prio+0x18>
 8003ab2:	237f      	movs	r3, #127	@ 0x7f
 8003ab4:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8003ab6:	7afb      	ldrb	r3, [r7, #11]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d034      	beq.n	8003b26 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8003abc:	7afb      	ldrb	r3, [r7, #11]
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8003aca:	4b19      	ldr	r3, [pc, #100]	@ (8003b30 <tcp_kill_prio+0x94>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	617b      	str	r3, [r7, #20]
 8003ad0:	e01f      	b.n	8003b12 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	7d5b      	ldrb	r3, [r3, #21]
 8003ad6:	7afa      	ldrb	r2, [r7, #11]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d80c      	bhi.n	8003af6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8003ae0:	7afa      	ldrb	r2, [r7, #11]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d112      	bne.n	8003b0c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8003ae6:	4b13      	ldr	r3, [pc, #76]	@ (8003b34 <tcp_kill_prio+0x98>)
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	6a1b      	ldr	r3, [r3, #32]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	68fa      	ldr	r2, [r7, #12]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d80a      	bhi.n	8003b0c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8003af6:	4b0f      	ldr	r3, [pc, #60]	@ (8003b34 <tcp_kill_prio+0x98>)
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	6a1b      	ldr	r3, [r3, #32]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	7d5b      	ldrb	r3, [r3, #21]
 8003b0a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	617b      	str	r3, [r7, #20]
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d1dc      	bne.n	8003ad2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d004      	beq.n	8003b28 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8003b1e:	6938      	ldr	r0, [r7, #16]
 8003b20:	f7ff fb00 	bl	8003124 <tcp_abort>
 8003b24:	e000      	b.n	8003b28 <tcp_kill_prio+0x8c>
    return;
 8003b26:	bf00      	nop
  }
}
 8003b28:	3718      	adds	r7, #24
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	2400a30c 	.word	0x2400a30c
 8003b34:	2400a300 	.word	0x2400a300

08003b38 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b086      	sub	sp, #24
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	4603      	mov	r3, r0
 8003b40:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8003b42:	79fb      	ldrb	r3, [r7, #7]
 8003b44:	2b08      	cmp	r3, #8
 8003b46:	d005      	beq.n	8003b54 <tcp_kill_state+0x1c>
 8003b48:	79fb      	ldrb	r3, [r7, #7]
 8003b4a:	2b09      	cmp	r3, #9
 8003b4c:	d002      	beq.n	8003b54 <tcp_kill_state+0x1c>
 8003b4e:	4818      	ldr	r0, [pc, #96]	@ (8003bb0 <tcp_kill_state+0x78>)
 8003b50:	f006 f9e0 	bl	8009f14 <iprintf>

  inactivity = 0;
 8003b54:	2300      	movs	r3, #0
 8003b56:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8003b5c:	4b15      	ldr	r3, [pc, #84]	@ (8003bb4 <tcp_kill_state+0x7c>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	617b      	str	r3, [r7, #20]
 8003b62:	e017      	b.n	8003b94 <tcp_kill_state+0x5c>
    if (pcb->state == state) {
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	7d1b      	ldrb	r3, [r3, #20]
 8003b68:	79fa      	ldrb	r2, [r7, #7]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d10f      	bne.n	8003b8e <tcp_kill_state+0x56>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8003b6e:	4b12      	ldr	r3, [pc, #72]	@ (8003bb8 <tcp_kill_state+0x80>)
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	6a1b      	ldr	r3, [r3, #32]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	68fa      	ldr	r2, [r7, #12]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d807      	bhi.n	8003b8e <tcp_kill_state+0x56>
        inactivity = tcp_ticks - pcb->tmr;
 8003b7e:	4b0e      	ldr	r3, [pc, #56]	@ (8003bb8 <tcp_kill_state+0x80>)
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	6a1b      	ldr	r3, [r3, #32]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	617b      	str	r3, [r7, #20]
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d1e4      	bne.n	8003b64 <tcp_kill_state+0x2c>
      }
    }
  }
  if (inactive != NULL) {
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d003      	beq.n	8003ba8 <tcp_kill_state+0x70>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8003ba0:	2100      	movs	r1, #0
 8003ba2:	6938      	ldr	r0, [r7, #16]
 8003ba4:	f7ff fa1a 	bl	8002fdc <tcp_abandon>
  }
}
 8003ba8:	bf00      	nop
 8003baa:	3718      	adds	r7, #24
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	0800b5a8 	.word	0x0800b5a8
 8003bb4:	2400a30c 	.word	0x2400a30c
 8003bb8:	2400a300 	.word	0x2400a300

08003bbc <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8003bca:	4b12      	ldr	r3, [pc, #72]	@ (8003c14 <tcp_kill_timewait+0x58>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	60fb      	str	r3, [r7, #12]
 8003bd0:	e012      	b.n	8003bf8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8003bd2:	4b11      	ldr	r3, [pc, #68]	@ (8003c18 <tcp_kill_timewait+0x5c>)
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6a1b      	ldr	r3, [r3, #32]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d807      	bhi.n	8003bf2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8003be2:	4b0d      	ldr	r3, [pc, #52]	@ (8003c18 <tcp_kill_timewait+0x5c>)
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6a1b      	ldr	r3, [r3, #32]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	60fb      	str	r3, [r7, #12]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1e9      	bne.n	8003bd2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d002      	beq.n	8003c0a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8003c04:	68b8      	ldr	r0, [r7, #8]
 8003c06:	f7ff fa8d 	bl	8003124 <tcp_abort>
  }
}
 8003c0a:	bf00      	nop
 8003c0c:	3710      	adds	r7, #16
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	2400a310 	.word	0x2400a310
 8003c18:	2400a300 	.word	0x2400a300

08003c1c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8003c22:	4b10      	ldr	r3, [pc, #64]	@ (8003c64 <tcp_handle_closepend+0x48>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8003c28:	e014      	b.n	8003c54 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	8b5b      	ldrh	r3, [r3, #26]
 8003c34:	f003 0308 	and.w	r3, r3, #8
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d009      	beq.n	8003c50 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	8b5b      	ldrh	r3, [r3, #26]
 8003c40:	f023 0308 	bic.w	r3, r3, #8
 8003c44:	b29a      	uxth	r2, r3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f7ff f946 	bl	8002edc <tcp_close_shutdown_fin>
    }
    pcb = next;
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1e7      	bne.n	8003c2a <tcp_handle_closepend+0xe>
  }
}
 8003c5a:	bf00      	nop
 8003c5c:	bf00      	nop
 8003c5e:	3708      	adds	r7, #8
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	2400a30c 	.word	0x2400a30c

08003c68 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	4603      	mov	r3, r0
 8003c70:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8003c72:	2001      	movs	r0, #1
 8003c74:	f7fd ffdc 	bl	8001c30 <memp_malloc>
 8003c78:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d126      	bne.n	8003cce <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8003c80:	f7ff ffcc 	bl	8003c1c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8003c84:	f7ff ff9a 	bl	8003bbc <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8003c88:	2001      	movs	r0, #1
 8003c8a:	f7fd ffd1 	bl	8001c30 <memp_malloc>
 8003c8e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d11b      	bne.n	8003cce <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8003c96:	2009      	movs	r0, #9
 8003c98:	f7ff ff4e 	bl	8003b38 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8003c9c:	2001      	movs	r0, #1
 8003c9e:	f7fd ffc7 	bl	8001c30 <memp_malloc>
 8003ca2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d111      	bne.n	8003cce <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8003caa:	2008      	movs	r0, #8
 8003cac:	f7ff ff44 	bl	8003b38 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8003cb0:	2001      	movs	r0, #1
 8003cb2:	f7fd ffbd 	bl	8001c30 <memp_malloc>
 8003cb6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d107      	bne.n	8003cce <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8003cbe:	79fb      	ldrb	r3, [r7, #7]
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f7ff feeb 	bl	8003a9c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8003cc6:	2001      	movs	r0, #1
 8003cc8:	f7fd ffb2 	bl	8001c30 <memp_malloc>
 8003ccc:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d03f      	beq.n	8003d54 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8003cd4:	2298      	movs	r2, #152	@ 0x98
 8003cd6:	2100      	movs	r1, #0
 8003cd8:	68f8      	ldr	r0, [r7, #12]
 8003cda:	f006 f980 	bl	8009fde <memset>
    pcb->prio = prio;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	79fa      	ldrb	r2, [r7, #7]
 8003ce2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8003cea:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f640 3268 	movw	r2, #2920	@ 0xb68
 8003cf4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	22ff      	movs	r2, #255	@ 0xff
 8003d02:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8003d0a:	865a      	strh	r2, [r3, #50]	@ 0x32
    /* Set initial TCP's retransmission timeout to 3000 ms by default.
       This value could be configured in lwipopts */
    pcb->rto = LWIP_TCP_RTO_TIME / TCP_SLOW_INTERVAL;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2206      	movs	r2, #6
 8003d10:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = LWIP_TCP_RTO_TIME / TCP_SLOW_INTERVAL;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2206      	movs	r2, #6
 8003d18:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003d20:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2201      	movs	r2, #1
 8003d26:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8003d2a:	4b0d      	ldr	r3, [pc, #52]	@ (8003d60 <tcp_alloc+0xf8>)
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8003d32:	4b0c      	ldr	r3, [pc, #48]	@ (8003d64 <tcp_alloc+0xfc>)
 8003d34:	781a      	ldrb	r2, [r3, #0]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8003d40:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	4a08      	ldr	r2, [pc, #32]	@ (8003d68 <tcp_alloc+0x100>)
 8003d48:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	4a07      	ldr	r2, [pc, #28]	@ (8003d6c <tcp_alloc+0x104>)
 8003d50:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
    pcb_tci_init(pcb);
  }
  return pcb;
 8003d54:	68fb      	ldr	r3, [r7, #12]
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3710      	adds	r7, #16
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	2400a300 	.word	0x2400a300
 8003d64:	2400a316 	.word	0x2400a316
 8003d68:	08003a4b 	.word	0x08003a4b
 8003d6c:	006ddd00 	.word	0x006ddd00

08003d70 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d030      	beq.n	8003de0 <tcp_pcb_purge+0x70>

  if (pcb->state != CLOSED &&
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	7d1b      	ldrb	r3, [r3, #20]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d02c      	beq.n	8003de0 <tcp_pcb_purge+0x70>
      pcb->state != TIME_WAIT &&
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8003d8a:	2b0a      	cmp	r3, #10
 8003d8c:	d028      	beq.n	8003de0 <tcp_pcb_purge+0x70>
      pcb->state != LISTEN) {
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d024      	beq.n	8003de0 <tcp_pcb_purge+0x70>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d007      	beq.n	8003dae <tcp_pcb_purge+0x3e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7fe fcdc 	bl	8002760 <pbuf_free>
      pcb->refused_data = NULL;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	675a      	str	r2, [r3, #116]	@ 0x74
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003db4:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7ff fe18 	bl	80039f0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7ff fe13 	bl	80039f0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	66da      	str	r2, [r3, #108]	@ 0x6c
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8003de0:	3708      	adds	r7, #8
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
	...

08003de8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d102      	bne.n	8003dfe <tcp_pcb_remove+0x16>
 8003df8:	4830      	ldr	r0, [pc, #192]	@ (8003ebc <tcp_pcb_remove+0xd4>)
 8003dfa:	f006 f88b 	bl	8009f14 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d102      	bne.n	8003e0a <tcp_pcb_remove+0x22>
 8003e04:	482e      	ldr	r0, [pc, #184]	@ (8003ec0 <tcp_pcb_remove+0xd8>)
 8003e06:	f006 f885 	bl	8009f14 <iprintf>

  TCP_RMV(pcblist, pcb);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	683a      	ldr	r2, [r7, #0]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d105      	bne.n	8003e20 <tcp_pcb_remove+0x38>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68da      	ldr	r2, [r3, #12]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	601a      	str	r2, [r3, #0]
 8003e1e:	e013      	b.n	8003e48 <tcp_pcb_remove+0x60>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	60fb      	str	r3, [r7, #12]
 8003e26:	e00c      	b.n	8003e42 <tcp_pcb_remove+0x5a>
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	683a      	ldr	r2, [r7, #0]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d104      	bne.n	8003e3c <tcp_pcb_remove+0x54>
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	68da      	ldr	r2, [r3, #12]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	60da      	str	r2, [r3, #12]
 8003e3a:	e005      	b.n	8003e48 <tcp_pcb_remove+0x60>
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	60fb      	str	r3, [r7, #12]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d1ef      	bne.n	8003e28 <tcp_pcb_remove+0x40>
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8003e4e:	6838      	ldr	r0, [r7, #0]
 8003e50:	f7ff ff8e 	bl	8003d70 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	7d1b      	ldrb	r3, [r3, #20]
 8003e58:	2b0a      	cmp	r3, #10
 8003e5a:	d013      	beq.n	8003e84 <tcp_pcb_remove+0x9c>
      (pcb->state != LISTEN) &&
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d00f      	beq.n	8003e84 <tcp_pcb_remove+0x9c>
      (pcb->flags & TF_ACK_DELAY)) {
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	8b5b      	ldrh	r3, [r3, #26]
 8003e68:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d009      	beq.n	8003e84 <tcp_pcb_remove+0x9c>
    tcp_ack_now(pcb);
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	8b5b      	ldrh	r3, [r3, #26]
 8003e74:	f043 0302 	orr.w	r3, r3, #2
 8003e78:	b29a      	uxth	r2, r3
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8003e7e:	6838      	ldr	r0, [r7, #0]
 8003e80:	f002 fa9c 	bl	80063bc <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	7d1b      	ldrb	r3, [r3, #20]
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d00d      	beq.n	8003ea8 <tcp_pcb_remove+0xc0>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d002      	beq.n	8003e9a <tcp_pcb_remove+0xb2>
 8003e94:	480b      	ldr	r0, [pc, #44]	@ (8003ec4 <tcp_pcb_remove+0xdc>)
 8003e96:	f006 f83d 	bl	8009f14 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d002      	beq.n	8003ea8 <tcp_pcb_remove+0xc0>
 8003ea2:	4809      	ldr	r0, [pc, #36]	@ (8003ec8 <tcp_pcb_remove+0xe0>)
 8003ea4:	f006 f836 	bl	8009f14 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8003eb4:	bf00      	nop
 8003eb6:	3710      	adds	r7, #16
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	0800b650 	.word	0x0800b650
 8003ec0:	0800b66c 	.word	0x0800b66c
 8003ec4:	0800b68c 	.word	0x0800b68c
 8003ec8:	0800b6a4 	.word	0x0800b6a4

08003ecc <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d102      	bne.n	8003ee0 <tcp_next_iss+0x14>
 8003eda:	4808      	ldr	r0, [pc, #32]	@ (8003efc <tcp_next_iss+0x30>)
 8003edc:	f006 f81a 	bl	8009f14 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8003ee0:	4b07      	ldr	r3, [pc, #28]	@ (8003f00 <tcp_next_iss+0x34>)
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	4b07      	ldr	r3, [pc, #28]	@ (8003f04 <tcp_next_iss+0x38>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4413      	add	r3, r2
 8003eea:	4a05      	ldr	r2, [pc, #20]	@ (8003f00 <tcp_next_iss+0x34>)
 8003eec:	6013      	str	r3, [r2, #0]
  return iss;
 8003eee:	4b04      	ldr	r3, [pc, #16]	@ (8003f00 <tcp_next_iss+0x34>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3708      	adds	r7, #8
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	0800b6c0 	.word	0x0800b6c0
 8003f00:	24000008 	.word	0x24000008
 8003f04:	2400a300 	.word	0x2400a300

08003f08 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b086      	sub	sp, #24
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	4603      	mov	r3, r0
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	607a      	str	r2, [r7, #4]
 8003f14:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d102      	bne.n	8003f22 <tcp_eff_send_mss_netif+0x1a>
 8003f1c:	4812      	ldr	r0, [pc, #72]	@ (8003f68 <tcp_eff_send_mss_netif+0x60>)
 8003f1e:	f005 fff9 	bl	8009f14 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d101      	bne.n	8003f2c <tcp_eff_send_mss_netif+0x24>
      return sendmss;
 8003f28:	89fb      	ldrh	r3, [r7, #14]
 8003f2a:	e019      	b.n	8003f60 <tcp_eff_send_mss_netif+0x58>
    }
    mtu = outif->mtu;
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003f30:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8003f32:	8afb      	ldrh	r3, [r7, #22]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d012      	beq.n	8003f5e <tcp_eff_send_mss_netif+0x56>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8003f38:	2328      	movs	r3, #40	@ 0x28
 8003f3a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8003f3c:	8afa      	ldrh	r2, [r7, #22]
 8003f3e:	8abb      	ldrh	r3, [r7, #20]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d904      	bls.n	8003f4e <tcp_eff_send_mss_netif+0x46>
 8003f44:	8afa      	ldrh	r2, [r7, #22]
 8003f46:	8abb      	ldrh	r3, [r7, #20]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	e000      	b.n	8003f50 <tcp_eff_send_mss_netif+0x48>
 8003f4e:	2300      	movs	r3, #0
 8003f50:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8003f52:	8a7a      	ldrh	r2, [r7, #18]
 8003f54:	89fb      	ldrh	r3, [r7, #14]
 8003f56:	4293      	cmp	r3, r2
 8003f58:	bf28      	it	cs
 8003f5a:	4613      	movcs	r3, r2
 8003f5c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8003f5e:	89fb      	ldrh	r3, [r7, #14]
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3718      	adds	r7, #24
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	0800b6dc 	.word	0x0800b6dc

08003f6c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d115      	bne.n	8003fac <tcp_netif_ip_addr_changed_pcblist+0x40>
 8003f80:	480e      	ldr	r0, [pc, #56]	@ (8003fbc <tcp_netif_ip_addr_changed_pcblist+0x50>)
 8003f82:	f005 ffc7 	bl	8009f14 <iprintf>

  while (pcb != NULL) {
 8003f86:	e011      	b.n	8003fac <tcp_netif_ip_addr_changed_pcblist+0x40>
    /* PCB bound to current local interface address? */
    if (ip_addr_eq(&pcb->local_ip, old_addr)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d108      	bne.n	8003fa6 <tcp_netif_ip_addr_changed_pcblist+0x3a>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8003f9a:	68f8      	ldr	r0, [r7, #12]
 8003f9c:	f7ff f8c2 	bl	8003124 <tcp_abort>
      pcb = next;
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	60fb      	str	r3, [r7, #12]
 8003fa4:	e002      	b.n	8003fac <tcp_netif_ip_addr_changed_pcblist+0x40>
    } else {
      pcb = pcb->next;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d1ea      	bne.n	8003f88 <tcp_netif_ip_addr_changed_pcblist+0x1c>
    }
  }
}
 8003fb2:	bf00      	nop
 8003fb4:	bf00      	nop
 8003fb6:	3710      	adds	r7, #16
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	0800b704 	.word	0x0800b704

08003fc0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d02a      	beq.n	8004026 <tcp_netif_ip_addr_changed+0x66>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d026      	beq.n	8004026 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8003fd8:	4b15      	ldr	r3, [pc, #84]	@ (8004030 <tcp_netif_ip_addr_changed+0x70>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4619      	mov	r1, r3
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f7ff ffc4 	bl	8003f6c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8003fe4:	4b13      	ldr	r3, [pc, #76]	@ (8004034 <tcp_netif_ip_addr_changed+0x74>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4619      	mov	r1, r3
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f7ff ffbe 	bl	8003f6c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d017      	beq.n	8004026 <tcp_netif_ip_addr_changed+0x66>
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d013      	beq.n	8004026 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8003ffe:	4b0e      	ldr	r3, [pc, #56]	@ (8004038 <tcp_netif_ip_addr_changed+0x78>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	60fb      	str	r3, [r7, #12]
 8004004:	e00c      	b.n	8004020 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_eq(&lpcb->local_ip, old_addr)) {
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	429a      	cmp	r2, r3
 8004010:	d103      	bne.n	800401a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	60fb      	str	r3, [r7, #12]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d1ef      	bne.n	8004006 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8004026:	bf00      	nop
 8004028:	3710      	adds	r7, #16
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	2400a30c 	.word	0x2400a30c
 8004034:	2400a304 	.word	0x2400a304
 8004038:	2400a308 	.word	0x2400a308

0800403c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800403c:	b590      	push	{r4, r7, lr}
 800403e:	b08d      	sub	sp, #52	@ 0x34
 8004040:	af04      	add	r7, sp, #16
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d102      	bne.n	8004052 <tcp_input+0x16>
 800404c:	4898      	ldr	r0, [pc, #608]	@ (80042b0 <tcp_input+0x274>)
 800404e:	f005 ff61 	bl	8009f14 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	4a97      	ldr	r2, [pc, #604]	@ (80042b4 <tcp_input+0x278>)
 8004058:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	895b      	ldrh	r3, [r3, #10]
 800405e:	2b13      	cmp	r3, #19
 8004060:	f240 83b5 	bls.w	80047ce <tcp_input+0x792>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8004064:	4b94      	ldr	r3, [pc, #592]	@ (80042b8 <tcp_input+0x27c>)
 8004066:	695b      	ldr	r3, [r3, #20]
 8004068:	4a93      	ldr	r2, [pc, #588]	@ (80042b8 <tcp_input+0x27c>)
 800406a:	6812      	ldr	r2, [r2, #0]
 800406c:	4611      	mov	r1, r2
 800406e:	4618      	mov	r0, r3
 8004070:	f004 ffa4 	bl	8008fbc <ip4_addr_isbroadcast_u32>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	f040 83ab 	bne.w	80047d2 <tcp_input+0x796>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800407c:	4b8e      	ldr	r3, [pc, #568]	@ (80042b8 <tcp_input+0x27c>)
 800407e:	695b      	ldr	r3, [r3, #20]
 8004080:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8004084:	2be0      	cmp	r3, #224	@ 0xe0
 8004086:	f000 83a4 	beq.w	80047d2 <tcp_input+0x796>
  }

#if CHECKSUM_CHECK_TCP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_TCP) {
    /* Verify TCP checksum. */
    u16_t chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	891a      	ldrh	r2, [r3, #8]
 800408e:	4b8b      	ldr	r3, [pc, #556]	@ (80042bc <tcp_input+0x280>)
 8004090:	9300      	str	r3, [sp, #0]
 8004092:	4b8b      	ldr	r3, [pc, #556]	@ (80042c0 <tcp_input+0x284>)
 8004094:	2106      	movs	r1, #6
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f7fd f98a 	bl	80013b0 <ip_chksum_pseudo>
 800409c:	4603      	mov	r3, r0
 800409e:	823b      	strh	r3, [r7, #16]
                                    ip_current_src_addr(), ip_current_dest_addr());
    if (chksum != 0) {
 80040a0:	8a3b      	ldrh	r3, [r7, #16]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	f040 8397 	bne.w	80047d6 <tcp_input+0x79a>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80040a8:	4b82      	ldr	r3, [pc, #520]	@ (80042b4 <tcp_input+0x278>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	899b      	ldrh	r3, [r3, #12]
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	4618      	mov	r0, r3
 80040b2:	f7fd f84b 	bl	800114c <lwip_htons>
 80040b6:	4603      	mov	r3, r0
 80040b8:	0b1b      	lsrs	r3, r3, #12
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	73fb      	strb	r3, [r7, #15]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80040c2:	7bfb      	ldrb	r3, [r7, #15]
 80040c4:	2b13      	cmp	r3, #19
 80040c6:	f240 8388 	bls.w	80047da <tcp_input+0x79e>
 80040ca:	7bfb      	ldrb	r3, [r7, #15]
 80040cc:	b29a      	uxth	r2, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	891b      	ldrh	r3, [r3, #8]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	f200 8381 	bhi.w	80047da <tcp_input+0x79e>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80040d8:	7bfb      	ldrb	r3, [r7, #15]
 80040da:	b29b      	uxth	r3, r3
 80040dc:	3b14      	subs	r3, #20
 80040de:	b29a      	uxth	r2, r3
 80040e0:	4b78      	ldr	r3, [pc, #480]	@ (80042c4 <tcp_input+0x288>)
 80040e2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80040e4:	4b78      	ldr	r3, [pc, #480]	@ (80042c8 <tcp_input+0x28c>)
 80040e6:	2200      	movs	r2, #0
 80040e8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	895a      	ldrh	r2, [r3, #10]
 80040ee:	7bfb      	ldrb	r3, [r7, #15]
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d309      	bcc.n	800410a <tcp_input+0xce>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80040f6:	4b73      	ldr	r3, [pc, #460]	@ (80042c4 <tcp_input+0x288>)
 80040f8:	881a      	ldrh	r2, [r3, #0]
 80040fa:	4b74      	ldr	r3, [pc, #464]	@ (80042cc <tcp_input+0x290>)
 80040fc:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80040fe:	7bfb      	ldrb	r3, [r7, #15]
 8004100:	4619      	mov	r1, r3
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f7fe fab8 	bl	8002678 <pbuf_remove_header>
 8004108:	e045      	b.n	8004196 <tcp_input+0x15a>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d102      	bne.n	8004118 <tcp_input+0xdc>
 8004112:	486f      	ldr	r0, [pc, #444]	@ (80042d0 <tcp_input+0x294>)
 8004114:	f005 fefe 	bl	8009f14 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8004118:	2114      	movs	r1, #20
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f7fe faac 	bl	8002678 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	895a      	ldrh	r2, [r3, #10]
 8004124:	4b69      	ldr	r3, [pc, #420]	@ (80042cc <tcp_input+0x290>)
 8004126:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8004128:	4b66      	ldr	r3, [pc, #408]	@ (80042c4 <tcp_input+0x288>)
 800412a:	881a      	ldrh	r2, [r3, #0]
 800412c:	4b67      	ldr	r3, [pc, #412]	@ (80042cc <tcp_input+0x290>)
 800412e:	881b      	ldrh	r3, [r3, #0]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	81bb      	strh	r3, [r7, #12]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8004134:	4b65      	ldr	r3, [pc, #404]	@ (80042cc <tcp_input+0x290>)
 8004136:	881b      	ldrh	r3, [r3, #0]
 8004138:	4619      	mov	r1, r3
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f7fe fa9c 	bl	8002678 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	895b      	ldrh	r3, [r3, #10]
 8004146:	89ba      	ldrh	r2, [r7, #12]
 8004148:	429a      	cmp	r2, r3
 800414a:	f200 8348 	bhi.w	80047de <tcp_input+0x7a2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	4a5c      	ldr	r2, [pc, #368]	@ (80042c8 <tcp_input+0x28c>)
 8004156:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	89ba      	ldrh	r2, [r7, #12]
 800415e:	4611      	mov	r1, r2
 8004160:	4618      	mov	r0, r3
 8004162:	f7fe fa89 	bl	8002678 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	891a      	ldrh	r2, [r3, #8]
 800416a:	89bb      	ldrh	r3, [r7, #12]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	b29a      	uxth	r2, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	895b      	ldrh	r3, [r3, #10]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d002      	beq.n	8004182 <tcp_input+0x146>
 800417c:	4855      	ldr	r0, [pc, #340]	@ (80042d4 <tcp_input+0x298>)
 800417e:	f005 fec9 	bl	8009f14 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	891a      	ldrh	r2, [r3, #8]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	891b      	ldrh	r3, [r3, #8]
 800418c:	429a      	cmp	r2, r3
 800418e:	d002      	beq.n	8004196 <tcp_input+0x15a>
 8004190:	4851      	ldr	r0, [pc, #324]	@ (80042d8 <tcp_input+0x29c>)
 8004192:	f005 febf 	bl	8009f14 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8004196:	4b47      	ldr	r3, [pc, #284]	@ (80042b4 <tcp_input+0x278>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	881b      	ldrh	r3, [r3, #0]
 800419c:	b29b      	uxth	r3, r3
 800419e:	4a45      	ldr	r2, [pc, #276]	@ (80042b4 <tcp_input+0x278>)
 80041a0:	6814      	ldr	r4, [r2, #0]
 80041a2:	4618      	mov	r0, r3
 80041a4:	f7fc ffd2 	bl	800114c <lwip_htons>
 80041a8:	4603      	mov	r3, r0
 80041aa:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80041ac:	4b41      	ldr	r3, [pc, #260]	@ (80042b4 <tcp_input+0x278>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	885b      	ldrh	r3, [r3, #2]
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	4a3f      	ldr	r2, [pc, #252]	@ (80042b4 <tcp_input+0x278>)
 80041b6:	6814      	ldr	r4, [r2, #0]
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7fc ffc7 	bl	800114c <lwip_htons>
 80041be:	4603      	mov	r3, r0
 80041c0:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80041c2:	4b3c      	ldr	r3, [pc, #240]	@ (80042b4 <tcp_input+0x278>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	4a3a      	ldr	r2, [pc, #232]	@ (80042b4 <tcp_input+0x278>)
 80041ca:	6814      	ldr	r4, [r2, #0]
 80041cc:	4618      	mov	r0, r3
 80041ce:	f7fc ffd2 	bl	8001176 <lwip_htonl>
 80041d2:	4603      	mov	r3, r0
 80041d4:	6063      	str	r3, [r4, #4]
 80041d6:	6863      	ldr	r3, [r4, #4]
 80041d8:	4a40      	ldr	r2, [pc, #256]	@ (80042dc <tcp_input+0x2a0>)
 80041da:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80041dc:	4b35      	ldr	r3, [pc, #212]	@ (80042b4 <tcp_input+0x278>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	4a34      	ldr	r2, [pc, #208]	@ (80042b4 <tcp_input+0x278>)
 80041e4:	6814      	ldr	r4, [r2, #0]
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7fc ffc5 	bl	8001176 <lwip_htonl>
 80041ec:	4603      	mov	r3, r0
 80041ee:	60a3      	str	r3, [r4, #8]
 80041f0:	68a3      	ldr	r3, [r4, #8]
 80041f2:	4a3b      	ldr	r2, [pc, #236]	@ (80042e0 <tcp_input+0x2a4>)
 80041f4:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80041f6:	4b2f      	ldr	r3, [pc, #188]	@ (80042b4 <tcp_input+0x278>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	89db      	ldrh	r3, [r3, #14]
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	4a2d      	ldr	r2, [pc, #180]	@ (80042b4 <tcp_input+0x278>)
 8004200:	6814      	ldr	r4, [r2, #0]
 8004202:	4618      	mov	r0, r3
 8004204:	f7fc ffa2 	bl	800114c <lwip_htons>
 8004208:	4603      	mov	r3, r0
 800420a:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800420c:	4b29      	ldr	r3, [pc, #164]	@ (80042b4 <tcp_input+0x278>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	899b      	ldrh	r3, [r3, #12]
 8004212:	b29b      	uxth	r3, r3
 8004214:	4618      	mov	r0, r3
 8004216:	f7fc ff99 	bl	800114c <lwip_htons>
 800421a:	4603      	mov	r3, r0
 800421c:	b2db      	uxtb	r3, r3
 800421e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004222:	b2da      	uxtb	r2, r3
 8004224:	4b2f      	ldr	r3, [pc, #188]	@ (80042e4 <tcp_input+0x2a8>)
 8004226:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	891a      	ldrh	r2, [r3, #8]
 800422c:	4b2e      	ldr	r3, [pc, #184]	@ (80042e8 <tcp_input+0x2ac>)
 800422e:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8004230:	4b2c      	ldr	r3, [pc, #176]	@ (80042e4 <tcp_input+0x2a8>)
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	f003 0303 	and.w	r3, r3, #3
 8004238:	2b00      	cmp	r3, #0
 800423a:	d00c      	beq.n	8004256 <tcp_input+0x21a>
    tcplen++;
 800423c:	4b2a      	ldr	r3, [pc, #168]	@ (80042e8 <tcp_input+0x2ac>)
 800423e:	881b      	ldrh	r3, [r3, #0]
 8004240:	3301      	adds	r3, #1
 8004242:	b29a      	uxth	r2, r3
 8004244:	4b28      	ldr	r3, [pc, #160]	@ (80042e8 <tcp_input+0x2ac>)
 8004246:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	891a      	ldrh	r2, [r3, #8]
 800424c:	4b26      	ldr	r3, [pc, #152]	@ (80042e8 <tcp_input+0x2ac>)
 800424e:	881b      	ldrh	r3, [r3, #0]
 8004250:	429a      	cmp	r2, r3
 8004252:	f200 82c6 	bhi.w	80047e2 <tcp_input+0x7a6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8004256:	2300      	movs	r3, #0
 8004258:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800425a:	4b24      	ldr	r3, [pc, #144]	@ (80042ec <tcp_input+0x2b0>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	61fb      	str	r3, [r7, #28]
 8004260:	e08c      	b.n	800437c <tcp_input+0x340>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	7d1b      	ldrb	r3, [r3, #20]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d102      	bne.n	8004270 <tcp_input+0x234>
 800426a:	4821      	ldr	r0, [pc, #132]	@ (80042f0 <tcp_input+0x2b4>)
 800426c:	f005 fe52 	bl	8009f14 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	7d1b      	ldrb	r3, [r3, #20]
 8004274:	2b0a      	cmp	r3, #10
 8004276:	d102      	bne.n	800427e <tcp_input+0x242>
 8004278:	481e      	ldr	r0, [pc, #120]	@ (80042f4 <tcp_input+0x2b8>)
 800427a:	f005 fe4b 	bl	8009f14 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	7d1b      	ldrb	r3, [r3, #20]
 8004282:	2b01      	cmp	r3, #1
 8004284:	d102      	bne.n	800428c <tcp_input+0x250>
 8004286:	481c      	ldr	r0, [pc, #112]	@ (80042f8 <tcp_input+0x2bc>)
 8004288:	f005 fe44 	bl	8009f14 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	7a1b      	ldrb	r3, [r3, #8]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d033      	beq.n	80042fc <tcp_input+0x2c0>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	7a1a      	ldrb	r2, [r3, #8]
 8004298:	4b07      	ldr	r3, [pc, #28]	@ (80042b8 <tcp_input+0x27c>)
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80042a0:	3301      	adds	r3, #1
 80042a2:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d029      	beq.n	80042fc <tcp_input+0x2c0>
      prev = pcb;
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	61bb      	str	r3, [r7, #24]
      continue;
 80042ac:	e063      	b.n	8004376 <tcp_input+0x33a>
 80042ae:	bf00      	nop
 80042b0:	0800b738 	.word	0x0800b738
 80042b4:	2400a328 	.word	0x2400a328
 80042b8:	24003cd0 	.word	0x24003cd0
 80042bc:	24003ce4 	.word	0x24003ce4
 80042c0:	24003ce0 	.word	0x24003ce0
 80042c4:	2400a32c 	.word	0x2400a32c
 80042c8:	2400a330 	.word	0x2400a330
 80042cc:	2400a32e 	.word	0x2400a32e
 80042d0:	0800b750 	.word	0x0800b750
 80042d4:	0800b760 	.word	0x0800b760
 80042d8:	0800b76c 	.word	0x0800b76c
 80042dc:	2400a338 	.word	0x2400a338
 80042e0:	2400a33c 	.word	0x2400a33c
 80042e4:	2400a344 	.word	0x2400a344
 80042e8:	2400a342 	.word	0x2400a342
 80042ec:	2400a30c 	.word	0x2400a30c
 80042f0:	0800b78c 	.word	0x0800b78c
 80042f4:	0800b7b4 	.word	0x0800b7b4
 80042f8:	0800b7e0 	.word	0x0800b7e0
    }

    if (pcb->remote_port == tcphdr->src &&
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	8b1a      	ldrh	r2, [r3, #24]
 8004300:	4b6c      	ldr	r3, [pc, #432]	@ (80044b4 <tcp_input+0x478>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	881b      	ldrh	r3, [r3, #0]
 8004306:	b29b      	uxth	r3, r3
 8004308:	429a      	cmp	r2, r3
 800430a:	d132      	bne.n	8004372 <tcp_input+0x336>
        pcb->local_port == tcphdr->dest &&
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	8ada      	ldrh	r2, [r3, #22]
 8004310:	4b68      	ldr	r3, [pc, #416]	@ (80044b4 <tcp_input+0x478>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	885b      	ldrh	r3, [r3, #2]
 8004316:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8004318:	429a      	cmp	r2, r3
 800431a:	d12a      	bne.n	8004372 <tcp_input+0x336>
        ip_addr_eq(&pcb->remote_ip, ip_current_src_addr()) &&
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	685a      	ldr	r2, [r3, #4]
 8004320:	4b65      	ldr	r3, [pc, #404]	@ (80044b8 <tcp_input+0x47c>)
 8004322:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8004324:	429a      	cmp	r2, r3
 8004326:	d124      	bne.n	8004372 <tcp_input+0x336>
        ip_addr_eq(&pcb->local_ip, ip_current_dest_addr())) {
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	4b62      	ldr	r3, [pc, #392]	@ (80044b8 <tcp_input+0x47c>)
 800432e:	695b      	ldr	r3, [r3, #20]
        ip_addr_eq(&pcb->remote_ip, ip_current_src_addr()) &&
 8004330:	429a      	cmp	r2, r3
 8004332:	d11e      	bne.n	8004372 <tcp_input+0x336>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	69fa      	ldr	r2, [r7, #28]
 800433a:	429a      	cmp	r2, r3
 800433c:	d102      	bne.n	8004344 <tcp_input+0x308>
 800433e:	485f      	ldr	r0, [pc, #380]	@ (80044bc <tcp_input+0x480>)
 8004340:	f005 fde8 	bl	8009f14 <iprintf>
      if (prev != NULL) {
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00a      	beq.n	8004360 <tcp_input+0x324>
        prev->next = pcb->next;
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	68da      	ldr	r2, [r3, #12]
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8004352:	4b5b      	ldr	r3, [pc, #364]	@ (80044c0 <tcp_input+0x484>)
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800435a:	4a59      	ldr	r2, [pc, #356]	@ (80044c0 <tcp_input+0x484>)
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	69fa      	ldr	r2, [r7, #28]
 8004366:	429a      	cmp	r2, r3
 8004368:	d10d      	bne.n	8004386 <tcp_input+0x34a>
 800436a:	4856      	ldr	r0, [pc, #344]	@ (80044c4 <tcp_input+0x488>)
 800436c:	f005 fdd2 	bl	8009f14 <iprintf>
      break;
 8004370:	e009      	b.n	8004386 <tcp_input+0x34a>
    }
    prev = pcb;
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	61fb      	str	r3, [r7, #28]
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	2b00      	cmp	r3, #0
 8004380:	f47f af6f 	bne.w	8004262 <tcp_input+0x226>
 8004384:	e000      	b.n	8004388 <tcp_input+0x34c>
      break;
 8004386:	bf00      	nop
  }

  if (pcb == NULL) {
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	2b00      	cmp	r3, #0
 800438c:	f040 80a2 	bne.w	80044d4 <tcp_input+0x498>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8004390:	4b4d      	ldr	r3, [pc, #308]	@ (80044c8 <tcp_input+0x48c>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	61fb      	str	r3, [r7, #28]
 8004396:	e03b      	b.n	8004410 <tcp_input+0x3d4>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	7d1b      	ldrb	r3, [r3, #20]
 800439c:	2b0a      	cmp	r3, #10
 800439e:	d002      	beq.n	80043a6 <tcp_input+0x36a>
 80043a0:	484a      	ldr	r0, [pc, #296]	@ (80044cc <tcp_input+0x490>)
 80043a2:	f005 fdb7 	bl	8009f14 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	7a1b      	ldrb	r3, [r3, #8]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d009      	beq.n	80043c2 <tcp_input+0x386>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	7a1a      	ldrb	r2, [r3, #8]
 80043b2:	4b41      	ldr	r3, [pc, #260]	@ (80044b8 <tcp_input+0x47c>)
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80043ba:	3301      	adds	r3, #1
 80043bc:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80043be:	429a      	cmp	r2, r3
 80043c0:	d122      	bne.n	8004408 <tcp_input+0x3cc>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	8b1a      	ldrh	r2, [r3, #24]
 80043c6:	4b3b      	ldr	r3, [pc, #236]	@ (80044b4 <tcp_input+0x478>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	881b      	ldrh	r3, [r3, #0]
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d11b      	bne.n	800440a <tcp_input+0x3ce>
          pcb->local_port == tcphdr->dest &&
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	8ada      	ldrh	r2, [r3, #22]
 80043d6:	4b37      	ldr	r3, [pc, #220]	@ (80044b4 <tcp_input+0x478>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	885b      	ldrh	r3, [r3, #2]
 80043dc:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80043de:	429a      	cmp	r2, r3
 80043e0:	d113      	bne.n	800440a <tcp_input+0x3ce>
          ip_addr_eq(&pcb->remote_ip, ip_current_src_addr()) &&
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	685a      	ldr	r2, [r3, #4]
 80043e6:	4b34      	ldr	r3, [pc, #208]	@ (80044b8 <tcp_input+0x47c>)
 80043e8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d10d      	bne.n	800440a <tcp_input+0x3ce>
          ip_addr_eq(&pcb->local_ip, ip_current_dest_addr())) {
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	4b31      	ldr	r3, [pc, #196]	@ (80044b8 <tcp_input+0x47c>)
 80043f4:	695b      	ldr	r3, [r3, #20]
          ip_addr_eq(&pcb->remote_ip, ip_current_src_addr()) &&
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d107      	bne.n	800440a <tcp_input+0x3ce>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80043fa:	69f8      	ldr	r0, [r7, #28]
 80043fc:	f000 fb36 	bl	8004a6c <tcp_timewait_input>
        }
        pbuf_free(p);
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f7fe f9ad 	bl	8002760 <pbuf_free>
        return;
 8004406:	e1f2      	b.n	80047ee <tcp_input+0x7b2>
        continue;
 8004408:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	61fb      	str	r3, [r7, #28]
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1c0      	bne.n	8004398 <tcp_input+0x35c>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8004416:	2300      	movs	r3, #0
 8004418:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800441a:	4b2d      	ldr	r3, [pc, #180]	@ (80044d0 <tcp_input+0x494>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	617b      	str	r3, [r7, #20]
 8004420:	e02a      	b.n	8004478 <tcp_input+0x43c>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	7a1b      	ldrb	r3, [r3, #8]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00c      	beq.n	8004444 <tcp_input+0x408>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	7a1a      	ldrb	r2, [r3, #8]
 800442e:	4b22      	ldr	r3, [pc, #136]	@ (80044b8 <tcp_input+0x47c>)
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004436:	3301      	adds	r3, #1
 8004438:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800443a:	429a      	cmp	r2, r3
 800443c:	d002      	beq.n	8004444 <tcp_input+0x408>
        prev = (struct tcp_pcb *)lpcb;
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	61bb      	str	r3, [r7, #24]
        continue;
 8004442:	e016      	b.n	8004472 <tcp_input+0x436>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	8ada      	ldrh	r2, [r3, #22]
 8004448:	4b1a      	ldr	r3, [pc, #104]	@ (80044b4 <tcp_input+0x478>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	885b      	ldrh	r3, [r3, #2]
 800444e:	b29b      	uxth	r3, r3
 8004450:	429a      	cmp	r2, r3
 8004452:	d10c      	bne.n	800446e <tcp_input+0x432>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_eq(&lpcb->local_ip, ip_current_dest_addr())) {
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	4b17      	ldr	r3, [pc, #92]	@ (80044b8 <tcp_input+0x47c>)
 800445a:	695b      	ldr	r3, [r3, #20]
 800445c:	429a      	cmp	r2, r3
 800445e:	d00f      	beq.n	8004480 <tcp_input+0x444>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00d      	beq.n	8004482 <tcp_input+0x446>
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d009      	beq.n	8004482 <tcp_input+0x446>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	617b      	str	r3, [r7, #20]
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1d1      	bne.n	8004422 <tcp_input+0x3e6>
 800447e:	e000      	b.n	8004482 <tcp_input+0x446>
            break;
 8004480:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d025      	beq.n	80044d4 <tcp_input+0x498>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00a      	beq.n	80044a4 <tcp_input+0x468>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	68da      	ldr	r2, [r3, #12]
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8004496:	4b0e      	ldr	r3, [pc, #56]	@ (80044d0 <tcp_input+0x494>)
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800449e:	4a0c      	ldr	r2, [pc, #48]	@ (80044d0 <tcp_input+0x494>)
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80044a4:	6978      	ldr	r0, [r7, #20]
 80044a6:	f000 f9eb 	bl	8004880 <tcp_listen_input>
      }
      pbuf_free(p);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f7fe f958 	bl	8002760 <pbuf_free>
      return;
 80044b0:	e19d      	b.n	80047ee <tcp_input+0x7b2>
 80044b2:	bf00      	nop
 80044b4:	2400a328 	.word	0x2400a328
 80044b8:	24003cd0 	.word	0x24003cd0
 80044bc:	0800b808 	.word	0x0800b808
 80044c0:	2400a30c 	.word	0x2400a30c
 80044c4:	0800b834 	.word	0x0800b834
 80044c8:	2400a310 	.word	0x2400a310
 80044cc:	0800b860 	.word	0x0800b860
 80044d0:	2400a308 	.word	0x2400a308
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	f000 814e 	beq.w	8004778 <tcp_input+0x73c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80044dc:	4b9c      	ldr	r3, [pc, #624]	@ (8004750 <tcp_input+0x714>)
 80044de:	2200      	movs	r2, #0
 80044e0:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	891a      	ldrh	r2, [r3, #8]
 80044e6:	4b9a      	ldr	r3, [pc, #616]	@ (8004750 <tcp_input+0x714>)
 80044e8:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80044ea:	4a99      	ldr	r2, [pc, #612]	@ (8004750 <tcp_input+0x714>)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80044f0:	4b98      	ldr	r3, [pc, #608]	@ (8004754 <tcp_input+0x718>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a96      	ldr	r2, [pc, #600]	@ (8004750 <tcp_input+0x714>)
 80044f6:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80044f8:	4b97      	ldr	r3, [pc, #604]	@ (8004758 <tcp_input+0x71c>)
 80044fa:	2200      	movs	r2, #0
 80044fc:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80044fe:	4b97      	ldr	r3, [pc, #604]	@ (800475c <tcp_input+0x720>)
 8004500:	2200      	movs	r2, #0
 8004502:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8004504:	4b96      	ldr	r3, [pc, #600]	@ (8004760 <tcp_input+0x724>)
 8004506:	2200      	movs	r2, #0
 8004508:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800450a:	4b96      	ldr	r3, [pc, #600]	@ (8004764 <tcp_input+0x728>)
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	f003 0308 	and.w	r3, r3, #8
 8004512:	2b00      	cmp	r3, #0
 8004514:	d006      	beq.n	8004524 <tcp_input+0x4e8>
      p->flags |= PBUF_FLAG_PUSH;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	7b5b      	ldrb	r3, [r3, #13]
 800451a:	f043 0301 	orr.w	r3, r3, #1
 800451e:	b2da      	uxtb	r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004528:	2b00      	cmp	r3, #0
 800452a:	d017      	beq.n	800455c <tcp_input+0x520>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800452c:	69f8      	ldr	r0, [r7, #28]
 800452e:	f7ff f9ef 	bl	8003910 <tcp_process_refused_data>
 8004532:	4603      	mov	r3, r0
 8004534:	f113 0f0d 	cmn.w	r3, #13
 8004538:	d007      	beq.n	800454a <tcp_input+0x50e>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800453e:	2b00      	cmp	r3, #0
 8004540:	d00c      	beq.n	800455c <tcp_input+0x520>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8004542:	4b89      	ldr	r3, [pc, #548]	@ (8004768 <tcp_input+0x72c>)
 8004544:	881b      	ldrh	r3, [r3, #0]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d008      	beq.n	800455c <tcp_input+0x520>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800454e:	2b00      	cmp	r3, #0
 8004550:	f040 80de 	bne.w	8004710 <tcp_input+0x6d4>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8004554:	69f8      	ldr	r0, [r7, #28]
 8004556:	f002 fd39 	bl	8006fcc <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800455a:	e0d9      	b.n	8004710 <tcp_input+0x6d4>
      }
    }
    tcp_input_pcb = pcb;
 800455c:	4a83      	ldr	r2, [pc, #524]	@ (800476c <tcp_input+0x730>)
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8004562:	69f8      	ldr	r0, [r7, #28]
 8004564:	f000 faf4 	bl	8004b50 <tcp_process>
 8004568:	4603      	mov	r3, r0
 800456a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800456c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004570:	f113 0f0d 	cmn.w	r3, #13
 8004574:	f000 80ce 	beq.w	8004714 <tcp_input+0x6d8>
      if (recv_flags & TF_RESET) {
 8004578:	4b78      	ldr	r3, [pc, #480]	@ (800475c <tcp_input+0x720>)
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	f003 0308 	and.w	r3, r3, #8
 8004580:	2b00      	cmp	r3, #0
 8004582:	d015      	beq.n	80045b0 <tcp_input+0x574>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800458a:	2b00      	cmp	r3, #0
 800458c:	d008      	beq.n	80045a0 <tcp_input+0x564>
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004594:	69fa      	ldr	r2, [r7, #28]
 8004596:	6912      	ldr	r2, [r2, #16]
 8004598:	f06f 010d 	mvn.w	r1, #13
 800459c:	4610      	mov	r0, r2
 800459e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80045a0:	69f9      	ldr	r1, [r7, #28]
 80045a2:	4873      	ldr	r0, [pc, #460]	@ (8004770 <tcp_input+0x734>)
 80045a4:	f7ff fc20 	bl	8003de8 <tcp_pcb_remove>
        tcp_free(pcb);
 80045a8:	69f8      	ldr	r0, [r7, #28]
 80045aa:	f7fe fb2d 	bl	8002c08 <tcp_free>
 80045ae:	e0bc      	b.n	800472a <tcp_input+0x6ee>
      } else {
        err = ERR_OK;
 80045b0:	2300      	movs	r3, #0
 80045b2:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80045b4:	4b6a      	ldr	r3, [pc, #424]	@ (8004760 <tcp_input+0x724>)
 80045b6:	881b      	ldrh	r3, [r3, #0]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d01b      	beq.n	80045f4 <tcp_input+0x5b8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80045bc:	4b68      	ldr	r3, [pc, #416]	@ (8004760 <tcp_input+0x724>)
 80045be:	881b      	ldrh	r3, [r3, #0]
 80045c0:	817b      	strh	r3, [r7, #10]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d009      	beq.n	80045de <tcp_input+0x5a2>
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80045ce:	69fa      	ldr	r2, [r7, #28]
 80045d0:	6910      	ldr	r0, [r2, #16]
 80045d2:	897a      	ldrh	r2, [r7, #10]
 80045d4:	69f9      	ldr	r1, [r7, #28]
 80045d6:	4798      	blx	r3
 80045d8:	4603      	mov	r3, r0
 80045da:	74fb      	strb	r3, [r7, #19]
 80045dc:	e001      	b.n	80045e2 <tcp_input+0x5a6>
 80045de:	2300      	movs	r3, #0
 80045e0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80045e2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80045e6:	f113 0f0d 	cmn.w	r3, #13
 80045ea:	f000 8095 	beq.w	8004718 <tcp_input+0x6dc>
              goto aborted;
            }
          }
          recv_acked = 0;
 80045ee:	4b5c      	ldr	r3, [pc, #368]	@ (8004760 <tcp_input+0x724>)
 80045f0:	2200      	movs	r2, #0
 80045f2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80045f4:	69f8      	ldr	r0, [r7, #28]
 80045f6:	f000 f90b 	bl	8004810 <tcp_input_delayed_close>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	f040 808d 	bne.w	800471c <tcp_input+0x6e0>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8004602:	4b55      	ldr	r3, [pc, #340]	@ (8004758 <tcp_input+0x71c>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d03d      	beq.n	8004686 <tcp_input+0x64a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800460e:	2b00      	cmp	r3, #0
 8004610:	d002      	beq.n	8004618 <tcp_input+0x5dc>
 8004612:	4858      	ldr	r0, [pc, #352]	@ (8004774 <tcp_input+0x738>)
 8004614:	f005 fc7e 	bl	8009f14 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	8b5b      	ldrh	r3, [r3, #26]
 800461c:	f003 0310 	and.w	r3, r3, #16
 8004620:	2b00      	cmp	r3, #0
 8004622:	d008      	beq.n	8004636 <tcp_input+0x5fa>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8004624:	4b4c      	ldr	r3, [pc, #304]	@ (8004758 <tcp_input+0x71c>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4618      	mov	r0, r3
 800462a:	f7fe f899 	bl	8002760 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800462e:	69f8      	ldr	r0, [r7, #28]
 8004630:	f7fe fd78 	bl	8003124 <tcp_abort>
            goto aborted;
 8004634:	e079      	b.n	800472a <tcp_input+0x6ee>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800463c:	2b00      	cmp	r3, #0
 800463e:	d00c      	beq.n	800465a <tcp_input+0x61e>
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	6918      	ldr	r0, [r3, #16]
 800464a:	4b43      	ldr	r3, [pc, #268]	@ (8004758 <tcp_input+0x71c>)
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	2300      	movs	r3, #0
 8004650:	69f9      	ldr	r1, [r7, #28]
 8004652:	47a0      	blx	r4
 8004654:	4603      	mov	r3, r0
 8004656:	74fb      	strb	r3, [r7, #19]
 8004658:	e008      	b.n	800466c <tcp_input+0x630>
 800465a:	4b3f      	ldr	r3, [pc, #252]	@ (8004758 <tcp_input+0x71c>)
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	2300      	movs	r3, #0
 8004660:	69f9      	ldr	r1, [r7, #28]
 8004662:	2000      	movs	r0, #0
 8004664:	f7ff f9f1 	bl	8003a4a <tcp_recv_null>
 8004668:	4603      	mov	r3, r0
 800466a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800466c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004670:	f113 0f0d 	cmn.w	r3, #13
 8004674:	d054      	beq.n	8004720 <tcp_input+0x6e4>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8004676:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d003      	beq.n	8004686 <tcp_input+0x64a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800467e:	4b36      	ldr	r3, [pc, #216]	@ (8004758 <tcp_input+0x71c>)
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8004686:	4b35      	ldr	r3, [pc, #212]	@ (800475c <tcp_input+0x720>)
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	f003 0320 	and.w	r3, r3, #32
 800468e:	2b00      	cmp	r3, #0
 8004690:	d031      	beq.n	80046f6 <tcp_input+0x6ba>
          if (pcb->refused_data != NULL) {
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004696:	2b00      	cmp	r3, #0
 8004698:	d009      	beq.n	80046ae <tcp_input+0x672>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800469e:	7b5a      	ldrb	r2, [r3, #13]
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046a4:	f042 0220 	orr.w	r2, r2, #32
 80046a8:	b2d2      	uxtb	r2, r2
 80046aa:	735a      	strb	r2, [r3, #13]
 80046ac:	e023      	b.n	80046f6 <tcp_input+0x6ba>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046b2:	f640 3268 	movw	r2, #2920	@ 0xb68
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d005      	beq.n	80046c6 <tcp_input+0x68a>
              pcb->rcv_wnd++;
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046be:	3301      	adds	r3, #1
 80046c0:	b29a      	uxth	r2, r3
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d00b      	beq.n	80046e8 <tcp_input+0x6ac>
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	6918      	ldr	r0, [r3, #16]
 80046da:	2300      	movs	r3, #0
 80046dc:	2200      	movs	r2, #0
 80046de:	69f9      	ldr	r1, [r7, #28]
 80046e0:	47a0      	blx	r4
 80046e2:	4603      	mov	r3, r0
 80046e4:	74fb      	strb	r3, [r7, #19]
 80046e6:	e001      	b.n	80046ec <tcp_input+0x6b0>
 80046e8:	2300      	movs	r3, #0
 80046ea:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80046ec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80046f0:	f113 0f0d 	cmn.w	r3, #13
 80046f4:	d016      	beq.n	8004724 <tcp_input+0x6e8>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80046f6:	4b1d      	ldr	r3, [pc, #116]	@ (800476c <tcp_input+0x730>)
 80046f8:	2200      	movs	r2, #0
 80046fa:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80046fc:	69f8      	ldr	r0, [r7, #28]
 80046fe:	f000 f887 	bl	8004810 <tcp_input_delayed_close>
 8004702:	4603      	mov	r3, r0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d10f      	bne.n	8004728 <tcp_input+0x6ec>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8004708:	69f8      	ldr	r0, [r7, #28]
 800470a:	f001 fe57 	bl	80063bc <tcp_output>
 800470e:	e00c      	b.n	800472a <tcp_input+0x6ee>
        goto aborted;
 8004710:	bf00      	nop
 8004712:	e00a      	b.n	800472a <tcp_input+0x6ee>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8004714:	bf00      	nop
 8004716:	e008      	b.n	800472a <tcp_input+0x6ee>
              goto aborted;
 8004718:	bf00      	nop
 800471a:	e006      	b.n	800472a <tcp_input+0x6ee>
          goto aborted;
 800471c:	bf00      	nop
 800471e:	e004      	b.n	800472a <tcp_input+0x6ee>
            goto aborted;
 8004720:	bf00      	nop
 8004722:	e002      	b.n	800472a <tcp_input+0x6ee>
              goto aborted;
 8004724:	bf00      	nop
 8004726:	e000      	b.n	800472a <tcp_input+0x6ee>
          goto aborted;
 8004728:	bf00      	nop
    tcp_input_pcb = NULL;
 800472a:	4b10      	ldr	r3, [pc, #64]	@ (800476c <tcp_input+0x730>)
 800472c:	2200      	movs	r2, #0
 800472e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8004730:	4b09      	ldr	r3, [pc, #36]	@ (8004758 <tcp_input+0x71c>)
 8004732:	2200      	movs	r2, #0
 8004734:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8004736:	4b06      	ldr	r3, [pc, #24]	@ (8004750 <tcp_input+0x714>)
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d056      	beq.n	80047ec <tcp_input+0x7b0>
      pbuf_free(inseg.p);
 800473e:	4b04      	ldr	r3, [pc, #16]	@ (8004750 <tcp_input+0x714>)
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	4618      	mov	r0, r3
 8004744:	f7fe f80c 	bl	8002760 <pbuf_free>
      inseg.p = NULL;
 8004748:	4b01      	ldr	r3, [pc, #4]	@ (8004750 <tcp_input+0x714>)
 800474a:	2200      	movs	r2, #0
 800474c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800474e:	e04d      	b.n	80047ec <tcp_input+0x7b0>
 8004750:	2400a318 	.word	0x2400a318
 8004754:	2400a328 	.word	0x2400a328
 8004758:	2400a348 	.word	0x2400a348
 800475c:	2400a345 	.word	0x2400a345
 8004760:	2400a340 	.word	0x2400a340
 8004764:	2400a344 	.word	0x2400a344
 8004768:	2400a342 	.word	0x2400a342
 800476c:	2400a34c 	.word	0x2400a34c
 8004770:	2400a30c 	.word	0x2400a30c
 8004774:	0800b890 	.word	0x0800b890
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8004778:	4b1e      	ldr	r3, [pc, #120]	@ (80047f4 <tcp_input+0x7b8>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	899b      	ldrh	r3, [r3, #12]
 800477e:	b29b      	uxth	r3, r3
 8004780:	4618      	mov	r0, r3
 8004782:	f7fc fce3 	bl	800114c <lwip_htons>
 8004786:	4603      	mov	r3, r0
 8004788:	b2db      	uxtb	r3, r3
 800478a:	f003 0304 	and.w	r3, r3, #4
 800478e:	2b00      	cmp	r3, #0
 8004790:	d119      	bne.n	80047c6 <tcp_input+0x78a>
      tcp_rst_netif(ip_data.current_input_netif, ackno, seqno + tcplen, ip_current_dest_addr(),
 8004792:	4b19      	ldr	r3, [pc, #100]	@ (80047f8 <tcp_input+0x7bc>)
 8004794:	6858      	ldr	r0, [r3, #4]
 8004796:	4b19      	ldr	r3, [pc, #100]	@ (80047fc <tcp_input+0x7c0>)
 8004798:	6819      	ldr	r1, [r3, #0]
 800479a:	4b19      	ldr	r3, [pc, #100]	@ (8004800 <tcp_input+0x7c4>)
 800479c:	881b      	ldrh	r3, [r3, #0]
 800479e:	461a      	mov	r2, r3
 80047a0:	4b18      	ldr	r3, [pc, #96]	@ (8004804 <tcp_input+0x7c8>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	18d4      	adds	r4, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80047a6:	4b13      	ldr	r3, [pc, #76]	@ (80047f4 <tcp_input+0x7b8>)
 80047a8:	681b      	ldr	r3, [r3, #0]
      tcp_rst_netif(ip_data.current_input_netif, ackno, seqno + tcplen, ip_current_dest_addr(),
 80047aa:	885b      	ldrh	r3, [r3, #2]
 80047ac:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80047ae:	4a11      	ldr	r2, [pc, #68]	@ (80047f4 <tcp_input+0x7b8>)
 80047b0:	6812      	ldr	r2, [r2, #0]
      tcp_rst_netif(ip_data.current_input_netif, ackno, seqno + tcplen, ip_current_dest_addr(),
 80047b2:	8812      	ldrh	r2, [r2, #0]
 80047b4:	b292      	uxth	r2, r2
 80047b6:	9202      	str	r2, [sp, #8]
 80047b8:	9301      	str	r3, [sp, #4]
 80047ba:	4b13      	ldr	r3, [pc, #76]	@ (8004808 <tcp_input+0x7cc>)
 80047bc:	9300      	str	r3, [sp, #0]
 80047be:	4b13      	ldr	r3, [pc, #76]	@ (800480c <tcp_input+0x7d0>)
 80047c0:	4622      	mov	r2, r4
 80047c2:	f002 fbdc 	bl	8006f7e <tcp_rst_netif>
    pbuf_free(p);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f7fd ffca 	bl	8002760 <pbuf_free>
  return;
 80047cc:	e00e      	b.n	80047ec <tcp_input+0x7b0>
    goto dropped;
 80047ce:	bf00      	nop
 80047d0:	e008      	b.n	80047e4 <tcp_input+0x7a8>
    goto dropped;
 80047d2:	bf00      	nop
 80047d4:	e006      	b.n	80047e4 <tcp_input+0x7a8>
      goto dropped;
 80047d6:	bf00      	nop
 80047d8:	e004      	b.n	80047e4 <tcp_input+0x7a8>
    goto dropped;
 80047da:	bf00      	nop
 80047dc:	e002      	b.n	80047e4 <tcp_input+0x7a8>
      goto dropped;
 80047de:	bf00      	nop
 80047e0:	e000      	b.n	80047e4 <tcp_input+0x7a8>
      goto dropped;
 80047e2:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f7fd ffbb 	bl	8002760 <pbuf_free>
 80047ea:	e000      	b.n	80047ee <tcp_input+0x7b2>
  return;
 80047ec:	bf00      	nop
}
 80047ee:	3724      	adds	r7, #36	@ 0x24
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd90      	pop	{r4, r7, pc}
 80047f4:	2400a328 	.word	0x2400a328
 80047f8:	24003cd0 	.word	0x24003cd0
 80047fc:	2400a33c 	.word	0x2400a33c
 8004800:	2400a342 	.word	0x2400a342
 8004804:	2400a338 	.word	0x2400a338
 8004808:	24003ce0 	.word	0x24003ce0
 800480c:	24003ce4 	.word	0x24003ce4

08004810 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b082      	sub	sp, #8
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d102      	bne.n	8004824 <tcp_input_delayed_close+0x14>
 800481e:	4815      	ldr	r0, [pc, #84]	@ (8004874 <tcp_input_delayed_close+0x64>)
 8004820:	f005 fb78 	bl	8009f14 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8004824:	4b14      	ldr	r3, [pc, #80]	@ (8004878 <tcp_input_delayed_close+0x68>)
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	f003 0310 	and.w	r3, r3, #16
 800482c:	2b00      	cmp	r3, #0
 800482e:	d01c      	beq.n	800486a <tcp_input_delayed_close+0x5a>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	8b5b      	ldrh	r3, [r3, #26]
 8004834:	f003 0310 	and.w	r3, r3, #16
 8004838:	2b00      	cmp	r3, #0
 800483a:	d10d      	bne.n	8004858 <tcp_input_delayed_close+0x48>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004842:	2b00      	cmp	r3, #0
 8004844:	d008      	beq.n	8004858 <tcp_input_delayed_close+0x48>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	6912      	ldr	r2, [r2, #16]
 8004850:	f06f 010e 	mvn.w	r1, #14
 8004854:	4610      	mov	r0, r2
 8004856:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8004858:	6879      	ldr	r1, [r7, #4]
 800485a:	4808      	ldr	r0, [pc, #32]	@ (800487c <tcp_input_delayed_close+0x6c>)
 800485c:	f7ff fac4 	bl	8003de8 <tcp_pcb_remove>
    tcp_free(pcb);
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f7fe f9d1 	bl	8002c08 <tcp_free>
    return 1;
 8004866:	2301      	movs	r3, #1
 8004868:	e000      	b.n	800486c <tcp_input_delayed_close+0x5c>
  }
  return 0;
 800486a:	2300      	movs	r3, #0
}
 800486c:	4618      	mov	r0, r3
 800486e:	3708      	adds	r7, #8
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}
 8004874:	0800b8ac 	.word	0x0800b8ac
 8004878:	2400a345 	.word	0x2400a345
 800487c:	2400a30c 	.word	0x2400a30c

08004880 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8004880:	b590      	push	{r4, r7, lr}
 8004882:	b08b      	sub	sp, #44	@ 0x2c
 8004884:	af04      	add	r7, sp, #16
 8004886:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8004888:	4b6d      	ldr	r3, [pc, #436]	@ (8004a40 <tcp_listen_input+0x1c0>)
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	f003 0304 	and.w	r3, r3, #4
 8004890:	2b00      	cmp	r3, #0
 8004892:	f040 80cf 	bne.w	8004a34 <tcp_listen_input+0x1b4>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d102      	bne.n	80048a2 <tcp_listen_input+0x22>
 800489c:	4869      	ldr	r0, [pc, #420]	@ (8004a44 <tcp_listen_input+0x1c4>)
 800489e:	f005 fb39 	bl	8009f14 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80048a2:	4b67      	ldr	r3, [pc, #412]	@ (8004a40 <tcp_listen_input+0x1c0>)
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	f003 0310 	and.w	r3, r3, #16
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d01a      	beq.n	80048e4 <tcp_listen_input+0x64>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst_netif(ip_data.current_input_netif, ackno, seqno + tcplen, ip_current_dest_addr(),
 80048ae:	4b66      	ldr	r3, [pc, #408]	@ (8004a48 <tcp_listen_input+0x1c8>)
 80048b0:	6858      	ldr	r0, [r3, #4]
 80048b2:	4b66      	ldr	r3, [pc, #408]	@ (8004a4c <tcp_listen_input+0x1cc>)
 80048b4:	6819      	ldr	r1, [r3, #0]
 80048b6:	4b66      	ldr	r3, [pc, #408]	@ (8004a50 <tcp_listen_input+0x1d0>)
 80048b8:	881b      	ldrh	r3, [r3, #0]
 80048ba:	461a      	mov	r2, r3
 80048bc:	4b65      	ldr	r3, [pc, #404]	@ (8004a54 <tcp_listen_input+0x1d4>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	18d4      	adds	r4, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80048c2:	4b65      	ldr	r3, [pc, #404]	@ (8004a58 <tcp_listen_input+0x1d8>)
 80048c4:	681b      	ldr	r3, [r3, #0]
    tcp_rst_netif(ip_data.current_input_netif, ackno, seqno + tcplen, ip_current_dest_addr(),
 80048c6:	885b      	ldrh	r3, [r3, #2]
 80048c8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80048ca:	4a63      	ldr	r2, [pc, #396]	@ (8004a58 <tcp_listen_input+0x1d8>)
 80048cc:	6812      	ldr	r2, [r2, #0]
    tcp_rst_netif(ip_data.current_input_netif, ackno, seqno + tcplen, ip_current_dest_addr(),
 80048ce:	8812      	ldrh	r2, [r2, #0]
 80048d0:	b292      	uxth	r2, r2
 80048d2:	9202      	str	r2, [sp, #8]
 80048d4:	9301      	str	r3, [sp, #4]
 80048d6:	4b61      	ldr	r3, [pc, #388]	@ (8004a5c <tcp_listen_input+0x1dc>)
 80048d8:	9300      	str	r3, [sp, #0]
 80048da:	4b61      	ldr	r3, [pc, #388]	@ (8004a60 <tcp_listen_input+0x1e0>)
 80048dc:	4622      	mov	r2, r4
 80048de:	f002 fb4e 	bl	8006f7e <tcp_rst_netif>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80048e2:	e0a9      	b.n	8004a38 <tcp_listen_input+0x1b8>
  } else if (flags & TCP_SYN) {
 80048e4:	4b56      	ldr	r3, [pc, #344]	@ (8004a40 <tcp_listen_input+0x1c0>)
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	f003 0302 	and.w	r3, r3, #2
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	f000 80a3 	beq.w	8004a38 <tcp_listen_input+0x1b8>
    npcb = tcp_alloc(pcb->prio);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	7d5b      	ldrb	r3, [r3, #21]
 80048f6:	4618      	mov	r0, r3
 80048f8:	f7ff f9b6 	bl	8003c68 <tcp_alloc>
 80048fc:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d111      	bne.n	8004928 <tcp_listen_input+0xa8>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	699b      	ldr	r3, [r3, #24]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d00a      	beq.n	8004922 <tcp_listen_input+0xa2>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	699b      	ldr	r3, [r3, #24]
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	6910      	ldr	r0, [r2, #16]
 8004914:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004918:	2100      	movs	r1, #0
 800491a:	4798      	blx	r3
 800491c:	4603      	mov	r3, r0
 800491e:	73bb      	strb	r3, [r7, #14]
      return;
 8004920:	e08b      	b.n	8004a3a <tcp_listen_input+0x1ba>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8004922:	23f0      	movs	r3, #240	@ 0xf0
 8004924:	73bb      	strb	r3, [r7, #14]
      return;
 8004926:	e088      	b.n	8004a3a <tcp_listen_input+0x1ba>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8004928:	4b47      	ldr	r3, [pc, #284]	@ (8004a48 <tcp_listen_input+0x1c8>)
 800492a:	695a      	ldr	r2, [r3, #20]
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8004930:	4b45      	ldr	r3, [pc, #276]	@ (8004a48 <tcp_listen_input+0x1c8>)
 8004932:	691a      	ldr	r2, [r3, #16]
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	8ada      	ldrh	r2, [r3, #22]
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8004940:	4b45      	ldr	r3, [pc, #276]	@ (8004a58 <tcp_listen_input+0x1d8>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	881b      	ldrh	r3, [r3, #0]
 8004946:	b29a      	uxth	r2, r3
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	2203      	movs	r2, #3
 8004950:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8004952:	4b40      	ldr	r3, [pc, #256]	@ (8004a54 <tcp_listen_input+0x1d4>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	1c5a      	adds	r2, r3, #1
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8004964:	6978      	ldr	r0, [r7, #20]
 8004966:	f7ff fab1 	bl	8003ecc <tcp_next_iss>
 800496a:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	693a      	ldr	r2, [r7, #16]
 8004970:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	693a      	ldr	r2, [r7, #16]
 8004976:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	693a      	ldr	r2, [r7, #16]
 800497c:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	693a      	ldr	r2, [r7, #16]
 8004982:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8004984:	4b33      	ldr	r3, [pc, #204]	@ (8004a54 <tcp_listen_input+0x1d4>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	1e5a      	subs	r2, r3, #1
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	691a      	ldr	r2, [r3, #16]
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	679a      	str	r2, [r3, #120]	@ 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	7a5b      	ldrb	r3, [r3, #9]
 80049a0:	f003 030c 	and.w	r3, r3, #12
 80049a4:	b2da      	uxtb	r2, r3
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	7a1a      	ldrb	r2, [r3, #8]
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80049b2:	4b2c      	ldr	r3, [pc, #176]	@ (8004a64 <tcp_listen_input+0x1e4>)
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	60da      	str	r2, [r3, #12]
 80049ba:	4a2a      	ldr	r2, [pc, #168]	@ (8004a64 <tcp_listen_input+0x1e4>)
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	6013      	str	r3, [r2, #0]
 80049c0:	f002 fc5c 	bl	800727c <tcp_timer_needed>
 80049c4:	4b28      	ldr	r3, [pc, #160]	@ (8004a68 <tcp_listen_input+0x1e8>)
 80049c6:	2201      	movs	r2, #1
 80049c8:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80049ca:	6978      	ldr	r0, [r7, #20]
 80049cc:	f001 f97e 	bl	8005ccc <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80049d0:	4b21      	ldr	r3, [pc, #132]	@ (8004a58 <tcp_listen_input+0x1d8>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	89db      	ldrh	r3, [r3, #14]
 80049d6:	b29a      	uxth	r2, r3
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	3304      	adds	r3, #4
 80049f2:	4618      	mov	r0, r3
 80049f4:	f003 ffe6 	bl	80089c4 <ip4_route>
 80049f8:	4601      	mov	r1, r0
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	3304      	adds	r3, #4
 80049fe:	461a      	mov	r2, r3
 8004a00:	4620      	mov	r0, r4
 8004a02:	f7ff fa81 	bl	8003f08 <tcp_eff_send_mss_netif>
 8004a06:	4603      	mov	r3, r0
 8004a08:	461a      	mov	r2, r3
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8004a0e:	2112      	movs	r1, #18
 8004a10:	6978      	ldr	r0, [r7, #20]
 8004a12:	f001 fc01 	bl	8006218 <tcp_enqueue_flags>
 8004a16:	4603      	mov	r3, r0
 8004a18:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8004a1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d004      	beq.n	8004a2c <tcp_listen_input+0x1ac>
      tcp_abandon(npcb, 0);
 8004a22:	2100      	movs	r1, #0
 8004a24:	6978      	ldr	r0, [r7, #20]
 8004a26:	f7fe fad9 	bl	8002fdc <tcp_abandon>
      return;
 8004a2a:	e006      	b.n	8004a3a <tcp_listen_input+0x1ba>
    tcp_output(npcb);
 8004a2c:	6978      	ldr	r0, [r7, #20]
 8004a2e:	f001 fcc5 	bl	80063bc <tcp_output>
  return;
 8004a32:	e001      	b.n	8004a38 <tcp_listen_input+0x1b8>
    return;
 8004a34:	bf00      	nop
 8004a36:	e000      	b.n	8004a3a <tcp_listen_input+0x1ba>
  return;
 8004a38:	bf00      	nop
}
 8004a3a:	371c      	adds	r7, #28
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd90      	pop	{r4, r7, pc}
 8004a40:	2400a344 	.word	0x2400a344
 8004a44:	0800b8d4 	.word	0x0800b8d4
 8004a48:	24003cd0 	.word	0x24003cd0
 8004a4c:	2400a33c 	.word	0x2400a33c
 8004a50:	2400a342 	.word	0x2400a342
 8004a54:	2400a338 	.word	0x2400a338
 8004a58:	2400a328 	.word	0x2400a328
 8004a5c:	24003ce0 	.word	0x24003ce0
 8004a60:	24003ce4 	.word	0x24003ce4
 8004a64:	2400a30c 	.word	0x2400a30c
 8004a68:	2400a314 	.word	0x2400a314

08004a6c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b086      	sub	sp, #24
 8004a70:	af04      	add	r7, sp, #16
 8004a72:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8004a74:	4b2d      	ldr	r3, [pc, #180]	@ (8004b2c <tcp_timewait_input+0xc0>)
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	f003 0304 	and.w	r3, r3, #4
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d14f      	bne.n	8004b20 <tcp_timewait_input+0xb4>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d102      	bne.n	8004a8c <tcp_timewait_input+0x20>
 8004a86:	482a      	ldr	r0, [pc, #168]	@ (8004b30 <tcp_timewait_input+0xc4>)
 8004a88:	f005 fa44 	bl	8009f14 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8004a8c:	4b27      	ldr	r3, [pc, #156]	@ (8004b2c <tcp_timewait_input+0xc0>)
 8004a8e:	781b      	ldrb	r3, [r3, #0]
 8004a90:	f003 0302 	and.w	r3, r3, #2
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d02a      	beq.n	8004aee <tcp_timewait_input+0x82>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8004a98:	4b26      	ldr	r3, [pc, #152]	@ (8004b34 <tcp_timewait_input+0xc8>)
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	db2d      	blt.n	8004b02 <tcp_timewait_input+0x96>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8004aae:	441a      	add	r2, r3
 8004ab0:	4b20      	ldr	r3, [pc, #128]	@ (8004b34 <tcp_timewait_input+0xc8>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	db23      	blt.n	8004b02 <tcp_timewait_input+0x96>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8004aba:	4b1f      	ldr	r3, [pc, #124]	@ (8004b38 <tcp_timewait_input+0xcc>)
 8004abc:	6819      	ldr	r1, [r3, #0]
 8004abe:	4b1f      	ldr	r3, [pc, #124]	@ (8004b3c <tcp_timewait_input+0xd0>)
 8004ac0:	881b      	ldrh	r3, [r3, #0]
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	4b1b      	ldr	r3, [pc, #108]	@ (8004b34 <tcp_timewait_input+0xc8>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8004aca:	4b1d      	ldr	r3, [pc, #116]	@ (8004b40 <tcp_timewait_input+0xd4>)
 8004acc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8004ace:	885b      	ldrh	r3, [r3, #2]
 8004ad0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8004ad2:	4a1b      	ldr	r2, [pc, #108]	@ (8004b40 <tcp_timewait_input+0xd4>)
 8004ad4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8004ad6:	8812      	ldrh	r2, [r2, #0]
 8004ad8:	b292      	uxth	r2, r2
 8004ada:	9202      	str	r2, [sp, #8]
 8004adc:	9301      	str	r3, [sp, #4]
 8004ade:	4b19      	ldr	r3, [pc, #100]	@ (8004b44 <tcp_timewait_input+0xd8>)
 8004ae0:	9300      	str	r3, [sp, #0]
 8004ae2:	4b19      	ldr	r3, [pc, #100]	@ (8004b48 <tcp_timewait_input+0xdc>)
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f002 fa28 	bl	8006f3c <tcp_rst>
      return;
 8004aec:	e01b      	b.n	8004b26 <tcp_timewait_input+0xba>
    }
  } else if (flags & TCP_FIN) {
 8004aee:	4b0f      	ldr	r3, [pc, #60]	@ (8004b2c <tcp_timewait_input+0xc0>)
 8004af0:	781b      	ldrb	r3, [r3, #0]
 8004af2:	f003 0301 	and.w	r3, r3, #1
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d003      	beq.n	8004b02 <tcp_timewait_input+0x96>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8004afa:	4b14      	ldr	r3, [pc, #80]	@ (8004b4c <tcp_timewait_input+0xe0>)
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8004b02:	4b0e      	ldr	r3, [pc, #56]	@ (8004b3c <tcp_timewait_input+0xd0>)
 8004b04:	881b      	ldrh	r3, [r3, #0]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d00c      	beq.n	8004b24 <tcp_timewait_input+0xb8>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	8b5b      	ldrh	r3, [r3, #26]
 8004b0e:	f043 0302 	orr.w	r3, r3, #2
 8004b12:	b29a      	uxth	r2, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f001 fc4f 	bl	80063bc <tcp_output>
  }
  return;
 8004b1e:	e001      	b.n	8004b24 <tcp_timewait_input+0xb8>
    return;
 8004b20:	bf00      	nop
 8004b22:	e000      	b.n	8004b26 <tcp_timewait_input+0xba>
  return;
 8004b24:	bf00      	nop
}
 8004b26:	3708      	adds	r7, #8
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	2400a344 	.word	0x2400a344
 8004b30:	0800b8f4 	.word	0x0800b8f4
 8004b34:	2400a338 	.word	0x2400a338
 8004b38:	2400a33c 	.word	0x2400a33c
 8004b3c:	2400a342 	.word	0x2400a342
 8004b40:	2400a328 	.word	0x2400a328
 8004b44:	24003ce0 	.word	0x24003ce0
 8004b48:	24003ce4 	.word	0x24003ce4
 8004b4c:	2400a300 	.word	0x2400a300

08004b50 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8004b50:	b590      	push	{r4, r7, lr}
 8004b52:	b08d      	sub	sp, #52	@ 0x34
 8004b54:	af04      	add	r7, sp, #16
 8004b56:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d102      	bne.n	8004b6c <tcp_process+0x1c>
 8004b66:	489d      	ldr	r0, [pc, #628]	@ (8004ddc <tcp_process+0x28c>)
 8004b68:	f005 f9d4 	bl	8009f14 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8004b6c:	4b9c      	ldr	r3, [pc, #624]	@ (8004de0 <tcp_process+0x290>)
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	f003 0304 	and.w	r3, r3, #4
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d04a      	beq.n	8004c0e <tcp_process+0xbe>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	7d1b      	ldrb	r3, [r3, #20]
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d108      	bne.n	8004b92 <tcp_process+0x42>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004b84:	4b97      	ldr	r3, [pc, #604]	@ (8004de4 <tcp_process+0x294>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d123      	bne.n	8004bd4 <tcp_process+0x84>
        acceptable = 1;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	76fb      	strb	r3, [r7, #27]
 8004b90:	e020      	b.n	8004bd4 <tcp_process+0x84>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b96:	4b94      	ldr	r3, [pc, #592]	@ (8004de8 <tcp_process+0x298>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d102      	bne.n	8004ba4 <tcp_process+0x54>
        acceptable = 1;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	76fb      	strb	r3, [r7, #27]
 8004ba2:	e017      	b.n	8004bd4 <tcp_process+0x84>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8004ba4:	4b90      	ldr	r3, [pc, #576]	@ (8004de8 <tcp_process+0x298>)
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	db10      	blt.n	8004bd4 <tcp_process+0x84>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8004bba:	441a      	add	r2, r3
 8004bbc:	4b8a      	ldr	r3, [pc, #552]	@ (8004de8 <tcp_process+0x298>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	db06      	blt.n	8004bd4 <tcp_process+0x84>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	8b5b      	ldrh	r3, [r3, #26]
 8004bca:	f043 0302 	orr.w	r3, r3, #2
 8004bce:	b29a      	uxth	r2, r3
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8004bd4:	7efb      	ldrb	r3, [r7, #27]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d017      	beq.n	8004c0a <tcp_process+0xba>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	7d1b      	ldrb	r3, [r3, #20]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d102      	bne.n	8004be8 <tcp_process+0x98>
 8004be2:	4882      	ldr	r0, [pc, #520]	@ (8004dec <tcp_process+0x29c>)
 8004be4:	f005 f996 	bl	8009f14 <iprintf>
      recv_flags |= TF_RESET;
 8004be8:	4b81      	ldr	r3, [pc, #516]	@ (8004df0 <tcp_process+0x2a0>)
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	f043 0308 	orr.w	r3, r3, #8
 8004bf0:	b2da      	uxtb	r2, r3
 8004bf2:	4b7f      	ldr	r3, [pc, #508]	@ (8004df0 <tcp_process+0x2a0>)
 8004bf4:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	8b5b      	ldrh	r3, [r3, #26]
 8004bfa:	f023 0301 	bic.w	r3, r3, #1
 8004bfe:	b29a      	uxth	r2, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8004c04:	f06f 030d 	mvn.w	r3, #13
 8004c08:	e374      	b.n	80052f4 <tcp_process+0x7a4>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	e372      	b.n	80052f4 <tcp_process+0x7a4>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8004c0e:	4b74      	ldr	r3, [pc, #464]	@ (8004de0 <tcp_process+0x290>)
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	f003 0302 	and.w	r3, r3, #2
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d010      	beq.n	8004c3c <tcp_process+0xec>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	7d1b      	ldrb	r3, [r3, #20]
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d00c      	beq.n	8004c3c <tcp_process+0xec>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	7d1b      	ldrb	r3, [r3, #20]
 8004c26:	2b03      	cmp	r3, #3
 8004c28:	d008      	beq.n	8004c3c <tcp_process+0xec>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	8b5b      	ldrh	r3, [r3, #26]
 8004c2e:	f043 0302 	orr.w	r3, r3, #2
 8004c32:	b29a      	uxth	r2, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	e35b      	b.n	80052f4 <tcp_process+0x7a4>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	8b5b      	ldrh	r3, [r3, #26]
 8004c40:	f003 0310 	and.w	r3, r3, #16
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d103      	bne.n	8004c50 <tcp_process+0x100>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8004c48:	4b6a      	ldr	r3, [pc, #424]	@ (8004df4 <tcp_process+0x2a4>)
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 2097 	strb.w	r2, [r3, #151]	@ 0x97
  pcb->persist_probe = 0;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96

  tcp_parseopt(pcb);
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f001 f833 	bl	8005ccc <tcp_parseopt>

  if (flags & TCP_SYN) {
 8004c66:	4b5e      	ldr	r3, [pc, #376]	@ (8004de0 <tcp_process+0x290>)
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	f003 0302 	and.w	r3, r3, #2
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d009      	beq.n	8004c86 <tcp_process+0x136>
    /* accept SYN only in 2 states: */
    if ((pcb->state != SYN_SENT) && (pcb->state != SYN_RCVD)) {
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	7d1b      	ldrb	r3, [r3, #20]
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d005      	beq.n	8004c86 <tcp_process+0x136>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	7d1b      	ldrb	r3, [r3, #20]
 8004c7e:	2b03      	cmp	r3, #3
 8004c80:	d001      	beq.n	8004c86 <tcp_process+0x136>
      return ERR_OK;
 8004c82:	2300      	movs	r3, #0
 8004c84:	e336      	b.n	80052f4 <tcp_process+0x7a4>
    }
  }

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	7d1b      	ldrb	r3, [r3, #20]
 8004c8a:	3b02      	subs	r3, #2
 8004c8c:	2b07      	cmp	r3, #7
 8004c8e:	f200 8321 	bhi.w	80052d4 <tcp_process+0x784>
 8004c92:	a201      	add	r2, pc, #4	@ (adr r2, 8004c98 <tcp_process+0x148>)
 8004c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c98:	08004cb9 	.word	0x08004cb9
 8004c9c:	08004ed1 	.word	0x08004ed1
 8004ca0:	0800503f 	.word	0x0800503f
 8004ca4:	08005069 	.word	0x08005069
 8004ca8:	08005183 	.word	0x08005183
 8004cac:	0800503f 	.word	0x0800503f
 8004cb0:	0800520f 	.word	0x0800520f
 8004cb4:	0800529f 	.word	0x0800529f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %s %"U32_F"\n",
                                    ackno, pcb->snd_nxt, pcb->unacked ? "" : " empty:",
                                    pcb->unacked ? lwip_ntohl(pcb->unacked->tcphdr->seqno) : 0));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8004cb8:	4b49      	ldr	r3, [pc, #292]	@ (8004de0 <tcp_process+0x290>)
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	f003 0310 	and.w	r3, r3, #16
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	f000 80d8 	beq.w	8004e76 <tcp_process+0x326>
 8004cc6:	4b46      	ldr	r3, [pc, #280]	@ (8004de0 <tcp_process+0x290>)
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	f003 0302 	and.w	r3, r3, #2
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	f000 80d1 	beq.w	8004e76 <tcp_process+0x326>
          && (ackno == pcb->lastack + 1)) {
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cd8:	1c5a      	adds	r2, r3, #1
 8004cda:	4b42      	ldr	r3, [pc, #264]	@ (8004de4 <tcp_process+0x294>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	f040 80c9 	bne.w	8004e76 <tcp_process+0x326>
        pcb->rcv_nxt = seqno + 1;
 8004ce4:	4b40      	ldr	r3, [pc, #256]	@ (8004de8 <tcp_process+0x298>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	1c5a      	adds	r2, r3, #1
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8004cf6:	4b3b      	ldr	r3, [pc, #236]	@ (8004de4 <tcp_process+0x294>)
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8004cfe:	4b3e      	ldr	r3, [pc, #248]	@ (8004df8 <tcp_process+0x2a8>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	89db      	ldrh	r3, [r3, #14]
 8004d04:	b29a      	uxth	r2, r3
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8004d18:	4b33      	ldr	r3, [pc, #204]	@ (8004de8 <tcp_process+0x298>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	1e5a      	subs	r2, r3, #1
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2204      	movs	r2, #4
 8004d26:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	3304      	adds	r3, #4
 8004d30:	4618      	mov	r0, r3
 8004d32:	f003 fe47 	bl	80089c4 <ip4_route>
 8004d36:	4601      	mov	r1, r0
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	3304      	adds	r3, #4
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	4620      	mov	r0, r4
 8004d40:	f7ff f8e2 	bl	8003f08 <tcp_eff_send_mss_netif>
 8004d44:	4603      	mov	r3, r0
 8004d46:	461a      	mov	r2, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004d50:	009a      	lsls	r2, r3, #2
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004d56:	005b      	lsls	r3, r3, #1
 8004d58:	f241 111c 	movw	r1, #4380	@ 0x111c
 8004d5c:	428b      	cmp	r3, r1
 8004d5e:	bf38      	it	cc
 8004d60:	460b      	movcc	r3, r1
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d204      	bcs.n	8004d70 <tcp_process+0x220>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	e00d      	b.n	8004d8c <tcp_process+0x23c>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004d74:	005b      	lsls	r3, r3, #1
 8004d76:	f241 121c 	movw	r2, #4380	@ 0x111c
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d904      	bls.n	8004d88 <tcp_process+0x238>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004d82:	005b      	lsls	r3, r3, #1
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	e001      	b.n	8004d8c <tcp_process+0x23c>
 8004d88:	f241 131c 	movw	r3, #4380	@ 0x111c
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d102      	bne.n	8004da2 <tcp_process+0x252>
 8004d9c:	4817      	ldr	r0, [pc, #92]	@ (8004dfc <tcp_process+0x2ac>)
 8004d9e:	f005 f8b9 	bl	8009f14 <iprintf>
        --pcb->snd_queuelen;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8004da8:	3b01      	subs	r3, #1
 8004daa:	b29a      	uxth	r2, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004db6:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d122      	bne.n	8004e04 <tcp_process+0x2b4>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004dc2:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d102      	bne.n	8004dd0 <tcp_process+0x280>
 8004dca:	480d      	ldr	r0, [pc, #52]	@ (8004e00 <tcp_process+0x2b0>)
 8004dcc:	f005 f8a2 	bl	8009f14 <iprintf>
          pcb->unsent = rseg->next;
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	66da      	str	r2, [r3, #108]	@ 0x6c
 8004dd8:	e018      	b.n	8004e0c <tcp_process+0x2bc>
 8004dda:	bf00      	nop
 8004ddc:	0800b914 	.word	0x0800b914
 8004de0:	2400a344 	.word	0x2400a344
 8004de4:	2400a33c 	.word	0x2400a33c
 8004de8:	2400a338 	.word	0x2400a338
 8004dec:	0800b930 	.word	0x0800b930
 8004df0:	2400a345 	.word	0x2400a345
 8004df4:	2400a300 	.word	0x2400a300
 8004df8:	2400a328 	.word	0x2400a328
 8004dfc:	0800b950 	.word	0x0800b950
 8004e00:	0800b968 	.word	0x0800b968
        } else {
          pcb->unacked = rseg->next;
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8004e0c:	69f8      	ldr	r0, [r7, #28]
 8004e0e:	f7fe fe04 	bl	8003a1a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d104      	bne.n	8004e24 <tcp_process+0x2d4>
          pcb->rtime = -1;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004e20:	861a      	strh	r2, [r3, #48]	@ 0x30
 8004e22:	e006      	b.n	8004e32 <tcp_process+0x2e2>
        } else {
          pcb->rtime = 0;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d00a      	beq.n	8004e52 <tcp_process+0x302>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	6910      	ldr	r0, [r2, #16]
 8004e46:	2200      	movs	r2, #0
 8004e48:	6879      	ldr	r1, [r7, #4]
 8004e4a:	4798      	blx	r3
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	76bb      	strb	r3, [r7, #26]
 8004e50:	e001      	b.n	8004e56 <tcp_process+0x306>
 8004e52:	2300      	movs	r3, #0
 8004e54:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8004e56:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004e5a:	f113 0f0d 	cmn.w	r3, #13
 8004e5e:	d102      	bne.n	8004e66 <tcp_process+0x316>
          return ERR_ABRT;
 8004e60:	f06f 030c 	mvn.w	r3, #12
 8004e64:	e246      	b.n	80052f4 <tcp_process+0x7a4>
        }
        tcp_ack_now(pcb);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	8b5b      	ldrh	r3, [r3, #26]
 8004e6a:	f043 0302 	orr.w	r3, r3, #2
 8004e6e:	b29a      	uxth	r2, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8004e74:	e230      	b.n	80052d8 <tcp_process+0x788>
      else if (flags & TCP_ACK) {
 8004e76:	4b95      	ldr	r3, [pc, #596]	@ (80050cc <tcp_process+0x57c>)
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	f003 0310 	and.w	r3, r3, #16
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	f000 822a 	beq.w	80052d8 <tcp_process+0x788>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8004e84:	4b92      	ldr	r3, [pc, #584]	@ (80050d0 <tcp_process+0x580>)
 8004e86:	6819      	ldr	r1, [r3, #0]
 8004e88:	4b92      	ldr	r3, [pc, #584]	@ (80050d4 <tcp_process+0x584>)
 8004e8a:	881b      	ldrh	r3, [r3, #0]
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	4b92      	ldr	r3, [pc, #584]	@ (80050d8 <tcp_process+0x588>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8004e94:	4b91      	ldr	r3, [pc, #580]	@ (80050dc <tcp_process+0x58c>)
 8004e96:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8004e98:	885b      	ldrh	r3, [r3, #2]
 8004e9a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8004e9c:	4a8f      	ldr	r2, [pc, #572]	@ (80050dc <tcp_process+0x58c>)
 8004e9e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8004ea0:	8812      	ldrh	r2, [r2, #0]
 8004ea2:	b292      	uxth	r2, r2
 8004ea4:	9202      	str	r2, [sp, #8]
 8004ea6:	9301      	str	r3, [sp, #4]
 8004ea8:	4b8d      	ldr	r3, [pc, #564]	@ (80050e0 <tcp_process+0x590>)
 8004eaa:	9300      	str	r3, [sp, #0]
 8004eac:	4b8d      	ldr	r3, [pc, #564]	@ (80050e4 <tcp_process+0x594>)
 8004eae:	4602      	mov	r2, r0
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f002 f843 	bl	8006f3c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004ebc:	2b05      	cmp	r3, #5
 8004ebe:	f200 820b 	bhi.w	80052d8 <tcp_process+0x788>
          pcb->rtime = 0;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f001 fdd9 	bl	8006a80 <tcp_rexmit_rto>
      break;
 8004ece:	e203      	b.n	80052d8 <tcp_process+0x788>
    case SYN_RCVD:
      if (flags & TCP_SYN) {
 8004ed0:	4b7e      	ldr	r3, [pc, #504]	@ (80050cc <tcp_process+0x57c>)
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	f003 0302 	and.w	r3, r3, #2
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d00b      	beq.n	8004ef4 <tcp_process+0x3a4>
        if (seqno == pcb->rcv_nxt - 1) {
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ee0:	1e5a      	subs	r2, r3, #1
 8004ee2:	4b7d      	ldr	r3, [pc, #500]	@ (80050d8 <tcp_process+0x588>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	f040 81f8 	bne.w	80052dc <tcp_process+0x78c>
          /* Looks like another copy of the SYN - retransmit our SYN-ACK */
          tcp_rexmit(pcb);
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f001 fde1 	bl	8006ab4 <tcp_rexmit>
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
        }
      }
      break;
 8004ef2:	e1f3      	b.n	80052dc <tcp_process+0x78c>
      } else if (flags & TCP_ACK) {
 8004ef4:	4b75      	ldr	r3, [pc, #468]	@ (80050cc <tcp_process+0x57c>)
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	f003 0310 	and.w	r3, r3, #16
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	f000 81ed 	beq.w	80052dc <tcp_process+0x78c>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8004f02:	4b73      	ldr	r3, [pc, #460]	@ (80050d0 <tcp_process+0x580>)
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	3b01      	subs	r3, #1
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	db7a      	blt.n	8005008 <tcp_process+0x4b8>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004f16:	4b6e      	ldr	r3, [pc, #440]	@ (80050d0 <tcp_process+0x580>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	db73      	blt.n	8005008 <tcp_process+0x4b8>
          pcb->state = ESTABLISHED;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2204      	movs	r2, #4
 8004f24:	751a      	strb	r2, [r3, #20]
          if (pcb->listener == NULL) {
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d102      	bne.n	8004f34 <tcp_process+0x3e4>
            err = ERR_VAL;
 8004f2e:	23fa      	movs	r3, #250	@ 0xfa
 8004f30:	76bb      	strb	r3, [r7, #26]
 8004f32:	e019      	b.n	8004f68 <tcp_process+0x418>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004f38:	699b      	ldr	r3, [r3, #24]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d102      	bne.n	8004f44 <tcp_process+0x3f4>
 8004f3e:	486a      	ldr	r0, [pc, #424]	@ (80050e8 <tcp_process+0x598>)
 8004f40:	f004 ffe8 	bl	8009f14 <iprintf>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004f48:	699b      	ldr	r3, [r3, #24]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00a      	beq.n	8004f64 <tcp_process+0x414>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004f52:	699b      	ldr	r3, [r3, #24]
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	6910      	ldr	r0, [r2, #16]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	6879      	ldr	r1, [r7, #4]
 8004f5c:	4798      	blx	r3
 8004f5e:	4603      	mov	r3, r0
 8004f60:	76bb      	strb	r3, [r7, #26]
 8004f62:	e001      	b.n	8004f68 <tcp_process+0x418>
 8004f64:	23f0      	movs	r3, #240	@ 0xf0
 8004f66:	76bb      	strb	r3, [r7, #26]
          if (err != ERR_OK) {
 8004f68:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d00a      	beq.n	8004f86 <tcp_process+0x436>
            if (err != ERR_ABRT) {
 8004f70:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004f74:	f113 0f0d 	cmn.w	r3, #13
 8004f78:	d002      	beq.n	8004f80 <tcp_process+0x430>
              tcp_abort(pcb);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f7fe f8d2 	bl	8003124 <tcp_abort>
            return ERR_ABRT;
 8004f80:	f06f 030c 	mvn.w	r3, #12
 8004f84:	e1b6      	b.n	80052f4 <tcp_process+0x7a4>
          tcp_receive(pcb);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 fa34 	bl	80053f4 <tcp_receive>
          if (recv_acked != 0) {
 8004f8c:	4b57      	ldr	r3, [pc, #348]	@ (80050ec <tcp_process+0x59c>)
 8004f8e:	881b      	ldrh	r3, [r3, #0]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d005      	beq.n	8004fa0 <tcp_process+0x450>
            recv_acked--;
 8004f94:	4b55      	ldr	r3, [pc, #340]	@ (80050ec <tcp_process+0x59c>)
 8004f96:	881b      	ldrh	r3, [r3, #0]
 8004f98:	3b01      	subs	r3, #1
 8004f9a:	b29a      	uxth	r2, r3
 8004f9c:	4b53      	ldr	r3, [pc, #332]	@ (80050ec <tcp_process+0x59c>)
 8004f9e:	801a      	strh	r2, [r3, #0]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004fa4:	009a      	lsls	r2, r3, #2
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004faa:	005b      	lsls	r3, r3, #1
 8004fac:	f241 111c 	movw	r1, #4380	@ 0x111c
 8004fb0:	428b      	cmp	r3, r1
 8004fb2:	bf38      	it	cc
 8004fb4:	460b      	movcc	r3, r1
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d204      	bcs.n	8004fc4 <tcp_process+0x474>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	e00d      	b.n	8004fe0 <tcp_process+0x490>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004fc8:	005b      	lsls	r3, r3, #1
 8004fca:	f241 121c 	movw	r2, #4380	@ 0x111c
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d904      	bls.n	8004fdc <tcp_process+0x48c>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004fd6:	005b      	lsls	r3, r3, #1
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	e001      	b.n	8004fe0 <tcp_process+0x490>
 8004fdc:	f241 131c 	movw	r3, #4380	@ 0x111c
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          if (recv_flags & TF_GOT_FIN) {
 8004fe6:	4b42      	ldr	r3, [pc, #264]	@ (80050f0 <tcp_process+0x5a0>)
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	f003 0320 	and.w	r3, r3, #32
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d024      	beq.n	800503c <tcp_process+0x4ec>
            tcp_ack_now(pcb);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	8b5b      	ldrh	r3, [r3, #26]
 8004ff6:	f043 0302 	orr.w	r3, r3, #2
 8004ffa:	b29a      	uxth	r2, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2207      	movs	r2, #7
 8005004:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8005006:	e019      	b.n	800503c <tcp_process+0x4ec>
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8005008:	4b31      	ldr	r3, [pc, #196]	@ (80050d0 <tcp_process+0x580>)
 800500a:	6819      	ldr	r1, [r3, #0]
 800500c:	4b31      	ldr	r3, [pc, #196]	@ (80050d4 <tcp_process+0x584>)
 800500e:	881b      	ldrh	r3, [r3, #0]
 8005010:	461a      	mov	r2, r3
 8005012:	4b31      	ldr	r3, [pc, #196]	@ (80050d8 <tcp_process+0x588>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8005018:	4b30      	ldr	r3, [pc, #192]	@ (80050dc <tcp_process+0x58c>)
 800501a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800501c:	885b      	ldrh	r3, [r3, #2]
 800501e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8005020:	4a2e      	ldr	r2, [pc, #184]	@ (80050dc <tcp_process+0x58c>)
 8005022:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8005024:	8812      	ldrh	r2, [r2, #0]
 8005026:	b292      	uxth	r2, r2
 8005028:	9202      	str	r2, [sp, #8]
 800502a:	9301      	str	r3, [sp, #4]
 800502c:	4b2c      	ldr	r3, [pc, #176]	@ (80050e0 <tcp_process+0x590>)
 800502e:	9300      	str	r3, [sp, #0]
 8005030:	4b2c      	ldr	r3, [pc, #176]	@ (80050e4 <tcp_process+0x594>)
 8005032:	4602      	mov	r2, r0
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f001 ff81 	bl	8006f3c <tcp_rst>
      break;
 800503a:	e14f      	b.n	80052dc <tcp_process+0x78c>
 800503c:	e14e      	b.n	80052dc <tcp_process+0x78c>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 f9d8 	bl	80053f4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8005044:	4b2a      	ldr	r3, [pc, #168]	@ (80050f0 <tcp_process+0x5a0>)
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	f003 0320 	and.w	r3, r3, #32
 800504c:	2b00      	cmp	r3, #0
 800504e:	f000 8147 	beq.w	80052e0 <tcp_process+0x790>
        tcp_ack_now(pcb);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	8b5b      	ldrh	r3, [r3, #26]
 8005056:	f043 0302 	orr.w	r3, r3, #2
 800505a:	b29a      	uxth	r2, r3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2207      	movs	r2, #7
 8005064:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005066:	e13b      	b.n	80052e0 <tcp_process+0x790>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f000 f9c3 	bl	80053f4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800506e:	4b20      	ldr	r3, [pc, #128]	@ (80050f0 <tcp_process+0x5a0>)
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	f003 0320 	and.w	r3, r3, #32
 8005076:	2b00      	cmp	r3, #0
 8005078:	d06c      	beq.n	8005154 <tcp_process+0x604>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800507a:	4b14      	ldr	r3, [pc, #80]	@ (80050cc <tcp_process+0x57c>)
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	f003 0310 	and.w	r3, r3, #16
 8005082:	2b00      	cmp	r3, #0
 8005084:	d05b      	beq.n	800513e <tcp_process+0x5ee>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800508a:	4b11      	ldr	r3, [pc, #68]	@ (80050d0 <tcp_process+0x580>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	429a      	cmp	r2, r3
 8005090:	d155      	bne.n	800513e <tcp_process+0x5ee>
            pcb->unsent == NULL) {
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8005096:	2b00      	cmp	r3, #0
 8005098:	d151      	bne.n	800513e <tcp_process+0x5ee>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	8b5b      	ldrh	r3, [r3, #26]
 800509e:	f043 0302 	orr.w	r3, r3, #2
 80050a2:	b29a      	uxth	r2, r3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f7fe fe61 	bl	8003d70 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80050ae:	4b11      	ldr	r3, [pc, #68]	@ (80050f4 <tcp_process+0x5a4>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d105      	bne.n	80050c4 <tcp_process+0x574>
 80050b8:	4b0e      	ldr	r3, [pc, #56]	@ (80050f4 <tcp_process+0x5a4>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	4a0d      	ldr	r2, [pc, #52]	@ (80050f4 <tcp_process+0x5a4>)
 80050c0:	6013      	str	r3, [r2, #0]
 80050c2:	e029      	b.n	8005118 <tcp_process+0x5c8>
 80050c4:	4b0b      	ldr	r3, [pc, #44]	@ (80050f4 <tcp_process+0x5a4>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	617b      	str	r3, [r7, #20]
 80050ca:	e022      	b.n	8005112 <tcp_process+0x5c2>
 80050cc:	2400a344 	.word	0x2400a344
 80050d0:	2400a33c 	.word	0x2400a33c
 80050d4:	2400a342 	.word	0x2400a342
 80050d8:	2400a338 	.word	0x2400a338
 80050dc:	2400a328 	.word	0x2400a328
 80050e0:	24003ce0 	.word	0x24003ce0
 80050e4:	24003ce4 	.word	0x24003ce4
 80050e8:	0800b97c 	.word	0x0800b97c
 80050ec:	2400a340 	.word	0x2400a340
 80050f0:	2400a345 	.word	0x2400a345
 80050f4:	2400a30c 	.word	0x2400a30c
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	429a      	cmp	r2, r3
 8005100:	d104      	bne.n	800510c <tcp_process+0x5bc>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	68da      	ldr	r2, [r3, #12]
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	60da      	str	r2, [r3, #12]
 800510a:	e005      	b.n	8005118 <tcp_process+0x5c8>
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	617b      	str	r3, [r7, #20]
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d1ef      	bne.n	80050f8 <tcp_process+0x5a8>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	60da      	str	r2, [r3, #12]
 800511e:	4b77      	ldr	r3, [pc, #476]	@ (80052fc <tcp_process+0x7ac>)
 8005120:	2201      	movs	r2, #1
 8005122:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	220a      	movs	r2, #10
 8005128:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800512a:	4b75      	ldr	r3, [pc, #468]	@ (8005300 <tcp_process+0x7b0>)
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	60da      	str	r2, [r3, #12]
 8005132:	4a73      	ldr	r2, [pc, #460]	@ (8005300 <tcp_process+0x7b0>)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6013      	str	r3, [r2, #0]
 8005138:	f002 f8a0 	bl	800727c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800513c:	e0d2      	b.n	80052e4 <tcp_process+0x794>
          tcp_ack_now(pcb);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	8b5b      	ldrh	r3, [r3, #26]
 8005142:	f043 0302 	orr.w	r3, r3, #2
 8005146:	b29a      	uxth	r2, r3
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2208      	movs	r2, #8
 8005150:	751a      	strb	r2, [r3, #20]
      break;
 8005152:	e0c7      	b.n	80052e4 <tcp_process+0x794>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8005154:	4b6b      	ldr	r3, [pc, #428]	@ (8005304 <tcp_process+0x7b4>)
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	f003 0310 	and.w	r3, r3, #16
 800515c:	2b00      	cmp	r3, #0
 800515e:	f000 80c1 	beq.w	80052e4 <tcp_process+0x794>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005166:	4b68      	ldr	r3, [pc, #416]	@ (8005308 <tcp_process+0x7b8>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	429a      	cmp	r2, r3
 800516c:	f040 80ba 	bne.w	80052e4 <tcp_process+0x794>
                 pcb->unsent == NULL) {
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8005174:	2b00      	cmp	r3, #0
 8005176:	f040 80b5 	bne.w	80052e4 <tcp_process+0x794>
        pcb->state = FIN_WAIT_2;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2206      	movs	r2, #6
 800517e:	751a      	strb	r2, [r3, #20]
      break;
 8005180:	e0b0      	b.n	80052e4 <tcp_process+0x794>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 f936 	bl	80053f4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8005188:	4b60      	ldr	r3, [pc, #384]	@ (800530c <tcp_process+0x7bc>)
 800518a:	781b      	ldrb	r3, [r3, #0]
 800518c:	f003 0320 	and.w	r3, r3, #32
 8005190:	2b00      	cmp	r3, #0
 8005192:	f000 80a9 	beq.w	80052e8 <tcp_process+0x798>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	8b5b      	ldrh	r3, [r3, #26]
 800519a:	f043 0302 	orr.w	r3, r3, #2
 800519e:	b29a      	uxth	r2, r3
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f7fe fde3 	bl	8003d70 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80051aa:	4b59      	ldr	r3, [pc, #356]	@ (8005310 <tcp_process+0x7c0>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d105      	bne.n	80051c0 <tcp_process+0x670>
 80051b4:	4b56      	ldr	r3, [pc, #344]	@ (8005310 <tcp_process+0x7c0>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	4a55      	ldr	r2, [pc, #340]	@ (8005310 <tcp_process+0x7c0>)
 80051bc:	6013      	str	r3, [r2, #0]
 80051be:	e013      	b.n	80051e8 <tcp_process+0x698>
 80051c0:	4b53      	ldr	r3, [pc, #332]	@ (8005310 <tcp_process+0x7c0>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	613b      	str	r3, [r7, #16]
 80051c6:	e00c      	b.n	80051e2 <tcp_process+0x692>
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d104      	bne.n	80051dc <tcp_process+0x68c>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	68da      	ldr	r2, [r3, #12]
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	60da      	str	r2, [r3, #12]
 80051da:	e005      	b.n	80051e8 <tcp_process+0x698>
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	613b      	str	r3, [r7, #16]
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d1ef      	bne.n	80051c8 <tcp_process+0x678>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	60da      	str	r2, [r3, #12]
 80051ee:	4b43      	ldr	r3, [pc, #268]	@ (80052fc <tcp_process+0x7ac>)
 80051f0:	2201      	movs	r2, #1
 80051f2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	220a      	movs	r2, #10
 80051f8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80051fa:	4b41      	ldr	r3, [pc, #260]	@ (8005300 <tcp_process+0x7b0>)
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	60da      	str	r2, [r3, #12]
 8005202:	4a3f      	ldr	r2, [pc, #252]	@ (8005300 <tcp_process+0x7b0>)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6013      	str	r3, [r2, #0]
 8005208:	f002 f838 	bl	800727c <tcp_timer_needed>
      }
      break;
 800520c:	e06c      	b.n	80052e8 <tcp_process+0x798>
    case CLOSING:
      tcp_receive(pcb);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 f8f0 	bl	80053f4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8005214:	4b3b      	ldr	r3, [pc, #236]	@ (8005304 <tcp_process+0x7b4>)
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	f003 0310 	and.w	r3, r3, #16
 800521c:	2b00      	cmp	r3, #0
 800521e:	d065      	beq.n	80052ec <tcp_process+0x79c>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005224:	4b38      	ldr	r3, [pc, #224]	@ (8005308 <tcp_process+0x7b8>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	429a      	cmp	r2, r3
 800522a:	d15f      	bne.n	80052ec <tcp_process+0x79c>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005230:	2b00      	cmp	r3, #0
 8005232:	d15b      	bne.n	80052ec <tcp_process+0x79c>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f7fe fd9b 	bl	8003d70 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800523a:	4b35      	ldr	r3, [pc, #212]	@ (8005310 <tcp_process+0x7c0>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	429a      	cmp	r2, r3
 8005242:	d105      	bne.n	8005250 <tcp_process+0x700>
 8005244:	4b32      	ldr	r3, [pc, #200]	@ (8005310 <tcp_process+0x7c0>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	4a31      	ldr	r2, [pc, #196]	@ (8005310 <tcp_process+0x7c0>)
 800524c:	6013      	str	r3, [r2, #0]
 800524e:	e013      	b.n	8005278 <tcp_process+0x728>
 8005250:	4b2f      	ldr	r3, [pc, #188]	@ (8005310 <tcp_process+0x7c0>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	60fb      	str	r3, [r7, #12]
 8005256:	e00c      	b.n	8005272 <tcp_process+0x722>
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	429a      	cmp	r2, r3
 8005260:	d104      	bne.n	800526c <tcp_process+0x71c>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	68da      	ldr	r2, [r3, #12]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	60da      	str	r2, [r3, #12]
 800526a:	e005      	b.n	8005278 <tcp_process+0x728>
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	60fb      	str	r3, [r7, #12]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d1ef      	bne.n	8005258 <tcp_process+0x708>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	60da      	str	r2, [r3, #12]
 800527e:	4b1f      	ldr	r3, [pc, #124]	@ (80052fc <tcp_process+0x7ac>)
 8005280:	2201      	movs	r2, #1
 8005282:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	220a      	movs	r2, #10
 8005288:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800528a:	4b1d      	ldr	r3, [pc, #116]	@ (8005300 <tcp_process+0x7b0>)
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	60da      	str	r2, [r3, #12]
 8005292:	4a1b      	ldr	r2, [pc, #108]	@ (8005300 <tcp_process+0x7b0>)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6013      	str	r3, [r2, #0]
 8005298:	f001 fff0 	bl	800727c <tcp_timer_needed>
      }
      break;
 800529c:	e026      	b.n	80052ec <tcp_process+0x79c>
    case LAST_ACK:
      tcp_receive(pcb);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 f8a8 	bl	80053f4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80052a4:	4b17      	ldr	r3, [pc, #92]	@ (8005304 <tcp_process+0x7b4>)
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	f003 0310 	and.w	r3, r3, #16
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d01f      	beq.n	80052f0 <tcp_process+0x7a0>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80052b4:	4b14      	ldr	r3, [pc, #80]	@ (8005308 <tcp_process+0x7b8>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d119      	bne.n	80052f0 <tcp_process+0x7a0>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d115      	bne.n	80052f0 <tcp_process+0x7a0>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80052c4:	4b11      	ldr	r3, [pc, #68]	@ (800530c <tcp_process+0x7bc>)
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	f043 0310 	orr.w	r3, r3, #16
 80052cc:	b2da      	uxtb	r2, r3
 80052ce:	4b0f      	ldr	r3, [pc, #60]	@ (800530c <tcp_process+0x7bc>)
 80052d0:	701a      	strb	r2, [r3, #0]
      }
      break;
 80052d2:	e00d      	b.n	80052f0 <tcp_process+0x7a0>
    default:
      break;
 80052d4:	bf00      	nop
 80052d6:	e00c      	b.n	80052f2 <tcp_process+0x7a2>
      break;
 80052d8:	bf00      	nop
 80052da:	e00a      	b.n	80052f2 <tcp_process+0x7a2>
      break;
 80052dc:	bf00      	nop
 80052de:	e008      	b.n	80052f2 <tcp_process+0x7a2>
      break;
 80052e0:	bf00      	nop
 80052e2:	e006      	b.n	80052f2 <tcp_process+0x7a2>
      break;
 80052e4:	bf00      	nop
 80052e6:	e004      	b.n	80052f2 <tcp_process+0x7a2>
      break;
 80052e8:	bf00      	nop
 80052ea:	e002      	b.n	80052f2 <tcp_process+0x7a2>
      break;
 80052ec:	bf00      	nop
 80052ee:	e000      	b.n	80052f2 <tcp_process+0x7a2>
      break;
 80052f0:	bf00      	nop
  }
  return ERR_OK;
 80052f2:	2300      	movs	r3, #0
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3724      	adds	r7, #36	@ 0x24
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd90      	pop	{r4, r7, pc}
 80052fc:	2400a314 	.word	0x2400a314
 8005300:	2400a310 	.word	0x2400a310
 8005304:	2400a344 	.word	0x2400a344
 8005308:	2400a33c 	.word	0x2400a33c
 800530c:	2400a345 	.word	0x2400a345
 8005310:	2400a30c 	.word	0x2400a30c

08005314 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8005314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005316:	b087      	sub	sp, #28
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	607a      	str	r2, [r7, #4]
 8005320:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8005322:	e036      	b.n	8005392 <tcp_free_acked_segments+0x7e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	4618      	mov	r0, r3
 8005334:	f7fd fa88 	bl	8002848 <pbuf_clen>
 8005338:	4603      	mov	r3, r0
 800533a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8005342:	8a7a      	ldrh	r2, [r7, #18]
 8005344:	429a      	cmp	r2, r3
 8005346:	d902      	bls.n	800534e <tcp_free_acked_segments+0x3a>
 8005348:	4826      	ldr	r0, [pc, #152]	@ (80053e4 <tcp_free_acked_segments+0xd0>)
 800534a:	f004 fde3 	bl	8009f14 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8005354:	8a7b      	ldrh	r3, [r7, #18]
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	b29a      	uxth	r2, r3
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	891a      	ldrh	r2, [r3, #8]
 8005364:	4b20      	ldr	r3, [pc, #128]	@ (80053e8 <tcp_free_acked_segments+0xd4>)
 8005366:	881b      	ldrh	r3, [r3, #0]
 8005368:	4413      	add	r3, r2
 800536a:	b29a      	uxth	r2, r3
 800536c:	4b1e      	ldr	r3, [pc, #120]	@ (80053e8 <tcp_free_acked_segments+0xd4>)
 800536e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8005370:	6978      	ldr	r0, [r7, #20]
 8005372:	f7fe fb52 	bl	8003a1a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800537c:	2b00      	cmp	r3, #0
 800537e:	d008      	beq.n	8005392 <tcp_free_acked_segments+0x7e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d105      	bne.n	8005392 <tcp_free_acked_segments+0x7e>
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d102      	bne.n	8005392 <tcp_free_acked_segments+0x7e>
 800538c:	4817      	ldr	r0, [pc, #92]	@ (80053ec <tcp_free_acked_segments+0xd8>)
 800538e:	f004 fdc1 	bl	8009f14 <iprintf>
  while (seg_list != NULL &&
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d020      	beq.n	80053da <tcp_free_acked_segments+0xc6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8005398:	4b15      	ldr	r3, [pc, #84]	@ (80053f0 <tcp_free_acked_segments+0xdc>)
 800539a:	681c      	ldr	r4, [r3, #0]
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	4618      	mov	r0, r3
 80053a4:	f7fb fee7 	bl	8001176 <lwip_htonl>
 80053a8:	4605      	mov	r5, r0
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	891b      	ldrh	r3, [r3, #8]
 80053ae:	461e      	mov	r6, r3
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	899b      	ldrh	r3, [r3, #12]
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	4618      	mov	r0, r3
 80053ba:	f7fb fec7 	bl	800114c <lwip_htons>
 80053be:	4603      	mov	r3, r0
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	f003 0303 	and.w	r3, r3, #3
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d001      	beq.n	80053ce <tcp_free_acked_segments+0xba>
 80053ca:	2301      	movs	r3, #1
 80053cc:	e000      	b.n	80053d0 <tcp_free_acked_segments+0xbc>
 80053ce:	2300      	movs	r3, #0
 80053d0:	4433      	add	r3, r6
 80053d2:	442b      	add	r3, r5
 80053d4:	1ae3      	subs	r3, r4, r3
  while (seg_list != NULL &&
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	daa4      	bge.n	8005324 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80053da:	68bb      	ldr	r3, [r7, #8]
}
 80053dc:	4618      	mov	r0, r3
 80053de:	371c      	adds	r7, #28
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053e4:	0800b99c 	.word	0x0800b99c
 80053e8:	2400a340 	.word	0x2400a340
 80053ec:	0800b9c4 	.word	0x0800b9c4
 80053f0:	2400a33c 	.word	0x2400a33c

080053f4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80053f4:	b590      	push	{r4, r7, lr}
 80053f6:	b08b      	sub	sp, #44	@ 0x2c
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d102      	bne.n	8005408 <tcp_receive+0x14>
 8005402:	489f      	ldr	r0, [pc, #636]	@ (8005680 <tcp_receive+0x28c>)
 8005404:	f004 fd86 	bl	8009f14 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	7d1b      	ldrb	r3, [r3, #20]
 800540c:	2b03      	cmp	r3, #3
 800540e:	d802      	bhi.n	8005416 <tcp_receive+0x22>
 8005410:	489c      	ldr	r0, [pc, #624]	@ (8005684 <tcp_receive+0x290>)
 8005412:	f004 fd7f 	bl	8009f14 <iprintf>

  if (flags & TCP_ACK) {
 8005416:	4b9c      	ldr	r3, [pc, #624]	@ (8005688 <tcp_receive+0x294>)
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	f003 0310 	and.w	r3, r3, #16
 800541e:	2b00      	cmp	r3, #0
 8005420:	f000 8250 	beq.w	80058c4 <tcp_receive+0x4d0>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800542a:	461a      	mov	r2, r3
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005430:	4413      	add	r3, r2
 8005432:	61bb      	str	r3, [r7, #24]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005438:	4b94      	ldr	r3, [pc, #592]	@ (800568c <tcp_receive+0x298>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	1ad3      	subs	r3, r2, r3
 800543e:	2b00      	cmp	r3, #0
 8005440:	db1b      	blt.n	800547a <tcp_receive+0x86>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005446:	4b91      	ldr	r3, [pc, #580]	@ (800568c <tcp_receive+0x298>)
 8005448:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800544a:	429a      	cmp	r2, r3
 800544c:	d106      	bne.n	800545c <tcp_receive+0x68>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005452:	4b8f      	ldr	r3, [pc, #572]	@ (8005690 <tcp_receive+0x29c>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	1ad3      	subs	r3, r2, r3
 8005458:	2b00      	cmp	r3, #0
 800545a:	db0e      	blt.n	800547a <tcp_receive+0x86>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005460:	4b8b      	ldr	r3, [pc, #556]	@ (8005690 <tcp_receive+0x29c>)
 8005462:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8005464:	429a      	cmp	r2, r3
 8005466:	d125      	bne.n	80054b4 <tcp_receive+0xc0>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8005468:	4b8a      	ldr	r3, [pc, #552]	@ (8005694 <tcp_receive+0x2a0>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	89db      	ldrh	r3, [r3, #14]
 800546e:	b29a      	uxth	r2, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005476:	429a      	cmp	r2, r3
 8005478:	d91c      	bls.n	80054b4 <tcp_receive+0xc0>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800547a:	4b86      	ldr	r3, [pc, #536]	@ (8005694 <tcp_receive+0x2a0>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	89db      	ldrh	r3, [r3, #14]
 8005480:	b29a      	uxth	r2, r3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005494:	429a      	cmp	r2, r3
 8005496:	d205      	bcs.n	80054a4 <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 80054a4:	4b79      	ldr	r3, [pc, #484]	@ (800568c <tcp_receive+0x298>)
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 80054ac:	4b78      	ldr	r3, [pc, #480]	@ (8005690 <tcp_receive+0x29c>)
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80054b8:	4b75      	ldr	r3, [pc, #468]	@ (8005690 <tcp_receive+0x29c>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	1ad3      	subs	r3, r2, r3
 80054be:	2b00      	cmp	r3, #0
 80054c0:	db53      	blt.n	800556a <tcp_receive+0x176>
      /* Clause 2 */
      if (tcplen == 0) {
 80054c2:	4b75      	ldr	r3, [pc, #468]	@ (8005698 <tcp_receive+0x2a4>)
 80054c4:	881b      	ldrh	r3, [r3, #0]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	f040 81a5 	bne.w	8005816 <tcp_receive+0x422>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 80054d6:	4413      	add	r3, r2
 80054d8:	69ba      	ldr	r2, [r7, #24]
 80054da:	429a      	cmp	r2, r3
 80054dc:	f040 819b 	bne.w	8005816 <tcp_receive+0x422>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	f2c0 8195 	blt.w	8005816 <tcp_receive+0x422>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80054f0:	4b67      	ldr	r3, [pc, #412]	@ (8005690 <tcp_receive+0x29c>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	f040 818e 	bne.w	8005816 <tcp_receive+0x422>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005500:	2bff      	cmp	r3, #255	@ 0xff
 8005502:	d007      	beq.n	8005514 <tcp_receive+0x120>
                ++pcb->dupacks;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800550a:	3301      	adds	r3, #1
 800550c:	b2da      	uxtb	r2, r3
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800551a:	2b03      	cmp	r3, #3
 800551c:	d91b      	bls.n	8005556 <tcp_receive+0x162>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005528:	4413      	add	r3, r2
 800552a:	b29a      	uxth	r2, r3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8005532:	429a      	cmp	r2, r3
 8005534:	d30a      	bcc.n	800554c <tcp_receive+0x158>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005540:	4413      	add	r3, r2
 8005542:	b29a      	uxth	r2, r3
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800554a:	e004      	b.n	8005556 <tcp_receive+0x162>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005552:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800555c:	2b02      	cmp	r3, #2
 800555e:	f240 815a 	bls.w	8005816 <tcp_receive+0x422>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f001 fb0a 	bl	8006b7c <tcp_rexmit_fast>
 8005568:	e155      	b.n	8005816 <tcp_receive+0x422>
              }
            }
          }
        }
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800556a:	4b49      	ldr	r3, [pc, #292]	@ (8005690 <tcp_receive+0x29c>)
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005572:	1ad3      	subs	r3, r2, r3
 8005574:	3b01      	subs	r3, #1
 8005576:	2b00      	cmp	r3, #0
 8005578:	f2c0 8148 	blt.w	800580c <tcp_receive+0x418>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005580:	4b43      	ldr	r3, [pc, #268]	@ (8005690 <tcp_receive+0x29c>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	2b00      	cmp	r3, #0
 8005588:	f2c0 8140 	blt.w	800580c <tcp_receive+0x418>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	8b5b      	ldrh	r3, [r3, #26]
 8005590:	f003 0304 	and.w	r3, r3, #4
 8005594:	2b00      	cmp	r3, #0
 8005596:	d010      	beq.n	80055ba <tcp_receive+0x1c6>
        tcp_clear_flags(pcb, TF_INFR);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	8b5b      	ldrh	r3, [r3, #26]
 800559c:	f023 0304 	bic.w	r3, r3, #4
 80055a0:	b29a      	uxth	r2, r3
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80055c8:	10db      	asrs	r3, r3, #3
 80055ca:	b21b      	sxth	r3, r3
 80055cc:	b29a      	uxth	r2, r3
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	4413      	add	r3, r2
 80055d8:	b29b      	uxth	r3, r3
 80055da:	b21a      	sxth	r2, r3
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80055e2:	4b2b      	ldr	r3, [pc, #172]	@ (8005690 <tcp_receive+0x29c>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	b29a      	uxth	r2, r3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	1ad3      	subs	r3, r2, r3
 80055f0:	82fb      	strh	r3, [r7, #22]

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 80055fa:	4b25      	ldr	r3, [pc, #148]	@ (8005690 <tcp_receive+0x29c>)
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	7d1b      	ldrb	r3, [r3, #20]
 8005606:	2b03      	cmp	r3, #3
 8005608:	f240 8091 	bls.w	800572e <tcp_receive+0x33a>
        if (pcb->cwnd < pcb->ssthresh) {
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8005618:	429a      	cmp	r2, r3
 800561a:	d23f      	bcs.n	800569c <tcp_receive+0x2a8>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	8b5b      	ldrh	r3, [r3, #26]
 8005620:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005624:	2b00      	cmp	r3, #0
 8005626:	d001      	beq.n	800562c <tcp_receive+0x238>
 8005628:	2301      	movs	r3, #1
 800562a:	e000      	b.n	800562e <tcp_receive+0x23a>
 800562c:	2302      	movs	r3, #2
 800562e:	757b      	strb	r3, [r7, #21]
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8005630:	7d7b      	ldrb	r3, [r7, #21]
 8005632:	b29a      	uxth	r2, r3
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005638:	fb12 f303 	smulbb	r3, r2, r3
 800563c:	b29b      	uxth	r3, r3
 800563e:	8afa      	ldrh	r2, [r7, #22]
 8005640:	4293      	cmp	r3, r2
 8005642:	bf28      	it	cs
 8005644:	4613      	movcs	r3, r2
 8005646:	827b      	strh	r3, [r7, #18]
          TCP_WND_INC(pcb->cwnd, increase);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800564e:	8a7b      	ldrh	r3, [r7, #18]
 8005650:	4413      	add	r3, r2
 8005652:	b29a      	uxth	r2, r3
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800565a:	429a      	cmp	r2, r3
 800565c:	d309      	bcc.n	8005672 <tcp_receive+0x27e>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8005664:	8a7b      	ldrh	r3, [r7, #18]
 8005666:	4413      	add	r3, r2
 8005668:	b29a      	uxth	r2, r3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8005670:	e05d      	b.n	800572e <tcp_receive+0x33a>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005678:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800567c:	e057      	b.n	800572e <tcp_receive+0x33a>
 800567e:	bf00      	nop
 8005680:	0800b9e4 	.word	0x0800b9e4
 8005684:	0800ba00 	.word	0x0800ba00
 8005688:	2400a344 	.word	0x2400a344
 800568c:	2400a338 	.word	0x2400a338
 8005690:	2400a33c 	.word	0x2400a33c
 8005694:	2400a328 	.word	0x2400a328
 8005698:	2400a342 	.word	0x2400a342
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80056a2:	8afb      	ldrh	r3, [r7, #22]
 80056a4:	4413      	add	r3, r2
 80056a6:	b29a      	uxth	r2, r3
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d309      	bcc.n	80056c6 <tcp_receive+0x2d2>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80056b8:	8afb      	ldrh	r3, [r7, #22]
 80056ba:	4413      	add	r3, r2
 80056bc:	b29a      	uxth	r2, r3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80056c4:	e004      	b.n	80056d0 <tcp_receive+0x2dc>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80056cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80056dc:	429a      	cmp	r2, r3
 80056de:	d326      	bcc.n	800572e <tcp_receive+0x33a>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80056ec:	1ad3      	subs	r3, r2, r3
 80056ee:	b29a      	uxth	r2, r3
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005700:	4413      	add	r3, r2
 8005702:	b29a      	uxth	r2, r3
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800570a:	429a      	cmp	r2, r3
 800570c:	d30a      	bcc.n	8005724 <tcp_receive+0x330>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005718:	4413      	add	r3, r2
 800571a:	b29a      	uxth	r2, r3
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8005722:	e004      	b.n	800572e <tcp_receive+0x33a>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800572a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005736:	4a8b      	ldr	r2, [pc, #556]	@ (8005964 <tcp_receive+0x570>)
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f7ff fdeb 	bl	8005314 <tcp_free_acked_segments>
 800573e:	4602      	mov	r2, r0
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800574c:	4a86      	ldr	r2, [pc, #536]	@ (8005968 <tcp_receive+0x574>)
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f7ff fde0 	bl	8005314 <tcp_free_acked_segments>
 8005754:	4602      	mov	r2, r0
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800575e:	2b00      	cmp	r3, #0
 8005760:	d104      	bne.n	800576c <tcp_receive+0x378>
        pcb->rtime = -1;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005768:	861a      	strh	r2, [r3, #48]	@ 0x30
 800576a:	e002      	b.n	8005772 <tcp_receive+0x37e>
      } else {
        pcb->rtime = 0;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800577c:	2b00      	cmp	r3, #0
 800577e:	d103      	bne.n	8005788 <tcp_receive+0x394>
        pcb->unsent_oversize = 0;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800578e:	4b77      	ldr	r3, [pc, #476]	@ (800596c <tcp_receive+0x578>)
 8005790:	881b      	ldrh	r3, [r3, #0]
 8005792:	4413      	add	r3, r2
 8005794:	b29a      	uxth	r2, r3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	8b5b      	ldrh	r3, [r3, #26]
 80057a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d035      	beq.n	8005814 <tcp_receive+0x420>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d118      	bne.n	80057e2 <tcp_receive+0x3ee>
          if ((pcb->unsent == NULL) ||
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d00c      	beq.n	80057d2 <tcp_receive+0x3de>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057bc:	68db      	ldr	r3, [r3, #12]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	4618      	mov	r0, r3
 80057c2:	f7fb fcd8 	bl	8001176 <lwip_htonl>
 80057c6:	4602      	mov	r2, r0
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057cc:	1ad3      	subs	r3, r2, r3
          if ((pcb->unsent == NULL) ||
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	db20      	blt.n	8005814 <tcp_receive+0x420>
            tcp_clear_flags(pcb, TF_RTO);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	8b5b      	ldrh	r3, [r3, #26]
 80057d6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80057da:	b29a      	uxth	r2, r3
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80057e0:	e018      	b.n	8005814 <tcp_receive+0x420>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	4618      	mov	r0, r3
 80057ec:	f7fb fcc3 	bl	8001176 <lwip_htonl>
 80057f0:	4602      	mov	r2, r0
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057f6:	1ad3      	subs	r3, r2, r3
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	db0b      	blt.n	8005814 <tcp_receive+0x420>
          tcp_clear_flags(pcb, TF_RTO);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	8b5b      	ldrh	r3, [r3, #26]
 8005800:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005804:	b29a      	uxth	r2, r3
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800580a:	e003      	b.n	8005814 <tcp_receive+0x420>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f001 fbdd 	bl	8006fcc <tcp_send_empty_ack>
 8005812:	e000      	b.n	8005816 <tcp_receive+0x422>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8005814:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800581a:	2b00      	cmp	r3, #0
 800581c:	d052      	beq.n	80058c4 <tcp_receive+0x4d0>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005822:	4b53      	ldr	r3, [pc, #332]	@ (8005970 <tcp_receive+0x57c>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	1ad3      	subs	r3, r2, r3
 8005828:	2b00      	cmp	r3, #0
 800582a:	da4b      	bge.n	80058c4 <tcp_receive+0x4d0>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800582c:	4b51      	ldr	r3, [pc, #324]	@ (8005974 <tcp_receive+0x580>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	b29a      	uxth	r2, r3
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005836:	b29b      	uxth	r3, r3
 8005838:	1ad3      	subs	r3, r2, r3
 800583a:	b29b      	uxth	r3, r3
 800583c:	84fb      	strh	r3, [r7, #38]	@ 0x26

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800583e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8005846:	10db      	asrs	r3, r3, #3
 8005848:	b21b      	sxth	r3, r3
 800584a:	b29b      	uxth	r3, r3
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	b29b      	uxth	r3, r3
 8005850:	84fb      	strh	r3, [r7, #38]	@ 0x26
      pcb->sa = (s16_t)(pcb->sa + m);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8005858:	b29a      	uxth	r2, r3
 800585a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800585c:	4413      	add	r3, r2
 800585e:	b29b      	uxth	r3, r3
 8005860:	b21a      	sxth	r2, r3
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8005866:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800586a:	2b00      	cmp	r3, #0
 800586c:	da03      	bge.n	8005876 <tcp_receive+0x482>
        m = (s16_t) - m;
 800586e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005870:	425b      	negs	r3, r3
 8005872:	b29b      	uxth	r3, r3
 8005874:	84fb      	strh	r3, [r7, #38]	@ 0x26
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8005876:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800587e:	109b      	asrs	r3, r3, #2
 8005880:	b21b      	sxth	r3, r3
 8005882:	b29b      	uxth	r3, r3
 8005884:	1ad3      	subs	r3, r2, r3
 8005886:	b29b      	uxth	r3, r3
 8005888:	84fb      	strh	r3, [r7, #38]	@ 0x26
      pcb->sv = (s16_t)(pcb->sv + m);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8005890:	b29a      	uxth	r2, r3
 8005892:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005894:	4413      	add	r3, r2
 8005896:	b29b      	uxth	r3, r3
 8005898:	b21a      	sxth	r2, r3
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80058a4:	10db      	asrs	r3, r3, #3
 80058a6:	b21b      	sxth	r3, r3
 80058a8:	b29a      	uxth	r2, r3
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	4413      	add	r3, r2
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	b21a      	sxth	r2, r3
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80058c4:	4b2c      	ldr	r3, [pc, #176]	@ (8005978 <tcp_receive+0x584>)
 80058c6:	881b      	ldrh	r3, [r3, #0]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	f000 81a9 	beq.w	8005c20 <tcp_receive+0x82c>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	7d1b      	ldrb	r3, [r3, #20]
 80058d2:	2b06      	cmp	r3, #6
 80058d4:	f200 81a4 	bhi.w	8005c20 <tcp_receive+0x82c>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80058dc:	4b27      	ldr	r3, [pc, #156]	@ (800597c <tcp_receive+0x588>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	1ad3      	subs	r3, r2, r3
 80058e2:	3b01      	subs	r3, #1
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	db75      	blt.n	80059d4 <tcp_receive+0x5e0>
 80058e8:	4b23      	ldr	r3, [pc, #140]	@ (8005978 <tcp_receive+0x584>)
 80058ea:	881b      	ldrh	r3, [r3, #0]
 80058ec:	461a      	mov	r2, r3
 80058ee:	4b23      	ldr	r3, [pc, #140]	@ (800597c <tcp_receive+0x588>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	441a      	add	r2, r3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	3b01      	subs	r3, #1
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	db69      	blt.n	80059d4 <tcp_receive+0x5e0>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8005900:	4b1f      	ldr	r3, [pc, #124]	@ (8005980 <tcp_receive+0x58c>)
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	623b      	str	r3, [r7, #32]
      u32_t off32 = pcb->rcv_nxt - seqno;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800590a:	4b1c      	ldr	r3, [pc, #112]	@ (800597c <tcp_receive+0x588>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	1ad3      	subs	r3, r2, r3
 8005910:	60fb      	str	r3, [r7, #12]
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8005912:	4b1b      	ldr	r3, [pc, #108]	@ (8005980 <tcp_receive+0x58c>)
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d102      	bne.n	8005920 <tcp_receive+0x52c>
 800591a:	481a      	ldr	r0, [pc, #104]	@ (8005984 <tcp_receive+0x590>)
 800591c:	f004 fafa 	bl	8009f14 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8005926:	4293      	cmp	r3, r2
 8005928:	d902      	bls.n	8005930 <tcp_receive+0x53c>
 800592a:	4817      	ldr	r0, [pc, #92]	@ (8005988 <tcp_receive+0x594>)
 800592c:	f004 faf2 	bl	8009f14 <iprintf>
      off = (u16_t)off32;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8005934:	4b12      	ldr	r3, [pc, #72]	@ (8005980 <tcp_receive+0x58c>)
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	891b      	ldrh	r3, [r3, #8]
 800593a:	8bfa      	ldrh	r2, [r7, #30]
 800593c:	429a      	cmp	r2, r3
 800593e:	d902      	bls.n	8005946 <tcp_receive+0x552>
 8005940:	4812      	ldr	r0, [pc, #72]	@ (800598c <tcp_receive+0x598>)
 8005942:	f004 fae7 	bl	8009f14 <iprintf>
      inseg.len -= off;
 8005946:	4b0e      	ldr	r3, [pc, #56]	@ (8005980 <tcp_receive+0x58c>)
 8005948:	891a      	ldrh	r2, [r3, #8]
 800594a:	8bfb      	ldrh	r3, [r7, #30]
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	b29a      	uxth	r2, r3
 8005950:	4b0b      	ldr	r3, [pc, #44]	@ (8005980 <tcp_receive+0x58c>)
 8005952:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8005954:	4b0a      	ldr	r3, [pc, #40]	@ (8005980 <tcp_receive+0x58c>)
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	891a      	ldrh	r2, [r3, #8]
 800595a:	8bfb      	ldrh	r3, [r7, #30]
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	817b      	strh	r3, [r7, #10]
      while (p->len < off) {
 8005960:	e024      	b.n	80059ac <tcp_receive+0x5b8>
 8005962:	bf00      	nop
 8005964:	0800ba1c 	.word	0x0800ba1c
 8005968:	0800ba24 	.word	0x0800ba24
 800596c:	2400a340 	.word	0x2400a340
 8005970:	2400a33c 	.word	0x2400a33c
 8005974:	2400a300 	.word	0x2400a300
 8005978:	2400a342 	.word	0x2400a342
 800597c:	2400a338 	.word	0x2400a338
 8005980:	2400a318 	.word	0x2400a318
 8005984:	0800ba2c 	.word	0x0800ba2c
 8005988:	0800ba3c 	.word	0x0800ba3c
 800598c:	0800ba4c 	.word	0x0800ba4c
        off -= p->len;
 8005990:	6a3b      	ldr	r3, [r7, #32]
 8005992:	895b      	ldrh	r3, [r3, #10]
 8005994:	8bfa      	ldrh	r2, [r7, #30]
 8005996:	1ad3      	subs	r3, r2, r3
 8005998:	83fb      	strh	r3, [r7, #30]
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800599a:	6a3b      	ldr	r3, [r7, #32]
 800599c:	897a      	ldrh	r2, [r7, #10]
 800599e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80059a0:	6a3b      	ldr	r3, [r7, #32]
 80059a2:	2200      	movs	r2, #0
 80059a4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80059a6:	6a3b      	ldr	r3, [r7, #32]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	623b      	str	r3, [r7, #32]
      while (p->len < off) {
 80059ac:	6a3b      	ldr	r3, [r7, #32]
 80059ae:	895b      	ldrh	r3, [r3, #10]
 80059b0:	8bfa      	ldrh	r2, [r7, #30]
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d8ec      	bhi.n	8005990 <tcp_receive+0x59c>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80059b6:	8bfb      	ldrh	r3, [r7, #30]
 80059b8:	4619      	mov	r1, r3
 80059ba:	6a38      	ldr	r0, [r7, #32]
 80059bc:	f7fc fe5c 	bl	8002678 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059c4:	4a8f      	ldr	r2, [pc, #572]	@ (8005c04 <tcp_receive+0x810>)
 80059c6:	6013      	str	r3, [r2, #0]
 80059c8:	4b8f      	ldr	r3, [pc, #572]	@ (8005c08 <tcp_receive+0x814>)
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	4a8d      	ldr	r2, [pc, #564]	@ (8005c04 <tcp_receive+0x810>)
 80059ce:	6812      	ldr	r2, [r2, #0]
 80059d0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80059d2:	e00d      	b.n	80059f0 <tcp_receive+0x5fc>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80059d4:	4b8b      	ldr	r3, [pc, #556]	@ (8005c04 <tcp_receive+0x810>)
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	2b00      	cmp	r3, #0
 80059e0:	da06      	bge.n	80059f0 <tcp_receive+0x5fc>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	8b5b      	ldrh	r3, [r3, #26]
 80059e6:	f043 0302 	orr.w	r3, r3, #2
 80059ea:	b29a      	uxth	r2, r3
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80059f0:	4b84      	ldr	r3, [pc, #528]	@ (8005c04 <tcp_receive+0x810>)
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059f8:	1ad3      	subs	r3, r2, r3
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	f2c0 80fd 	blt.w	8005bfa <tcp_receive+0x806>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8005a08:	441a      	add	r2, r3
 8005a0a:	4b7e      	ldr	r3, [pc, #504]	@ (8005c04 <tcp_receive+0x810>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	1ad3      	subs	r3, r2, r3
 8005a10:	3b01      	subs	r3, #1
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	f2c0 80f1 	blt.w	8005bfa <tcp_receive+0x806>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005a1c:	4b79      	ldr	r3, [pc, #484]	@ (8005c04 <tcp_receive+0x810>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	429a      	cmp	r2, r3
 8005a22:	f040 80e6 	bne.w	8005bf2 <tcp_receive+0x7fe>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8005a26:	4b78      	ldr	r3, [pc, #480]	@ (8005c08 <tcp_receive+0x814>)
 8005a28:	891c      	ldrh	r4, [r3, #8]
 8005a2a:	4b77      	ldr	r3, [pc, #476]	@ (8005c08 <tcp_receive+0x814>)
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	899b      	ldrh	r3, [r3, #12]
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	4618      	mov	r0, r3
 8005a34:	f7fb fb8a 	bl	800114c <lwip_htons>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	f003 0303 	and.w	r3, r3, #3
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d001      	beq.n	8005a48 <tcp_receive+0x654>
 8005a44:	2301      	movs	r3, #1
 8005a46:	e000      	b.n	8005a4a <tcp_receive+0x656>
 8005a48:	2300      	movs	r3, #0
 8005a4a:	4423      	add	r3, r4
 8005a4c:	b29a      	uxth	r2, r3
 8005a4e:	4b6f      	ldr	r3, [pc, #444]	@ (8005c0c <tcp_receive+0x818>)
 8005a50:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8005a56:	4b6d      	ldr	r3, [pc, #436]	@ (8005c0c <tcp_receive+0x818>)
 8005a58:	881b      	ldrh	r3, [r3, #0]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d270      	bcs.n	8005b40 <tcp_receive+0x74c>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8005a5e:	4b6a      	ldr	r3, [pc, #424]	@ (8005c08 <tcp_receive+0x814>)
 8005a60:	68db      	ldr	r3, [r3, #12]
 8005a62:	899b      	ldrh	r3, [r3, #12]
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	4618      	mov	r0, r3
 8005a68:	f7fb fb70 	bl	800114c <lwip_htons>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	f003 0301 	and.w	r3, r3, #1
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d01e      	beq.n	8005ab6 <tcp_receive+0x6c2>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8005a78:	4b63      	ldr	r3, [pc, #396]	@ (8005c08 <tcp_receive+0x814>)
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	899b      	ldrh	r3, [r3, #12]
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	b21b      	sxth	r3, r3
 8005a82:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005a86:	b21c      	sxth	r4, r3
 8005a88:	4b5f      	ldr	r3, [pc, #380]	@ (8005c08 <tcp_receive+0x814>)
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	899b      	ldrh	r3, [r3, #12]
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	4618      	mov	r0, r3
 8005a92:	f7fb fb5b 	bl	800114c <lwip_htons>
 8005a96:	4603      	mov	r3, r0
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f7fb fb53 	bl	800114c <lwip_htons>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	b21b      	sxth	r3, r3
 8005aaa:	4323      	orrs	r3, r4
 8005aac:	b21a      	sxth	r2, r3
 8005aae:	4b56      	ldr	r3, [pc, #344]	@ (8005c08 <tcp_receive+0x814>)
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	b292      	uxth	r2, r2
 8005ab4:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8005aba:	4b53      	ldr	r3, [pc, #332]	@ (8005c08 <tcp_receive+0x814>)
 8005abc:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8005abe:	4b52      	ldr	r3, [pc, #328]	@ (8005c08 <tcp_receive+0x814>)
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	899b      	ldrh	r3, [r3, #12]
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f7fb fb40 	bl	800114c <lwip_htons>
 8005acc:	4603      	mov	r3, r0
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	f003 0302 	and.w	r3, r3, #2
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d005      	beq.n	8005ae4 <tcp_receive+0x6f0>
            inseg.len -= 1;
 8005ad8:	4b4b      	ldr	r3, [pc, #300]	@ (8005c08 <tcp_receive+0x814>)
 8005ada:	891b      	ldrh	r3, [r3, #8]
 8005adc:	3b01      	subs	r3, #1
 8005ade:	b29a      	uxth	r2, r3
 8005ae0:	4b49      	ldr	r3, [pc, #292]	@ (8005c08 <tcp_receive+0x814>)
 8005ae2:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8005ae4:	4b48      	ldr	r3, [pc, #288]	@ (8005c08 <tcp_receive+0x814>)
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	4a47      	ldr	r2, [pc, #284]	@ (8005c08 <tcp_receive+0x814>)
 8005aea:	8912      	ldrh	r2, [r2, #8]
 8005aec:	4611      	mov	r1, r2
 8005aee:	4618      	mov	r0, r3
 8005af0:	f7fc fcd2 	bl	8002498 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8005af4:	4b44      	ldr	r3, [pc, #272]	@ (8005c08 <tcp_receive+0x814>)
 8005af6:	891c      	ldrh	r4, [r3, #8]
 8005af8:	4b43      	ldr	r3, [pc, #268]	@ (8005c08 <tcp_receive+0x814>)
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	899b      	ldrh	r3, [r3, #12]
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	4618      	mov	r0, r3
 8005b02:	f7fb fb23 	bl	800114c <lwip_htons>
 8005b06:	4603      	mov	r3, r0
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	f003 0303 	and.w	r3, r3, #3
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d001      	beq.n	8005b16 <tcp_receive+0x722>
 8005b12:	2301      	movs	r3, #1
 8005b14:	e000      	b.n	8005b18 <tcp_receive+0x724>
 8005b16:	2300      	movs	r3, #0
 8005b18:	4423      	add	r3, r4
 8005b1a:	b29a      	uxth	r2, r3
 8005b1c:	4b3b      	ldr	r3, [pc, #236]	@ (8005c0c <tcp_receive+0x818>)
 8005b1e:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd",
 8005b20:	4b3a      	ldr	r3, [pc, #232]	@ (8005c0c <tcp_receive+0x818>)
 8005b22:	881b      	ldrh	r3, [r3, #0]
 8005b24:	461a      	mov	r2, r3
 8005b26:	4b37      	ldr	r3, [pc, #220]	@ (8005c04 <tcp_receive+0x810>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	441a      	add	r2, r3
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b30:	6879      	ldr	r1, [r7, #4]
 8005b32:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8005b34:	440b      	add	r3, r1
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d002      	beq.n	8005b40 <tcp_receive+0x74c>
 8005b3a:	4835      	ldr	r0, [pc, #212]	@ (8005c10 <tcp_receive+0x81c>)
 8005b3c:	f004 f9ea 	bl	8009f14 <iprintf>
            pcb->ooseq = next;
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8005b40:	4b32      	ldr	r3, [pc, #200]	@ (8005c0c <tcp_receive+0x818>)
 8005b42:	881b      	ldrh	r3, [r3, #0]
 8005b44:	461a      	mov	r2, r3
 8005b46:	4b2f      	ldr	r3, [pc, #188]	@ (8005c04 <tcp_receive+0x810>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	441a      	add	r2, r3
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd", pcb->rcv_wnd >= tcplen);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8005b54:	4b2d      	ldr	r3, [pc, #180]	@ (8005c0c <tcp_receive+0x818>)
 8005b56:	881b      	ldrh	r3, [r3, #0]
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d202      	bcs.n	8005b62 <tcp_receive+0x76e>
 8005b5c:	482d      	ldr	r0, [pc, #180]	@ (8005c14 <tcp_receive+0x820>)
 8005b5e:	f004 f9d9 	bl	8009f14 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8005b66:	4b29      	ldr	r3, [pc, #164]	@ (8005c0c <tcp_receive+0x818>)
 8005b68:	881b      	ldrh	r3, [r3, #0]
 8005b6a:	1ad3      	subs	r3, r2, r3
 8005b6c:	b29a      	uxth	r2, r3
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f7fd fae2 	bl	800313c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8005b78:	4b23      	ldr	r3, [pc, #140]	@ (8005c08 <tcp_receive+0x814>)
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	891b      	ldrh	r3, [r3, #8]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d006      	beq.n	8005b90 <tcp_receive+0x79c>
          recv_data = inseg.p;
 8005b82:	4b21      	ldr	r3, [pc, #132]	@ (8005c08 <tcp_receive+0x814>)
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	4a24      	ldr	r2, [pc, #144]	@ (8005c18 <tcp_receive+0x824>)
 8005b88:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8005b8a:	4b1f      	ldr	r3, [pc, #124]	@ (8005c08 <tcp_receive+0x814>)
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8005b90:	4b1d      	ldr	r3, [pc, #116]	@ (8005c08 <tcp_receive+0x814>)
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	899b      	ldrh	r3, [r3, #12]
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f7fb fad7 	bl	800114c <lwip_htons>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	f003 0301 	and.w	r3, r3, #1
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d006      	beq.n	8005bb8 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8005baa:	4b1c      	ldr	r3, [pc, #112]	@ (8005c1c <tcp_receive+0x828>)
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	f043 0320 	orr.w	r3, r3, #32
 8005bb2:	b2da      	uxtb	r2, r3
 8005bb4:	4b19      	ldr	r3, [pc, #100]	@ (8005c1c <tcp_receive+0x828>)
 8005bb6:	701a      	strb	r2, [r3, #0]
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	8b5b      	ldrh	r3, [r3, #26]
 8005bbc:	f003 0301 	and.w	r3, r3, #1
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d00e      	beq.n	8005be2 <tcp_receive+0x7ee>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	8b5b      	ldrh	r3, [r3, #26]
 8005bc8:	f023 0301 	bic.w	r3, r3, #1
 8005bcc:	b29a      	uxth	r2, r3
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	835a      	strh	r2, [r3, #26]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	8b5b      	ldrh	r3, [r3, #26]
 8005bd6:	f043 0302 	orr.w	r3, r3, #2
 8005bda:	b29a      	uxth	r2, r3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8005be0:	e00f      	b.n	8005c02 <tcp_receive+0x80e>
        tcp_ack(pcb);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	8b5b      	ldrh	r3, [r3, #26]
 8005be6:	f043 0301 	orr.w	r3, r3, #1
 8005bea:	b29a      	uxth	r2, r3
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8005bf0:	e007      	b.n	8005c02 <tcp_receive+0x80e>
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f001 f9ea 	bl	8006fcc <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8005bf8:	e003      	b.n	8005c02 <tcp_receive+0x80e>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f001 f9e6 	bl	8006fcc <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8005c00:	e028      	b.n	8005c54 <tcp_receive+0x860>
 8005c02:	e027      	b.n	8005c54 <tcp_receive+0x860>
 8005c04:	2400a338 	.word	0x2400a338
 8005c08:	2400a318 	.word	0x2400a318
 8005c0c:	2400a342 	.word	0x2400a342
 8005c10:	0800ba5c 	.word	0x0800ba5c
 8005c14:	0800ba94 	.word	0x0800ba94
 8005c18:	2400a348 	.word	0x2400a348
 8005c1c:	2400a345 	.word	0x2400a345
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8005c20:	4b0e      	ldr	r3, [pc, #56]	@ (8005c5c <tcp_receive+0x868>)
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c28:	1ad3      	subs	r3, r2, r3
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	db0a      	blt.n	8005c44 <tcp_receive+0x850>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8005c36:	441a      	add	r2, r3
 8005c38:	4b08      	ldr	r3, [pc, #32]	@ (8005c5c <tcp_receive+0x868>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	3b01      	subs	r3, #1
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	da07      	bge.n	8005c54 <tcp_receive+0x860>
      tcp_ack_now(pcb);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	8b5b      	ldrh	r3, [r3, #26]
 8005c48:	f043 0302 	orr.w	r3, r3, #2
 8005c4c:	b29a      	uxth	r2, r3
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8005c52:	e7ff      	b.n	8005c54 <tcp_receive+0x860>
 8005c54:	bf00      	nop
 8005c56:	372c      	adds	r7, #44	@ 0x2c
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd90      	pop	{r4, r7, pc}
 8005c5c:	2400a338 	.word	0x2400a338

08005c60 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b083      	sub	sp, #12
 8005c64:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8005c66:	4b15      	ldr	r3, [pc, #84]	@ (8005cbc <tcp_get_next_optbyte+0x5c>)
 8005c68:	881b      	ldrh	r3, [r3, #0]
 8005c6a:	1c5a      	adds	r2, r3, #1
 8005c6c:	b291      	uxth	r1, r2
 8005c6e:	4a13      	ldr	r2, [pc, #76]	@ (8005cbc <tcp_get_next_optbyte+0x5c>)
 8005c70:	8011      	strh	r1, [r2, #0]
 8005c72:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8005c74:	4b12      	ldr	r3, [pc, #72]	@ (8005cc0 <tcp_get_next_optbyte+0x60>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d004      	beq.n	8005c86 <tcp_get_next_optbyte+0x26>
 8005c7c:	4b11      	ldr	r3, [pc, #68]	@ (8005cc4 <tcp_get_next_optbyte+0x64>)
 8005c7e:	881b      	ldrh	r3, [r3, #0]
 8005c80:	88fa      	ldrh	r2, [r7, #6]
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d208      	bcs.n	8005c98 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8005c86:	4b10      	ldr	r3, [pc, #64]	@ (8005cc8 <tcp_get_next_optbyte+0x68>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	3314      	adds	r3, #20
 8005c8c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8005c8e:	88fb      	ldrh	r3, [r7, #6]
 8005c90:	683a      	ldr	r2, [r7, #0]
 8005c92:	4413      	add	r3, r2
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	e00b      	b.n	8005cb0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8005c98:	88fb      	ldrh	r3, [r7, #6]
 8005c9a:	b2da      	uxtb	r2, r3
 8005c9c:	4b09      	ldr	r3, [pc, #36]	@ (8005cc4 <tcp_get_next_optbyte+0x64>)
 8005c9e:	881b      	ldrh	r3, [r3, #0]
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	1ad3      	subs	r3, r2, r3
 8005ca4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8005ca6:	4b06      	ldr	r3, [pc, #24]	@ (8005cc0 <tcp_get_next_optbyte+0x60>)
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	797b      	ldrb	r3, [r7, #5]
 8005cac:	4413      	add	r3, r2
 8005cae:	781b      	ldrb	r3, [r3, #0]
  }
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	370c      	adds	r7, #12
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr
 8005cbc:	2400a334 	.word	0x2400a334
 8005cc0:	2400a330 	.word	0x2400a330
 8005cc4:	2400a32e 	.word	0x2400a32e
 8005cc8:	2400a328 	.word	0x2400a328

08005ccc <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b084      	sub	sp, #16
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d102      	bne.n	8005ce0 <tcp_parseopt+0x14>
 8005cda:	4831      	ldr	r0, [pc, #196]	@ (8005da0 <tcp_parseopt+0xd4>)
 8005cdc:	f004 f91a 	bl	8009f14 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8005ce0:	4b30      	ldr	r3, [pc, #192]	@ (8005da4 <tcp_parseopt+0xd8>)
 8005ce2:	881b      	ldrh	r3, [r3, #0]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d057      	beq.n	8005d98 <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8005ce8:	4b2f      	ldr	r3, [pc, #188]	@ (8005da8 <tcp_parseopt+0xdc>)
 8005cea:	2200      	movs	r2, #0
 8005cec:	801a      	strh	r2, [r3, #0]
 8005cee:	e047      	b.n	8005d80 <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 8005cf0:	f7ff ffb6 	bl	8005c60 <tcp_get_next_optbyte>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8005cf8:	7bfb      	ldrb	r3, [r7, #15]
 8005cfa:	2b02      	cmp	r3, #2
 8005cfc:	d006      	beq.n	8005d0c <tcp_parseopt+0x40>
 8005cfe:	2b02      	cmp	r3, #2
 8005d00:	dc2b      	bgt.n	8005d5a <tcp_parseopt+0x8e>
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d043      	beq.n	8005d8e <tcp_parseopt+0xc2>
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d039      	beq.n	8005d7e <tcp_parseopt+0xb2>
 8005d0a:	e026      	b.n	8005d5a <tcp_parseopt+0x8e>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8005d0c:	f7ff ffa8 	bl	8005c60 <tcp_get_next_optbyte>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b04      	cmp	r3, #4
 8005d14:	d13d      	bne.n	8005d92 <tcp_parseopt+0xc6>
 8005d16:	4b24      	ldr	r3, [pc, #144]	@ (8005da8 <tcp_parseopt+0xdc>)
 8005d18:	881b      	ldrh	r3, [r3, #0]
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	4a21      	ldr	r2, [pc, #132]	@ (8005da4 <tcp_parseopt+0xd8>)
 8005d1e:	8812      	ldrh	r2, [r2, #0]
 8005d20:	4293      	cmp	r3, r2
 8005d22:	da36      	bge.n	8005d92 <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8005d24:	f7ff ff9c 	bl	8005c60 <tcp_get_next_optbyte>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	021b      	lsls	r3, r3, #8
 8005d2c:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8005d2e:	f7ff ff97 	bl	8005c60 <tcp_get_next_optbyte>
 8005d32:	4603      	mov	r3, r0
 8005d34:	461a      	mov	r2, r3
 8005d36:	89bb      	ldrh	r3, [r7, #12]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8005d3c:	89bb      	ldrh	r3, [r7, #12]
 8005d3e:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d804      	bhi.n	8005d50 <tcp_parseopt+0x84>
 8005d46:	89bb      	ldrh	r3, [r7, #12]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d001      	beq.n	8005d50 <tcp_parseopt+0x84>
 8005d4c:	89ba      	ldrh	r2, [r7, #12]
 8005d4e:	e001      	b.n	8005d54 <tcp_parseopt+0x88>
 8005d50:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 8005d58:	e012      	b.n	8005d80 <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8005d5a:	f7ff ff81 	bl	8005c60 <tcp_get_next_optbyte>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8005d62:	7afb      	ldrb	r3, [r7, #11]
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d916      	bls.n	8005d96 <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8005d68:	7afb      	ldrb	r3, [r7, #11]
 8005d6a:	b29a      	uxth	r2, r3
 8005d6c:	4b0e      	ldr	r3, [pc, #56]	@ (8005da8 <tcp_parseopt+0xdc>)
 8005d6e:	881b      	ldrh	r3, [r3, #0]
 8005d70:	4413      	add	r3, r2
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	3b02      	subs	r3, #2
 8005d76:	b29a      	uxth	r2, r3
 8005d78:	4b0b      	ldr	r3, [pc, #44]	@ (8005da8 <tcp_parseopt+0xdc>)
 8005d7a:	801a      	strh	r2, [r3, #0]
 8005d7c:	e000      	b.n	8005d80 <tcp_parseopt+0xb4>
          break;
 8005d7e:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8005d80:	4b09      	ldr	r3, [pc, #36]	@ (8005da8 <tcp_parseopt+0xdc>)
 8005d82:	881a      	ldrh	r2, [r3, #0]
 8005d84:	4b07      	ldr	r3, [pc, #28]	@ (8005da4 <tcp_parseopt+0xd8>)
 8005d86:	881b      	ldrh	r3, [r3, #0]
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d3b1      	bcc.n	8005cf0 <tcp_parseopt+0x24>
 8005d8c:	e004      	b.n	8005d98 <tcp_parseopt+0xcc>
          return;
 8005d8e:	bf00      	nop
 8005d90:	e002      	b.n	8005d98 <tcp_parseopt+0xcc>
            return;
 8005d92:	bf00      	nop
 8005d94:	e000      	b.n	8005d98 <tcp_parseopt+0xcc>
            return;
 8005d96:	bf00      	nop
      }
    }
  }
}
 8005d98:	3710      	adds	r7, #16
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	bf00      	nop
 8005da0:	0800bab4 	.word	0x0800bab4
 8005da4:	2400a32c 	.word	0x2400a32c
 8005da8:	2400a334 	.word	0x2400a334

08005dac <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8005dac:	b480      	push	{r7}
 8005dae:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8005db0:	4b05      	ldr	r3, [pc, #20]	@ (8005dc8 <tcp_trigger_input_pcb_close+0x1c>)
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	f043 0310 	orr.w	r3, r3, #16
 8005db8:	b2da      	uxtb	r2, r3
 8005dba:	4b03      	ldr	r3, [pc, #12]	@ (8005dc8 <tcp_trigger_input_pcb_close+0x1c>)
 8005dbc:	701a      	strb	r2, [r3, #0]
}
 8005dbe:	bf00      	nop
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr
 8005dc8:	2400a345 	.word	0x2400a345

08005dcc <tcp_route>:
                                              struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	60b9      	str	r1, [r7, #8]
 8005dd6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d00a      	beq.n	8005df4 <tcp_route+0x28>
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	7a1b      	ldrb	r3, [r3, #8]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d006      	beq.n	8005df4 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	7a1b      	ldrb	r3, [r3, #8]
 8005dea:	4618      	mov	r0, r3
 8005dec:	f7fc f9c2 	bl	8002174 <netif_get_by_index>
 8005df0:	4603      	mov	r3, r0
 8005df2:	e003      	b.n	8005dfc <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f002 fde5 	bl	80089c4 <ip4_route>
 8005dfa:	4603      	mov	r3, r0
  }
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3710      	adds	r7, #16
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8005e04:	b590      	push	{r4, r7, lr}
 8005e06:	b087      	sub	sp, #28
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	60b9      	str	r1, [r7, #8]
 8005e0e:	603b      	str	r3, [r7, #0]
 8005e10:	4613      	mov	r3, r2
 8005e12:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d102      	bne.n	8005e20 <tcp_create_segment+0x1c>
 8005e1a:	483f      	ldr	r0, [pc, #252]	@ (8005f18 <tcp_create_segment+0x114>)
 8005e1c:	f004 f87a 	bl	8009f14 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d102      	bne.n	8005e2c <tcp_create_segment+0x28>
 8005e26:	483d      	ldr	r0, [pc, #244]	@ (8005f1c <tcp_create_segment+0x118>)
 8005e28:	f004 f874 	bl	8009f14 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8005e2c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	f003 0304 	and.w	r3, r3, #4
 8005e38:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8005e3a:	2003      	movs	r0, #3
 8005e3c:	f7fb fef8 	bl	8001c30 <memp_malloc>
 8005e40:	6138      	str	r0, [r7, #16]
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d104      	bne.n	8005e52 <tcp_create_segment+0x4e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8005e48:	68b8      	ldr	r0, [r7, #8]
 8005e4a:	f7fc fc89 	bl	8002760 <pbuf_free>
    return NULL;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	e05d      	b.n	8005f0e <tcp_create_segment+0x10a>
  }
  seg->flags = optflags;
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8005e58:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	68ba      	ldr	r2, [r7, #8]
 8005e64:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	891a      	ldrh	r2, [r3, #8]
 8005e6a:	7dfb      	ldrb	r3, [r7, #23]
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d202      	bcs.n	8005e78 <tcp_create_segment+0x74>
 8005e72:	482b      	ldr	r0, [pc, #172]	@ (8005f20 <tcp_create_segment+0x11c>)
 8005e74:	f004 f84e 	bl	8009f14 <iprintf>
  seg->len = p->tot_len - optlen;
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	891a      	ldrh	r2, [r3, #8]
 8005e7c:	7dfb      	ldrb	r3, [r7, #23]
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	1ad3      	subs	r3, r2, r3
 8005e82:	b29a      	uxth	r2, r3
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8005e88:	2114      	movs	r1, #20
 8005e8a:	68b8      	ldr	r0, [r7, #8]
 8005e8c:	f7fc fbe4 	bl	8002658 <pbuf_add_header>
 8005e90:	4603      	mov	r3, r0
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d004      	beq.n	8005ea0 <tcp_create_segment+0x9c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8005e96:	6938      	ldr	r0, [r7, #16]
 8005e98:	f7fd fdbf 	bl	8003a1a <tcp_seg_free>
    return NULL;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	e036      	b.n	8005f0e <tcp_create_segment+0x10a>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	685a      	ldr	r2, [r3, #4]
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	8ada      	ldrh	r2, [r3, #22]
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	68dc      	ldr	r4, [r3, #12]
 8005eb2:	4610      	mov	r0, r2
 8005eb4:	f7fb f94a 	bl	800114c <lwip_htons>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	8b1a      	ldrh	r2, [r3, #24]
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	68dc      	ldr	r4, [r3, #12]
 8005ec4:	4610      	mov	r0, r2
 8005ec6:	f7fb f941 	bl	800114c <lwip_htons>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	68dc      	ldr	r4, [r3, #12]
 8005ed2:	6838      	ldr	r0, [r7, #0]
 8005ed4:	f7fb f94f 	bl	8001176 <lwip_htonl>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8005edc:	7dfb      	ldrb	r3, [r7, #23]
 8005ede:	089b      	lsrs	r3, r3, #2
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	3305      	adds	r3, #5
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	031b      	lsls	r3, r3, #12
 8005ee8:	b29a      	uxth	r2, r3
 8005eea:	79fb      	ldrb	r3, [r7, #7]
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	b29a      	uxth	r2, r3
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	68dc      	ldr	r4, [r3, #12]
 8005ef6:	4610      	mov	r0, r2
 8005ef8:	f7fb f928 	bl	800114c <lwip_htons>
 8005efc:	4603      	mov	r3, r0
 8005efe:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	2200      	movs	r2, #0
 8005f06:	749a      	strb	r2, [r3, #18]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	74da      	strb	r2, [r3, #19]
  return seg;
 8005f0c:	693b      	ldr	r3, [r7, #16]
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	371c      	adds	r7, #28
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd90      	pop	{r4, r7, pc}
 8005f16:	bf00      	nop
 8005f18:	0800bad0 	.word	0x0800bad0
 8005f1c:	0800baf0 	.word	0x0800baf0
 8005f20:	0800bb14 	.word	0x0800bb14

08005f24 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8005f24:	b590      	push	{r4, r7, lr}
 8005f26:	b08b      	sub	sp, #44	@ 0x2c
 8005f28:	af02      	add	r7, sp, #8
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	460b      	mov	r3, r1
 8005f2e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8005f30:	2300      	movs	r3, #0
 8005f32:	61fb      	str	r3, [r7, #28]
 8005f34:	2300      	movs	r3, #0
 8005f36:	613b      	str	r3, [r7, #16]
  struct pbuf *p = NULL;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	61bb      	str	r3, [r7, #24]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d102      	bne.n	8005f48 <tcp_split_unsent_seg+0x24>
 8005f42:	488c      	ldr	r0, [pc, #560]	@ (8006174 <tcp_split_unsent_seg+0x250>)
 8005f44:	f003 ffe6 	bl	8009f14 <iprintf>

  useg = pcb->unsent;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f4c:	613b      	str	r3, [r7, #16]
  if (useg == NULL) {
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d102      	bne.n	8005f5a <tcp_split_unsent_seg+0x36>
    return ERR_MEM;
 8005f54:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005f58:	e107      	b.n	800616a <tcp_split_unsent_seg+0x246>
  }

  if (split == 0) {
 8005f5a:	887b      	ldrh	r3, [r7, #2]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d105      	bne.n	8005f6c <tcp_split_unsent_seg+0x48>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8005f60:	4885      	ldr	r0, [pc, #532]	@ (8006178 <tcp_split_unsent_seg+0x254>)
 8005f62:	f003 ffd7 	bl	8009f14 <iprintf>
    return ERR_VAL;
 8005f66:	f06f 0305 	mvn.w	r3, #5
 8005f6a:	e0fe      	b.n	800616a <tcp_split_unsent_seg+0x246>
  }

  if (useg->len <= split) {
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	891b      	ldrh	r3, [r3, #8]
 8005f70:	887a      	ldrh	r2, [r7, #2]
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d301      	bcc.n	8005f7a <tcp_split_unsent_seg+0x56>
    return ERR_OK;
 8005f76:	2300      	movs	r3, #0
 8005f78:	e0f7      	b.n	800616a <tcp_split_unsent_seg+0x246>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005f7e:	887a      	ldrh	r2, [r7, #2]
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d902      	bls.n	8005f8a <tcp_split_unsent_seg+0x66>
 8005f84:	487d      	ldr	r0, [pc, #500]	@ (800617c <tcp_split_unsent_seg+0x258>)
 8005f86:	f003 ffc5 	bl	8009f14 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	891b      	ldrh	r3, [r3, #8]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d102      	bne.n	8005f98 <tcp_split_unsent_seg+0x74>
 8005f92:	487b      	ldr	r0, [pc, #492]	@ (8006180 <tcp_split_unsent_seg+0x25c>)
 8005f94:	f003 ffbe 	bl	8009f14 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	7a9b      	ldrb	r3, [r3, #10]
 8005f9c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8005f9e:	7bfb      	ldrb	r3, [r7, #15]
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	f003 0304 	and.w	r3, r3, #4
 8005fa8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	891a      	ldrh	r2, [r3, #8]
 8005fae:	887b      	ldrh	r3, [r7, #2]
 8005fb0:	1ad3      	subs	r3, r2, r3
 8005fb2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8005fb4:	7bbb      	ldrb	r3, [r7, #14]
 8005fb6:	b29a      	uxth	r2, r3
 8005fb8:	89bb      	ldrh	r3, [r7, #12]
 8005fba:	4413      	add	r3, r2
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8005fc2:	4619      	mov	r1, r3
 8005fc4:	2036      	movs	r0, #54	@ 0x36
 8005fc6:	f7fc f925 	bl	8002214 <pbuf_alloc>
 8005fca:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8005fcc:	69bb      	ldr	r3, [r7, #24]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	f000 80ba 	beq.w	8006148 <tcp_split_unsent_seg+0x224>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	891a      	ldrh	r2, [r3, #8]
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	891b      	ldrh	r3, [r3, #8]
 8005fde:	1ad3      	subs	r3, r2, r3
 8005fe0:	b29a      	uxth	r2, r3
 8005fe2:	887b      	ldrh	r3, [r7, #2]
 8005fe4:	4413      	add	r3, r2
 8005fe6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	6858      	ldr	r0, [r3, #4]
 8005fec:	69bb      	ldr	r3, [r7, #24]
 8005fee:	685a      	ldr	r2, [r3, #4]
 8005ff0:	7bbb      	ldrb	r3, [r7, #14]
 8005ff2:	18d1      	adds	r1, r2, r3
 8005ff4:	897b      	ldrh	r3, [r7, #10]
 8005ff6:	89ba      	ldrh	r2, [r7, #12]
 8005ff8:	f7fc fd78 	bl	8002aec <pbuf_copy_partial>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	461a      	mov	r2, r3
 8006000:	89bb      	ldrh	r3, [r7, #12]
 8006002:	4293      	cmp	r3, r2
 8006004:	f040 80a2 	bne.w	800614c <tcp_split_unsent_seg+0x228>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	899b      	ldrh	r3, [r3, #12]
 800600e:	b29b      	uxth	r3, r3
 8006010:	4618      	mov	r0, r3
 8006012:	f7fb f89b 	bl	800114c <lwip_htons>
 8006016:	4603      	mov	r3, r0
 8006018:	b2db      	uxtb	r3, r3
 800601a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800601e:	75fb      	strb	r3, [r7, #23]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8006020:	2300      	movs	r3, #0
 8006022:	75bb      	strb	r3, [r7, #22]

  if (split_flags & TCP_PSH) {
 8006024:	7dfb      	ldrb	r3, [r7, #23]
 8006026:	f003 0308 	and.w	r3, r3, #8
 800602a:	2b00      	cmp	r3, #0
 800602c:	d007      	beq.n	800603e <tcp_split_unsent_seg+0x11a>
    split_flags &= ~TCP_PSH;
 800602e:	7dfb      	ldrb	r3, [r7, #23]
 8006030:	f023 0308 	bic.w	r3, r3, #8
 8006034:	75fb      	strb	r3, [r7, #23]
    remainder_flags |= TCP_PSH;
 8006036:	7dbb      	ldrb	r3, [r7, #22]
 8006038:	f043 0308 	orr.w	r3, r3, #8
 800603c:	75bb      	strb	r3, [r7, #22]
  }
  if (split_flags & TCP_FIN) {
 800603e:	7dfb      	ldrb	r3, [r7, #23]
 8006040:	f003 0301 	and.w	r3, r3, #1
 8006044:	2b00      	cmp	r3, #0
 8006046:	d007      	beq.n	8006058 <tcp_split_unsent_seg+0x134>
    split_flags &= ~TCP_FIN;
 8006048:	7dfb      	ldrb	r3, [r7, #23]
 800604a:	f023 0301 	bic.w	r3, r3, #1
 800604e:	75fb      	strb	r3, [r7, #23]
    remainder_flags |= TCP_FIN;
 8006050:	7dbb      	ldrb	r3, [r7, #22]
 8006052:	f043 0301 	orr.w	r3, r3, #1
 8006056:	75bb      	strb	r3, [r7, #22]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	4618      	mov	r0, r3
 8006060:	f7fb f889 	bl	8001176 <lwip_htonl>
 8006064:	4602      	mov	r2, r0
 8006066:	887b      	ldrh	r3, [r7, #2]
 8006068:	18d1      	adds	r1, r2, r3
 800606a:	7dba      	ldrb	r2, [r7, #22]
 800606c:	7bfb      	ldrb	r3, [r7, #15]
 800606e:	9300      	str	r3, [sp, #0]
 8006070:	460b      	mov	r3, r1
 8006072:	69b9      	ldr	r1, [r7, #24]
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f7ff fec5 	bl	8005e04 <tcp_create_segment>
 800607a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d102      	bne.n	8006088 <tcp_split_unsent_seg+0x164>
    p = NULL; /* Freed by tcp_create_segment */
 8006082:	2300      	movs	r3, #0
 8006084:	61bb      	str	r3, [r7, #24]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("tcp_split_unsent_seg: could not create new TCP segment\n"));
    goto memerr;
 8006086:	e062      	b.n	800614e <tcp_split_unsent_seg+0x22a>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	4618      	mov	r0, r3
 800608e:	f7fc fbdb 	bl	8002848 <pbuf_clen>
 8006092:	4603      	mov	r3, r0
 8006094:	461a      	mov	r2, r3
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800609c:	1a9b      	subs	r3, r3, r2
 800609e:	b29a      	uxth	r2, r3
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	6858      	ldr	r0, [r3, #4]
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	891a      	ldrh	r2, [r3, #8]
 80060b0:	89bb      	ldrh	r3, [r7, #12]
 80060b2:	1ad3      	subs	r3, r2, r3
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	4619      	mov	r1, r3
 80060b8:	f7fc f9ee 	bl	8002498 <pbuf_realloc>
  useg->len -= remainder;
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	891a      	ldrh	r2, [r3, #8]
 80060c0:	89bb      	ldrh	r3, [r7, #12]
 80060c2:	1ad3      	subs	r3, r2, r3
 80060c4:	b29a      	uxth	r2, r3
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	68db      	ldr	r3, [r3, #12]
 80060ce:	899b      	ldrh	r3, [r3, #12]
 80060d0:	b29c      	uxth	r4, r3
 80060d2:	7dfb      	ldrb	r3, [r7, #23]
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	4618      	mov	r0, r3
 80060d8:	f7fb f838 	bl	800114c <lwip_htons>
 80060dc:	4603      	mov	r3, r0
 80060de:	461a      	mov	r2, r3
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	4322      	orrs	r2, r4
 80060e6:	b292      	uxth	r2, r2
 80060e8:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	4618      	mov	r0, r3
 80060f0:	f7fc fbaa 	bl	8002848 <pbuf_clen>
 80060f4:	4603      	mov	r3, r0
 80060f6:	461a      	mov	r2, r3
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80060fe:	4413      	add	r3, r2
 8006100:	b29a      	uxth	r2, r3
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	4618      	mov	r0, r3
 800610e:	f7fc fb9b 	bl	8002848 <pbuf_clen>
 8006112:	4603      	mov	r3, r0
 8006114:	461a      	mov	r2, r3
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800611c:	4413      	add	r3, r2
 800611e:	b29a      	uxth	r2, r3
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	69fb      	ldr	r3, [r7, #28]
 800612c:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	69fa      	ldr	r2, [r7, #28]
 8006132:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8006134:	69fb      	ldr	r3, [r7, #28]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d103      	bne.n	8006144 <tcp_split_unsent_seg+0x220>
    pcb->unsent_oversize = 0;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2200      	movs	r2, #0
 8006140:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8006144:	2300      	movs	r3, #0
 8006146:	e010      	b.n	800616a <tcp_split_unsent_seg+0x246>
    goto memerr;
 8006148:	bf00      	nop
 800614a:	e000      	b.n	800614e <tcp_split_unsent_seg+0x22a>
    goto memerr;
 800614c:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800614e:	69fb      	ldr	r3, [r7, #28]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d002      	beq.n	800615a <tcp_split_unsent_seg+0x236>
 8006154:	480b      	ldr	r0, [pc, #44]	@ (8006184 <tcp_split_unsent_seg+0x260>)
 8006156:	f003 fedd 	bl	8009f14 <iprintf>
  if (p != NULL) {
 800615a:	69bb      	ldr	r3, [r7, #24]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d002      	beq.n	8006166 <tcp_split_unsent_seg+0x242>
    pbuf_free(p);
 8006160:	69b8      	ldr	r0, [r7, #24]
 8006162:	f7fc fafd 	bl	8002760 <pbuf_free>
  }

  return ERR_MEM;
 8006166:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800616a:	4618      	mov	r0, r3
 800616c:	3724      	adds	r7, #36	@ 0x24
 800616e:	46bd      	mov	sp, r7
 8006170:	bd90      	pop	{r4, r7, pc}
 8006172:	bf00      	nop
 8006174:	0800bdbc 	.word	0x0800bdbc
 8006178:	0800bde0 	.word	0x0800bde0
 800617c:	0800be04 	.word	0x0800be04
 8006180:	0800be14 	.word	0x0800be14
 8006184:	0800be24 	.word	0x0800be24

08006188 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8006188:	b590      	push	{r4, r7, lr}
 800618a:	b085      	sub	sp, #20
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d102      	bne.n	800619c <tcp_send_fin+0x14>
 8006196:	481f      	ldr	r0, [pc, #124]	@ (8006214 <tcp_send_fin+0x8c>)
 8006198:	f003 febc 	bl	8009f14 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d02e      	beq.n	8006202 <tcp_send_fin+0x7a>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80061a8:	60fb      	str	r3, [r7, #12]
 80061aa:	e002      	b.n	80061b2 <tcp_send_fin+0x2a>
         last_unsent = last_unsent->next);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d1f8      	bne.n	80061ac <tcp_send_fin+0x24>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	68db      	ldr	r3, [r3, #12]
 80061be:	899b      	ldrh	r3, [r3, #12]
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	4618      	mov	r0, r3
 80061c4:	f7fa ffc2 	bl	800114c <lwip_htons>
 80061c8:	4603      	mov	r3, r0
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	f003 0307 	and.w	r3, r3, #7
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d116      	bne.n	8006202 <tcp_send_fin+0x7a>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	68db      	ldr	r3, [r3, #12]
 80061d8:	899b      	ldrh	r3, [r3, #12]
 80061da:	b29c      	uxth	r4, r3
 80061dc:	2001      	movs	r0, #1
 80061de:	f7fa ffb5 	bl	800114c <lwip_htons>
 80061e2:	4603      	mov	r3, r0
 80061e4:	461a      	mov	r2, r3
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	68db      	ldr	r3, [r3, #12]
 80061ea:	4322      	orrs	r2, r4
 80061ec:	b292      	uxth	r2, r2
 80061ee:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	8b5b      	ldrh	r3, [r3, #26]
 80061f4:	f043 0320 	orr.w	r3, r3, #32
 80061f8:	b29a      	uxth	r2, r3
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80061fe:	2300      	movs	r3, #0
 8006200:	e004      	b.n	800620c <tcp_send_fin+0x84>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8006202:	2101      	movs	r1, #1
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f000 f807 	bl	8006218 <tcp_enqueue_flags>
 800620a:	4603      	mov	r3, r0
}
 800620c:	4618      	mov	r0, r3
 800620e:	3714      	adds	r7, #20
 8006210:	46bd      	mov	sp, r7
 8006212:	bd90      	pop	{r4, r7, pc}
 8006214:	0800be30 	.word	0x0800be30

08006218 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b08a      	sub	sp, #40	@ 0x28
 800621c:	af02      	add	r7, sp, #8
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	460b      	mov	r3, r1
 8006222:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8006224:	2300      	movs	r3, #0
 8006226:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8006228:	2300      	movs	r3, #0
 800622a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800622c:	78fb      	ldrb	r3, [r7, #3]
 800622e:	f003 0303 	and.w	r3, r3, #3
 8006232:	2b00      	cmp	r3, #0
 8006234:	d102      	bne.n	800623c <tcp_enqueue_flags+0x24>
 8006236:	485b      	ldr	r0, [pc, #364]	@ (80063a4 <tcp_enqueue_flags+0x18c>)
 8006238:	f003 fe6c 	bl	8009f14 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d102      	bne.n	8006248 <tcp_enqueue_flags+0x30>
 8006242:	4859      	ldr	r0, [pc, #356]	@ (80063a8 <tcp_enqueue_flags+0x190>)
 8006244:	f003 fe66 	bl	8009f14 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8006248:	78fb      	ldrb	r3, [r7, #3]
 800624a:	f003 0302 	and.w	r3, r3, #2
 800624e:	2b00      	cmp	r3, #0
 8006250:	d001      	beq.n	8006256 <tcp_enqueue_flags+0x3e>
    optflags = TF_SEG_OPTS_MSS;
 8006252:	2301      	movs	r3, #1
 8006254:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8006256:	7ffb      	ldrb	r3, [r7, #31]
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	b2db      	uxtb	r3, r3
 800625c:	f003 0304 	and.w	r3, r3, #4
 8006260:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8006262:	7dfb      	ldrb	r3, [r7, #23]
 8006264:	b29b      	uxth	r3, r3
 8006266:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800626a:	4619      	mov	r1, r3
 800626c:	2036      	movs	r0, #54	@ 0x36
 800626e:	f7fb ffd1 	bl	8002214 <pbuf_alloc>
 8006272:	6138      	str	r0, [r7, #16]
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d109      	bne.n	800628e <tcp_enqueue_flags+0x76>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	8b5b      	ldrh	r3, [r3, #26]
 800627e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006282:	b29a      	uxth	r2, r3
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8006288:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800628c:	e085      	b.n	800639a <tcp_enqueue_flags+0x182>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	895a      	ldrh	r2, [r3, #10]
 8006292:	7dfb      	ldrb	r3, [r7, #23]
 8006294:	b29b      	uxth	r3, r3
 8006296:	429a      	cmp	r2, r3
 8006298:	d202      	bcs.n	80062a0 <tcp_enqueue_flags+0x88>
 800629a:	4844      	ldr	r0, [pc, #272]	@ (80063ac <tcp_enqueue_flags+0x194>)
 800629c:	f003 fe3a 	bl	8009f14 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 80062a4:	78fa      	ldrb	r2, [r7, #3]
 80062a6:	7ffb      	ldrb	r3, [r7, #31]
 80062a8:	9300      	str	r3, [sp, #0]
 80062aa:	460b      	mov	r3, r1
 80062ac:	6939      	ldr	r1, [r7, #16]
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f7ff fda8 	bl	8005e04 <tcp_create_segment>
 80062b4:	60f8      	str	r0, [r7, #12]
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d109      	bne.n	80062d0 <tcp_enqueue_flags+0xb8>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	8b5b      	ldrh	r3, [r3, #26]
 80062c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062c4:	b29a      	uxth	r2, r3
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80062ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80062ce:	e064      	b.n	800639a <tcp_enqueue_flags+0x182>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	f003 0303 	and.w	r3, r3, #3
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d002      	beq.n	80062e2 <tcp_enqueue_flags+0xca>
 80062dc:	4834      	ldr	r0, [pc, #208]	@ (80063b0 <tcp_enqueue_flags+0x198>)
 80062de:	f003 fe19 	bl	8009f14 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	891b      	ldrh	r3, [r3, #8]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d002      	beq.n	80062f0 <tcp_enqueue_flags+0xd8>
 80062ea:	4832      	ldr	r0, [pc, #200]	@ (80063b4 <tcp_enqueue_flags+0x19c>)
 80062ec:	f003 fe12 	bl	8009f14 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d103      	bne.n	8006300 <tcp_enqueue_flags+0xe8>
    pcb->unsent = seg;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	68fa      	ldr	r2, [r7, #12]
 80062fc:	66da      	str	r2, [r3, #108]	@ 0x6c
 80062fe:	e00d      	b.n	800631c <tcp_enqueue_flags+0x104>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006304:	61bb      	str	r3, [r7, #24]
 8006306:	e002      	b.n	800630e <tcp_enqueue_flags+0xf6>
 8006308:	69bb      	ldr	r3, [r7, #24]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	61bb      	str	r3, [r7, #24]
 800630e:	69bb      	ldr	r3, [r7, #24]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d1f8      	bne.n	8006308 <tcp_enqueue_flags+0xf0>
    useg->next = seg;
 8006316:	69bb      	ldr	r3, [r7, #24]
 8006318:	68fa      	ldr	r2, [r7, #12]
 800631a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2200      	movs	r2, #0
 8006320:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8006324:	78fb      	ldrb	r3, [r7, #3]
 8006326:	f003 0302 	and.w	r3, r3, #2
 800632a:	2b00      	cmp	r3, #0
 800632c:	d104      	bne.n	8006338 <tcp_enqueue_flags+0x120>
 800632e:	78fb      	ldrb	r3, [r7, #3]
 8006330:	f003 0301 	and.w	r3, r3, #1
 8006334:	2b00      	cmp	r3, #0
 8006336:	d004      	beq.n	8006342 <tcp_enqueue_flags+0x12a>
    pcb->snd_lbb++;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800633c:	1c5a      	adds	r2, r3, #1
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8006342:	78fb      	ldrb	r3, [r7, #3]
 8006344:	f003 0301 	and.w	r3, r3, #1
 8006348:	2b00      	cmp	r3, #0
 800634a:	d006      	beq.n	800635a <tcp_enqueue_flags+0x142>
    tcp_set_flags(pcb, TF_FIN);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	8b5b      	ldrh	r3, [r3, #26]
 8006350:	f043 0320 	orr.w	r3, r3, #32
 8006354:	b29a      	uxth	r2, r3
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	4618      	mov	r0, r3
 8006360:	f7fc fa72 	bl	8002848 <pbuf_clen>
 8006364:	4603      	mov	r3, r0
 8006366:	461a      	mov	r2, r3
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800636e:	4413      	add	r3, r2
 8006370:	b29a      	uxth	r2, r3
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800637e:	2b00      	cmp	r3, #0
 8006380:	d00a      	beq.n	8006398 <tcp_enqueue_flags+0x180>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006386:	2b00      	cmp	r3, #0
 8006388:	d106      	bne.n	8006398 <tcp_enqueue_flags+0x180>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800638e:	2b00      	cmp	r3, #0
 8006390:	d102      	bne.n	8006398 <tcp_enqueue_flags+0x180>
 8006392:	4809      	ldr	r0, [pc, #36]	@ (80063b8 <tcp_enqueue_flags+0x1a0>)
 8006394:	f003 fdbe 	bl	8009f14 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8006398:	2300      	movs	r3, #0
}
 800639a:	4618      	mov	r0, r3
 800639c:	3720      	adds	r7, #32
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
 80063a2:	bf00      	nop
 80063a4:	0800be4c 	.word	0x0800be4c
 80063a8:	0800bea4 	.word	0x0800bea4
 80063ac:	0800bec4 	.word	0x0800bec4
 80063b0:	0800bf00 	.word	0x0800bf00
 80063b4:	0800bf18 	.word	0x0800bf18
 80063b8:	0800bf44 	.word	0x0800bf44

080063bc <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80063bc:	b5b0      	push	{r4, r5, r7, lr}
 80063be:	b08a      	sub	sp, #40	@ 0x28
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d102      	bne.n	80063d0 <tcp_output+0x14>
 80063ca:	4898      	ldr	r0, [pc, #608]	@ (800662c <tcp_output+0x270>)
 80063cc:	f003 fda2 	bl	8009f14 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	7d1b      	ldrb	r3, [r3, #20]
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	d102      	bne.n	80063de <tcp_output+0x22>
 80063d8:	4895      	ldr	r0, [pc, #596]	@ (8006630 <tcp_output+0x274>)
 80063da:	f003 fd9b 	bl	8009f14 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80063de:	4b95      	ldr	r3, [pc, #596]	@ (8006634 <tcp_output+0x278>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d101      	bne.n	80063ec <tcp_output+0x30>
    return ERR_OK;
 80063e8:	2300      	movs	r3, #0
 80063ea:	e1c6      	b.n	800677a <tcp_output+0x3be>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80063f8:	4293      	cmp	r3, r2
 80063fa:	bf28      	it	cs
 80063fc:	4613      	movcs	r3, r2
 80063fe:	b29b      	uxth	r3, r3
 8006400:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006406:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8006408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800640a:	2b00      	cmp	r3, #0
 800640c:	d10b      	bne.n	8006426 <tcp_output+0x6a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	8b5b      	ldrh	r3, [r3, #26]
 8006412:	f003 0302 	and.w	r3, r3, #2
 8006416:	2b00      	cmp	r3, #0
 8006418:	f000 81a2 	beq.w	8006760 <tcp_output+0x3a4>
      return tcp_send_empty_ack(pcb);
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f000 fdd5 	bl	8006fcc <tcp_send_empty_ack>
 8006422:	4603      	mov	r3, r0
 8006424:	e1a9      	b.n	800677a <tcp_output+0x3be>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8006426:	6879      	ldr	r1, [r7, #4]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	3304      	adds	r3, #4
 800642c:	461a      	mov	r2, r3
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f7ff fccc 	bl	8005dcc <tcp_route>
 8006434:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d102      	bne.n	8006442 <tcp_output+0x86>
    return ERR_RTE;
 800643c:	f06f 0303 	mvn.w	r3, #3
 8006440:	e19b      	b.n	800677a <tcp_output+0x3be>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d003      	beq.n	8006450 <tcp_output+0x94>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d111      	bne.n	8006474 <tcp_output+0xb8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d002      	beq.n	800645c <tcp_output+0xa0>
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	3304      	adds	r3, #4
 800645a:	e000      	b.n	800645e <tcp_output+0xa2>
 800645c:	2300      	movs	r3, #0
 800645e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d102      	bne.n	800646c <tcp_output+0xb0>
      return ERR_RTE;
 8006466:	f06f 0303 	mvn.w	r3, #3
 800646a:	e186      	b.n	800677a <tcp_output+0x3be>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8006474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	4618      	mov	r0, r3
 800647c:	f7fa fe7b 	bl	8001176 <lwip_htonl>
 8006480:	4602      	mov	r2, r0
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006486:	1ad3      	subs	r3, r2, r3
 8006488:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800648a:	8912      	ldrh	r2, [r2, #8]
 800648c:	4413      	add	r3, r2
 800648e:	69ba      	ldr	r2, [r7, #24]
 8006490:	429a      	cmp	r2, r3
 8006492:	d227      	bcs.n	80064e4 <tcp_output+0x128>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800649a:	461a      	mov	r2, r3
 800649c:	69bb      	ldr	r3, [r7, #24]
 800649e:	4293      	cmp	r3, r2
 80064a0:	d114      	bne.n	80064cc <tcp_output+0x110>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d110      	bne.n	80064cc <tcp_output+0x110>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d10b      	bne.n	80064cc <tcp_output+0x110>
      pcb->persist_cnt = 0;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2200      	movs	r2, #0
 80064b8:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
      pcb->persist_backoff = 1;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2201      	movs	r2, #1
 80064c0:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
      pcb->persist_probe = 0;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2200      	movs	r2, #0
 80064c8:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	8b5b      	ldrh	r3, [r3, #26]
 80064d0:	f003 0302 	and.w	r3, r3, #2
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	f000 8145 	beq.w	8006764 <tcp_output+0x3a8>
      return tcp_send_empty_ack(pcb);
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f000 fd76 	bl	8006fcc <tcp_send_empty_ack>
 80064e0:	4603      	mov	r3, r0
 80064e2:	e14a      	b.n	800677a <tcp_output+0x3be>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2200      	movs	r2, #0
 80064e8:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064f0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80064f2:	6a3b      	ldr	r3, [r7, #32]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	f000 8114 	beq.w	8006722 <tcp_output+0x366>
    for (; useg->next != NULL; useg = useg->next);
 80064fa:	e002      	b.n	8006502 <tcp_output+0x146>
 80064fc:	6a3b      	ldr	r3, [r7, #32]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	623b      	str	r3, [r7, #32]
 8006502:	6a3b      	ldr	r3, [r7, #32]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d1f8      	bne.n	80064fc <tcp_output+0x140>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800650a:	e10a      	b.n	8006722 <tcp_output+0x366>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800650c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800650e:	68db      	ldr	r3, [r3, #12]
 8006510:	899b      	ldrh	r3, [r3, #12]
 8006512:	b29b      	uxth	r3, r3
 8006514:	4618      	mov	r0, r3
 8006516:	f7fa fe19 	bl	800114c <lwip_htons>
 800651a:	4603      	mov	r3, r0
 800651c:	b2db      	uxtb	r3, r3
 800651e:	f003 0304 	and.w	r3, r3, #4
 8006522:	2b00      	cmp	r3, #0
 8006524:	d002      	beq.n	800652c <tcp_output+0x170>
 8006526:	4844      	ldr	r0, [pc, #272]	@ (8006638 <tcp_output+0x27c>)
 8006528:	f003 fcf4 	bl	8009f14 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006530:	2b00      	cmp	r3, #0
 8006532:	d01f      	beq.n	8006574 <tcp_output+0x1b8>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	8b5b      	ldrh	r3, [r3, #26]
 8006538:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800653c:	2b00      	cmp	r3, #0
 800653e:	d119      	bne.n	8006574 <tcp_output+0x1b8>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006544:	2b00      	cmp	r3, #0
 8006546:	d00b      	beq.n	8006560 <tcp_output+0x1a4>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d110      	bne.n	8006574 <tcp_output+0x1b8>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006556:	891a      	ldrh	r2, [r3, #8]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800655c:	429a      	cmp	r2, r3
 800655e:	d209      	bcs.n	8006574 <tcp_output+0x1b8>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8006566:	2b00      	cmp	r3, #0
 8006568:	d004      	beq.n	8006574 <tcp_output+0x1b8>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8006570:	2b07      	cmp	r3, #7
 8006572:	d901      	bls.n	8006578 <tcp_output+0x1bc>
 8006574:	2301      	movs	r3, #1
 8006576:	e000      	b.n	800657a <tcp_output+0x1be>
 8006578:	2300      	movs	r3, #0
 800657a:	2b00      	cmp	r3, #0
 800657c:	d106      	bne.n	800658c <tcp_output+0x1d0>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	8b5b      	ldrh	r3, [r3, #26]
 8006582:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8006586:	2b00      	cmp	r3, #0
 8006588:	f000 80e0 	beq.w	800674c <tcp_output+0x390>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	7d1b      	ldrb	r3, [r3, #20]
 8006590:	2b02      	cmp	r3, #2
 8006592:	d00d      	beq.n	80065b0 <tcp_output+0x1f4>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8006594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006596:	68db      	ldr	r3, [r3, #12]
 8006598:	899b      	ldrh	r3, [r3, #12]
 800659a:	b29c      	uxth	r4, r3
 800659c:	2010      	movs	r0, #16
 800659e:	f7fa fdd5 	bl	800114c <lwip_htons>
 80065a2:	4603      	mov	r3, r0
 80065a4:	461a      	mov	r2, r3
 80065a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065a8:	68db      	ldr	r3, [r3, #12]
 80065aa:	4322      	orrs	r2, r4
 80065ac:	b292      	uxth	r2, r2
 80065ae:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80065b0:	697a      	ldr	r2, [r7, #20]
 80065b2:	6879      	ldr	r1, [r7, #4]
 80065b4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80065b6:	f000 f8fd 	bl	80067b4 <tcp_output_segment>
 80065ba:	4603      	mov	r3, r0
 80065bc:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80065be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d009      	beq.n	80065da <tcp_output+0x21e>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	8b5b      	ldrh	r3, [r3, #26]
 80065ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065ce:	b29a      	uxth	r2, r3
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	835a      	strh	r2, [r3, #26]
      return err;
 80065d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065d8:	e0cf      	b.n	800677a <tcp_output+0x3be>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80065da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	7d1b      	ldrb	r3, [r3, #20]
 80065e6:	2b02      	cmp	r3, #2
 80065e8:	d006      	beq.n	80065f8 <tcp_output+0x23c>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	8b5b      	ldrh	r3, [r3, #26]
 80065ee:	f023 0303 	bic.w	r3, r3, #3
 80065f2:	b29a      	uxth	r2, r3
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80065f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065fa:	68db      	ldr	r3, [r3, #12]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	4618      	mov	r0, r3
 8006600:	f7fa fdb9 	bl	8001176 <lwip_htonl>
 8006604:	4604      	mov	r4, r0
 8006606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006608:	891b      	ldrh	r3, [r3, #8]
 800660a:	461d      	mov	r5, r3
 800660c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800660e:	68db      	ldr	r3, [r3, #12]
 8006610:	899b      	ldrh	r3, [r3, #12]
 8006612:	b29b      	uxth	r3, r3
 8006614:	4618      	mov	r0, r3
 8006616:	f7fa fd99 	bl	800114c <lwip_htons>
 800661a:	4603      	mov	r3, r0
 800661c:	b2db      	uxtb	r3, r3
 800661e:	f003 0303 	and.w	r3, r3, #3
 8006622:	2b00      	cmp	r3, #0
 8006624:	d00a      	beq.n	800663c <tcp_output+0x280>
 8006626:	2301      	movs	r3, #1
 8006628:	e009      	b.n	800663e <tcp_output+0x282>
 800662a:	bf00      	nop
 800662c:	0800bf6c 	.word	0x0800bf6c
 8006630:	0800bf84 	.word	0x0800bf84
 8006634:	2400a34c 	.word	0x2400a34c
 8006638:	0800bfac 	.word	0x0800bfac
 800663c:	2300      	movs	r3, #0
 800663e:	442b      	add	r3, r5
 8006640:	4423      	add	r3, r4
 8006642:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	1ad3      	subs	r3, r2, r3
 800664c:	2b00      	cmp	r3, #0
 800664e:	da02      	bge.n	8006656 <tcp_output+0x29a>
      pcb->snd_nxt = snd_nxt;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	68ba      	ldr	r2, [r7, #8]
 8006654:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8006656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006658:	891b      	ldrh	r3, [r3, #8]
 800665a:	461c      	mov	r4, r3
 800665c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	899b      	ldrh	r3, [r3, #12]
 8006662:	b29b      	uxth	r3, r3
 8006664:	4618      	mov	r0, r3
 8006666:	f7fa fd71 	bl	800114c <lwip_htons>
 800666a:	4603      	mov	r3, r0
 800666c:	b2db      	uxtb	r3, r3
 800666e:	f003 0303 	and.w	r3, r3, #3
 8006672:	2b00      	cmp	r3, #0
 8006674:	d001      	beq.n	800667a <tcp_output+0x2be>
 8006676:	2301      	movs	r3, #1
 8006678:	e000      	b.n	800667c <tcp_output+0x2c0>
 800667a:	2300      	movs	r3, #0
 800667c:	4423      	add	r3, r4
 800667e:	2b00      	cmp	r3, #0
 8006680:	d049      	beq.n	8006716 <tcp_output+0x35a>
      seg->next = NULL;
 8006682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006684:	2200      	movs	r2, #0
 8006686:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800668c:	2b00      	cmp	r3, #0
 800668e:	d105      	bne.n	800669c <tcp_output+0x2e0>
        pcb->unacked = seg;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006694:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8006696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006698:	623b      	str	r3, [r7, #32]
 800669a:	e03f      	b.n	800671c <tcp_output+0x360>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800669c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800669e:	68db      	ldr	r3, [r3, #12]
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	4618      	mov	r0, r3
 80066a4:	f7fa fd67 	bl	8001176 <lwip_htonl>
 80066a8:	4604      	mov	r4, r0
 80066aa:	6a3b      	ldr	r3, [r7, #32]
 80066ac:	68db      	ldr	r3, [r3, #12]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	4618      	mov	r0, r3
 80066b2:	f7fa fd60 	bl	8001176 <lwip_htonl>
 80066b6:	4603      	mov	r3, r0
 80066b8:	1ae3      	subs	r3, r4, r3
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	da24      	bge.n	8006708 <tcp_output+0x34c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	3370      	adds	r3, #112	@ 0x70
 80066c2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80066c4:	e002      	b.n	80066cc <tcp_output+0x310>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80066c6:	69fb      	ldr	r3, [r7, #28]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80066cc:	69fb      	ldr	r3, [r7, #28]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d011      	beq.n	80066f8 <tcp_output+0x33c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	68db      	ldr	r3, [r3, #12]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	4618      	mov	r0, r3
 80066de:	f7fa fd4a 	bl	8001176 <lwip_htonl>
 80066e2:	4604      	mov	r4, r0
 80066e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066e6:	68db      	ldr	r3, [r3, #12]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	4618      	mov	r0, r3
 80066ec:	f7fa fd43 	bl	8001176 <lwip_htonl>
 80066f0:	4603      	mov	r3, r0
 80066f2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	dbe6      	blt.n	80066c6 <tcp_output+0x30a>
          }
          seg->next = (*cur_seg);
 80066f8:	69fb      	ldr	r3, [r7, #28]
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066fe:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8006700:	69fb      	ldr	r3, [r7, #28]
 8006702:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006704:	601a      	str	r2, [r3, #0]
 8006706:	e009      	b.n	800671c <tcp_output+0x360>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8006708:	6a3b      	ldr	r3, [r7, #32]
 800670a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800670c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800670e:	6a3b      	ldr	r3, [r7, #32]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	623b      	str	r3, [r7, #32]
 8006714:	e002      	b.n	800671c <tcp_output+0x360>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8006716:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006718:	f7fd f97f 	bl	8003a1a <tcp_seg_free>
    }
    seg = pcb->unsent;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006720:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8006722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006724:	2b00      	cmp	r3, #0
 8006726:	d012      	beq.n	800674e <tcp_output+0x392>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8006728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	4618      	mov	r0, r3
 8006730:	f7fa fd21 	bl	8001176 <lwip_htonl>
 8006734:	4602      	mov	r2, r0
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800673a:	1ad3      	subs	r3, r2, r3
 800673c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800673e:	8912      	ldrh	r2, [r2, #8]
 8006740:	4413      	add	r3, r2
  while (seg != NULL &&
 8006742:	69ba      	ldr	r2, [r7, #24]
 8006744:	429a      	cmp	r2, r3
 8006746:	f4bf aee1 	bcs.w	800650c <tcp_output+0x150>
 800674a:	e000      	b.n	800674e <tcp_output+0x392>
      break;
 800674c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006752:	2b00      	cmp	r3, #0
 8006754:	d108      	bne.n	8006768 <tcp_output+0x3ac>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2200      	movs	r2, #0
 800675a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800675e:	e004      	b.n	800676a <tcp_output+0x3ae>
    goto output_done;
 8006760:	bf00      	nop
 8006762:	e002      	b.n	800676a <tcp_output+0x3ae>
    goto output_done;
 8006764:	bf00      	nop
 8006766:	e000      	b.n	800676a <tcp_output+0x3ae>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8006768:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	8b5b      	ldrh	r3, [r3, #26]
 800676e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006772:	b29a      	uxth	r2, r3
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8006778:	2300      	movs	r3, #0
}
 800677a:	4618      	mov	r0, r3
 800677c:	3728      	adds	r7, #40	@ 0x28
 800677e:	46bd      	mov	sp, r7
 8006780:	bdb0      	pop	{r4, r5, r7, pc}
 8006782:	bf00      	nop

08006784 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b082      	sub	sp, #8
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d102      	bne.n	8006798 <tcp_output_segment_busy+0x14>
 8006792:	4807      	ldr	r0, [pc, #28]	@ (80067b0 <tcp_output_segment_busy+0x2c>)
 8006794:	f003 fbbe 	bl	8009f14 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	7b9b      	ldrb	r3, [r3, #14]
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d001      	beq.n	80067a6 <tcp_output_segment_busy+0x22>
    /* other reference found */
    return 1;
 80067a2:	2301      	movs	r3, #1
 80067a4:	e000      	b.n	80067a8 <tcp_output_segment_busy+0x24>
  }
  /* no other references found */
  return 0;
 80067a6:	2300      	movs	r3, #0
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3708      	adds	r7, #8
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}
 80067b0:	0800bfc4 	.word	0x0800bfc4

080067b4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80067b4:	b5b0      	push	{r4, r5, r7, lr}
 80067b6:	b08c      	sub	sp, #48	@ 0x30
 80067b8:	af04      	add	r7, sp, #16
 80067ba:	60f8      	str	r0, [r7, #12]
 80067bc:	60b9      	str	r1, [r7, #8]
 80067be:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d102      	bne.n	80067cc <tcp_output_segment+0x18>
 80067c6:	4865      	ldr	r0, [pc, #404]	@ (800695c <tcp_output_segment+0x1a8>)
 80067c8:	f003 fba4 	bl	8009f14 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d102      	bne.n	80067d8 <tcp_output_segment+0x24>
 80067d2:	4863      	ldr	r0, [pc, #396]	@ (8006960 <tcp_output_segment+0x1ac>)
 80067d4:	f003 fb9e 	bl	8009f14 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d102      	bne.n	80067e4 <tcp_output_segment+0x30>
 80067de:	4861      	ldr	r0, [pc, #388]	@ (8006964 <tcp_output_segment+0x1b0>)
 80067e0:	f003 fb98 	bl	8009f14 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80067e4:	68f8      	ldr	r0, [r7, #12]
 80067e6:	f7ff ffcd 	bl	8006784 <tcp_output_segment_busy>
 80067ea:	4603      	mov	r3, r0
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d001      	beq.n	80067f4 <tcp_output_segment+0x40>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80067f0:	2300      	movs	r3, #0
 80067f2:	e0af      	b.n	8006954 <tcp_output_segment+0x1a0>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	68dc      	ldr	r4, [r3, #12]
 80067fc:	4610      	mov	r0, r2
 80067fe:	f7fa fcba 	bl	8001176 <lwip_htonl>
 8006802:	4603      	mov	r3, r0
 8006804:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	68dc      	ldr	r4, [r3, #12]
 800680e:	4610      	mov	r0, r2
 8006810:	f7fa fc9c 	bl	800114c <lwip_htons>
 8006814:	4603      	mov	r3, r0
 8006816:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800681c:	68ba      	ldr	r2, [r7, #8]
 800681e:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8006820:	441a      	add	r2, r3
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	68db      	ldr	r3, [r3, #12]
 800682a:	3314      	adds	r3, #20
 800682c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	7a9b      	ldrb	r3, [r3, #10]
 8006832:	f003 0301 	and.w	r3, r3, #1
 8006836:	2b00      	cmp	r3, #0
 8006838:	d015      	beq.n	8006866 <tcp_output_segment+0xb2>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	3304      	adds	r3, #4
 800683e:	461a      	mov	r2, r3
 8006840:	6879      	ldr	r1, [r7, #4]
 8006842:	f240 50b4 	movw	r0, #1460	@ 0x5b4
 8006846:	f7fd fb5f 	bl	8003f08 <tcp_eff_send_mss_netif>
 800684a:	4603      	mov	r3, r0
 800684c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800684e:	8b7b      	ldrh	r3, [r7, #26]
 8006850:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8006854:	4618      	mov	r0, r3
 8006856:	f7fa fc8e 	bl	8001176 <lwip_htonl>
 800685a:	4602      	mov	r2, r0
 800685c:	69fb      	ldr	r3, [r7, #28]
 800685e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8006860:	69fb      	ldr	r3, [r7, #28]
 8006862:	3304      	adds	r3, #4
 8006864:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800686c:	2b00      	cmp	r3, #0
 800686e:	da02      	bge.n	8006876 <tcp_output_segment+0xc2>
    pcb->rtime = 0;
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	2200      	movs	r2, #0
 8006874:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800687a:	2b00      	cmp	r3, #0
 800687c:	d10c      	bne.n	8006898 <tcp_output_segment+0xe4>
    pcb->rttest = tcp_ticks;
 800687e:	4b3a      	ldr	r3, [pc, #232]	@ (8006968 <tcp_output_segment+0x1b4>)
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	68db      	ldr	r3, [r3, #12]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	4618      	mov	r0, r3
 800688e:	f7fa fc72 	bl	8001176 <lwip_htonl>
 8006892:	4602      	mov	r2, r0
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	68da      	ldr	r2, [r3, #12]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	1ad3      	subs	r3, r2, r3
 80068a4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	8959      	ldrh	r1, [r3, #10]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	8b3a      	ldrh	r2, [r7, #24]
 80068b2:	1a8a      	subs	r2, r1, r2
 80068b4:	b292      	uxth	r2, r2
 80068b6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	8919      	ldrh	r1, [r3, #8]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	8b3a      	ldrh	r2, [r7, #24]
 80068c4:	1a8a      	subs	r2, r1, r2
 80068c6:	b292      	uxth	r2, r2
 80068c8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	68fa      	ldr	r2, [r7, #12]
 80068d0:	68d2      	ldr	r2, [r2, #12]
 80068d2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	68db      	ldr	r3, [r3, #12]
 80068d8:	2200      	movs	r2, #0
 80068da:	741a      	strb	r2, [r3, #16]
 80068dc:	2200      	movs	r2, #0
 80068de:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	68da      	ldr	r2, [r3, #12]
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	7a9b      	ldrb	r3, [r3, #10]
 80068e8:	f003 0301 	and.w	r3, r3, #1
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d001      	beq.n	80068f4 <tcp_output_segment+0x140>
 80068f0:	2318      	movs	r3, #24
 80068f2:	e000      	b.n	80068f6 <tcp_output_segment+0x142>
 80068f4:	2314      	movs	r3, #20
 80068f6:	4413      	add	r3, r2
 80068f8:	69fa      	ldr	r2, [r7, #28]
 80068fa:	429a      	cmp	r2, r3
 80068fc:	d002      	beq.n	8006904 <tcp_output_segment+0x150>
 80068fe:	481b      	ldr	r0, [pc, #108]	@ (800696c <tcp_output_segment+0x1b8>)
 8006900:	f003 fb08 	bl	8009f14 <iprintf>
         seg->tcphdr->chksum, chksum_slow));
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
#else /* TCP_CHECKSUM_ON_COPY */
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6858      	ldr	r0, [r3, #4]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	685b      	ldr	r3, [r3, #4]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 800690c:	8919      	ldrh	r1, [r3, #8]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 800690e:	68bd      	ldr	r5, [r7, #8]
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	3304      	adds	r3, #4
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 8006914:	68fa      	ldr	r2, [r7, #12]
 8006916:	68d4      	ldr	r4, [r2, #12]
 8006918:	9300      	str	r3, [sp, #0]
 800691a:	462b      	mov	r3, r5
 800691c:	460a      	mov	r2, r1
 800691e:	2106      	movs	r1, #6
 8006920:	f7fa fd46 	bl	80013b0 <ip_chksum_pseudo>
 8006924:	4603      	mov	r3, r0
 8006926:	8223      	strh	r3, [r4, #16]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	6858      	ldr	r0, [r3, #4]
 800692c:	68b9      	ldr	r1, [r7, #8]
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	1d1c      	adds	r4, r3, #4
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	7add      	ldrb	r5, [r3, #11]
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	7a9b      	ldrb	r3, [r3, #10]
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	9202      	str	r2, [sp, #8]
 800693e:	2206      	movs	r2, #6
 8006940:	9201      	str	r2, [sp, #4]
 8006942:	9300      	str	r3, [sp, #0]
 8006944:	462b      	mov	r3, r5
 8006946:	4622      	mov	r2, r4
 8006948:	f002 fa06 	bl	8008d58 <ip4_output_if>
 800694c:	4603      	mov	r3, r0
 800694e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8006950:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006954:	4618      	mov	r0, r3
 8006956:	3720      	adds	r7, #32
 8006958:	46bd      	mov	sp, r7
 800695a:	bdb0      	pop	{r4, r5, r7, pc}
 800695c:	0800bfec 	.word	0x0800bfec
 8006960:	0800c00c 	.word	0x0800c00c
 8006964:	0800c02c 	.word	0x0800c02c
 8006968:	2400a300 	.word	0x2400a300
 800696c:	0800c050 	.word	0x0800c050

08006970 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8006970:	b5b0      	push	{r4, r5, r7, lr}
 8006972:	b084      	sub	sp, #16
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d102      	bne.n	8006984 <tcp_rexmit_rto_prepare+0x14>
 800697e:	482f      	ldr	r0, [pc, #188]	@ (8006a3c <tcp_rexmit_rto_prepare+0xcc>)
 8006980:	f003 fac8 	bl	8009f14 <iprintf>

  if (pcb->unacked == NULL) {
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006988:	2b00      	cmp	r3, #0
 800698a:	d102      	bne.n	8006992 <tcp_rexmit_rto_prepare+0x22>
    return ERR_VAL;
 800698c:	f06f 0305 	mvn.w	r3, #5
 8006990:	e050      	b.n	8006a34 <tcp_rexmit_rto_prepare+0xc4>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006996:	60fb      	str	r3, [r7, #12]
 8006998:	e00b      	b.n	80069b2 <tcp_rexmit_rto_prepare+0x42>
    if (tcp_output_segment_busy(seg)) {
 800699a:	68f8      	ldr	r0, [r7, #12]
 800699c:	f7ff fef2 	bl	8006784 <tcp_output_segment_busy>
 80069a0:	4603      	mov	r3, r0
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d002      	beq.n	80069ac <tcp_rexmit_rto_prepare+0x3c>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80069a6:	f06f 0305 	mvn.w	r3, #5
 80069aa:	e043      	b.n	8006a34 <tcp_rexmit_rto_prepare+0xc4>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	60fb      	str	r3, [r7, #12]
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d1ef      	bne.n	800699a <tcp_rexmit_rto_prepare+0x2a>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80069ba:	68f8      	ldr	r0, [r7, #12]
 80069bc:	f7ff fee2 	bl	8006784 <tcp_output_segment_busy>
 80069c0:	4603      	mov	r3, r0
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d002      	beq.n	80069cc <tcp_rexmit_rto_prepare+0x5c>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80069c6:	f06f 0305 	mvn.w	r3, #5
 80069ca:	e033      	b.n	8006a34 <tcp_rexmit_rto_prepare+0xc4>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2200      	movs	r2, #0
 80069e0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	8b5b      	ldrh	r3, [r3, #26]
 80069e6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80069ea:	b29a      	uxth	r2, r3
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	4618      	mov	r0, r3
 80069f8:	f7fa fbbd 	bl	8001176 <lwip_htonl>
 80069fc:	4604      	mov	r4, r0
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	891b      	ldrh	r3, [r3, #8]
 8006a02:	461d      	mov	r5, r3
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	68db      	ldr	r3, [r3, #12]
 8006a08:	899b      	ldrh	r3, [r3, #12]
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f7fa fb9d 	bl	800114c <lwip_htons>
 8006a12:	4603      	mov	r3, r0
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	f003 0303 	and.w	r3, r3, #3
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d001      	beq.n	8006a22 <tcp_rexmit_rto_prepare+0xb2>
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e000      	b.n	8006a24 <tcp_rexmit_rto_prepare+0xb4>
 8006a22:	2300      	movs	r3, #0
 8006a24:	442b      	add	r3, r5
 8006a26:	18e2      	adds	r2, r4, r3
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8006a32:	2300      	movs	r3, #0
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3710      	adds	r7, #16
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bdb0      	pop	{r4, r5, r7, pc}
 8006a3c:	0800c064 	.word	0x0800c064

08006a40 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b082      	sub	sp, #8
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d102      	bne.n	8006a54 <tcp_rexmit_rto_commit+0x14>
 8006a4e:	480b      	ldr	r0, [pc, #44]	@ (8006a7c <tcp_rexmit_rto_commit+0x3c>)
 8006a50:	f003 fa60 	bl	8009f14 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006a5a:	2bff      	cmp	r3, #255	@ 0xff
 8006a5c:	d007      	beq.n	8006a6e <tcp_rexmit_rto_commit+0x2e>
    ++pcb->nrtx;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006a64:	3301      	adds	r3, #1
 8006a66:	b2da      	uxtb	r2, r3
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f7ff fca4 	bl	80063bc <tcp_output>
}
 8006a74:	bf00      	nop
 8006a76:	3708      	adds	r7, #8
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}
 8006a7c:	0800c088 	.word	0x0800c088

08006a80 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b082      	sub	sp, #8
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d102      	bne.n	8006a94 <tcp_rexmit_rto+0x14>
 8006a8e:	4808      	ldr	r0, [pc, #32]	@ (8006ab0 <tcp_rexmit_rto+0x30>)
 8006a90:	f003 fa40 	bl	8009f14 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f7ff ff6b 	bl	8006970 <tcp_rexmit_rto_prepare>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d102      	bne.n	8006aa6 <tcp_rexmit_rto+0x26>
    tcp_rexmit_rto_commit(pcb);
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f7ff ffcd 	bl	8006a40 <tcp_rexmit_rto_commit>
  }
}
 8006aa6:	bf00      	nop
 8006aa8:	3708      	adds	r7, #8
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
 8006aae:	bf00      	nop
 8006ab0:	0800c0ac 	.word	0x0800c0ac

08006ab4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8006ab4:	b590      	push	{r4, r7, lr}
 8006ab6:	b085      	sub	sp, #20
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d102      	bne.n	8006ac8 <tcp_rexmit+0x14>
 8006ac2:	482d      	ldr	r0, [pc, #180]	@ (8006b78 <tcp_rexmit+0xc4>)
 8006ac4:	f003 fa26 	bl	8009f14 <iprintf>

  if (pcb->unacked == NULL) {
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d102      	bne.n	8006ad6 <tcp_rexmit+0x22>
    return ERR_VAL;
 8006ad0:	f06f 0305 	mvn.w	r3, #5
 8006ad4:	e04c      	b.n	8006b70 <tcp_rexmit+0xbc>
  }

  seg = pcb->unacked;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ada:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8006adc:	68b8      	ldr	r0, [r7, #8]
 8006ade:	f7ff fe51 	bl	8006784 <tcp_output_segment_busy>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d002      	beq.n	8006aee <tcp_rexmit+0x3a>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8006ae8:	f06f 0305 	mvn.w	r3, #5
 8006aec:	e040      	b.n	8006b70 <tcp_rexmit+0xbc>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	336c      	adds	r3, #108	@ 0x6c
 8006afa:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8006afc:	e002      	b.n	8006b04 <tcp_rexmit+0x50>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d011      	beq.n	8006b30 <tcp_rexmit+0x7c>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	68db      	ldr	r3, [r3, #12]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	4618      	mov	r0, r3
 8006b16:	f7fa fb2e 	bl	8001176 <lwip_htonl>
 8006b1a:	4604      	mov	r4, r0
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	68db      	ldr	r3, [r3, #12]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	4618      	mov	r0, r3
 8006b24:	f7fa fb27 	bl	8001176 <lwip_htonl>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	dbe6      	blt.n	8006afe <tcp_rexmit+0x4a>
  }
  seg->next = *cur_seg;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681a      	ldr	r2, [r3, #0]
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	68ba      	ldr	r2, [r7, #8]
 8006b3c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d103      	bne.n	8006b4e <tcp_rexmit+0x9a>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006b54:	2bff      	cmp	r3, #255	@ 0xff
 8006b56:	d007      	beq.n	8006b68 <tcp_rexmit+0xb4>
    ++pcb->nrtx;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006b5e:	3301      	adds	r3, #1
 8006b60:	b2da      	uxtb	r2, r3
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8006b6e:	2300      	movs	r3, #0
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3714      	adds	r7, #20
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd90      	pop	{r4, r7, pc}
 8006b78:	0800c0c8 	.word	0x0800c0c8

08006b7c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b082      	sub	sp, #8
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d102      	bne.n	8006b90 <tcp_rexmit_fast+0x14>
 8006b8a:	4828      	ldr	r0, [pc, #160]	@ (8006c2c <tcp_rexmit_fast+0xb0>)
 8006b8c:	f003 f9c2 	bl	8009f14 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d045      	beq.n	8006c24 <tcp_rexmit_fast+0xa8>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	8b5b      	ldrh	r3, [r3, #26]
 8006b9c:	f003 0304 	and.w	r3, r3, #4
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d13f      	bne.n	8006c24 <tcp_rexmit_fast+0xa8>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f7ff ff85 	bl	8006ab4 <tcp_rexmit>
 8006baa:	4603      	mov	r3, r0
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d139      	bne.n	8006c24 <tcp_rexmit_fast+0xa8>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	bf28      	it	cs
 8006bc0:	4613      	movcs	r3, r2
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	da00      	bge.n	8006bca <tcp_rexmit_fast+0x4e>
 8006bc8:	3301      	adds	r3, #1
 8006bca:	105b      	asrs	r3, r3, #1
 8006bcc:	b29a      	uxth	r2, r3
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8006bda:	461a      	mov	r2, r3
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006be0:	005b      	lsls	r3, r3, #1
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d206      	bcs.n	8006bf4 <tcp_rexmit_fast+0x78>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006bea:	005b      	lsls	r3, r3, #1
 8006bec:	b29a      	uxth	r2, r3
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006bfe:	4619      	mov	r1, r3
 8006c00:	0049      	lsls	r1, r1, #1
 8006c02:	440b      	add	r3, r1
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	4413      	add	r3, r2
 8006c08:	b29a      	uxth	r2, r3
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	8b5b      	ldrh	r3, [r3, #26]
 8006c14:	f043 0304 	orr.w	r3, r3, #4
 8006c18:	b29a      	uxth	r2, r3
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2200      	movs	r2, #0
 8006c22:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8006c24:	bf00      	nop
 8006c26:	3708      	adds	r7, #8
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}
 8006c2c:	0800c0e0 	.word	0x0800c0e0

08006c30 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b086      	sub	sp, #24
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	60f8      	str	r0, [r7, #12]
 8006c38:	607b      	str	r3, [r7, #4]
 8006c3a:	460b      	mov	r3, r1
 8006c3c:	817b      	strh	r3, [r7, #10]
 8006c3e:	4613      	mov	r3, r2
 8006c40:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8006c42:	897a      	ldrh	r2, [r7, #10]
 8006c44:	893b      	ldrh	r3, [r7, #8]
 8006c46:	4413      	add	r3, r2
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	3314      	adds	r3, #20
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8006c52:	4619      	mov	r1, r3
 8006c54:	2022      	movs	r0, #34	@ 0x22
 8006c56:	f7fb fadd 	bl	8002214 <pbuf_alloc>
 8006c5a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d049      	beq.n	8006cf6 <tcp_output_alloc_header_common+0xc6>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8006c62:	897b      	ldrh	r3, [r7, #10]
 8006c64:	3313      	adds	r3, #19
 8006c66:	697a      	ldr	r2, [r7, #20]
 8006c68:	8952      	ldrh	r2, [r2, #10]
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	db02      	blt.n	8006c74 <tcp_output_alloc_header_common+0x44>
 8006c6e:	4824      	ldr	r0, [pc, #144]	@ (8006d00 <tcp_output_alloc_header_common+0xd0>)
 8006c70:	f003 f950 	bl	8009f14 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8006c7a:	8c3b      	ldrh	r3, [r7, #32]
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f7fa fa65 	bl	800114c <lwip_htons>
 8006c82:	4603      	mov	r3, r0
 8006c84:	461a      	mov	r2, r3
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8006c8a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f7fa fa5d 	bl	800114c <lwip_htons>
 8006c92:	4603      	mov	r3, r0
 8006c94:	461a      	mov	r2, r3
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	687a      	ldr	r2, [r7, #4]
 8006c9e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8006ca0:	68f8      	ldr	r0, [r7, #12]
 8006ca2:	f7fa fa68 	bl	8001176 <lwip_htonl>
 8006ca6:	4602      	mov	r2, r0
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8006cac:	897b      	ldrh	r3, [r7, #10]
 8006cae:	089b      	lsrs	r3, r3, #2
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	3305      	adds	r3, #5
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	031b      	lsls	r3, r3, #12
 8006cb8:	b29a      	uxth	r2, r3
 8006cba:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f7fa fa41 	bl	800114c <lwip_htons>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	461a      	mov	r2, r3
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8006cd2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f7fa fa39 	bl	800114c <lwip_htons>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	461a      	mov	r2, r3
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	741a      	strb	r2, [r3, #16]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	749a      	strb	r2, [r3, #18]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8006cf6:	697b      	ldr	r3, [r7, #20]
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3718      	adds	r7, #24
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}
 8006d00:	0800c100 	.word	0x0800c100

08006d04 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8006d04:	b5b0      	push	{r4, r5, r7, lr}
 8006d06:	b08a      	sub	sp, #40	@ 0x28
 8006d08:	af04      	add	r7, sp, #16
 8006d0a:	60f8      	str	r0, [r7, #12]
 8006d0c:	607b      	str	r3, [r7, #4]
 8006d0e:	460b      	mov	r3, r1
 8006d10:	817b      	strh	r3, [r7, #10]
 8006d12:	4613      	mov	r3, r2
 8006d14:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d102      	bne.n	8006d22 <tcp_output_alloc_header+0x1e>
 8006d1c:	4813      	ldr	r0, [pc, #76]	@ (8006d6c <tcp_output_alloc_header+0x68>)
 8006d1e:	f003 f8f9 	bl	8009f14 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	8adb      	ldrh	r3, [r3, #22]
 8006d2a:	68fa      	ldr	r2, [r7, #12]
 8006d2c:	8b12      	ldrh	r2, [r2, #24]
 8006d2e:	68f9      	ldr	r1, [r7, #12]
 8006d30:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8006d32:	893d      	ldrh	r5, [r7, #8]
 8006d34:	897c      	ldrh	r4, [r7, #10]
 8006d36:	9103      	str	r1, [sp, #12]
 8006d38:	2110      	movs	r1, #16
 8006d3a:	9102      	str	r1, [sp, #8]
 8006d3c:	9201      	str	r2, [sp, #4]
 8006d3e:	9300      	str	r3, [sp, #0]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	462a      	mov	r2, r5
 8006d44:	4621      	mov	r1, r4
 8006d46:	f7ff ff73 	bl	8006c30 <tcp_output_alloc_header_common>
 8006d4a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d006      	beq.n	8006d60 <tcp_output_alloc_header+0x5c>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d56:	68fa      	ldr	r2, [r7, #12]
 8006d58:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8006d5a:	441a      	add	r2, r3
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8006d60:	697b      	ldr	r3, [r7, #20]
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3718      	adds	r7, #24
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bdb0      	pop	{r4, r5, r7, pc}
 8006d6a:	bf00      	nop
 8006d6c:	0800c130 	.word	0x0800c130

08006d70 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b088      	sub	sp, #32
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	60f8      	str	r0, [r7, #12]
 8006d78:	60b9      	str	r1, [r7, #8]
 8006d7a:	4611      	mov	r1, r2
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	460b      	mov	r3, r1
 8006d80:	71fb      	strb	r3, [r7, #7]
 8006d82:	4613      	mov	r3, r2
 8006d84:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8006d86:	2300      	movs	r3, #0
 8006d88:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d102      	bne.n	8006d96 <tcp_output_fill_options+0x26>
 8006d90:	480e      	ldr	r0, [pc, #56]	@ (8006dcc <tcp_output_fill_options+0x5c>)
 8006d92:	f003 f8bf 	bl	8009f14 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8006d9c:	69bb      	ldr	r3, [r7, #24]
 8006d9e:	3314      	adds	r3, #20
 8006da0:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8006da2:	8bfb      	ldrh	r3, [r7, #30]
 8006da4:	009b      	lsls	r3, r3, #2
 8006da6:	461a      	mov	r2, r3
 8006da8:	79fb      	ldrb	r3, [r7, #7]
 8006daa:	009b      	lsls	r3, r3, #2
 8006dac:	f003 0304 	and.w	r3, r3, #4
 8006db0:	4413      	add	r3, r2
 8006db2:	3314      	adds	r3, #20
 8006db4:	69ba      	ldr	r2, [r7, #24]
 8006db6:	4413      	add	r3, r2
 8006db8:	697a      	ldr	r2, [r7, #20]
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d002      	beq.n	8006dc4 <tcp_output_fill_options+0x54>
 8006dbe:	4804      	ldr	r0, [pc, #16]	@ (8006dd0 <tcp_output_fill_options+0x60>)
 8006dc0:	f003 f8a8 	bl	8009f14 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8006dc4:	bf00      	nop
 8006dc6:	3720      	adds	r7, #32
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}
 8006dcc:	0800c158 	.word	0x0800c158
 8006dd0:	0800c050 	.word	0x0800c050

08006dd4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b088      	sub	sp, #32
 8006dd8:	af02      	add	r7, sp, #8
 8006dda:	60f8      	str	r0, [r7, #12]
 8006ddc:	60b9      	str	r1, [r7, #8]
 8006dde:	607a      	str	r2, [r7, #4]
 8006de0:	603b      	str	r3, [r7, #0]
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d102      	bne.n	8006dee <tcp_output_control_segment+0x1a>
 8006de8:	480f      	ldr	r0, [pc, #60]	@ (8006e28 <tcp_output_control_segment+0x54>)
 8006dea:	f003 f893 	bl	8009f14 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8006dee:	683a      	ldr	r2, [r7, #0]
 8006df0:	6879      	ldr	r1, [r7, #4]
 8006df2:	68f8      	ldr	r0, [r7, #12]
 8006df4:	f7fe ffea 	bl	8005dcc <tcp_route>
 8006df8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d105      	bne.n	8006e0c <tcp_output_control_segment+0x38>
    pbuf_free(p);
 8006e00:	68b8      	ldr	r0, [r7, #8]
 8006e02:	f7fb fcad 	bl	8002760 <pbuf_free>
    return ERR_RTE;
 8006e06:	f06f 0303 	mvn.w	r3, #3
 8006e0a:	e008      	b.n	8006e1e <tcp_output_control_segment+0x4a>
  }
  return tcp_output_control_segment_netif(pcb, p, src, dst, netif);
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	9300      	str	r3, [sp, #0]
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	68b9      	ldr	r1, [r7, #8]
 8006e16:	68f8      	ldr	r0, [r7, #12]
 8006e18:	f000 f808 	bl	8006e2c <tcp_output_control_segment_netif>
 8006e1c:	4603      	mov	r3, r0
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3718      	adds	r7, #24
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	bf00      	nop
 8006e28:	0800c180 	.word	0x0800c180

08006e2c <tcp_output_control_segment_netif>:
 */
static err_t
tcp_output_control_segment_netif(const struct tcp_pcb *pcb, struct pbuf *p,
                                 const ip_addr_t *src, const ip_addr_t *dst,
                                 struct netif *netif)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b08c      	sub	sp, #48	@ 0x30
 8006e30:	af04      	add	r7, sp, #16
 8006e32:	60f8      	str	r0, [r7, #12]
 8006e34:	60b9      	str	r1, [r7, #8]
 8006e36:	607a      	str	r2, [r7, #4]
 8006e38:	603b      	str	r3, [r7, #0]
  err_t err;
  u8_t ttl, tos;

  LWIP_ASSERT("tcp_output_control_segment_netif: no netif given", netif != NULL);
 8006e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d102      	bne.n	8006e46 <tcp_output_control_segment_netif+0x1a>
 8006e40:	481c      	ldr	r0, [pc, #112]	@ (8006eb4 <tcp_output_control_segment_netif+0x88>)
 8006e42:	f003 f867 	bl	8009f14 <iprintf>

#if CHECKSUM_GEN_TCP
  IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
    struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	61bb      	str	r3, [r7, #24]
    tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	891a      	ldrh	r2, [r3, #8]
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	9300      	str	r3, [sp, #0]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2106      	movs	r1, #6
 8006e58:	68b8      	ldr	r0, [r7, #8]
 8006e5a:	f7fa faa9 	bl	80013b0 <ip_chksum_pseudo>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	461a      	mov	r2, r3
 8006e62:	69bb      	ldr	r3, [r7, #24]
 8006e64:	821a      	strh	r2, [r3, #16]
                                      src, dst);
  }
#endif
  if (pcb != NULL) {
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d006      	beq.n	8006e7a <tcp_output_control_segment_netif+0x4e>
    NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
    ttl = pcb->ttl;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	7adb      	ldrb	r3, [r3, #11]
 8006e70:	77fb      	strb	r3, [r7, #31]
    tos = pcb->tos;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	7a9b      	ldrb	r3, [r3, #10]
 8006e76:	77bb      	strb	r3, [r7, #30]
 8006e78:	e003      	b.n	8006e82 <tcp_output_control_segment_netif+0x56>
  } else {
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ttl = TCP_TTL;
 8006e7a:	23ff      	movs	r3, #255	@ 0xff
 8006e7c:	77fb      	strb	r3, [r7, #31]
    tos = 0;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	77bb      	strb	r3, [r7, #30]
  }
  TCP_STATS_INC(tcp.xmit);
  err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8006e82:	7ffa      	ldrb	r2, [r7, #31]
 8006e84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e86:	9302      	str	r3, [sp, #8]
 8006e88:	2306      	movs	r3, #6
 8006e8a:	9301      	str	r3, [sp, #4]
 8006e8c:	7fbb      	ldrb	r3, [r7, #30]
 8006e8e:	9300      	str	r3, [sp, #0]
 8006e90:	4613      	mov	r3, r2
 8006e92:	683a      	ldr	r2, [r7, #0]
 8006e94:	6879      	ldr	r1, [r7, #4]
 8006e96:	68b8      	ldr	r0, [r7, #8]
 8006e98:	f001 ff5e 	bl	8008d58 <ip4_output_if>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	75fb      	strb	r3, [r7, #23]
  NETIF_RESET_HINTS(netif);

  pbuf_free(p);
 8006ea0:	68b8      	ldr	r0, [r7, #8]
 8006ea2:	f7fb fc5d 	bl	8002760 <pbuf_free>
  return err;
 8006ea6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3720      	adds	r7, #32
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}
 8006eb2:	bf00      	nop
 8006eb4:	0800c1ac 	.word	0x0800c1ac

08006eb8 <tcp_rst_common>:

static struct pbuf *
tcp_rst_common(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
               const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
               u16_t local_port, u16_t remote_port)
{
 8006eb8:	b590      	push	{r4, r7, lr}
 8006eba:	b08b      	sub	sp, #44	@ 0x2c
 8006ebc:	af04      	add	r7, sp, #16
 8006ebe:	60f8      	str	r0, [r7, #12]
 8006ec0:	60b9      	str	r1, [r7, #8]
 8006ec2:	607a      	str	r2, [r7, #4]
 8006ec4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d102      	bne.n	8006ed2 <tcp_rst_common+0x1a>
 8006ecc:	4819      	ldr	r0, [pc, #100]	@ (8006f34 <tcp_rst_common+0x7c>)
 8006ece:	f003 f821 	bl	8009f14 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8006ed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d102      	bne.n	8006ede <tcp_rst_common+0x26>
 8006ed8:	4817      	ldr	r0, [pc, #92]	@ (8006f38 <tcp_rst_common+0x80>)
 8006eda:	f003 f81b 	bl	8009f14 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8006ede:	2300      	movs	r3, #0
 8006ee0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8006ee2:	f646 030b 	movw	r3, #26635	@ 0x680b
 8006ee6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8006ee8:	7dfb      	ldrb	r3, [r7, #23]
 8006eea:	b29c      	uxth	r4, r3
 8006eec:	68b8      	ldr	r0, [r7, #8]
 8006eee:	f7fa f942 	bl	8001176 <lwip_htonl>
 8006ef2:	4602      	mov	r2, r0
 8006ef4:	8abb      	ldrh	r3, [r7, #20]
 8006ef6:	9303      	str	r3, [sp, #12]
 8006ef8:	2314      	movs	r3, #20
 8006efa:	9302      	str	r3, [sp, #8]
 8006efc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8006efe:	9301      	str	r3, [sp, #4]
 8006f00:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006f02:	9300      	str	r3, [sp, #0]
 8006f04:	4613      	mov	r3, r2
 8006f06:	2200      	movs	r2, #0
 8006f08:	4621      	mov	r1, r4
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f7ff fe90 	bl	8006c30 <tcp_output_alloc_header_common>
 8006f10:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d101      	bne.n	8006f1c <tcp_rst_common+0x64>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return NULL;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	e006      	b.n	8006f2a <tcp_rst_common+0x72>
  }
  tcp_output_fill_options(pcb, p, 0, 0);
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	2200      	movs	r2, #0
 8006f20:	6939      	ldr	r1, [r7, #16]
 8006f22:	68f8      	ldr	r0, [r7, #12]
 8006f24:	f7ff ff24 	bl	8006d70 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
  return p;
 8006f28:	693b      	ldr	r3, [r7, #16]
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	371c      	adds	r7, #28
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd90      	pop	{r4, r7, pc}
 8006f32:	bf00      	nop
 8006f34:	0800c1e0 	.word	0x0800c1e0
 8006f38:	0800c1fc 	.word	0x0800c1fc

08006f3c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b08a      	sub	sp, #40	@ 0x28
 8006f40:	af04      	add	r7, sp, #16
 8006f42:	60f8      	str	r0, [r7, #12]
 8006f44:	60b9      	str	r1, [r7, #8]
 8006f46:	607a      	str	r2, [r7, #4]
 8006f48:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  
  p = tcp_rst_common(pcb, seqno, ackno, local_ip, remote_ip, local_port, remote_port);
 8006f4a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006f4c:	9302      	str	r3, [sp, #8]
 8006f4e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006f50:	9301      	str	r3, [sp, #4]
 8006f52:	6a3b      	ldr	r3, [r7, #32]
 8006f54:	9300      	str	r3, [sp, #0]
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	687a      	ldr	r2, [r7, #4]
 8006f5a:	68b9      	ldr	r1, [r7, #8]
 8006f5c:	68f8      	ldr	r0, [r7, #12]
 8006f5e:	f7ff ffab 	bl	8006eb8 <tcp_rst_common>
 8006f62:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d005      	beq.n	8006f76 <tcp_rst+0x3a>
    tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8006f6a:	6a3b      	ldr	r3, [r7, #32]
 8006f6c:	683a      	ldr	r2, [r7, #0]
 8006f6e:	6979      	ldr	r1, [r7, #20]
 8006f70:	68f8      	ldr	r0, [r7, #12]
 8006f72:	f7ff ff2f 	bl	8006dd4 <tcp_output_control_segment>
  }
}
 8006f76:	bf00      	nop
 8006f78:	3718      	adds	r7, #24
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}

08006f7e <tcp_rst_netif>:
 */
void
tcp_rst_netif(struct netif *netif, u32_t seqno, u32_t ackno,
              const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
              u16_t local_port, u16_t remote_port)
{
 8006f7e:	b580      	push	{r7, lr}
 8006f80:	b08a      	sub	sp, #40	@ 0x28
 8006f82:	af04      	add	r7, sp, #16
 8006f84:	60f8      	str	r0, [r7, #12]
 8006f86:	60b9      	str	r1, [r7, #8]
 8006f88:	607a      	str	r2, [r7, #4]
 8006f8a:	603b      	str	r3, [r7, #0]
  if (netif) {
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d017      	beq.n	8006fc2 <tcp_rst_netif+0x44>
    struct pbuf *p = tcp_rst_common(NULL, seqno, ackno, local_ip, remote_ip, local_port, remote_port);
 8006f92:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006f94:	9302      	str	r3, [sp, #8]
 8006f96:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006f98:	9301      	str	r3, [sp, #4]
 8006f9a:	6a3b      	ldr	r3, [r7, #32]
 8006f9c:	9300      	str	r3, [sp, #0]
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	687a      	ldr	r2, [r7, #4]
 8006fa2:	68b9      	ldr	r1, [r7, #8]
 8006fa4:	2000      	movs	r0, #0
 8006fa6:	f7ff ff87 	bl	8006eb8 <tcp_rst_common>
 8006faa:	6178      	str	r0, [r7, #20]
    if (p != NULL) {
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d007      	beq.n	8006fc2 <tcp_rst_netif+0x44>
      tcp_output_control_segment_netif(NULL, p, local_ip, remote_ip, netif);
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	9300      	str	r3, [sp, #0]
 8006fb6:	6a3b      	ldr	r3, [r7, #32]
 8006fb8:	683a      	ldr	r2, [r7, #0]
 8006fba:	6979      	ldr	r1, [r7, #20]
 8006fbc:	2000      	movs	r0, #0
 8006fbe:	f7ff ff35 	bl	8006e2c <tcp_output_control_segment_netif>
    }
  } else {
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_rst_netif: no netif given\n"));
  }
}
 8006fc2:	bf00      	nop
 8006fc4:	3718      	adds	r7, #24
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
	...

08006fcc <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8006fcc:	b590      	push	{r4, r7, lr}
 8006fce:	b087      	sub	sp, #28
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d102      	bne.n	8006fe8 <tcp_send_empty_ack+0x1c>
 8006fe2:	4826      	ldr	r0, [pc, #152]	@ (800707c <tcp_send_empty_ack+0xb0>)
 8006fe4:	f002 ff96 	bl	8009f14 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8006fe8:	7dfb      	ldrb	r3, [r7, #23]
 8006fea:	009b      	lsls	r3, r3, #2
 8006fec:	b2db      	uxtb	r3, r3
 8006fee:	f003 0304 	and.w	r3, r3, #4
 8006ff2:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8006ff4:	7d7b      	ldrb	r3, [r7, #21]
 8006ff6:	b29c      	uxth	r4, r3
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f7fa f8ba 	bl	8001176 <lwip_htonl>
 8007002:	4603      	mov	r3, r0
 8007004:	2200      	movs	r2, #0
 8007006:	4621      	mov	r1, r4
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f7ff fe7b 	bl	8006d04 <tcp_output_alloc_header>
 800700e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d109      	bne.n	800702a <tcp_send_empty_ack+0x5e>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	8b5b      	ldrh	r3, [r3, #26]
 800701a:	f043 0303 	orr.w	r3, r3, #3
 800701e:	b29a      	uxth	r2, r3
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8007024:	f06f 0301 	mvn.w	r3, #1
 8007028:	e023      	b.n	8007072 <tcp_send_empty_ack+0xa6>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800702a:	7dbb      	ldrb	r3, [r7, #22]
 800702c:	7dfa      	ldrb	r2, [r7, #23]
 800702e:	6939      	ldr	r1, [r7, #16]
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f7ff fe9d 	bl	8006d70 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8007036:	687a      	ldr	r2, [r7, #4]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	3304      	adds	r3, #4
 800703c:	6939      	ldr	r1, [r7, #16]
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f7ff fec8 	bl	8006dd4 <tcp_output_control_segment>
 8007044:	4603      	mov	r3, r0
 8007046:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8007048:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d007      	beq.n	8007060 <tcp_send_empty_ack+0x94>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	8b5b      	ldrh	r3, [r3, #26]
 8007054:	f043 0303 	orr.w	r3, r3, #3
 8007058:	b29a      	uxth	r2, r3
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	835a      	strh	r2, [r3, #26]
 800705e:	e006      	b.n	800706e <tcp_send_empty_ack+0xa2>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	8b5b      	ldrh	r3, [r3, #26]
 8007064:	f023 0303 	bic.w	r3, r3, #3
 8007068:	b29a      	uxth	r2, r3
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800706e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007072:	4618      	mov	r0, r3
 8007074:	371c      	adds	r7, #28
 8007076:	46bd      	mov	sp, r7
 8007078:	bd90      	pop	{r4, r7, pc}
 800707a:	bf00      	nop
 800707c:	0800c218 	.word	0x0800c218

08007080 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8007080:	b590      	push	{r4, r7, lr}
 8007082:	b087      	sub	sp, #28
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8007088:	2300      	movs	r3, #0
 800708a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d102      	bne.n	8007098 <tcp_keepalive+0x18>
 8007092:	4816      	ldr	r0, [pc, #88]	@ (80070ec <tcp_keepalive+0x6c>)
 8007094:	f002 ff3e 	bl	8009f14 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8007098:	7dfb      	ldrb	r3, [r7, #23]
 800709a:	b29c      	uxth	r4, r3
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070a0:	3b01      	subs	r3, #1
 80070a2:	4618      	mov	r0, r3
 80070a4:	f7fa f867 	bl	8001176 <lwip_htonl>
 80070a8:	4603      	mov	r3, r0
 80070aa:	2200      	movs	r2, #0
 80070ac:	4621      	mov	r1, r4
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f7ff fe28 	bl	8006d04 <tcp_output_alloc_header>
 80070b4:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d102      	bne.n	80070c2 <tcp_keepalive+0x42>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80070bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80070c0:	e010      	b.n	80070e4 <tcp_keepalive+0x64>
  }
  tcp_output_fill_options(pcb, p, 0, 0);
 80070c2:	2300      	movs	r3, #0
 80070c4:	2200      	movs	r2, #0
 80070c6:	6939      	ldr	r1, [r7, #16]
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f7ff fe51 	bl	8006d70 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80070ce:	687a      	ldr	r2, [r7, #4]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	3304      	adds	r3, #4
 80070d4:	6939      	ldr	r1, [r7, #16]
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f7ff fe7c 	bl	8006dd4 <tcp_output_control_segment>
 80070dc:	4603      	mov	r3, r0
 80070de:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80070e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	371c      	adds	r7, #28
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd90      	pop	{r4, r7, pc}
 80070ec:	0800c238 	.word	0x0800c238

080070f0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80070f0:	b590      	push	{r4, r7, lr}
 80070f2:	b08b      	sub	sp, #44	@ 0x2c
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80070f8:	2300      	movs	r3, #0
 80070fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d102      	bne.n	800710a <tcp_zero_window_probe+0x1a>
 8007104:	484a      	ldr	r0, [pc, #296]	@ (8007230 <tcp_zero_window_probe+0x140>)
 8007106:	f002 ff05 	bl	8009f14 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800710e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8007110:	6a3b      	ldr	r3, [r7, #32]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d101      	bne.n	800711a <tcp_zero_window_probe+0x2a>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8007116:	2300      	movs	r3, #0
 8007118:	e085      	b.n	8007226 <tcp_zero_window_probe+0x136>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f893 3096 	ldrb.w	r3, [r3, #150]	@ 0x96
 8007120:	2bff      	cmp	r3, #255	@ 0xff
 8007122:	d007      	beq.n	8007134 <tcp_zero_window_probe+0x44>
    ++pcb->persist_probe;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f893 3096 	ldrb.w	r3, [r3, #150]	@ 0x96
 800712a:	3301      	adds	r3, #1
 800712c:	b2da      	uxtb	r2, r3
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8007134:	6a3b      	ldr	r3, [r7, #32]
 8007136:	68db      	ldr	r3, [r3, #12]
 8007138:	899b      	ldrh	r3, [r3, #12]
 800713a:	b29b      	uxth	r3, r3
 800713c:	4618      	mov	r0, r3
 800713e:	f7fa f805 	bl	800114c <lwip_htons>
 8007142:	4603      	mov	r3, r0
 8007144:	b2db      	uxtb	r3, r3
 8007146:	f003 0301 	and.w	r3, r3, #1
 800714a:	2b00      	cmp	r3, #0
 800714c:	d005      	beq.n	800715a <tcp_zero_window_probe+0x6a>
 800714e:	6a3b      	ldr	r3, [r7, #32]
 8007150:	891b      	ldrh	r3, [r3, #8]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d101      	bne.n	800715a <tcp_zero_window_probe+0x6a>
 8007156:	2301      	movs	r3, #1
 8007158:	e000      	b.n	800715c <tcp_zero_window_probe+0x6c>
 800715a:	2300      	movs	r3, #0
 800715c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800715e:	7ffb      	ldrb	r3, [r7, #31]
 8007160:	2b00      	cmp	r3, #0
 8007162:	bf0c      	ite	eq
 8007164:	2301      	moveq	r3, #1
 8007166:	2300      	movne	r3, #0
 8007168:	b2db      	uxtb	r3, r3
 800716a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800716c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007170:	b299      	uxth	r1, r3
 8007172:	6a3b      	ldr	r3, [r7, #32]
 8007174:	68db      	ldr	r3, [r3, #12]
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	8bba      	ldrh	r2, [r7, #28]
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f7ff fdc2 	bl	8006d04 <tcp_output_alloc_header>
 8007180:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8007182:	69bb      	ldr	r3, [r7, #24]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d102      	bne.n	800718e <tcp_zero_window_probe+0x9e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8007188:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800718c:	e04b      	b.n	8007226 <tcp_zero_window_probe+0x136>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800718e:	69bb      	ldr	r3, [r7, #24]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8007194:	7ffb      	ldrb	r3, [r7, #31]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d011      	beq.n	80071be <tcp_zero_window_probe+0xce>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	899b      	ldrh	r3, [r3, #12]
 800719e:	b29b      	uxth	r3, r3
 80071a0:	b21b      	sxth	r3, r3
 80071a2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80071a6:	b21c      	sxth	r4, r3
 80071a8:	2011      	movs	r0, #17
 80071aa:	f7f9 ffcf 	bl	800114c <lwip_htons>
 80071ae:	4603      	mov	r3, r0
 80071b0:	b21b      	sxth	r3, r3
 80071b2:	4323      	orrs	r3, r4
 80071b4:	b21b      	sxth	r3, r3
 80071b6:	b29a      	uxth	r2, r3
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	819a      	strh	r2, [r3, #12]
 80071bc:	e010      	b.n	80071e0 <tcp_zero_window_probe+0xf0>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80071be:	69bb      	ldr	r3, [r7, #24]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	3314      	adds	r3, #20
 80071c4:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80071c6:	6a3b      	ldr	r3, [r7, #32]
 80071c8:	6858      	ldr	r0, [r3, #4]
 80071ca:	6a3b      	ldr	r3, [r7, #32]
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	891a      	ldrh	r2, [r3, #8]
 80071d0:	6a3b      	ldr	r3, [r7, #32]
 80071d2:	891b      	ldrh	r3, [r3, #8]
 80071d4:	1ad3      	subs	r3, r2, r3
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	2201      	movs	r2, #1
 80071da:	6939      	ldr	r1, [r7, #16]
 80071dc:	f7fb fc86 	bl	8002aec <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80071e0:	6a3b      	ldr	r3, [r7, #32]
 80071e2:	68db      	ldr	r3, [r3, #12]
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	4618      	mov	r0, r3
 80071e8:	f7f9 ffc5 	bl	8001176 <lwip_htonl>
 80071ec:	4603      	mov	r3, r0
 80071ee:	3301      	adds	r3, #1
 80071f0:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	1ad3      	subs	r3, r2, r3
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	da02      	bge.n	8007204 <tcp_zero_window_probe+0x114>
    pcb->snd_nxt = snd_nxt;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	68fa      	ldr	r2, [r7, #12]
 8007202:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, 0);
 8007204:	2300      	movs	r3, #0
 8007206:	2200      	movs	r2, #0
 8007208:	69b9      	ldr	r1, [r7, #24]
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f7ff fdb0 	bl	8006d70 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8007210:	687a      	ldr	r2, [r7, #4]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	3304      	adds	r3, #4
 8007216:	69b9      	ldr	r1, [r7, #24]
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f7ff fddb 	bl	8006dd4 <tcp_output_control_segment>
 800721e:	4603      	mov	r3, r0
 8007220:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8007222:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8007226:	4618      	mov	r0, r3
 8007228:	372c      	adds	r7, #44	@ 0x2c
 800722a:	46bd      	mov	sp, r7
 800722c:	bd90      	pop	{r4, r7, pc}
 800722e:	bf00      	nop
 8007230:	0800c254 	.word	0x0800c254

08007234 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b082      	sub	sp, #8
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800723c:	f7fb fd10 	bl	8002c60 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8007240:	4b0a      	ldr	r3, [pc, #40]	@ (800726c <tcpip_tcp_timer+0x38>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d103      	bne.n	8007250 <tcpip_tcp_timer+0x1c>
 8007248:	4b09      	ldr	r3, [pc, #36]	@ (8007270 <tcpip_tcp_timer+0x3c>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d005      	beq.n	800725c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8007250:	2200      	movs	r2, #0
 8007252:	4908      	ldr	r1, [pc, #32]	@ (8007274 <tcpip_tcp_timer+0x40>)
 8007254:	20fa      	movs	r0, #250	@ 0xfa
 8007256:	f000 f8ed 	bl	8007434 <sys_timeout>
 800725a:	e003      	b.n	8007264 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800725c:	4b06      	ldr	r3, [pc, #24]	@ (8007278 <tcpip_tcp_timer+0x44>)
 800725e:	2200      	movs	r2, #0
 8007260:	601a      	str	r2, [r3, #0]
  }
}
 8007262:	bf00      	nop
 8007264:	bf00      	nop
 8007266:	3708      	adds	r7, #8
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}
 800726c:	2400a30c 	.word	0x2400a30c
 8007270:	2400a310 	.word	0x2400a310
 8007274:	08007235 	.word	0x08007235
 8007278:	2400a358 	.word	0x2400a358

0800727c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8007280:	4b0a      	ldr	r3, [pc, #40]	@ (80072ac <tcp_timer_needed+0x30>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d10f      	bne.n	80072a8 <tcp_timer_needed+0x2c>
 8007288:	4b09      	ldr	r3, [pc, #36]	@ (80072b0 <tcp_timer_needed+0x34>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d103      	bne.n	8007298 <tcp_timer_needed+0x1c>
 8007290:	4b08      	ldr	r3, [pc, #32]	@ (80072b4 <tcp_timer_needed+0x38>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d007      	beq.n	80072a8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8007298:	4b04      	ldr	r3, [pc, #16]	@ (80072ac <tcp_timer_needed+0x30>)
 800729a:	2201      	movs	r2, #1
 800729c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800729e:	2200      	movs	r2, #0
 80072a0:	4905      	ldr	r1, [pc, #20]	@ (80072b8 <tcp_timer_needed+0x3c>)
 80072a2:	20fa      	movs	r0, #250	@ 0xfa
 80072a4:	f000 f8c6 	bl	8007434 <sys_timeout>
  }
}
 80072a8:	bf00      	nop
 80072aa:	bd80      	pop	{r7, pc}
 80072ac:	2400a358 	.word	0x2400a358
 80072b0:	2400a30c 	.word	0x2400a30c
 80072b4:	2400a310 	.word	0x2400a310
 80072b8:	08007235 	.word	0x08007235

080072bc <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b086      	sub	sp, #24
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	60f8      	str	r0, [r7, #12]
 80072c4:	60b9      	str	r1, [r7, #8]
 80072c6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80072c8:	2006      	movs	r0, #6
 80072ca:	f7fa fcb1 	bl	8001c30 <memp_malloc>
 80072ce:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d106      	bne.n	80072e4 <sys_timeout_abs+0x28>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d14e      	bne.n	800737a <sys_timeout_abs+0xbe>
 80072dc:	4829      	ldr	r0, [pc, #164]	@ (8007384 <sys_timeout_abs+0xc8>)
 80072de:	f002 fe19 	bl	8009f14 <iprintf>
    return;
 80072e2:	e04a      	b.n	800737a <sys_timeout_abs+0xbe>
  }

  timeout->next = NULL;
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	2200      	movs	r2, #0
 80072e8:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	68ba      	ldr	r2, [r7, #8]
 80072ee:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	687a      	ldr	r2, [r7, #4]
 80072f4:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	68fa      	ldr	r2, [r7, #12]
 80072fa:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80072fc:	4b22      	ldr	r3, [pc, #136]	@ (8007388 <sys_timeout_abs+0xcc>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d103      	bne.n	800730c <sys_timeout_abs+0x50>
    next_timeout = timeout;
 8007304:	4a20      	ldr	r2, [pc, #128]	@ (8007388 <sys_timeout_abs+0xcc>)
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	6013      	str	r3, [r2, #0]
    return;
 800730a:	e037      	b.n	800737c <sys_timeout_abs+0xc0>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	685a      	ldr	r2, [r3, #4]
 8007310:	4b1d      	ldr	r3, [pc, #116]	@ (8007388 <sys_timeout_abs+0xcc>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	1ad3      	subs	r3, r2, r3
 8007318:	0fdb      	lsrs	r3, r3, #31
 800731a:	f003 0301 	and.w	r3, r3, #1
 800731e:	b2db      	uxtb	r3, r3
 8007320:	2b00      	cmp	r3, #0
 8007322:	d007      	beq.n	8007334 <sys_timeout_abs+0x78>
    timeout->next = next_timeout;
 8007324:	4b18      	ldr	r3, [pc, #96]	@ (8007388 <sys_timeout_abs+0xcc>)
 8007326:	681a      	ldr	r2, [r3, #0]
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800732c:	4a16      	ldr	r2, [pc, #88]	@ (8007388 <sys_timeout_abs+0xcc>)
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	6013      	str	r3, [r2, #0]
 8007332:	e023      	b.n	800737c <sys_timeout_abs+0xc0>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8007334:	4b14      	ldr	r3, [pc, #80]	@ (8007388 <sys_timeout_abs+0xcc>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	617b      	str	r3, [r7, #20]
 800733a:	e01a      	b.n	8007372 <sys_timeout_abs+0xb6>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d00b      	beq.n	800735c <sys_timeout_abs+0xa0>
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	685a      	ldr	r2, [r3, #4]
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	1ad3      	subs	r3, r2, r3
 8007350:	0fdb      	lsrs	r3, r3, #31
 8007352:	f003 0301 	and.w	r3, r3, #1
 8007356:	b2db      	uxtb	r3, r3
 8007358:	2b00      	cmp	r3, #0
 800735a:	d007      	beq.n	800736c <sys_timeout_abs+0xb0>
        timeout->next = t->next;
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	681a      	ldr	r2, [r3, #0]
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	693a      	ldr	r2, [r7, #16]
 8007368:	601a      	str	r2, [r3, #0]
        break;
 800736a:	e007      	b.n	800737c <sys_timeout_abs+0xc0>
    for (t = next_timeout; t != NULL; t = t->next) {
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	617b      	str	r3, [r7, #20]
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d1e1      	bne.n	800733c <sys_timeout_abs+0x80>
 8007378:	e000      	b.n	800737c <sys_timeout_abs+0xc0>
    return;
 800737a:	bf00      	nop
      }
    }
  }
}
 800737c:	3718      	adds	r7, #24
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}
 8007382:	bf00      	nop
 8007384:	0800c278 	.word	0x0800c278
 8007388:	2400a350 	.word	0x2400a350

0800738c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b086      	sub	sp, #24
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	4798      	blx	r3

  now = sys_now();
 800739e:	f7f9 fecd 	bl	800113c <sys_now>
 80073a2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	681a      	ldr	r2, [r3, #0]
 80073a8:	4b0f      	ldr	r3, [pc, #60]	@ (80073e8 <lwip_cyclic_timer+0x5c>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4413      	add	r3, r2
 80073ae:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80073b0:	68fa      	ldr	r2, [r7, #12]
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	1ad3      	subs	r3, r2, r3
 80073b6:	0fdb      	lsrs	r3, r3, #31
 80073b8:	f003 0301 	and.w	r3, r3, #1
 80073bc:	b2db      	uxtb	r3, r3
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d009      	beq.n	80073d6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	681a      	ldr	r2, [r3, #0]
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	4413      	add	r3, r2
 80073ca:	687a      	ldr	r2, [r7, #4]
 80073cc:	4907      	ldr	r1, [pc, #28]	@ (80073ec <lwip_cyclic_timer+0x60>)
 80073ce:	4618      	mov	r0, r3
 80073d0:	f7ff ff74 	bl	80072bc <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80073d4:	e004      	b.n	80073e0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80073d6:	687a      	ldr	r2, [r7, #4]
 80073d8:	4904      	ldr	r1, [pc, #16]	@ (80073ec <lwip_cyclic_timer+0x60>)
 80073da:	68f8      	ldr	r0, [r7, #12]
 80073dc:	f7ff ff6e 	bl	80072bc <sys_timeout_abs>
}
 80073e0:	bf00      	nop
 80073e2:	3718      	adds	r7, #24
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}
 80073e8:	2400a354 	.word	0x2400a354
 80073ec:	0800738d 	.word	0x0800738d

080073f0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b082      	sub	sp, #8
 80073f4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80073f6:	2301      	movs	r3, #1
 80073f8:	607b      	str	r3, [r7, #4]
 80073fa:	e00e      	b.n	800741a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80073fc:	4a0b      	ldr	r2, [pc, #44]	@ (800742c <sys_timeouts_init+0x3c>)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	00db      	lsls	r3, r3, #3
 8007408:	4a08      	ldr	r2, [pc, #32]	@ (800742c <sys_timeouts_init+0x3c>)
 800740a:	4413      	add	r3, r2
 800740c:	461a      	mov	r2, r3
 800740e:	4908      	ldr	r1, [pc, #32]	@ (8007430 <sys_timeouts_init+0x40>)
 8007410:	f000 f810 	bl	8007434 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	3301      	adds	r3, #1
 8007418:	607b      	str	r3, [r7, #4]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2b02      	cmp	r3, #2
 800741e:	d9ed      	bls.n	80073fc <sys_timeouts_init+0xc>
  }
}
 8007420:	bf00      	nop
 8007422:	bf00      	nop
 8007424:	3708      	adds	r7, #8
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}
 800742a:	bf00      	nop
 800742c:	0800c94c 	.word	0x0800c94c
 8007430:	0800738d 	.word	0x0800738d

08007434 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b086      	sub	sp, #24
 8007438:	af00      	add	r7, sp, #0
 800743a:	60f8      	str	r0, [r7, #12]
 800743c:	60b9      	str	r1, [r7, #8]
 800743e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007446:	d302      	bcc.n	800744e <sys_timeout+0x1a>
 8007448:	4808      	ldr	r0, [pc, #32]	@ (800746c <sys_timeout+0x38>)
 800744a:	f002 fd63 	bl	8009f14 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */
 800744e:	f7f9 fe75 	bl	800113c <sys_now>
 8007452:	4602      	mov	r2, r0
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	4413      	add	r3, r2
 8007458:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800745a:	687a      	ldr	r2, [r7, #4]
 800745c:	68b9      	ldr	r1, [r7, #8]
 800745e:	6978      	ldr	r0, [r7, #20]
 8007460:	f7ff ff2c 	bl	80072bc <sys_timeout_abs>
#endif
}
 8007464:	bf00      	nop
 8007466:	3718      	adds	r7, #24
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}
 800746c:	0800c2b8 	.word	0x0800c2b8

08007470 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b084      	sub	sp, #16
 8007474:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8007476:	f7f9 fe61 	bl	800113c <sys_now>
 800747a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 800747c:	4b17      	ldr	r3, [pc, #92]	@ (80074dc <sys_check_timeouts+0x6c>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d022      	beq.n	80074ce <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	68fa      	ldr	r2, [r7, #12]
 800748e:	1ad3      	subs	r3, r2, r3
 8007490:	0fdb      	lsrs	r3, r3, #31
 8007492:	f003 0301 	and.w	r3, r3, #1
 8007496:	b2db      	uxtb	r3, r3
 8007498:	2b00      	cmp	r3, #0
 800749a:	d11a      	bne.n	80074d2 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a0e      	ldr	r2, [pc, #56]	@ (80074dc <sys_check_timeouts+0x6c>)
 80074a2:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	689b      	ldr	r3, [r3, #8]
 80074a8:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	68db      	ldr	r3, [r3, #12]
 80074ae:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	4a0a      	ldr	r2, [pc, #40]	@ (80074e0 <sys_check_timeouts+0x70>)
 80074b6:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80074b8:	68b9      	ldr	r1, [r7, #8]
 80074ba:	2006      	movs	r0, #6
 80074bc:	f7fa fbf0 	bl	8001ca0 <memp_free>
    if (handler != NULL) {
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d0da      	beq.n	800747c <sys_check_timeouts+0xc>
      handler(arg);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6838      	ldr	r0, [r7, #0]
 80074ca:	4798      	blx	r3
  do {
 80074cc:	e7d6      	b.n	800747c <sys_check_timeouts+0xc>
      return;
 80074ce:	bf00      	nop
 80074d0:	e000      	b.n	80074d4 <sys_check_timeouts+0x64>
      return;
 80074d2:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80074d4:	3710      	adds	r7, #16
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}
 80074da:	bf00      	nop
 80074dc:	2400a350 	.word	0x2400a350
 80074e0:	2400a354 	.word	0x2400a354

080074e4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80074e4:	b480      	push	{r7}
 80074e6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RAND */
}
 80074e8:	bf00      	nop
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr
	...

080074f4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b084      	sub	sp, #16
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	60f8      	str	r0, [r7, #12]
 80074fc:	60b9      	str	r1, [r7, #8]
 80074fe:	4613      	mov	r3, r2
 8007500:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d102      	bne.n	800750e <udp_input_local_match+0x1a>
 8007508:	4824      	ldr	r0, [pc, #144]	@ (800759c <udp_input_local_match+0xa8>)
 800750a:	f002 fd03 	bl	8009f14 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d102      	bne.n	800751a <udp_input_local_match+0x26>
 8007514:	4822      	ldr	r0, [pc, #136]	@ (80075a0 <udp_input_local_match+0xac>)
 8007516:	f002 fcfd 	bl	8009f14 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	7a1b      	ldrb	r3, [r3, #8]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d00b      	beq.n	800753a <udp_input_local_match+0x46>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	7a1a      	ldrb	r2, [r3, #8]
 8007526:	4b1f      	ldr	r3, [pc, #124]	@ (80075a4 <udp_input_local_match+0xb0>)
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800752e:	3301      	adds	r3, #1
 8007530:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007532:	429a      	cmp	r2, r3
 8007534:	d001      	beq.n	800753a <udp_input_local_match+0x46>
    return 0;
 8007536:	2300      	movs	r3, #0
 8007538:	e02b      	b.n	8007592 <udp_input_local_match+0x9e>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800753a:	79fb      	ldrb	r3, [r7, #7]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d018      	beq.n	8007572 <udp_input_local_match+0x7e>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d013      	beq.n	800756e <udp_input_local_match+0x7a>
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d00f      	beq.n	800756e <udp_input_local_match+0x7a>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800754e:	4b15      	ldr	r3, [pc, #84]	@ (80075a4 <udp_input_local_match+0xb0>)
 8007550:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8007552:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007556:	d00a      	beq.n	800756e <udp_input_local_match+0x7a>
            ip4_addr_net_eq(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	4b11      	ldr	r3, [pc, #68]	@ (80075a4 <udp_input_local_match+0xb0>)
 800755e:	695b      	ldr	r3, [r3, #20]
 8007560:	405a      	eors	r2, r3
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	3308      	adds	r3, #8
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800756a:	2b00      	cmp	r3, #0
 800756c:	d110      	bne.n	8007590 <udp_input_local_match+0x9c>
          return 1;
 800756e:	2301      	movs	r3, #1
 8007570:	e00f      	b.n	8007592 <udp_input_local_match+0x9e>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_eq(&pcb->local_ip, ip_current_dest_addr())) {
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d009      	beq.n	800758c <udp_input_local_match+0x98>
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d005      	beq.n	800758c <udp_input_local_match+0x98>
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681a      	ldr	r2, [r3, #0]
 8007584:	4b07      	ldr	r3, [pc, #28]	@ (80075a4 <udp_input_local_match+0xb0>)
 8007586:	695b      	ldr	r3, [r3, #20]
 8007588:	429a      	cmp	r2, r3
 800758a:	d101      	bne.n	8007590 <udp_input_local_match+0x9c>
        return 1;
 800758c:	2301      	movs	r3, #1
 800758e:	e000      	b.n	8007592 <udp_input_local_match+0x9e>
      }
  }

  return 0;
 8007590:	2300      	movs	r3, #0
}
 8007592:	4618      	mov	r0, r3
 8007594:	3710      	adds	r7, #16
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}
 800759a:	bf00      	nop
 800759c:	0800c304 	.word	0x0800c304
 80075a0:	0800c328 	.word	0x0800c328
 80075a4:	24003cd0 	.word	0x24003cd0

080075a8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80075a8:	b590      	push	{r4, r7, lr}
 80075aa:	b08d      	sub	sp, #52	@ 0x34
 80075ac:	af02      	add	r7, sp, #8
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80075b2:	2300      	movs	r3, #0
 80075b4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d102      	bne.n	80075c2 <udp_input+0x1a>
 80075bc:	4882      	ldr	r0, [pc, #520]	@ (80077c8 <udp_input+0x220>)
 80075be:	f002 fca9 	bl	8009f14 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d102      	bne.n	80075ce <udp_input+0x26>
 80075c8:	4880      	ldr	r0, [pc, #512]	@ (80077cc <udp_input+0x224>)
 80075ca:	f002 fca3 	bl	8009f14 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	895b      	ldrh	r3, [r3, #10]
 80075d2:	2b07      	cmp	r3, #7
 80075d4:	d803      	bhi.n	80075de <udp_input+0x36>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f7fb f8c2 	bl	8002760 <pbuf_free>
    goto end;
 80075dc:	e0ec      	b.n	80077b8 <udp_input+0x210>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80075e4:	4b7a      	ldr	r3, [pc, #488]	@ (80077d0 <udp_input+0x228>)
 80075e6:	695b      	ldr	r3, [r3, #20]
 80075e8:	4a79      	ldr	r2, [pc, #484]	@ (80077d0 <udp_input+0x228>)
 80075ea:	6812      	ldr	r2, [r2, #0]
 80075ec:	4611      	mov	r1, r2
 80075ee:	4618      	mov	r0, r3
 80075f0:	f001 fce4 	bl	8008fbc <ip4_addr_isbroadcast_u32>
 80075f4:	4603      	mov	r3, r0
 80075f6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	881b      	ldrh	r3, [r3, #0]
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	4618      	mov	r0, r3
 8007600:	f7f9 fda4 	bl	800114c <lwip_htons>
 8007604:	4603      	mov	r3, r0
 8007606:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	885b      	ldrh	r3, [r3, #2]
 800760c:	b29b      	uxth	r3, r3
 800760e:	4618      	mov	r0, r3
 8007610:	f7f9 fd9c 	bl	800114c <lwip_htons>
 8007614:	4603      	mov	r3, r0
 8007616:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8007618:	2300      	movs	r3, #0
 800761a:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 800761c:	2300      	movs	r3, #0
 800761e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8007620:	2300      	movs	r3, #0
 8007622:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8007624:	4b6b      	ldr	r3, [pc, #428]	@ (80077d4 <udp_input+0x22c>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	627b      	str	r3, [r7, #36]	@ 0x24
 800762a:	e054      	b.n	80076d6 <udp_input+0x12e>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800762c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800762e:	8a5b      	ldrh	r3, [r3, #18]
 8007630:	89fa      	ldrh	r2, [r7, #14]
 8007632:	429a      	cmp	r2, r3
 8007634:	d14a      	bne.n	80076cc <udp_input+0x124>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8007636:	7cfb      	ldrb	r3, [r7, #19]
 8007638:	461a      	mov	r2, r3
 800763a:	6839      	ldr	r1, [r7, #0]
 800763c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800763e:	f7ff ff59 	bl	80074f4 <udp_input_local_match>
 8007642:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8007644:	2b00      	cmp	r3, #0
 8007646:	d041      	beq.n	80076cc <udp_input+0x124>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8007648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800764a:	7c1b      	ldrb	r3, [r3, #16]
 800764c:	f003 0304 	and.w	r3, r3, #4
 8007650:	2b00      	cmp	r3, #0
 8007652:	d11d      	bne.n	8007690 <udp_input+0xe8>
        if (uncon_pcb == NULL) {
 8007654:	69fb      	ldr	r3, [r7, #28]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d102      	bne.n	8007660 <udp_input+0xb8>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800765a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800765c:	61fb      	str	r3, [r7, #28]
 800765e:	e017      	b.n	8007690 <udp_input+0xe8>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8007660:	7cfb      	ldrb	r3, [r7, #19]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d014      	beq.n	8007690 <udp_input+0xe8>
 8007666:	4b5a      	ldr	r3, [pc, #360]	@ (80077d0 <udp_input+0x228>)
 8007668:	695b      	ldr	r3, [r3, #20]
 800766a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800766e:	d10f      	bne.n	8007690 <udp_input+0xe8>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_eq(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8007670:	69fb      	ldr	r3, [r7, #28]
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	3304      	adds	r3, #4
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	429a      	cmp	r2, r3
 800767c:	d008      	beq.n	8007690 <udp_input+0xe8>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_eq(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800767e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007680:	681a      	ldr	r2, [r3, #0]
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	3304      	adds	r3, #4
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	429a      	cmp	r2, r3
 800768a:	d101      	bne.n	8007690 <udp_input+0xe8>
              /* better match */
              uncon_pcb = pcb;
 800768c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800768e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8007690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007692:	8a9b      	ldrh	r3, [r3, #20]
 8007694:	8a3a      	ldrh	r2, [r7, #16]
 8007696:	429a      	cmp	r2, r3
 8007698:	d118      	bne.n	80076cc <udp_input+0x124>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800769a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800769c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d005      	beq.n	80076ae <udp_input+0x106>
           ip_addr_eq(&pcb->remote_ip, ip_current_src_addr()))) {
 80076a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a4:	685a      	ldr	r2, [r3, #4]
 80076a6:	4b4a      	ldr	r3, [pc, #296]	@ (80077d0 <udp_input+0x228>)
 80076a8:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d10e      	bne.n	80076cc <udp_input+0x124>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80076ae:	6a3b      	ldr	r3, [r7, #32]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d014      	beq.n	80076de <udp_input+0x136>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80076b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076b6:	68da      	ldr	r2, [r3, #12]
 80076b8:	6a3b      	ldr	r3, [r7, #32]
 80076ba:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80076bc:	4b45      	ldr	r3, [pc, #276]	@ (80077d4 <udp_input+0x22c>)
 80076be:	681a      	ldr	r2, [r3, #0]
 80076c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076c2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80076c4:	4a43      	ldr	r2, [pc, #268]	@ (80077d4 <udp_input+0x22c>)
 80076c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076c8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80076ca:	e008      	b.n	80076de <udp_input+0x136>
      }
    }

    prev = pcb;
 80076cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ce:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80076d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076d2:	68db      	ldr	r3, [r3, #12]
 80076d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80076d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d1a7      	bne.n	800762c <udp_input+0x84>
 80076dc:	e000      	b.n	80076e0 <udp_input+0x138>
        break;
 80076de:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80076e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d101      	bne.n	80076ea <udp_input+0x142>
    pcb = uncon_pcb;
 80076e6:	69fb      	ldr	r3, [r7, #28]
 80076e8:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80076ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d002      	beq.n	80076f6 <udp_input+0x14e>
    for_us = 1;
 80076f0:	2301      	movs	r3, #1
 80076f2:	76fb      	strb	r3, [r7, #27]
 80076f4:	e00a      	b.n	800770c <udp_input+0x164>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_eq(netif_ip4_addr(inp), ip4_current_dest_addr());
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	3304      	adds	r3, #4
 80076fa:	681a      	ldr	r2, [r3, #0]
 80076fc:	4b34      	ldr	r3, [pc, #208]	@ (80077d0 <udp_input+0x228>)
 80076fe:	695b      	ldr	r3, [r3, #20]
 8007700:	429a      	cmp	r2, r3
 8007702:	bf0c      	ite	eq
 8007704:	2301      	moveq	r3, #1
 8007706:	2300      	movne	r3, #0
 8007708:	b2db      	uxtb	r3, r3
 800770a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800770c:	7efb      	ldrb	r3, [r7, #27]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d04e      	beq.n	80077b0 <udp_input+0x208>
          goto chkerr;
        }
      } else
#endif /* LWIP_UDPLITE */
      {
        if (udphdr->chksum != 0) {
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	88db      	ldrh	r3, [r3, #6]
 8007716:	b29b      	uxth	r3, r3
 8007718:	2b00      	cmp	r3, #0
 800771a:	d00b      	beq.n	8007734 <udp_input+0x18c>
          if (ip_chksum_pseudo(p, IP_PROTO_UDP, p->tot_len,
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	891a      	ldrh	r2, [r3, #8]
 8007720:	4b2d      	ldr	r3, [pc, #180]	@ (80077d8 <udp_input+0x230>)
 8007722:	9300      	str	r3, [sp, #0]
 8007724:	4b2d      	ldr	r3, [pc, #180]	@ (80077dc <udp_input+0x234>)
 8007726:	2111      	movs	r1, #17
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f7f9 fe41 	bl	80013b0 <ip_chksum_pseudo>
 800772e:	4603      	mov	r3, r0
 8007730:	2b00      	cmp	r3, #0
 8007732:	d142      	bne.n	80077ba <udp_input+0x212>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8007734:	2108      	movs	r1, #8
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f7fa ff9e 	bl	8002678 <pbuf_remove_header>
 800773c:	4603      	mov	r3, r0
 800773e:	2b00      	cmp	r3, #0
 8007740:	d006      	beq.n	8007750 <udp_input+0x1a8>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed", 0);
 8007742:	4827      	ldr	r0, [pc, #156]	@ (80077e0 <udp_input+0x238>)
 8007744:	f002 fbe6 	bl	8009f14 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f7fb f809 	bl	8002760 <pbuf_free>
      goto end;
 800774e:	e033      	b.n	80077b8 <udp_input+0x210>
    }

    if (pcb != NULL) {
 8007750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007752:	2b00      	cmp	r3, #0
 8007754:	d012      	beq.n	800777c <udp_input+0x1d4>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8007756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007758:	699b      	ldr	r3, [r3, #24]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d00a      	beq.n	8007774 <udp_input+0x1cc>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800775e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007760:	699c      	ldr	r4, [r3, #24]
 8007762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007764:	69d8      	ldr	r0, [r3, #28]
 8007766:	8a3b      	ldrh	r3, [r7, #16]
 8007768:	9300      	str	r3, [sp, #0]
 800776a:	4b1c      	ldr	r3, [pc, #112]	@ (80077dc <udp_input+0x234>)
 800776c:	687a      	ldr	r2, [r7, #4]
 800776e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007770:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8007772:	e026      	b.n	80077c2 <udp_input+0x21a>
        pbuf_free(p);
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f7fa fff3 	bl	8002760 <pbuf_free>
        goto end;
 800777a:	e01d      	b.n	80077b8 <udp_input+0x210>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800777c:	7cfb      	ldrb	r3, [r7, #19]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d112      	bne.n	80077a8 <udp_input+0x200>
 8007782:	4b13      	ldr	r3, [pc, #76]	@ (80077d0 <udp_input+0x228>)
 8007784:	695b      	ldr	r3, [r3, #20]
 8007786:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800778a:	2be0      	cmp	r3, #224	@ 0xe0
 800778c:	d00c      	beq.n	80077a8 <udp_input+0x200>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800778e:	4b10      	ldr	r3, [pc, #64]	@ (80077d0 <udp_input+0x228>)
 8007790:	899b      	ldrh	r3, [r3, #12]
 8007792:	3308      	adds	r3, #8
 8007794:	b29b      	uxth	r3, r3
 8007796:	b21b      	sxth	r3, r3
 8007798:	4619      	mov	r1, r3
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f7fa ffcd 	bl	800273a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80077a0:	2103      	movs	r1, #3
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f001 f878 	bl	8008898 <icmp_dest_unreach>
      pbuf_free(p);
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f7fa ffd9 	bl	8002760 <pbuf_free>
  return;
 80077ae:	e008      	b.n	80077c2 <udp_input+0x21a>
    pbuf_free(p);
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f7fa ffd5 	bl	8002760 <pbuf_free>
  return;
 80077b6:	e004      	b.n	80077c2 <udp_input+0x21a>
 80077b8:	e003      	b.n	80077c2 <udp_input+0x21a>
            goto chkerr;
 80077ba:	bf00      	nop
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
              ("udp_input: UDP (or UDP Lite) datagram discarded due to failing checksum\n"));
  UDP_STATS_INC(udp.chkerr);
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f7fa ffcf 	bl	8002760 <pbuf_free>
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80077c2:	372c      	adds	r7, #44	@ 0x2c
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd90      	pop	{r4, r7, pc}
 80077c8:	0800c350 	.word	0x0800c350
 80077cc:	0800c368 	.word	0x0800c368
 80077d0:	24003cd0 	.word	0x24003cd0
 80077d4:	2400a35c 	.word	0x2400a35c
 80077d8:	24003ce4 	.word	0x24003ce4
 80077dc:	24003ce0 	.word	0x24003ce0
 80077e0:	0800c384 	.word	0x0800c384

080077e4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b085      	sub	sp, #20
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d01e      	beq.n	8007832 <udp_netif_ip_addr_changed+0x4e>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d01a      	beq.n	8007832 <udp_netif_ip_addr_changed+0x4e>
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d017      	beq.n	8007832 <udp_netif_ip_addr_changed+0x4e>
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d013      	beq.n	8007832 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800780a:	4b0d      	ldr	r3, [pc, #52]	@ (8007840 <udp_netif_ip_addr_changed+0x5c>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	60fb      	str	r3, [r7, #12]
 8007810:	e00c      	b.n	800782c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_eq(&upcb->local_ip, old_addr)) {
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681a      	ldr	r2, [r3, #0]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	429a      	cmp	r2, r3
 800781c:	d103      	bne.n	8007826 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	681a      	ldr	r2, [r3, #0]
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	68db      	ldr	r3, [r3, #12]
 800782a:	60fb      	str	r3, [r7, #12]
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d1ef      	bne.n	8007812 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8007832:	bf00      	nop
 8007834:	3714      	adds	r7, #20
 8007836:	46bd      	mov	sp, r7
 8007838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783c:	4770      	bx	lr
 800783e:	bf00      	nop
 8007840:	2400a35c 	.word	0x2400a35c

08007844 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b082      	sub	sp, #8
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800784c:	4915      	ldr	r1, [pc, #84]	@ (80078a4 <etharp_free_entry+0x60>)
 800784e:	687a      	ldr	r2, [r7, #4]
 8007850:	4613      	mov	r3, r2
 8007852:	005b      	lsls	r3, r3, #1
 8007854:	4413      	add	r3, r2
 8007856:	00db      	lsls	r3, r3, #3
 8007858:	440b      	add	r3, r1
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d013      	beq.n	8007888 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8007860:	4910      	ldr	r1, [pc, #64]	@ (80078a4 <etharp_free_entry+0x60>)
 8007862:	687a      	ldr	r2, [r7, #4]
 8007864:	4613      	mov	r3, r2
 8007866:	005b      	lsls	r3, r3, #1
 8007868:	4413      	add	r3, r2
 800786a:	00db      	lsls	r3, r3, #3
 800786c:	440b      	add	r3, r1
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4618      	mov	r0, r3
 8007872:	f7fa ff75 	bl	8002760 <pbuf_free>
    arp_table[i].q = NULL;
 8007876:	490b      	ldr	r1, [pc, #44]	@ (80078a4 <etharp_free_entry+0x60>)
 8007878:	687a      	ldr	r2, [r7, #4]
 800787a:	4613      	mov	r3, r2
 800787c:	005b      	lsls	r3, r3, #1
 800787e:	4413      	add	r3, r2
 8007880:	00db      	lsls	r3, r3, #3
 8007882:	440b      	add	r3, r1
 8007884:	2200      	movs	r2, #0
 8007886:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8007888:	4906      	ldr	r1, [pc, #24]	@ (80078a4 <etharp_free_entry+0x60>)
 800788a:	687a      	ldr	r2, [r7, #4]
 800788c:	4613      	mov	r3, r2
 800788e:	005b      	lsls	r3, r3, #1
 8007890:	4413      	add	r3, r2
 8007892:	00db      	lsls	r3, r3, #3
 8007894:	440b      	add	r3, r1
 8007896:	3314      	adds	r3, #20
 8007898:	2200      	movs	r2, #0
 800789a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800789c:	bf00      	nop
 800789e:	3708      	adds	r7, #8
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}
 80078a4:	2400a360 	.word	0x2400a360

080078a8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b082      	sub	sp, #8
 80078ac:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80078ae:	2300      	movs	r3, #0
 80078b0:	607b      	str	r3, [r7, #4]
 80078b2:	e096      	b.n	80079e2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80078b4:	494f      	ldr	r1, [pc, #316]	@ (80079f4 <etharp_tmr+0x14c>)
 80078b6:	687a      	ldr	r2, [r7, #4]
 80078b8:	4613      	mov	r3, r2
 80078ba:	005b      	lsls	r3, r3, #1
 80078bc:	4413      	add	r3, r2
 80078be:	00db      	lsls	r3, r3, #3
 80078c0:	440b      	add	r3, r1
 80078c2:	3314      	adds	r3, #20
 80078c4:	781b      	ldrb	r3, [r3, #0]
 80078c6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80078c8:	78fb      	ldrb	r3, [r7, #3]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	f000 8086 	beq.w	80079dc <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80078d0:	4948      	ldr	r1, [pc, #288]	@ (80079f4 <etharp_tmr+0x14c>)
 80078d2:	687a      	ldr	r2, [r7, #4]
 80078d4:	4613      	mov	r3, r2
 80078d6:	005b      	lsls	r3, r3, #1
 80078d8:	4413      	add	r3, r2
 80078da:	00db      	lsls	r3, r3, #3
 80078dc:	440b      	add	r3, r1
 80078de:	3312      	adds	r3, #18
 80078e0:	881b      	ldrh	r3, [r3, #0]
 80078e2:	3301      	adds	r3, #1
 80078e4:	b298      	uxth	r0, r3
 80078e6:	4943      	ldr	r1, [pc, #268]	@ (80079f4 <etharp_tmr+0x14c>)
 80078e8:	687a      	ldr	r2, [r7, #4]
 80078ea:	4613      	mov	r3, r2
 80078ec:	005b      	lsls	r3, r3, #1
 80078ee:	4413      	add	r3, r2
 80078f0:	00db      	lsls	r3, r3, #3
 80078f2:	440b      	add	r3, r1
 80078f4:	3312      	adds	r3, #18
 80078f6:	4602      	mov	r2, r0
 80078f8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80078fa:	493e      	ldr	r1, [pc, #248]	@ (80079f4 <etharp_tmr+0x14c>)
 80078fc:	687a      	ldr	r2, [r7, #4]
 80078fe:	4613      	mov	r3, r2
 8007900:	005b      	lsls	r3, r3, #1
 8007902:	4413      	add	r3, r2
 8007904:	00db      	lsls	r3, r3, #3
 8007906:	440b      	add	r3, r1
 8007908:	3312      	adds	r3, #18
 800790a:	881b      	ldrh	r3, [r3, #0]
 800790c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8007910:	d215      	bcs.n	800793e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8007912:	4938      	ldr	r1, [pc, #224]	@ (80079f4 <etharp_tmr+0x14c>)
 8007914:	687a      	ldr	r2, [r7, #4]
 8007916:	4613      	mov	r3, r2
 8007918:	005b      	lsls	r3, r3, #1
 800791a:	4413      	add	r3, r2
 800791c:	00db      	lsls	r3, r3, #3
 800791e:	440b      	add	r3, r1
 8007920:	3314      	adds	r3, #20
 8007922:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8007924:	2b01      	cmp	r3, #1
 8007926:	d10e      	bne.n	8007946 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8007928:	4932      	ldr	r1, [pc, #200]	@ (80079f4 <etharp_tmr+0x14c>)
 800792a:	687a      	ldr	r2, [r7, #4]
 800792c:	4613      	mov	r3, r2
 800792e:	005b      	lsls	r3, r3, #1
 8007930:	4413      	add	r3, r2
 8007932:	00db      	lsls	r3, r3, #3
 8007934:	440b      	add	r3, r1
 8007936:	3312      	adds	r3, #18
 8007938:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800793a:	2b04      	cmp	r3, #4
 800793c:	d903      	bls.n	8007946 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f7ff ff80 	bl	8007844 <etharp_free_entry>
 8007944:	e04a      	b.n	80079dc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8007946:	492b      	ldr	r1, [pc, #172]	@ (80079f4 <etharp_tmr+0x14c>)
 8007948:	687a      	ldr	r2, [r7, #4]
 800794a:	4613      	mov	r3, r2
 800794c:	005b      	lsls	r3, r3, #1
 800794e:	4413      	add	r3, r2
 8007950:	00db      	lsls	r3, r3, #3
 8007952:	440b      	add	r3, r1
 8007954:	3314      	adds	r3, #20
 8007956:	781b      	ldrb	r3, [r3, #0]
 8007958:	2b03      	cmp	r3, #3
 800795a:	d10a      	bne.n	8007972 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800795c:	4925      	ldr	r1, [pc, #148]	@ (80079f4 <etharp_tmr+0x14c>)
 800795e:	687a      	ldr	r2, [r7, #4]
 8007960:	4613      	mov	r3, r2
 8007962:	005b      	lsls	r3, r3, #1
 8007964:	4413      	add	r3, r2
 8007966:	00db      	lsls	r3, r3, #3
 8007968:	440b      	add	r3, r1
 800796a:	3314      	adds	r3, #20
 800796c:	2204      	movs	r2, #4
 800796e:	701a      	strb	r2, [r3, #0]
 8007970:	e034      	b.n	80079dc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8007972:	4920      	ldr	r1, [pc, #128]	@ (80079f4 <etharp_tmr+0x14c>)
 8007974:	687a      	ldr	r2, [r7, #4]
 8007976:	4613      	mov	r3, r2
 8007978:	005b      	lsls	r3, r3, #1
 800797a:	4413      	add	r3, r2
 800797c:	00db      	lsls	r3, r3, #3
 800797e:	440b      	add	r3, r1
 8007980:	3314      	adds	r3, #20
 8007982:	781b      	ldrb	r3, [r3, #0]
 8007984:	2b04      	cmp	r3, #4
 8007986:	d10a      	bne.n	800799e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8007988:	491a      	ldr	r1, [pc, #104]	@ (80079f4 <etharp_tmr+0x14c>)
 800798a:	687a      	ldr	r2, [r7, #4]
 800798c:	4613      	mov	r3, r2
 800798e:	005b      	lsls	r3, r3, #1
 8007990:	4413      	add	r3, r2
 8007992:	00db      	lsls	r3, r3, #3
 8007994:	440b      	add	r3, r1
 8007996:	3314      	adds	r3, #20
 8007998:	2202      	movs	r2, #2
 800799a:	701a      	strb	r2, [r3, #0]
 800799c:	e01e      	b.n	80079dc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800799e:	4915      	ldr	r1, [pc, #84]	@ (80079f4 <etharp_tmr+0x14c>)
 80079a0:	687a      	ldr	r2, [r7, #4]
 80079a2:	4613      	mov	r3, r2
 80079a4:	005b      	lsls	r3, r3, #1
 80079a6:	4413      	add	r3, r2
 80079a8:	00db      	lsls	r3, r3, #3
 80079aa:	440b      	add	r3, r1
 80079ac:	3314      	adds	r3, #20
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	d113      	bne.n	80079dc <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80079b4:	490f      	ldr	r1, [pc, #60]	@ (80079f4 <etharp_tmr+0x14c>)
 80079b6:	687a      	ldr	r2, [r7, #4]
 80079b8:	4613      	mov	r3, r2
 80079ba:	005b      	lsls	r3, r3, #1
 80079bc:	4413      	add	r3, r2
 80079be:	00db      	lsls	r3, r3, #3
 80079c0:	440b      	add	r3, r1
 80079c2:	3308      	adds	r3, #8
 80079c4:	6818      	ldr	r0, [r3, #0]
 80079c6:	687a      	ldr	r2, [r7, #4]
 80079c8:	4613      	mov	r3, r2
 80079ca:	005b      	lsls	r3, r3, #1
 80079cc:	4413      	add	r3, r2
 80079ce:	00db      	lsls	r3, r3, #3
 80079d0:	4a08      	ldr	r2, [pc, #32]	@ (80079f4 <etharp_tmr+0x14c>)
 80079d2:	4413      	add	r3, r2
 80079d4:	3304      	adds	r3, #4
 80079d6:	4619      	mov	r1, r3
 80079d8:	f000 fe2e 	bl	8008638 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	3301      	adds	r3, #1
 80079e0:	607b      	str	r3, [r7, #4]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2b09      	cmp	r3, #9
 80079e6:	f77f af65 	ble.w	80078b4 <etharp_tmr+0xc>
      }
    }
  }
}
 80079ea:	bf00      	nop
 80079ec:	bf00      	nop
 80079ee:	3708      	adds	r7, #8
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}
 80079f4:	2400a360 	.word	0x2400a360

080079f8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b08a      	sub	sp, #40	@ 0x28
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	60f8      	str	r0, [r7, #12]
 8007a00:	460b      	mov	r3, r1
 8007a02:	607a      	str	r2, [r7, #4]
 8007a04:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8007a06:	230a      	movs	r3, #10
 8007a08:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8007a0a:	230a      	movs	r3, #10
 8007a0c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8007a0e:	230a      	movs	r3, #10
 8007a10:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 8007a12:	2300      	movs	r3, #0
 8007a14:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8007a16:	230a      	movs	r3, #10
 8007a18:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	83bb      	strh	r3, [r7, #28]
 8007a1e:	2300      	movs	r3, #0
 8007a20:	837b      	strh	r3, [r7, #26]
 8007a22:	2300      	movs	r3, #0
 8007a24:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8007a26:	2300      	movs	r3, #0
 8007a28:	843b      	strh	r3, [r7, #32]
 8007a2a:	e0aa      	b.n	8007b82 <etharp_find_entry+0x18a>
    u8_t state = arp_table[i].state;
 8007a2c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8007a30:	499c      	ldr	r1, [pc, #624]	@ (8007ca4 <etharp_find_entry+0x2ac>)
 8007a32:	4613      	mov	r3, r2
 8007a34:	005b      	lsls	r3, r3, #1
 8007a36:	4413      	add	r3, r2
 8007a38:	00db      	lsls	r3, r3, #3
 8007a3a:	440b      	add	r3, r1
 8007a3c:	3314      	adds	r3, #20
 8007a3e:	781b      	ldrb	r3, [r3, #0]
 8007a40:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8007a42:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8007a46:	2b0a      	cmp	r3, #10
 8007a48:	d105      	bne.n	8007a56 <etharp_find_entry+0x5e>
 8007a4a:	7dfb      	ldrb	r3, [r7, #23]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d102      	bne.n	8007a56 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8007a50:	8c3b      	ldrh	r3, [r7, #32]
 8007a52:	847b      	strh	r3, [r7, #34]	@ 0x22
 8007a54:	e091      	b.n	8007b7a <etharp_find_entry+0x182>
    } else if (state != ETHARP_STATE_EMPTY) {
 8007a56:	7dfb      	ldrb	r3, [r7, #23]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	f000 808e 	beq.w	8007b7a <etharp_find_entry+0x182>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8007a5e:	7dfb      	ldrb	r3, [r7, #23]
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d005      	beq.n	8007a70 <etharp_find_entry+0x78>
 8007a64:	7dfb      	ldrb	r3, [r7, #23]
 8007a66:	2b01      	cmp	r3, #1
 8007a68:	d802      	bhi.n	8007a70 <etharp_find_entry+0x78>
 8007a6a:	488f      	ldr	r0, [pc, #572]	@ (8007ca8 <etharp_find_entry+0x2b0>)
 8007a6c:	f002 fa52 	bl	8009f14 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_eq(ipaddr, &arp_table[i].ipaddr)
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d020      	beq.n	8007ab8 <etharp_find_entry+0xc0>
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	6819      	ldr	r1, [r3, #0]
 8007a7a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8007a7e:	4889      	ldr	r0, [pc, #548]	@ (8007ca4 <etharp_find_entry+0x2ac>)
 8007a80:	4613      	mov	r3, r2
 8007a82:	005b      	lsls	r3, r3, #1
 8007a84:	4413      	add	r3, r2
 8007a86:	00db      	lsls	r3, r3, #3
 8007a88:	4403      	add	r3, r0
 8007a8a:	3304      	adds	r3, #4
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4299      	cmp	r1, r3
 8007a90:	d112      	bne.n	8007ab8 <etharp_find_entry+0xc0>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d00c      	beq.n	8007ab2 <etharp_find_entry+0xba>
 8007a98:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8007a9c:	4981      	ldr	r1, [pc, #516]	@ (8007ca4 <etharp_find_entry+0x2ac>)
 8007a9e:	4613      	mov	r3, r2
 8007aa0:	005b      	lsls	r3, r3, #1
 8007aa2:	4413      	add	r3, r2
 8007aa4:	00db      	lsls	r3, r3, #3
 8007aa6:	440b      	add	r3, r1
 8007aa8:	3308      	adds	r3, #8
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	687a      	ldr	r2, [r7, #4]
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	d102      	bne.n	8007ab8 <etharp_find_entry+0xc0>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8007ab2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8007ab6:	e0f0      	b.n	8007c9a <etharp_find_entry+0x2a2>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8007ab8:	7dfb      	ldrb	r3, [r7, #23]
 8007aba:	2b01      	cmp	r3, #1
 8007abc:	d140      	bne.n	8007b40 <etharp_find_entry+0x148>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8007abe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8007ac2:	4978      	ldr	r1, [pc, #480]	@ (8007ca4 <etharp_find_entry+0x2ac>)
 8007ac4:	4613      	mov	r3, r2
 8007ac6:	005b      	lsls	r3, r3, #1
 8007ac8:	4413      	add	r3, r2
 8007aca:	00db      	lsls	r3, r3, #3
 8007acc:	440b      	add	r3, r1
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d01a      	beq.n	8007b0a <etharp_find_entry+0x112>
          if (arp_table[i].ctime >= age_queue) {
 8007ad4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8007ad8:	4972      	ldr	r1, [pc, #456]	@ (8007ca4 <etharp_find_entry+0x2ac>)
 8007ada:	4613      	mov	r3, r2
 8007adc:	005b      	lsls	r3, r3, #1
 8007ade:	4413      	add	r3, r2
 8007ae0:	00db      	lsls	r3, r3, #3
 8007ae2:	440b      	add	r3, r1
 8007ae4:	3312      	adds	r3, #18
 8007ae6:	881b      	ldrh	r3, [r3, #0]
 8007ae8:	8bba      	ldrh	r2, [r7, #28]
 8007aea:	429a      	cmp	r2, r3
 8007aec:	d845      	bhi.n	8007b7a <etharp_find_entry+0x182>
            old_queue = i;
 8007aee:	8c3b      	ldrh	r3, [r7, #32]
 8007af0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8007af2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8007af6:	496b      	ldr	r1, [pc, #428]	@ (8007ca4 <etharp_find_entry+0x2ac>)
 8007af8:	4613      	mov	r3, r2
 8007afa:	005b      	lsls	r3, r3, #1
 8007afc:	4413      	add	r3, r2
 8007afe:	00db      	lsls	r3, r3, #3
 8007b00:	440b      	add	r3, r1
 8007b02:	3312      	adds	r3, #18
 8007b04:	881b      	ldrh	r3, [r3, #0]
 8007b06:	83bb      	strh	r3, [r7, #28]
 8007b08:	e037      	b.n	8007b7a <etharp_find_entry+0x182>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8007b0a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8007b0e:	4965      	ldr	r1, [pc, #404]	@ (8007ca4 <etharp_find_entry+0x2ac>)
 8007b10:	4613      	mov	r3, r2
 8007b12:	005b      	lsls	r3, r3, #1
 8007b14:	4413      	add	r3, r2
 8007b16:	00db      	lsls	r3, r3, #3
 8007b18:	440b      	add	r3, r1
 8007b1a:	3312      	adds	r3, #18
 8007b1c:	881b      	ldrh	r3, [r3, #0]
 8007b1e:	8b7a      	ldrh	r2, [r7, #26]
 8007b20:	429a      	cmp	r2, r3
 8007b22:	d82a      	bhi.n	8007b7a <etharp_find_entry+0x182>
            old_pending = i;
 8007b24:	8c3b      	ldrh	r3, [r7, #32]
 8007b26:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8007b28:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8007b2c:	495d      	ldr	r1, [pc, #372]	@ (8007ca4 <etharp_find_entry+0x2ac>)
 8007b2e:	4613      	mov	r3, r2
 8007b30:	005b      	lsls	r3, r3, #1
 8007b32:	4413      	add	r3, r2
 8007b34:	00db      	lsls	r3, r3, #3
 8007b36:	440b      	add	r3, r1
 8007b38:	3312      	adds	r3, #18
 8007b3a:	881b      	ldrh	r3, [r3, #0]
 8007b3c:	837b      	strh	r3, [r7, #26]
 8007b3e:	e01c      	b.n	8007b7a <etharp_find_entry+0x182>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8007b40:	7dfb      	ldrb	r3, [r7, #23]
 8007b42:	2b01      	cmp	r3, #1
 8007b44:	d919      	bls.n	8007b7a <etharp_find_entry+0x182>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8007b46:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8007b4a:	4956      	ldr	r1, [pc, #344]	@ (8007ca4 <etharp_find_entry+0x2ac>)
 8007b4c:	4613      	mov	r3, r2
 8007b4e:	005b      	lsls	r3, r3, #1
 8007b50:	4413      	add	r3, r2
 8007b52:	00db      	lsls	r3, r3, #3
 8007b54:	440b      	add	r3, r1
 8007b56:	3312      	adds	r3, #18
 8007b58:	881b      	ldrh	r3, [r3, #0]
 8007b5a:	8b3a      	ldrh	r2, [r7, #24]
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d80c      	bhi.n	8007b7a <etharp_find_entry+0x182>
            old_stable = i;
 8007b60:	8c3b      	ldrh	r3, [r7, #32]
 8007b62:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8007b64:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8007b68:	494e      	ldr	r1, [pc, #312]	@ (8007ca4 <etharp_find_entry+0x2ac>)
 8007b6a:	4613      	mov	r3, r2
 8007b6c:	005b      	lsls	r3, r3, #1
 8007b6e:	4413      	add	r3, r2
 8007b70:	00db      	lsls	r3, r3, #3
 8007b72:	440b      	add	r3, r1
 8007b74:	3312      	adds	r3, #18
 8007b76:	881b      	ldrh	r3, [r3, #0]
 8007b78:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8007b7a:	8c3b      	ldrh	r3, [r7, #32]
 8007b7c:	3301      	adds	r3, #1
 8007b7e:	b29b      	uxth	r3, r3
 8007b80:	843b      	strh	r3, [r7, #32]
 8007b82:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8007b86:	2b09      	cmp	r3, #9
 8007b88:	f77f af50 	ble.w	8007a2c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8007b8c:	7afb      	ldrb	r3, [r7, #11]
 8007b8e:	f003 0302 	and.w	r3, r3, #2
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d108      	bne.n	8007ba8 <etharp_find_entry+0x1b0>
 8007b96:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8007b9a:	2b0a      	cmp	r3, #10
 8007b9c:	d107      	bne.n	8007bae <etharp_find_entry+0x1b6>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8007b9e:	7afb      	ldrb	r3, [r7, #11]
 8007ba0:	f003 0301 	and.w	r3, r3, #1
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d102      	bne.n	8007bae <etharp_find_entry+0x1b6>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8007ba8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007bac:	e075      	b.n	8007c9a <etharp_find_entry+0x2a2>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8007bae:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8007bb2:	2b09      	cmp	r3, #9
 8007bb4:	dc02      	bgt.n	8007bbc <etharp_find_entry+0x1c4>
    i = empty;
 8007bb6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007bb8:	843b      	strh	r3, [r7, #32]
 8007bba:	e031      	b.n	8007c20 <etharp_find_entry+0x228>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8007bbc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8007bc0:	2b09      	cmp	r3, #9
 8007bc2:	dc10      	bgt.n	8007be6 <etharp_find_entry+0x1ee>
      /* recycle oldest stable*/
      i = old_stable;
 8007bc4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007bc6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8007bc8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8007bcc:	4935      	ldr	r1, [pc, #212]	@ (8007ca4 <etharp_find_entry+0x2ac>)
 8007bce:	4613      	mov	r3, r2
 8007bd0:	005b      	lsls	r3, r3, #1
 8007bd2:	4413      	add	r3, r2
 8007bd4:	00db      	lsls	r3, r3, #3
 8007bd6:	440b      	add	r3, r1
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d014      	beq.n	8007c08 <etharp_find_entry+0x210>
 8007bde:	4833      	ldr	r0, [pc, #204]	@ (8007cac <etharp_find_entry+0x2b4>)
 8007be0:	f002 f998 	bl	8009f14 <iprintf>
 8007be4:	e010      	b.n	8007c08 <etharp_find_entry+0x210>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8007be6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8007bea:	2b09      	cmp	r3, #9
 8007bec:	dc02      	bgt.n	8007bf4 <etharp_find_entry+0x1fc>
      /* recycle oldest pending */
      i = old_pending;
 8007bee:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007bf0:	843b      	strh	r3, [r7, #32]
 8007bf2:	e009      	b.n	8007c08 <etharp_find_entry+0x210>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8007bf4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8007bf8:	2b09      	cmp	r3, #9
 8007bfa:	dc02      	bgt.n	8007c02 <etharp_find_entry+0x20a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8007bfc:	8bfb      	ldrh	r3, [r7, #30]
 8007bfe:	843b      	strh	r3, [r7, #32]
 8007c00:	e002      	b.n	8007c08 <etharp_find_entry+0x210>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8007c02:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007c06:	e048      	b.n	8007c9a <etharp_find_entry+0x2a2>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8007c08:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8007c0c:	2b09      	cmp	r3, #9
 8007c0e:	dd02      	ble.n	8007c16 <etharp_find_entry+0x21e>
 8007c10:	4827      	ldr	r0, [pc, #156]	@ (8007cb0 <etharp_find_entry+0x2b8>)
 8007c12:	f002 f97f 	bl	8009f14 <iprintf>
    etharp_free_entry(i);
 8007c16:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f7ff fe12 	bl	8007844 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8007c20:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8007c24:	2b09      	cmp	r3, #9
 8007c26:	dd02      	ble.n	8007c2e <etharp_find_entry+0x236>
 8007c28:	4821      	ldr	r0, [pc, #132]	@ (8007cb0 <etharp_find_entry+0x2b8>)
 8007c2a:	f002 f973 	bl	8009f14 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8007c2e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8007c32:	491c      	ldr	r1, [pc, #112]	@ (8007ca4 <etharp_find_entry+0x2ac>)
 8007c34:	4613      	mov	r3, r2
 8007c36:	005b      	lsls	r3, r3, #1
 8007c38:	4413      	add	r3, r2
 8007c3a:	00db      	lsls	r3, r3, #3
 8007c3c:	440b      	add	r3, r1
 8007c3e:	3314      	adds	r3, #20
 8007c40:	781b      	ldrb	r3, [r3, #0]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d002      	beq.n	8007c4c <etharp_find_entry+0x254>
 8007c46:	481b      	ldr	r0, [pc, #108]	@ (8007cb4 <etharp_find_entry+0x2bc>)
 8007c48:	f002 f964 	bl	8009f14 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d00b      	beq.n	8007c6a <etharp_find_entry+0x272>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8007c52:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	6819      	ldr	r1, [r3, #0]
 8007c5a:	4812      	ldr	r0, [pc, #72]	@ (8007ca4 <etharp_find_entry+0x2ac>)
 8007c5c:	4613      	mov	r3, r2
 8007c5e:	005b      	lsls	r3, r3, #1
 8007c60:	4413      	add	r3, r2
 8007c62:	00db      	lsls	r3, r3, #3
 8007c64:	4403      	add	r3, r0
 8007c66:	3304      	adds	r3, #4
 8007c68:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8007c6a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8007c6e:	490d      	ldr	r1, [pc, #52]	@ (8007ca4 <etharp_find_entry+0x2ac>)
 8007c70:	4613      	mov	r3, r2
 8007c72:	005b      	lsls	r3, r3, #1
 8007c74:	4413      	add	r3, r2
 8007c76:	00db      	lsls	r3, r3, #3
 8007c78:	440b      	add	r3, r1
 8007c7a:	3312      	adds	r3, #18
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8007c80:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8007c84:	4907      	ldr	r1, [pc, #28]	@ (8007ca4 <etharp_find_entry+0x2ac>)
 8007c86:	4613      	mov	r3, r2
 8007c88:	005b      	lsls	r3, r3, #1
 8007c8a:	4413      	add	r3, r2
 8007c8c:	00db      	lsls	r3, r3, #3
 8007c8e:	440b      	add	r3, r1
 8007c90:	3308      	adds	r3, #8
 8007c92:	687a      	ldr	r2, [r7, #4]
 8007c94:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8007c96:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3728      	adds	r7, #40	@ 0x28
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}
 8007ca2:	bf00      	nop
 8007ca4:	2400a360 	.word	0x2400a360
 8007ca8:	0800c3d0 	.word	0x0800c3d0
 8007cac:	0800c410 	.word	0x0800c410
 8007cb0:	0800c428 	.word	0x0800c428
 8007cb4:	0800c43c 	.word	0x0800c43c

08007cb8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b088      	sub	sp, #32
 8007cbc:	af02      	add	r7, sp, #8
 8007cbe:	60f8      	str	r0, [r7, #12]
 8007cc0:	60b9      	str	r1, [r7, #8]
 8007cc2:	607a      	str	r2, [r7, #4]
 8007cc4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007ccc:	2b06      	cmp	r3, #6
 8007cce:	d002      	beq.n	8007cd6 <etharp_update_arp_entry+0x1e>
 8007cd0:	4846      	ldr	r0, [pc, #280]	@ (8007dec <etharp_update_arp_entry+0x134>)
 8007cd2:	f002 f91f 	bl	8009f14 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d012      	beq.n	8007d02 <etharp_update_arp_entry+0x4a>
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d00e      	beq.n	8007d02 <etharp_update_arp_entry+0x4a>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	68f9      	ldr	r1, [r7, #12]
 8007cea:	4618      	mov	r0, r3
 8007cec:	f001 f966 	bl	8008fbc <ip4_addr_isbroadcast_u32>
 8007cf0:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d105      	bne.n	8007d02 <etharp_update_arp_entry+0x4a>
      ip4_addr_ismulticast(ipaddr)) {
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8007cfe:	2be0      	cmp	r3, #224	@ 0xe0
 8007d00:	d102      	bne.n	8007d08 <etharp_update_arp_entry+0x50>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8007d02:	f06f 030f 	mvn.w	r3, #15
 8007d06:	e06c      	b.n	8007de2 <etharp_update_arp_entry+0x12a>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8007d08:	78fb      	ldrb	r3, [r7, #3]
 8007d0a:	68fa      	ldr	r2, [r7, #12]
 8007d0c:	4619      	mov	r1, r3
 8007d0e:	68b8      	ldr	r0, [r7, #8]
 8007d10:	f7ff fe72 	bl	80079f8 <etharp_find_entry>
 8007d14:	4603      	mov	r3, r0
 8007d16:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8007d18:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	da02      	bge.n	8007d26 <etharp_update_arp_entry+0x6e>
    return (err_t)i;
 8007d20:	8afb      	ldrh	r3, [r7, #22]
 8007d22:	b25b      	sxtb	r3, r3
 8007d24:	e05d      	b.n	8007de2 <etharp_update_arp_entry+0x12a>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8007d26:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8007d2a:	4931      	ldr	r1, [pc, #196]	@ (8007df0 <etharp_update_arp_entry+0x138>)
 8007d2c:	4613      	mov	r3, r2
 8007d2e:	005b      	lsls	r3, r3, #1
 8007d30:	4413      	add	r3, r2
 8007d32:	00db      	lsls	r3, r3, #3
 8007d34:	440b      	add	r3, r1
 8007d36:	3314      	adds	r3, #20
 8007d38:	2202      	movs	r2, #2
 8007d3a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8007d3c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8007d40:	492b      	ldr	r1, [pc, #172]	@ (8007df0 <etharp_update_arp_entry+0x138>)
 8007d42:	4613      	mov	r3, r2
 8007d44:	005b      	lsls	r3, r3, #1
 8007d46:	4413      	add	r3, r2
 8007d48:	00db      	lsls	r3, r3, #3
 8007d4a:	440b      	add	r3, r1
 8007d4c:	3308      	adds	r3, #8
 8007d4e:	68fa      	ldr	r2, [r7, #12]
 8007d50:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8007d52:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8007d56:	4613      	mov	r3, r2
 8007d58:	005b      	lsls	r3, r3, #1
 8007d5a:	4413      	add	r3, r2
 8007d5c:	00db      	lsls	r3, r3, #3
 8007d5e:	3308      	adds	r3, #8
 8007d60:	4a23      	ldr	r2, [pc, #140]	@ (8007df0 <etharp_update_arp_entry+0x138>)
 8007d62:	4413      	add	r3, r2
 8007d64:	3304      	adds	r3, #4
 8007d66:	2206      	movs	r2, #6
 8007d68:	6879      	ldr	r1, [r7, #4]
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f002 f9b3 	bl	800a0d6 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8007d70:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8007d74:	491e      	ldr	r1, [pc, #120]	@ (8007df0 <etharp_update_arp_entry+0x138>)
 8007d76:	4613      	mov	r3, r2
 8007d78:	005b      	lsls	r3, r3, #1
 8007d7a:	4413      	add	r3, r2
 8007d7c:	00db      	lsls	r3, r3, #3
 8007d7e:	440b      	add	r3, r1
 8007d80:	3312      	adds	r3, #18
 8007d82:	2200      	movs	r2, #0
 8007d84:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8007d86:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8007d8a:	4919      	ldr	r1, [pc, #100]	@ (8007df0 <etharp_update_arp_entry+0x138>)
 8007d8c:	4613      	mov	r3, r2
 8007d8e:	005b      	lsls	r3, r3, #1
 8007d90:	4413      	add	r3, r2
 8007d92:	00db      	lsls	r3, r3, #3
 8007d94:	440b      	add	r3, r1
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d021      	beq.n	8007de0 <etharp_update_arp_entry+0x128>
    struct pbuf *p = arp_table[i].q;
 8007d9c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8007da0:	4913      	ldr	r1, [pc, #76]	@ (8007df0 <etharp_update_arp_entry+0x138>)
 8007da2:	4613      	mov	r3, r2
 8007da4:	005b      	lsls	r3, r3, #1
 8007da6:	4413      	add	r3, r2
 8007da8:	00db      	lsls	r3, r3, #3
 8007daa:	440b      	add	r3, r1
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8007db0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8007db4:	490e      	ldr	r1, [pc, #56]	@ (8007df0 <etharp_update_arp_entry+0x138>)
 8007db6:	4613      	mov	r3, r2
 8007db8:	005b      	lsls	r3, r3, #1
 8007dba:	4413      	add	r3, r2
 8007dbc:	00db      	lsls	r3, r3, #3
 8007dbe:	440b      	add	r3, r1
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8007dca:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007dce:	9300      	str	r3, [sp, #0]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6939      	ldr	r1, [r7, #16]
 8007dd4:	68f8      	ldr	r0, [r7, #12]
 8007dd6:	f001 ff9b 	bl	8009d10 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8007dda:	6938      	ldr	r0, [r7, #16]
 8007ddc:	f7fa fcc0 	bl	8002760 <pbuf_free>
  }
  return ERR_OK;
 8007de0:	2300      	movs	r3, #0
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	3718      	adds	r7, #24
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}
 8007dea:	bf00      	nop
 8007dec:	0800c468 	.word	0x0800c468
 8007df0:	2400a360 	.word	0x2400a360

08007df4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b084      	sub	sp, #16
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	60fb      	str	r3, [r7, #12]
 8007e00:	e01e      	b.n	8007e40 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8007e02:	4913      	ldr	r1, [pc, #76]	@ (8007e50 <etharp_cleanup_netif+0x5c>)
 8007e04:	68fa      	ldr	r2, [r7, #12]
 8007e06:	4613      	mov	r3, r2
 8007e08:	005b      	lsls	r3, r3, #1
 8007e0a:	4413      	add	r3, r2
 8007e0c:	00db      	lsls	r3, r3, #3
 8007e0e:	440b      	add	r3, r1
 8007e10:	3314      	adds	r3, #20
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8007e16:	7afb      	ldrb	r3, [r7, #11]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d00e      	beq.n	8007e3a <etharp_cleanup_netif+0x46>
 8007e1c:	490c      	ldr	r1, [pc, #48]	@ (8007e50 <etharp_cleanup_netif+0x5c>)
 8007e1e:	68fa      	ldr	r2, [r7, #12]
 8007e20:	4613      	mov	r3, r2
 8007e22:	005b      	lsls	r3, r3, #1
 8007e24:	4413      	add	r3, r2
 8007e26:	00db      	lsls	r3, r3, #3
 8007e28:	440b      	add	r3, r1
 8007e2a:	3308      	adds	r3, #8
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	687a      	ldr	r2, [r7, #4]
 8007e30:	429a      	cmp	r2, r3
 8007e32:	d102      	bne.n	8007e3a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8007e34:	68f8      	ldr	r0, [r7, #12]
 8007e36:	f7ff fd05 	bl	8007844 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	3301      	adds	r3, #1
 8007e3e:	60fb      	str	r3, [r7, #12]
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2b09      	cmp	r3, #9
 8007e44:	dddd      	ble.n	8007e02 <etharp_cleanup_netif+0xe>
    }
  }
}
 8007e46:	bf00      	nop
 8007e48:	bf00      	nop
 8007e4a:	3710      	adds	r7, #16
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}
 8007e50:	2400a360 	.word	0x2400a360

08007e54 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8007e54:	b5b0      	push	{r4, r5, r7, lr}
 8007e56:	b08a      	sub	sp, #40	@ 0x28
 8007e58:	af04      	add	r7, sp, #16
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us, from_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d07e      	beq.n	8007f62 <etharp_input+0x10e>

  hdr = (struct etharp_hdr *)p->payload;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	881b      	ldrh	r3, [r3, #0]
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e74:	d10c      	bne.n	8007e90 <etharp_input+0x3c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8007e7a:	2b06      	cmp	r3, #6
 8007e7c:	d108      	bne.n	8007e90 <etharp_input+0x3c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8007e82:	2b04      	cmp	r3, #4
 8007e84:	d104      	bne.n	8007e90 <etharp_input+0x3c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	885b      	ldrh	r3, [r3, #2]
 8007e8a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8007e8c:	2b08      	cmp	r3, #8
 8007e8e:	d003      	beq.n	8007e98 <etharp_input+0x44>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f7fa fc65 	bl	8002760 <pbuf_free>
    return;
 8007e96:	e064      	b.n	8007f62 <etharp_input+0x10e>
  acd_arp_reply(netif, hdr);
#endif /* LWIP_ACD */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	330e      	adds	r3, #14
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	3318      	adds	r3, #24
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	3304      	adds	r3, #4
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d104      	bne.n	8007ebc <etharp_input+0x68>
    for_us = 0;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	75fb      	strb	r3, [r7, #23]
    from_us = 0;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	75bb      	strb	r3, [r7, #22]
 8007eba:	e013      	b.n	8007ee4 <etharp_input+0x90>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_eq(&dipaddr, netif_ip4_addr(netif));
 8007ebc:	68ba      	ldr	r2, [r7, #8]
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	3304      	adds	r3, #4
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	bf0c      	ite	eq
 8007ec8:	2301      	moveq	r3, #1
 8007eca:	2300      	movne	r3, #0
 8007ecc:	b2db      	uxtb	r3, r3
 8007ece:	75fb      	strb	r3, [r7, #23]
    /* ARP packet from us? */
    from_us = (u8_t)ip4_addr_eq(&sipaddr, netif_ip4_addr(netif));
 8007ed0:	68fa      	ldr	r2, [r7, #12]
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	3304      	adds	r3, #4
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	bf0c      	ite	eq
 8007edc:	2301      	moveq	r3, #1
 8007ede:	2300      	movne	r3, #0
 8007ee0:	b2db      	uxtb	r3, r3
 8007ee2:	75bb      	strb	r3, [r7, #22]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	f103 0208 	add.w	r2, r3, #8
 8007eea:	7dfb      	ldrb	r3, [r7, #23]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d001      	beq.n	8007ef4 <etharp_input+0xa0>
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	e000      	b.n	8007ef6 <etharp_input+0xa2>
 8007ef4:	2302      	movs	r3, #2
 8007ef6:	f107 010c 	add.w	r1, r7, #12
 8007efa:	6838      	ldr	r0, [r7, #0]
 8007efc:	f7ff fedc 	bl	8007cb8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	88db      	ldrh	r3, [r3, #6]
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f0a:	d003      	beq.n	8007f14 <etharp_input+0xc0>
 8007f0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f10:	d021      	beq.n	8007f56 <etharp_input+0x102>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: incoming ARP reply\n"));
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8007f12:	e023      	b.n	8007f5c <etharp_input+0x108>
      if (for_us && !from_us) {
 8007f14:	7dfb      	ldrb	r3, [r7, #23]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d01f      	beq.n	8007f5a <etharp_input+0x106>
 8007f1a:	7dbb      	ldrb	r3, [r7, #22]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d11c      	bne.n	8007f5a <etharp_input+0x106>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8007f26:	693b      	ldr	r3, [r7, #16]
 8007f28:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8007f36:	693a      	ldr	r2, [r7, #16]
 8007f38:	3208      	adds	r2, #8
        etharp_raw(netif,
 8007f3a:	2102      	movs	r1, #2
 8007f3c:	9103      	str	r1, [sp, #12]
 8007f3e:	f107 010c 	add.w	r1, r7, #12
 8007f42:	9102      	str	r1, [sp, #8]
 8007f44:	9201      	str	r2, [sp, #4]
 8007f46:	9300      	str	r3, [sp, #0]
 8007f48:	462b      	mov	r3, r5
 8007f4a:	4622      	mov	r2, r4
 8007f4c:	4601      	mov	r1, r0
 8007f4e:	6838      	ldr	r0, [r7, #0]
 8007f50:	f000 fad4 	bl	80084fc <etharp_raw>
      break;
 8007f54:	e001      	b.n	8007f5a <etharp_input+0x106>
      break;
 8007f56:	bf00      	nop
 8007f58:	e000      	b.n	8007f5c <etharp_input+0x108>
      break;
 8007f5a:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f7fa fbff 	bl	8002760 <pbuf_free>
}
 8007f62:	3718      	adds	r7, #24
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bdb0      	pop	{r4, r5, r7, pc}

08007f68 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b086      	sub	sp, #24
 8007f6c:	af02      	add	r7, sp, #8
 8007f6e:	60f8      	str	r0, [r7, #12]
 8007f70:	60b9      	str	r1, [r7, #8]
 8007f72:	4613      	mov	r3, r2
 8007f74:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8007f76:	79fa      	ldrb	r2, [r7, #7]
 8007f78:	4942      	ldr	r1, [pc, #264]	@ (8008084 <etharp_output_to_arp_index+0x11c>)
 8007f7a:	4613      	mov	r3, r2
 8007f7c:	005b      	lsls	r3, r3, #1
 8007f7e:	4413      	add	r3, r2
 8007f80:	00db      	lsls	r3, r3, #3
 8007f82:	440b      	add	r3, r1
 8007f84:	3314      	adds	r3, #20
 8007f86:	781b      	ldrb	r3, [r3, #0]
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	d802      	bhi.n	8007f92 <etharp_output_to_arp_index+0x2a>
 8007f8c:	483e      	ldr	r0, [pc, #248]	@ (8008088 <etharp_output_to_arp_index+0x120>)
 8007f8e:	f001 ffc1 	bl	8009f14 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8007f92:	79fa      	ldrb	r2, [r7, #7]
 8007f94:	493b      	ldr	r1, [pc, #236]	@ (8008084 <etharp_output_to_arp_index+0x11c>)
 8007f96:	4613      	mov	r3, r2
 8007f98:	005b      	lsls	r3, r3, #1
 8007f9a:	4413      	add	r3, r2
 8007f9c:	00db      	lsls	r3, r3, #3
 8007f9e:	440b      	add	r3, r1
 8007fa0:	3314      	adds	r3, #20
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	2b02      	cmp	r3, #2
 8007fa6:	d153      	bne.n	8008050 <etharp_output_to_arp_index+0xe8>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8007fa8:	79fa      	ldrb	r2, [r7, #7]
 8007faa:	4936      	ldr	r1, [pc, #216]	@ (8008084 <etharp_output_to_arp_index+0x11c>)
 8007fac:	4613      	mov	r3, r2
 8007fae:	005b      	lsls	r3, r3, #1
 8007fb0:	4413      	add	r3, r2
 8007fb2:	00db      	lsls	r3, r3, #3
 8007fb4:	440b      	add	r3, r1
 8007fb6:	3312      	adds	r3, #18
 8007fb8:	881b      	ldrh	r3, [r3, #0]
 8007fba:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8007fbe:	d919      	bls.n	8007ff4 <etharp_output_to_arp_index+0x8c>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8007fc0:	79fa      	ldrb	r2, [r7, #7]
 8007fc2:	4613      	mov	r3, r2
 8007fc4:	005b      	lsls	r3, r3, #1
 8007fc6:	4413      	add	r3, r2
 8007fc8:	00db      	lsls	r3, r3, #3
 8007fca:	4a2e      	ldr	r2, [pc, #184]	@ (8008084 <etharp_output_to_arp_index+0x11c>)
 8007fcc:	4413      	add	r3, r2
 8007fce:	3304      	adds	r3, #4
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	68f8      	ldr	r0, [r7, #12]
 8007fd4:	f000 fb30 	bl	8008638 <etharp_request>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d138      	bne.n	8008050 <etharp_output_to_arp_index+0xe8>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8007fde:	79fa      	ldrb	r2, [r7, #7]
 8007fe0:	4928      	ldr	r1, [pc, #160]	@ (8008084 <etharp_output_to_arp_index+0x11c>)
 8007fe2:	4613      	mov	r3, r2
 8007fe4:	005b      	lsls	r3, r3, #1
 8007fe6:	4413      	add	r3, r2
 8007fe8:	00db      	lsls	r3, r3, #3
 8007fea:	440b      	add	r3, r1
 8007fec:	3314      	adds	r3, #20
 8007fee:	2203      	movs	r2, #3
 8007ff0:	701a      	strb	r2, [r3, #0]
 8007ff2:	e02d      	b.n	8008050 <etharp_output_to_arp_index+0xe8>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8007ff4:	79fa      	ldrb	r2, [r7, #7]
 8007ff6:	4923      	ldr	r1, [pc, #140]	@ (8008084 <etharp_output_to_arp_index+0x11c>)
 8007ff8:	4613      	mov	r3, r2
 8007ffa:	005b      	lsls	r3, r3, #1
 8007ffc:	4413      	add	r3, r2
 8007ffe:	00db      	lsls	r3, r3, #3
 8008000:	440b      	add	r3, r1
 8008002:	3312      	adds	r3, #18
 8008004:	881b      	ldrh	r3, [r3, #0]
 8008006:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800800a:	d321      	bcc.n	8008050 <etharp_output_to_arp_index+0xe8>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800800c:	79fa      	ldrb	r2, [r7, #7]
 800800e:	4613      	mov	r3, r2
 8008010:	005b      	lsls	r3, r3, #1
 8008012:	4413      	add	r3, r2
 8008014:	00db      	lsls	r3, r3, #3
 8008016:	4a1b      	ldr	r2, [pc, #108]	@ (8008084 <etharp_output_to_arp_index+0x11c>)
 8008018:	4413      	add	r3, r2
 800801a:	1d19      	adds	r1, r3, #4
 800801c:	79fa      	ldrb	r2, [r7, #7]
 800801e:	4613      	mov	r3, r2
 8008020:	005b      	lsls	r3, r3, #1
 8008022:	4413      	add	r3, r2
 8008024:	00db      	lsls	r3, r3, #3
 8008026:	3308      	adds	r3, #8
 8008028:	4a16      	ldr	r2, [pc, #88]	@ (8008084 <etharp_output_to_arp_index+0x11c>)
 800802a:	4413      	add	r3, r2
 800802c:	3304      	adds	r3, #4
 800802e:	461a      	mov	r2, r3
 8008030:	68f8      	ldr	r0, [r7, #12]
 8008032:	f000 fadf 	bl	80085f4 <etharp_request_dst>
 8008036:	4603      	mov	r3, r0
 8008038:	2b00      	cmp	r3, #0
 800803a:	d109      	bne.n	8008050 <etharp_output_to_arp_index+0xe8>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800803c:	79fa      	ldrb	r2, [r7, #7]
 800803e:	4911      	ldr	r1, [pc, #68]	@ (8008084 <etharp_output_to_arp_index+0x11c>)
 8008040:	4613      	mov	r3, r2
 8008042:	005b      	lsls	r3, r3, #1
 8008044:	4413      	add	r3, r2
 8008046:	00db      	lsls	r3, r3, #3
 8008048:	440b      	add	r3, r1
 800804a:	3314      	adds	r3, #20
 800804c:	2203      	movs	r2, #3
 800804e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 8008056:	79fa      	ldrb	r2, [r7, #7]
 8008058:	4613      	mov	r3, r2
 800805a:	005b      	lsls	r3, r3, #1
 800805c:	4413      	add	r3, r2
 800805e:	00db      	lsls	r3, r3, #3
 8008060:	3308      	adds	r3, #8
 8008062:	4a08      	ldr	r2, [pc, #32]	@ (8008084 <etharp_output_to_arp_index+0x11c>)
 8008064:	4413      	add	r3, r2
 8008066:	3304      	adds	r3, #4
 8008068:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800806c:	9200      	str	r2, [sp, #0]
 800806e:	460a      	mov	r2, r1
 8008070:	68b9      	ldr	r1, [r7, #8]
 8008072:	68f8      	ldr	r0, [r7, #12]
 8008074:	f001 fe4c 	bl	8009d10 <ethernet_output>
 8008078:	4603      	mov	r3, r0
}
 800807a:	4618      	mov	r0, r3
 800807c:	3710      	adds	r7, #16
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}
 8008082:	bf00      	nop
 8008084:	2400a360 	.word	0x2400a360
 8008088:	0800c4e0 	.word	0x0800c4e0

0800808c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b08a      	sub	sp, #40	@ 0x28
 8008090:	af02      	add	r7, sp, #8
 8008092:	60f8      	str	r0, [r7, #12]
 8008094:	60b9      	str	r1, [r7, #8]
 8008096:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d102      	bne.n	80080a8 <etharp_output+0x1c>
 80080a2:	486d      	ldr	r0, [pc, #436]	@ (8008258 <etharp_output+0x1cc>)
 80080a4:	f001 ff36 	bl	8009f14 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d102      	bne.n	80080b4 <etharp_output+0x28>
 80080ae:	486b      	ldr	r0, [pc, #428]	@ (800825c <etharp_output+0x1d0>)
 80080b0:	f001 ff30 	bl	8009f14 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d102      	bne.n	80080c0 <etharp_output+0x34>
 80080ba:	4869      	ldr	r0, [pc, #420]	@ (8008260 <etharp_output+0x1d4>)
 80080bc:	f001 ff2a 	bl	8009f14 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	68f9      	ldr	r1, [r7, #12]
 80080c6:	4618      	mov	r0, r3
 80080c8:	f000 ff78 	bl	8008fbc <ip4_addr_isbroadcast_u32>
 80080cc:	4603      	mov	r3, r0
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d002      	beq.n	80080d8 <etharp_output+0x4c>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80080d2:	4b64      	ldr	r3, [pc, #400]	@ (8008264 <etharp_output+0x1d8>)
 80080d4:	61fb      	str	r3, [r7, #28]
 80080d6:	e0af      	b.n	8008238 <etharp_output+0x1ac>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80080e0:	2be0      	cmp	r3, #224	@ 0xe0
 80080e2:	d118      	bne.n	8008116 <etharp_output+0x8a>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80080e4:	2301      	movs	r3, #1
 80080e6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80080e8:	2300      	movs	r3, #0
 80080ea:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80080ec:	235e      	movs	r3, #94	@ 0x5e
 80080ee:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	3301      	adds	r3, #1
 80080f4:	781b      	ldrb	r3, [r3, #0]
 80080f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80080fa:	b2db      	uxtb	r3, r3
 80080fc:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	3302      	adds	r3, #2
 8008102:	781b      	ldrb	r3, [r3, #0]
 8008104:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	3303      	adds	r3, #3
 800810a:	781b      	ldrb	r3, [r3, #0]
 800810c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800810e:	f107 0310 	add.w	r3, r7, #16
 8008112:	61fb      	str	r3, [r7, #28]
 8008114:	e090      	b.n	8008238 <etharp_output+0x1ac>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_net_eq(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681a      	ldr	r2, [r3, #0]
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	3304      	adds	r3, #4
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	405a      	eors	r2, r3
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	3308      	adds	r3, #8
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4013      	ands	r3, r2
 800812a:	2b00      	cmp	r3, #0
 800812c:	d012      	beq.n	8008154 <etharp_output+0xc8>
        !ip4_addr_islinklocal(ipaddr)) {
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	b29b      	uxth	r3, r3
    if (!ip4_addr_net_eq(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8008134:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8008138:	4293      	cmp	r3, r2
 800813a:	d00b      	beq.n	8008154 <etharp_output+0xc8>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	330c      	adds	r3, #12
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d003      	beq.n	800814e <etharp_output+0xc2>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	330c      	adds	r3, #12
 800814a:	61bb      	str	r3, [r7, #24]
 800814c:	e002      	b.n	8008154 <etharp_output+0xc8>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800814e:	f06f 0303 	mvn.w	r3, #3
 8008152:	e07d      	b.n	8008250 <etharp_output+0x1c4>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8008154:	4b44      	ldr	r3, [pc, #272]	@ (8008268 <etharp_output+0x1dc>)
 8008156:	781b      	ldrb	r3, [r3, #0]
 8008158:	4619      	mov	r1, r3
 800815a:	4a44      	ldr	r2, [pc, #272]	@ (800826c <etharp_output+0x1e0>)
 800815c:	460b      	mov	r3, r1
 800815e:	005b      	lsls	r3, r3, #1
 8008160:	440b      	add	r3, r1
 8008162:	00db      	lsls	r3, r3, #3
 8008164:	4413      	add	r3, r2
 8008166:	3314      	adds	r3, #20
 8008168:	781b      	ldrb	r3, [r3, #0]
 800816a:	2b01      	cmp	r3, #1
 800816c:	d925      	bls.n	80081ba <etharp_output+0x12e>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800816e:	4b3e      	ldr	r3, [pc, #248]	@ (8008268 <etharp_output+0x1dc>)
 8008170:	781b      	ldrb	r3, [r3, #0]
 8008172:	4619      	mov	r1, r3
 8008174:	4a3d      	ldr	r2, [pc, #244]	@ (800826c <etharp_output+0x1e0>)
 8008176:	460b      	mov	r3, r1
 8008178:	005b      	lsls	r3, r3, #1
 800817a:	440b      	add	r3, r1
 800817c:	00db      	lsls	r3, r3, #3
 800817e:	4413      	add	r3, r2
 8008180:	3308      	adds	r3, #8
 8008182:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8008184:	68fa      	ldr	r2, [r7, #12]
 8008186:	429a      	cmp	r2, r3
 8008188:	d117      	bne.n	80081ba <etharp_output+0x12e>
#endif
            (ip4_addr_eq(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800818a:	69bb      	ldr	r3, [r7, #24]
 800818c:	681a      	ldr	r2, [r3, #0]
 800818e:	4b36      	ldr	r3, [pc, #216]	@ (8008268 <etharp_output+0x1dc>)
 8008190:	781b      	ldrb	r3, [r3, #0]
 8008192:	4618      	mov	r0, r3
 8008194:	4935      	ldr	r1, [pc, #212]	@ (800826c <etharp_output+0x1e0>)
 8008196:	4603      	mov	r3, r0
 8008198:	005b      	lsls	r3, r3, #1
 800819a:	4403      	add	r3, r0
 800819c:	00db      	lsls	r3, r3, #3
 800819e:	440b      	add	r3, r1
 80081a0:	3304      	adds	r3, #4
 80081a2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80081a4:	429a      	cmp	r2, r3
 80081a6:	d108      	bne.n	80081ba <etharp_output+0x12e>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80081a8:	4b2f      	ldr	r3, [pc, #188]	@ (8008268 <etharp_output+0x1dc>)
 80081aa:	781b      	ldrb	r3, [r3, #0]
 80081ac:	461a      	mov	r2, r3
 80081ae:	68b9      	ldr	r1, [r7, #8]
 80081b0:	68f8      	ldr	r0, [r7, #12]
 80081b2:	f7ff fed9 	bl	8007f68 <etharp_output_to_arp_index>
 80081b6:	4603      	mov	r3, r0
 80081b8:	e04a      	b.n	8008250 <etharp_output+0x1c4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80081ba:	2300      	movs	r3, #0
 80081bc:	75fb      	strb	r3, [r7, #23]
 80081be:	e031      	b.n	8008224 <etharp_output+0x198>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80081c0:	7dfa      	ldrb	r2, [r7, #23]
 80081c2:	492a      	ldr	r1, [pc, #168]	@ (800826c <etharp_output+0x1e0>)
 80081c4:	4613      	mov	r3, r2
 80081c6:	005b      	lsls	r3, r3, #1
 80081c8:	4413      	add	r3, r2
 80081ca:	00db      	lsls	r3, r3, #3
 80081cc:	440b      	add	r3, r1
 80081ce:	3314      	adds	r3, #20
 80081d0:	781b      	ldrb	r3, [r3, #0]
 80081d2:	2b01      	cmp	r3, #1
 80081d4:	d923      	bls.n	800821e <etharp_output+0x192>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80081d6:	7dfa      	ldrb	r2, [r7, #23]
 80081d8:	4924      	ldr	r1, [pc, #144]	@ (800826c <etharp_output+0x1e0>)
 80081da:	4613      	mov	r3, r2
 80081dc:	005b      	lsls	r3, r3, #1
 80081de:	4413      	add	r3, r2
 80081e0:	00db      	lsls	r3, r3, #3
 80081e2:	440b      	add	r3, r1
 80081e4:	3308      	adds	r3, #8
 80081e6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80081e8:	68fa      	ldr	r2, [r7, #12]
 80081ea:	429a      	cmp	r2, r3
 80081ec:	d117      	bne.n	800821e <etharp_output+0x192>
#endif
          (ip4_addr_eq(dst_addr, &arp_table[i].ipaddr))) {
 80081ee:	69bb      	ldr	r3, [r7, #24]
 80081f0:	6819      	ldr	r1, [r3, #0]
 80081f2:	7dfa      	ldrb	r2, [r7, #23]
 80081f4:	481d      	ldr	r0, [pc, #116]	@ (800826c <etharp_output+0x1e0>)
 80081f6:	4613      	mov	r3, r2
 80081f8:	005b      	lsls	r3, r3, #1
 80081fa:	4413      	add	r3, r2
 80081fc:	00db      	lsls	r3, r3, #3
 80081fe:	4403      	add	r3, r0
 8008200:	3304      	adds	r3, #4
 8008202:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8008204:	4299      	cmp	r1, r3
 8008206:	d10a      	bne.n	800821e <etharp_output+0x192>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8008208:	4a17      	ldr	r2, [pc, #92]	@ (8008268 <etharp_output+0x1dc>)
 800820a:	7dfb      	ldrb	r3, [r7, #23]
 800820c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800820e:	7dfb      	ldrb	r3, [r7, #23]
 8008210:	461a      	mov	r2, r3
 8008212:	68b9      	ldr	r1, [r7, #8]
 8008214:	68f8      	ldr	r0, [r7, #12]
 8008216:	f7ff fea7 	bl	8007f68 <etharp_output_to_arp_index>
 800821a:	4603      	mov	r3, r0
 800821c:	e018      	b.n	8008250 <etharp_output+0x1c4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800821e:	7dfb      	ldrb	r3, [r7, #23]
 8008220:	3301      	adds	r3, #1
 8008222:	75fb      	strb	r3, [r7, #23]
 8008224:	7dfb      	ldrb	r3, [r7, #23]
 8008226:	2b09      	cmp	r3, #9
 8008228:	d9ca      	bls.n	80081c0 <etharp_output+0x134>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800822a:	68ba      	ldr	r2, [r7, #8]
 800822c:	69b9      	ldr	r1, [r7, #24]
 800822e:	68f8      	ldr	r0, [r7, #12]
 8008230:	f000 f81e 	bl	8008270 <etharp_query>
 8008234:	4603      	mov	r3, r0
 8008236:	e00b      	b.n	8008250 <etharp_output+0x1c4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800823e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008242:	9300      	str	r3, [sp, #0]
 8008244:	69fb      	ldr	r3, [r7, #28]
 8008246:	68b9      	ldr	r1, [r7, #8]
 8008248:	68f8      	ldr	r0, [r7, #12]
 800824a:	f001 fd61 	bl	8009d10 <ethernet_output>
 800824e:	4603      	mov	r3, r0
}
 8008250:	4618      	mov	r0, r3
 8008252:	3720      	adds	r7, #32
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}
 8008258:	0800c4c0 	.word	0x0800c4c0
 800825c:	0800c510 	.word	0x0800c510
 8008260:	0800c4b0 	.word	0x0800c4b0
 8008264:	0800c968 	.word	0x0800c968
 8008268:	2400a450 	.word	0x2400a450
 800826c:	2400a360 	.word	0x2400a360

08008270 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b08c      	sub	sp, #48	@ 0x30
 8008274:	af02      	add	r7, sp, #8
 8008276:	60f8      	str	r0, [r7, #12]
 8008278:	60b9      	str	r1, [r7, #8]
 800827a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	3326      	adds	r3, #38	@ 0x26
 8008280:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8008282:	23ff      	movs	r3, #255	@ 0xff
 8008284:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8008288:	2300      	movs	r3, #0
 800828a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	68f9      	ldr	r1, [r7, #12]
 8008292:	4618      	mov	r0, r3
 8008294:	f000 fe92 	bl	8008fbc <ip4_addr_isbroadcast_u32>
 8008298:	4603      	mov	r3, r0
 800829a:	2b00      	cmp	r3, #0
 800829c:	d10c      	bne.n	80082b8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80082a6:	2be0      	cmp	r3, #224	@ 0xe0
 80082a8:	d006      	beq.n	80082b8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d003      	beq.n	80082b8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d102      	bne.n	80082be <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80082b8:	f06f 030f 	mvn.w	r3, #15
 80082bc:	e10d      	b.n	80084da <etharp_query+0x26a>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80082be:	68fa      	ldr	r2, [r7, #12]
 80082c0:	2101      	movs	r1, #1
 80082c2:	68b8      	ldr	r0, [r7, #8]
 80082c4:	f7ff fb98 	bl	80079f8 <etharp_find_entry>
 80082c8:	4603      	mov	r3, r0
 80082ca:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80082cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	da02      	bge.n	80082da <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80082d4:	8a7b      	ldrh	r3, [r7, #18]
 80082d6:	b25b      	sxtb	r3, r3
 80082d8:	e0ff      	b.n	80084da <etharp_query+0x26a>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80082da:	8a7b      	ldrh	r3, [r7, #18]
 80082dc:	2b7e      	cmp	r3, #126	@ 0x7e
 80082de:	d902      	bls.n	80082e6 <etharp_query+0x76>
 80082e0:	4880      	ldr	r0, [pc, #512]	@ (80084e4 <etharp_query+0x274>)
 80082e2:	f001 fe17 	bl	8009f14 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80082e6:	8a7b      	ldrh	r3, [r7, #18]
 80082e8:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80082ea:	7c7a      	ldrb	r2, [r7, #17]
 80082ec:	497e      	ldr	r1, [pc, #504]	@ (80084e8 <etharp_query+0x278>)
 80082ee:	4613      	mov	r3, r2
 80082f0:	005b      	lsls	r3, r3, #1
 80082f2:	4413      	add	r3, r2
 80082f4:	00db      	lsls	r3, r3, #3
 80082f6:	440b      	add	r3, r1
 80082f8:	3314      	adds	r3, #20
 80082fa:	781b      	ldrb	r3, [r3, #0]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d115      	bne.n	800832c <etharp_query+0xbc>
    is_new_entry = 1;
 8008300:	2301      	movs	r3, #1
 8008302:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8008304:	7c7a      	ldrb	r2, [r7, #17]
 8008306:	4978      	ldr	r1, [pc, #480]	@ (80084e8 <etharp_query+0x278>)
 8008308:	4613      	mov	r3, r2
 800830a:	005b      	lsls	r3, r3, #1
 800830c:	4413      	add	r3, r2
 800830e:	00db      	lsls	r3, r3, #3
 8008310:	440b      	add	r3, r1
 8008312:	3314      	adds	r3, #20
 8008314:	2201      	movs	r2, #1
 8008316:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8008318:	7c7a      	ldrb	r2, [r7, #17]
 800831a:	4973      	ldr	r1, [pc, #460]	@ (80084e8 <etharp_query+0x278>)
 800831c:	4613      	mov	r3, r2
 800831e:	005b      	lsls	r3, r3, #1
 8008320:	4413      	add	r3, r2
 8008322:	00db      	lsls	r3, r3, #3
 8008324:	440b      	add	r3, r1
 8008326:	3308      	adds	r3, #8
 8008328:	68fa      	ldr	r2, [r7, #12]
 800832a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800832c:	7c7a      	ldrb	r2, [r7, #17]
 800832e:	496e      	ldr	r1, [pc, #440]	@ (80084e8 <etharp_query+0x278>)
 8008330:	4613      	mov	r3, r2
 8008332:	005b      	lsls	r3, r3, #1
 8008334:	4413      	add	r3, r2
 8008336:	00db      	lsls	r3, r3, #3
 8008338:	440b      	add	r3, r1
 800833a:	3314      	adds	r3, #20
 800833c:	781b      	ldrb	r3, [r3, #0]
 800833e:	2b01      	cmp	r3, #1
 8008340:	d00d      	beq.n	800835e <etharp_query+0xee>
 8008342:	7c7a      	ldrb	r2, [r7, #17]
 8008344:	4968      	ldr	r1, [pc, #416]	@ (80084e8 <etharp_query+0x278>)
 8008346:	4613      	mov	r3, r2
 8008348:	005b      	lsls	r3, r3, #1
 800834a:	4413      	add	r3, r2
 800834c:	00db      	lsls	r3, r3, #3
 800834e:	440b      	add	r3, r1
 8008350:	3314      	adds	r3, #20
 8008352:	781b      	ldrb	r3, [r3, #0]
 8008354:	2b01      	cmp	r3, #1
 8008356:	d802      	bhi.n	800835e <etharp_query+0xee>
 8008358:	4864      	ldr	r0, [pc, #400]	@ (80084ec <etharp_query+0x27c>)
 800835a:	f001 fddb 	bl	8009f14 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800835e:	6a3b      	ldr	r3, [r7, #32]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d102      	bne.n	800836a <etharp_query+0xfa>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d128      	bne.n	80083bc <etharp_query+0x14c>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800836a:	68b9      	ldr	r1, [r7, #8]
 800836c:	68f8      	ldr	r0, [r7, #12]
 800836e:	f000 f963 	bl	8008638 <etharp_request>
 8008372:	4603      	mov	r3, r0
 8008374:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (result != ERR_OK) {
 8008378:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800837c:	2b00      	cmp	r3, #0
 800837e:	d117      	bne.n	80083b0 <etharp_query+0x140>
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    } else {
      /* ARP request successfully sent */
      if ((arp_table[i].state == ETHARP_STATE_PENDING) && !is_new_entry) {
 8008380:	7c7a      	ldrb	r2, [r7, #17]
 8008382:	4959      	ldr	r1, [pc, #356]	@ (80084e8 <etharp_query+0x278>)
 8008384:	4613      	mov	r3, r2
 8008386:	005b      	lsls	r3, r3, #1
 8008388:	4413      	add	r3, r2
 800838a:	00db      	lsls	r3, r3, #3
 800838c:	440b      	add	r3, r1
 800838e:	3314      	adds	r3, #20
 8008390:	781b      	ldrb	r3, [r3, #0]
 8008392:	2b01      	cmp	r3, #1
 8008394:	d10c      	bne.n	80083b0 <etharp_query+0x140>
 8008396:	6a3b      	ldr	r3, [r7, #32]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d109      	bne.n	80083b0 <etharp_query+0x140>
        /* A new ARP request has been sent for a pending entry. Reset the ctime to
           not let it expire too fast. */
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: reset ctime for entry %"S16_F"\n", (s16_t)i));
        arp_table[i].ctime = 0;
 800839c:	7c7a      	ldrb	r2, [r7, #17]
 800839e:	4952      	ldr	r1, [pc, #328]	@ (80084e8 <etharp_query+0x278>)
 80083a0:	4613      	mov	r3, r2
 80083a2:	005b      	lsls	r3, r3, #1
 80083a4:	4413      	add	r3, r2
 80083a6:	00db      	lsls	r3, r3, #3
 80083a8:	440b      	add	r3, r1
 80083aa:	3312      	adds	r3, #18
 80083ac:	2200      	movs	r2, #0
 80083ae:	801a      	strh	r2, [r3, #0]
      }
    }
    if (q == NULL) {
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d102      	bne.n	80083bc <etharp_query+0x14c>
      return result;
 80083b6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80083ba:	e08e      	b.n	80084da <etharp_query+0x26a>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d102      	bne.n	80083c8 <etharp_query+0x158>
 80083c2:	484b      	ldr	r0, [pc, #300]	@ (80084f0 <etharp_query+0x280>)
 80083c4:	f001 fda6 	bl	8009f14 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80083c8:	7c7a      	ldrb	r2, [r7, #17]
 80083ca:	4947      	ldr	r1, [pc, #284]	@ (80084e8 <etharp_query+0x278>)
 80083cc:	4613      	mov	r3, r2
 80083ce:	005b      	lsls	r3, r3, #1
 80083d0:	4413      	add	r3, r2
 80083d2:	00db      	lsls	r3, r3, #3
 80083d4:	440b      	add	r3, r1
 80083d6:	3314      	adds	r3, #20
 80083d8:	781b      	ldrb	r3, [r3, #0]
 80083da:	2b01      	cmp	r3, #1
 80083dc:	d917      	bls.n	800840e <etharp_query+0x19e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80083de:	4a45      	ldr	r2, [pc, #276]	@ (80084f4 <etharp_query+0x284>)
 80083e0:	7c7b      	ldrb	r3, [r7, #17]
 80083e2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80083e4:	7c7a      	ldrb	r2, [r7, #17]
 80083e6:	4613      	mov	r3, r2
 80083e8:	005b      	lsls	r3, r3, #1
 80083ea:	4413      	add	r3, r2
 80083ec:	00db      	lsls	r3, r3, #3
 80083ee:	3308      	adds	r3, #8
 80083f0:	4a3d      	ldr	r2, [pc, #244]	@ (80084e8 <etharp_query+0x278>)
 80083f2:	4413      	add	r3, r2
 80083f4:	3304      	adds	r3, #4
 80083f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80083fa:	9200      	str	r2, [sp, #0]
 80083fc:	697a      	ldr	r2, [r7, #20]
 80083fe:	6879      	ldr	r1, [r7, #4]
 8008400:	68f8      	ldr	r0, [r7, #12]
 8008402:	f001 fc85 	bl	8009d10 <ethernet_output>
 8008406:	4603      	mov	r3, r0
 8008408:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800840c:	e063      	b.n	80084d6 <etharp_query+0x266>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800840e:	7c7a      	ldrb	r2, [r7, #17]
 8008410:	4935      	ldr	r1, [pc, #212]	@ (80084e8 <etharp_query+0x278>)
 8008412:	4613      	mov	r3, r2
 8008414:	005b      	lsls	r3, r3, #1
 8008416:	4413      	add	r3, r2
 8008418:	00db      	lsls	r3, r3, #3
 800841a:	440b      	add	r3, r1
 800841c:	3314      	adds	r3, #20
 800841e:	781b      	ldrb	r3, [r3, #0]
 8008420:	2b01      	cmp	r3, #1
 8008422:	d158      	bne.n	80084d6 <etharp_query+0x266>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8008424:	2300      	movs	r3, #0
 8008426:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	61fb      	str	r3, [r7, #28]
    while (p) {
 800842c:	e018      	b.n	8008460 <etharp_query+0x1f0>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == NULL));
 800842e:	69fb      	ldr	r3, [r7, #28]
 8008430:	895a      	ldrh	r2, [r3, #10]
 8008432:	69fb      	ldr	r3, [r7, #28]
 8008434:	891b      	ldrh	r3, [r3, #8]
 8008436:	429a      	cmp	r2, r3
 8008438:	d106      	bne.n	8008448 <etharp_query+0x1d8>
 800843a:	69fb      	ldr	r3, [r7, #28]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d002      	beq.n	8008448 <etharp_query+0x1d8>
 8008442:	482d      	ldr	r0, [pc, #180]	@ (80084f8 <etharp_query+0x288>)
 8008444:	f001 fd66 	bl	8009f14 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8008448:	69fb      	ldr	r3, [r7, #28]
 800844a:	7b1b      	ldrb	r3, [r3, #12]
 800844c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008450:	2b00      	cmp	r3, #0
 8008452:	d002      	beq.n	800845a <etharp_query+0x1ea>
        copy_needed = 1;
 8008454:	2301      	movs	r3, #1
 8008456:	61bb      	str	r3, [r7, #24]
        break;
 8008458:	e005      	b.n	8008466 <etharp_query+0x1f6>
      }
      p = p->next;
 800845a:	69fb      	ldr	r3, [r7, #28]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8008460:	69fb      	ldr	r3, [r7, #28]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d1e3      	bne.n	800842e <etharp_query+0x1be>
    }
    if (copy_needed) {
 8008466:	69bb      	ldr	r3, [r7, #24]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d007      	beq.n	800847c <etharp_query+0x20c>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800846c:	687a      	ldr	r2, [r7, #4]
 800846e:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8008472:	200e      	movs	r0, #14
 8008474:	f7fa fb96 	bl	8002ba4 <pbuf_clone>
 8008478:	61f8      	str	r0, [r7, #28]
 800847a:	e004      	b.n	8008486 <etharp_query+0x216>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8008480:	69f8      	ldr	r0, [r7, #28]
 8008482:	f7fa f9f9 	bl	8002878 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8008486:	69fb      	ldr	r3, [r7, #28]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d021      	beq.n	80084d0 <etharp_query+0x260>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800848c:	7c7a      	ldrb	r2, [r7, #17]
 800848e:	4916      	ldr	r1, [pc, #88]	@ (80084e8 <etharp_query+0x278>)
 8008490:	4613      	mov	r3, r2
 8008492:	005b      	lsls	r3, r3, #1
 8008494:	4413      	add	r3, r2
 8008496:	00db      	lsls	r3, r3, #3
 8008498:	440b      	add	r3, r1
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d00a      	beq.n	80084b6 <etharp_query+0x246>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80084a0:	7c7a      	ldrb	r2, [r7, #17]
 80084a2:	4911      	ldr	r1, [pc, #68]	@ (80084e8 <etharp_query+0x278>)
 80084a4:	4613      	mov	r3, r2
 80084a6:	005b      	lsls	r3, r3, #1
 80084a8:	4413      	add	r3, r2
 80084aa:	00db      	lsls	r3, r3, #3
 80084ac:	440b      	add	r3, r1
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4618      	mov	r0, r3
 80084b2:	f7fa f955 	bl	8002760 <pbuf_free>
      }
      arp_table[i].q = p;
 80084b6:	7c7a      	ldrb	r2, [r7, #17]
 80084b8:	490b      	ldr	r1, [pc, #44]	@ (80084e8 <etharp_query+0x278>)
 80084ba:	4613      	mov	r3, r2
 80084bc:	005b      	lsls	r3, r3, #1
 80084be:	4413      	add	r3, r2
 80084c0:	00db      	lsls	r3, r3, #3
 80084c2:	440b      	add	r3, r1
 80084c4:	69fa      	ldr	r2, [r7, #28]
 80084c6:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80084c8:	2300      	movs	r3, #0
 80084ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80084ce:	e002      	b.n	80084d6 <etharp_query+0x266>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80084d0:	23ff      	movs	r3, #255	@ 0xff
 80084d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 80084d6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3728      	adds	r7, #40	@ 0x28
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}
 80084e2:	bf00      	nop
 80084e4:	0800c51c 	.word	0x0800c51c
 80084e8:	2400a360 	.word	0x2400a360
 80084ec:	0800c52c 	.word	0x0800c52c
 80084f0:	0800c510 	.word	0x0800c510
 80084f4:	2400a450 	.word	0x2400a450
 80084f8:	0800c554 	.word	0x0800c554

080084fc <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b08a      	sub	sp, #40	@ 0x28
 8008500:	af02      	add	r7, sp, #8
 8008502:	60f8      	str	r0, [r7, #12]
 8008504:	60b9      	str	r1, [r7, #8]
 8008506:	607a      	str	r2, [r7, #4]
 8008508:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800850a:	2300      	movs	r3, #0
 800850c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d102      	bne.n	800851a <etharp_raw+0x1e>
 8008514:	4834      	ldr	r0, [pc, #208]	@ (80085e8 <etharp_raw+0xec>)
 8008516:	f001 fcfd 	bl	8009f14 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800851a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800851e:	211c      	movs	r1, #28
 8008520:	200e      	movs	r0, #14
 8008522:	f7f9 fe77 	bl	8002214 <pbuf_alloc>
 8008526:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8008528:	69bb      	ldr	r3, [r7, #24]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d102      	bne.n	8008534 <etharp_raw+0x38>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800852e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008532:	e055      	b.n	80085e0 <etharp_raw+0xe4>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8008534:	69bb      	ldr	r3, [r7, #24]
 8008536:	895b      	ldrh	r3, [r3, #10]
 8008538:	2b1b      	cmp	r3, #27
 800853a:	d802      	bhi.n	8008542 <etharp_raw+0x46>
 800853c:	482b      	ldr	r0, [pc, #172]	@ (80085ec <etharp_raw+0xf0>)
 800853e:	f001 fce9 	bl	8009f14 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8008542:	69bb      	ldr	r3, [r7, #24]
 8008544:	685b      	ldr	r3, [r3, #4]
 8008546:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8008548:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800854a:	4618      	mov	r0, r3
 800854c:	f7f8 fdfe 	bl	800114c <lwip_htons>
 8008550:	4603      	mov	r3, r0
 8008552:	461a      	mov	r2, r3
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800855e:	2b06      	cmp	r3, #6
 8008560:	d002      	beq.n	8008568 <etharp_raw+0x6c>
 8008562:	4823      	ldr	r0, [pc, #140]	@ (80085f0 <etharp_raw+0xf4>)
 8008564:	f001 fcd6 	bl	8009f14 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	3308      	adds	r3, #8
 800856c:	2206      	movs	r2, #6
 800856e:	6839      	ldr	r1, [r7, #0]
 8008570:	4618      	mov	r0, r3
 8008572:	f001 fdb0 	bl	800a0d6 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	3312      	adds	r3, #18
 800857a:	2206      	movs	r2, #6
 800857c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800857e:	4618      	mov	r0, r3
 8008580:	f001 fda9 	bl	800a0d6 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	330e      	adds	r3, #14
 8008588:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800858a:	6812      	ldr	r2, [r2, #0]
 800858c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	3318      	adds	r3, #24
 8008592:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008594:	6812      	ldr	r2, [r2, #0]
 8008596:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	2200      	movs	r2, #0
 800859c:	701a      	strb	r2, [r3, #0]
 800859e:	2200      	movs	r2, #0
 80085a0:	f042 0201 	orr.w	r2, r2, #1
 80085a4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	2200      	movs	r2, #0
 80085aa:	f042 0208 	orr.w	r2, r2, #8
 80085ae:	709a      	strb	r2, [r3, #2]
 80085b0:	2200      	movs	r2, #0
 80085b2:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	2206      	movs	r2, #6
 80085b8:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	2204      	movs	r2, #4
 80085be:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80085c0:	f640 0306 	movw	r3, #2054	@ 0x806
 80085c4:	9300      	str	r3, [sp, #0]
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	68ba      	ldr	r2, [r7, #8]
 80085ca:	69b9      	ldr	r1, [r7, #24]
 80085cc:	68f8      	ldr	r0, [r7, #12]
 80085ce:	f001 fb9f 	bl	8009d10 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80085d2:	69b8      	ldr	r0, [r7, #24]
 80085d4:	f7fa f8c4 	bl	8002760 <pbuf_free>
  p = NULL;
 80085d8:	2300      	movs	r3, #0
 80085da:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80085dc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	3720      	adds	r7, #32
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}
 80085e8:	0800c4c0 	.word	0x0800c4c0
 80085ec:	0800c570 	.word	0x0800c570
 80085f0:	0800c5a4 	.word	0x0800c5a4

080085f4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b088      	sub	sp, #32
 80085f8:	af04      	add	r7, sp, #16
 80085fa:	60f8      	str	r0, [r7, #12]
 80085fc:	60b9      	str	r1, [r7, #8]
 80085fe:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8008610:	2201      	movs	r2, #1
 8008612:	9203      	str	r2, [sp, #12]
 8008614:	68ba      	ldr	r2, [r7, #8]
 8008616:	9202      	str	r2, [sp, #8]
 8008618:	4a06      	ldr	r2, [pc, #24]	@ (8008634 <etharp_request_dst+0x40>)
 800861a:	9201      	str	r2, [sp, #4]
 800861c:	9300      	str	r3, [sp, #0]
 800861e:	4603      	mov	r3, r0
 8008620:	687a      	ldr	r2, [r7, #4]
 8008622:	68f8      	ldr	r0, [r7, #12]
 8008624:	f7ff ff6a 	bl	80084fc <etharp_raw>
 8008628:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800862a:	4618      	mov	r0, r3
 800862c:	3710      	adds	r7, #16
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}
 8008632:	bf00      	nop
 8008634:	0800c970 	.word	0x0800c970

08008638 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b082      	sub	sp, #8
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
 8008640:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8008642:	4a05      	ldr	r2, [pc, #20]	@ (8008658 <etharp_request+0x20>)
 8008644:	6839      	ldr	r1, [r7, #0]
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f7ff ffd4 	bl	80085f4 <etharp_request_dst>
 800864c:	4603      	mov	r3, r0
}
 800864e:	4618      	mov	r0, r3
 8008650:	3708      	adds	r7, #8
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}
 8008656:	bf00      	nop
 8008658:	0800c968 	.word	0x0800c968

0800865c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b08e      	sub	sp, #56	@ 0x38
 8008660:	af04      	add	r7, sp, #16
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8008666:	4b88      	ldr	r3, [pc, #544]	@ (8008888 <icmp_input+0x22c>)
 8008668:	689b      	ldr	r3, [r3, #8]
 800866a:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800866c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800866e:	781b      	ldrb	r3, [r3, #0]
 8008670:	f003 030f 	and.w	r3, r3, #15
 8008674:	b2db      	uxtb	r3, r3
 8008676:	009b      	lsls	r3, r3, #2
 8008678:	b2db      	uxtb	r3, r3
 800867a:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 800867c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800867e:	2b13      	cmp	r3, #19
 8008680:	f240 80eb 	bls.w	800885a <icmp_input+0x1fe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	895b      	ldrh	r3, [r3, #10]
 8008688:	2b03      	cmp	r3, #3
 800868a:	f240 80e8 	bls.w	800885e <icmp_input+0x202>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	685b      	ldr	r3, [r3, #4]
 8008692:	781b      	ldrb	r3, [r3, #0]
 8008694:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8008698:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800869c:	2b00      	cmp	r3, #0
 800869e:	f000 80d5 	beq.w	800884c <icmp_input+0x1f0>
 80086a2:	2b08      	cmp	r3, #8
 80086a4:	f040 80d5 	bne.w	8008852 <icmp_input+0x1f6>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80086a8:	4b78      	ldr	r3, [pc, #480]	@ (800888c <icmp_input+0x230>)
 80086aa:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80086ac:	4b76      	ldr	r3, [pc, #472]	@ (8008888 <icmp_input+0x22c>)
 80086ae:	695b      	ldr	r3, [r3, #20]
 80086b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80086b4:	2be0      	cmp	r3, #224	@ 0xe0
 80086b6:	f000 80d9 	beq.w	800886c <icmp_input+0x210>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80086ba:	4b73      	ldr	r3, [pc, #460]	@ (8008888 <icmp_input+0x22c>)
 80086bc:	695b      	ldr	r3, [r3, #20]
 80086be:	4a72      	ldr	r2, [pc, #456]	@ (8008888 <icmp_input+0x22c>)
 80086c0:	6812      	ldr	r2, [r2, #0]
 80086c2:	4611      	mov	r1, r2
 80086c4:	4618      	mov	r0, r3
 80086c6:	f000 fc79 	bl	8008fbc <ip4_addr_isbroadcast_u32>
 80086ca:	4603      	mov	r3, r0
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	f040 80cf 	bne.w	8008870 <icmp_input+0x214>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	891b      	ldrh	r3, [r3, #8]
 80086d6:	2b07      	cmp	r3, #7
 80086d8:	f240 80c3 	bls.w	8008862 <icmp_input+0x206>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f7f8 fe8f 	bl	8001400 <inet_chksum_pbuf>
 80086e2:	4603      	mov	r3, r0
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d003      	beq.n	80086f0 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f7fa f839 	bl	8002760 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 80086ee:	e0c8      	b.n	8008882 <icmp_input+0x226>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80086f0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80086f2:	330e      	adds	r3, #14
 80086f4:	4619      	mov	r1, r3
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f7f9 ffae 	bl	8002658 <pbuf_add_header>
 80086fc:	4603      	mov	r3, r0
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d048      	beq.n	8008794 <icmp_input+0x138>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	891a      	ldrh	r2, [r3, #8]
 8008706:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008708:	4413      	add	r3, r2
 800870a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	891b      	ldrh	r3, [r3, #8]
 8008710:	8b7a      	ldrh	r2, [r7, #26]
 8008712:	429a      	cmp	r2, r3
 8008714:	f0c0 80ae 	bcc.w	8008874 <icmp_input+0x218>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8008718:	8b7b      	ldrh	r3, [r7, #26]
 800871a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800871e:	4619      	mov	r1, r3
 8008720:	200e      	movs	r0, #14
 8008722:	f7f9 fd77 	bl	8002214 <pbuf_alloc>
 8008726:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	2b00      	cmp	r3, #0
 800872c:	f000 80a4 	beq.w	8008878 <icmp_input+0x21c>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	895b      	ldrh	r3, [r3, #10]
 8008734:	461a      	mov	r2, r3
 8008736:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008738:	3308      	adds	r3, #8
 800873a:	429a      	cmp	r2, r3
 800873c:	d203      	bcs.n	8008746 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header\n"));
          pbuf_free(r);
 800873e:	6978      	ldr	r0, [r7, #20]
 8008740:	f7fa f80e 	bl	8002760 <pbuf_free>
          goto icmperr;
 8008744:	e099      	b.n	800887a <icmp_input+0x21e>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	685b      	ldr	r3, [r3, #4]
 800874a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800874c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800874e:	4618      	mov	r0, r3
 8008750:	f001 fcc1 	bl	800a0d6 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8008754:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008756:	4619      	mov	r1, r3
 8008758:	6978      	ldr	r0, [r7, #20]
 800875a:	f7f9 ff8d 	bl	8002678 <pbuf_remove_header>
 800875e:	4603      	mov	r3, r0
 8008760:	2b00      	cmp	r3, #0
 8008762:	d006      	beq.n	8008772 <icmp_input+0x116>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed", 0);
 8008764:	484a      	ldr	r0, [pc, #296]	@ (8008890 <icmp_input+0x234>)
 8008766:	f001 fbd5 	bl	8009f14 <iprintf>
          pbuf_free(r);
 800876a:	6978      	ldr	r0, [r7, #20]
 800876c:	f7f9 fff8 	bl	8002760 <pbuf_free>
          goto icmperr;
 8008770:	e083      	b.n	800887a <icmp_input+0x21e>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8008772:	6879      	ldr	r1, [r7, #4]
 8008774:	6978      	ldr	r0, [r7, #20]
 8008776:	f7fa f8d9 	bl	800292c <pbuf_copy>
 800877a:	4603      	mov	r3, r0
 800877c:	2b00      	cmp	r3, #0
 800877e:	d003      	beq.n	8008788 <icmp_input+0x12c>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed\n"));
          pbuf_free(r);
 8008780:	6978      	ldr	r0, [r7, #20]
 8008782:	f7f9 ffed 	bl	8002760 <pbuf_free>
          goto icmperr;
 8008786:	e078      	b.n	800887a <icmp_input+0x21e>
        }
        /* free the original p */
        pbuf_free(p);
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f7f9 ffe9 	bl	8002760 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	607b      	str	r3, [r7, #4]
 8008792:	e00c      	b.n	80087ae <icmp_input+0x152>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8008794:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008796:	330e      	adds	r3, #14
 8008798:	4619      	mov	r1, r3
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f7f9 ff6c 	bl	8002678 <pbuf_remove_header>
 80087a0:	4603      	mov	r3, r0
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d003      	beq.n	80087ae <icmp_input+0x152>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed", 0);
 80087a6:	483b      	ldr	r0, [pc, #236]	@ (8008894 <icmp_input+0x238>)
 80087a8:	f001 fbb4 	bl	8009f14 <iprintf>
          goto icmperr;
 80087ac:	e065      	b.n	800887a <icmp_input+0x21e>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	685b      	ldr	r3, [r3, #4]
 80087b2:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80087b4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80087b6:	4619      	mov	r1, r3
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f7f9 ff4d 	bl	8002658 <pbuf_add_header>
 80087be:	4603      	mov	r3, r0
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d145      	bne.n	8008850 <icmp_input+0x1f4>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet\n"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	685b      	ldr	r3, [r3, #4]
 80087c8:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80087ca:	69fb      	ldr	r3, [r7, #28]
 80087cc:	681a      	ldr	r2, [r3, #0]
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80087d2:	4b2d      	ldr	r3, [pc, #180]	@ (8008888 <icmp_input+0x22c>)
 80087d4:	691a      	ldr	r2, [r3, #16]
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	2200      	movs	r2, #0
 80087de:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 80087e0:	693b      	ldr	r3, [r7, #16]
 80087e2:	885b      	ldrh	r3, [r3, #2]
 80087e4:	b29b      	uxth	r3, r3
 80087e6:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d907      	bls.n	80087fe <icmp_input+0x1a2>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 80087ee:	693b      	ldr	r3, [r7, #16]
 80087f0:	885b      	ldrh	r3, [r3, #2]
 80087f2:	b29b      	uxth	r3, r3
 80087f4:	3309      	adds	r3, #9
 80087f6:	b29a      	uxth	r2, r3
 80087f8:	693b      	ldr	r3, [r7, #16]
 80087fa:	805a      	strh	r2, [r3, #2]
 80087fc:	e006      	b.n	800880c <icmp_input+0x1b0>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	885b      	ldrh	r3, [r3, #2]
 8008802:	b29b      	uxth	r3, r3
 8008804:	3308      	adds	r3, #8
 8008806:	b29a      	uxth	r2, r3
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	22ff      	movs	r2, #255	@ 0xff
 8008810:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	2200      	movs	r2, #0
 8008816:	729a      	strb	r2, [r3, #10]
 8008818:	2200      	movs	r2, #0
 800881a:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_IP) {
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 800881c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800881e:	4619      	mov	r1, r3
 8008820:	68f8      	ldr	r0, [r7, #12]
 8008822:	f7f8 fddb 	bl	80013dc <inet_chksum>
 8008826:	4603      	mov	r3, r0
 8008828:	461a      	mov	r2, r3
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	815a      	strh	r2, [r3, #10]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	9302      	str	r3, [sp, #8]
 8008832:	2301      	movs	r3, #1
 8008834:	9301      	str	r3, [sp, #4]
 8008836:	2300      	movs	r3, #0
 8008838:	9300      	str	r3, [sp, #0]
 800883a:	23ff      	movs	r3, #255	@ 0xff
 800883c:	2200      	movs	r2, #0
 800883e:	69f9      	ldr	r1, [r7, #28]
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f000 fa89 	bl	8008d58 <ip4_output_if>
 8008846:	4603      	mov	r3, r0
 8008848:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800884a:	e001      	b.n	8008850 <icmp_input+0x1f4>
      break;
 800884c:	bf00      	nop
 800884e:	e000      	b.n	8008852 <icmp_input+0x1f6>
      break;
 8008850:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f7f9 ff84 	bl	8002760 <pbuf_free>
  return;
 8008858:	e013      	b.n	8008882 <icmp_input+0x226>
    goto lenerr;
 800885a:	bf00      	nop
 800885c:	e002      	b.n	8008864 <icmp_input+0x208>
    goto lenerr;
 800885e:	bf00      	nop
 8008860:	e000      	b.n	8008864 <icmp_input+0x208>
        goto lenerr;
 8008862:	bf00      	nop
lenerr:
  pbuf_free(p);
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f7f9 ff7b 	bl	8002760 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800886a:	e00a      	b.n	8008882 <icmp_input+0x226>
        goto icmperr;
 800886c:	bf00      	nop
 800886e:	e004      	b.n	800887a <icmp_input+0x21e>
        goto icmperr;
 8008870:	bf00      	nop
 8008872:	e002      	b.n	800887a <icmp_input+0x21e>
          goto icmperr;
 8008874:	bf00      	nop
 8008876:	e000      	b.n	800887a <icmp_input+0x21e>
          goto icmperr;
 8008878:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f7f9 ff70 	bl	8002760 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8008880:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8008882:	3728      	adds	r7, #40	@ 0x28
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}
 8008888:	24003cd0 	.word	0x24003cd0
 800888c:	24003ce4 	.word	0x24003ce4
 8008890:	0800c5e8 	.word	0x0800c5e8
 8008894:	0800c61c 	.word	0x0800c61c

08008898 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b082      	sub	sp, #8
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
 80088a0:	460b      	mov	r3, r1
 80088a2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80088a4:	78fb      	ldrb	r3, [r7, #3]
 80088a6:	461a      	mov	r2, r3
 80088a8:	2103      	movs	r1, #3
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f000 f814 	bl	80088d8 <icmp_send_response>
}
 80088b0:	bf00      	nop
 80088b2:	3708      	adds	r7, #8
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}

080088b8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b082      	sub	sp, #8
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
 80088c0:	460b      	mov	r3, r1
 80088c2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80088c4:	78fb      	ldrb	r3, [r7, #3]
 80088c6:	461a      	mov	r2, r3
 80088c8:	210b      	movs	r1, #11
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f000 f804 	bl	80088d8 <icmp_send_response>
}
 80088d0:	bf00      	nop
 80088d2:	3708      	adds	r7, #8
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}

080088d8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b08c      	sub	sp, #48	@ 0x30
 80088dc:	af04      	add	r7, sp, #16
 80088de:	6078      	str	r0, [r7, #4]
 80088e0:	460b      	mov	r3, r1
 80088e2:	70fb      	strb	r3, [r7, #3]
 80088e4:	4613      	mov	r3, r2
 80088e6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* Keep IP header + up to 8 bytes */
  response_pkt_len = IP_HLEN + ICMP_DEST_UNREACH_DATASIZE;
 80088e8:	231c      	movs	r3, #28
 80088ea:	83fb      	strh	r3, [r7, #30]
  if (p->tot_len < response_pkt_len) {
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	891b      	ldrh	r3, [r3, #8]
 80088f0:	8bfa      	ldrh	r2, [r7, #30]
 80088f2:	429a      	cmp	r2, r3
 80088f4:	d902      	bls.n	80088fc <icmp_send_response+0x24>
    response_pkt_len = p->tot_len;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	891b      	ldrh	r3, [r3, #8]
 80088fa:	83fb      	strh	r3, [r7, #30]
  }

  /* ICMP header + part of original packet */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_hdr) + response_pkt_len, PBUF_RAM);
 80088fc:	8bfb      	ldrh	r3, [r7, #30]
 80088fe:	3308      	adds	r3, #8
 8008900:	b29b      	uxth	r3, r3
 8008902:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8008906:	4619      	mov	r1, r3
 8008908:	2022      	movs	r0, #34	@ 0x22
 800890a:	f7f9 fc83 	bl	8002214 <pbuf_alloc>
 800890e:	61b8      	str	r0, [r7, #24]
  if (q == NULL) {
 8008910:	69bb      	ldr	r3, [r7, #24]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d050      	beq.n	80089b8 <icmp_send_response+0xe0>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_send_response: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8008916:	69bb      	ldr	r3, [r7, #24]
 8008918:	895b      	ldrh	r3, [r3, #10]
 800891a:	461a      	mov	r2, r3
 800891c:	8bfb      	ldrh	r3, [r7, #30]
 800891e:	3308      	adds	r3, #8
 8008920:	429a      	cmp	r2, r3
 8008922:	d202      	bcs.n	800892a <icmp_send_response+0x52>
 8008924:	4826      	ldr	r0, [pc, #152]	@ (80089c0 <icmp_send_response+0xe8>)
 8008926:	f001 faf5 	bl	8009f14 <iprintf>
              (q->len >= (sizeof(struct icmp_hdr) + response_pkt_len)));

  iphdr = (struct ip_hdr *)p->payload;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	685b      	ldr	r3, [r3, #4]
 800892e:	617b      	str	r3, [r7, #20]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_hdr *)q->payload;
 8008930:	69bb      	ldr	r3, [r7, #24]
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	613b      	str	r3, [r7, #16]
  icmphdr->type = type;
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	78fa      	ldrb	r2, [r7, #3]
 800893a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800893c:	693b      	ldr	r3, [r7, #16]
 800893e:	78ba      	ldrb	r2, [r7, #2]
 8008940:	705a      	strb	r2, [r3, #1]
  icmphdr->data = 0;
 8008942:	693b      	ldr	r3, [r7, #16]
 8008944:	2200      	movs	r2, #0
 8008946:	711a      	strb	r2, [r3, #4]
 8008948:	2200      	movs	r2, #0
 800894a:	715a      	strb	r2, [r3, #5]
 800894c:	2200      	movs	r2, #0
 800894e:	719a      	strb	r2, [r3, #6]
 8008950:	2200      	movs	r2, #0
 8008952:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  pbuf_copy_partial_pbuf(q, p, response_pkt_len, sizeof(struct icmp_hdr));
 8008954:	8bfa      	ldrh	r2, [r7, #30]
 8008956:	2308      	movs	r3, #8
 8008958:	6879      	ldr	r1, [r7, #4]
 800895a:	69b8      	ldr	r0, [r7, #24]
 800895c:	f7f9 fffe 	bl	800295c <pbuf_copy_partial_pbuf>

  ip4_addr_copy(iphdr_src, iphdr->src);
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	68db      	ldr	r3, [r3, #12]
 8008964:	60bb      	str	r3, [r7, #8]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8008966:	f107 0308 	add.w	r3, r7, #8
 800896a:	4618      	mov	r0, r3
 800896c:	f000 f82a 	bl	80089c4 <ip4_route>
 8008970:	60f8      	str	r0, [r7, #12]
#endif
  if (netif != NULL) {
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d01b      	beq.n	80089b0 <icmp_send_response+0xd8>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8008978:	693b      	ldr	r3, [r7, #16]
 800897a:	2200      	movs	r2, #0
 800897c:	709a      	strb	r2, [r3, #2]
 800897e:	2200      	movs	r2, #0
 8008980:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8008982:	69bb      	ldr	r3, [r7, #24]
 8008984:	895b      	ldrh	r3, [r3, #10]
 8008986:	4619      	mov	r1, r3
 8008988:	6938      	ldr	r0, [r7, #16]
 800898a:	f7f8 fd27 	bl	80013dc <inet_chksum>
 800898e:	4603      	mov	r3, r0
 8008990:	461a      	mov	r2, r3
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8008996:	f107 0208 	add.w	r2, r7, #8
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	9302      	str	r3, [sp, #8]
 800899e:	2301      	movs	r3, #1
 80089a0:	9301      	str	r3, [sp, #4]
 80089a2:	2300      	movs	r3, #0
 80089a4:	9300      	str	r3, [sp, #0]
 80089a6:	23ff      	movs	r3, #255	@ 0xff
 80089a8:	2100      	movs	r1, #0
 80089aa:	69b8      	ldr	r0, [r7, #24]
 80089ac:	f000 f9d4 	bl	8008d58 <ip4_output_if>
  }
  pbuf_free(q);
 80089b0:	69b8      	ldr	r0, [r7, #24]
 80089b2:	f7f9 fed5 	bl	8002760 <pbuf_free>
 80089b6:	e000      	b.n	80089ba <icmp_send_response+0xe2>
    return;
 80089b8:	bf00      	nop
}
 80089ba:	3720      	adds	r7, #32
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}
 80089c0:	0800c650 	.word	0x0800c650

080089c4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80089c4:	b480      	push	{r7}
 80089c6:	b085      	sub	sp, #20
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80089cc:	4b33      	ldr	r3, [pc, #204]	@ (8008a9c <ip4_route+0xd8>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	60fb      	str	r3, [r7, #12]
 80089d2:	e036      	b.n	8008a42 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80089da:	f003 0301 	and.w	r3, r3, #1
 80089de:	b2db      	uxtb	r3, r3
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d02b      	beq.n	8008a3c <ip4_route+0x78>
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80089ea:	089b      	lsrs	r3, r3, #2
 80089ec:	f003 0301 	and.w	r3, r3, #1
 80089f0:	b2db      	uxtb	r3, r3
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d022      	beq.n	8008a3c <ip4_route+0x78>
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	3304      	adds	r3, #4
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d01d      	beq.n	8008a3c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_net_eq(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681a      	ldr	r2, [r3, #0]
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	3304      	adds	r3, #4
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	405a      	eors	r2, r3
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	3308      	adds	r3, #8
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	4013      	ands	r3, r2
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d101      	bne.n	8008a1c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	e038      	b.n	8008a8e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_eq(dest, netif_ip4_gw(netif))) {
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8008a22:	f003 0302 	and.w	r3, r3, #2
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d108      	bne.n	8008a3c <ip4_route+0x78>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681a      	ldr	r2, [r3, #0]
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	330c      	adds	r3, #12
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	429a      	cmp	r2, r3
 8008a36:	d101      	bne.n	8008a3c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	e028      	b.n	8008a8e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	60fb      	str	r3, [r7, #12]
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d1c5      	bne.n	80089d4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8008a48:	4b15      	ldr	r3, [pc, #84]	@ (8008aa0 <ip4_route+0xdc>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d01a      	beq.n	8008a86 <ip4_route+0xc2>
 8008a50:	4b13      	ldr	r3, [pc, #76]	@ (8008aa0 <ip4_route+0xdc>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8008a58:	f003 0301 	and.w	r3, r3, #1
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d012      	beq.n	8008a86 <ip4_route+0xc2>
 8008a60:	4b0f      	ldr	r3, [pc, #60]	@ (8008aa0 <ip4_route+0xdc>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8008a68:	f003 0304 	and.w	r3, r3, #4
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d00a      	beq.n	8008a86 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8008a70:	4b0b      	ldr	r3, [pc, #44]	@ (8008aa0 <ip4_route+0xdc>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	3304      	adds	r3, #4
 8008a76:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d004      	beq.n	8008a86 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	b2db      	uxtb	r3, r3
 8008a82:	2b7f      	cmp	r3, #127	@ 0x7f
 8008a84:	d101      	bne.n	8008a8a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8008a86:	2300      	movs	r3, #0
 8008a88:	e001      	b.n	8008a8e <ip4_route+0xca>
  }

  return netif_default;
 8008a8a:	4b05      	ldr	r3, [pc, #20]	@ (8008aa0 <ip4_route+0xdc>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	3714      	adds	r7, #20
 8008a92:	46bd      	mov	sp, r7
 8008a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a98:	4770      	bx	lr
 8008a9a:	bf00      	nop
 8008a9c:	2400a2f4 	.word	0x2400a2f4
 8008aa0:	2400a2f8 	.word	0x2400a2f8

08008aa4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b082      	sub	sp, #8
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8008ab2:	f003 0301 	and.w	r3, r3, #1
 8008ab6:	b2db      	uxtb	r3, r3
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d016      	beq.n	8008aea <ip4_input_accept+0x46>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	3304      	adds	r3, #4
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d011      	beq.n	8008aea <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_eq(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8008ac6:	4b0b      	ldr	r3, [pc, #44]	@ (8008af4 <ip4_input_accept+0x50>)
 8008ac8:	695a      	ldr	r2, [r3, #20]
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	3304      	adds	r3, #4
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	429a      	cmp	r2, r3
 8008ad2:	d008      	beq.n	8008ae6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8008ad4:	4b07      	ldr	r3, [pc, #28]	@ (8008af4 <ip4_input_accept+0x50>)
 8008ad6:	695b      	ldr	r3, [r3, #20]
 8008ad8:	6879      	ldr	r1, [r7, #4]
 8008ada:	4618      	mov	r0, r3
 8008adc:	f000 fa6e 	bl	8008fbc <ip4_addr_isbroadcast_u32>
 8008ae0:	4603      	mov	r3, r0
    if (ip4_addr_eq(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d001      	beq.n	8008aea <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	e000      	b.n	8008aec <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8008aea:	2300      	movs	r3, #0
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3708      	adds	r7, #8
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}
 8008af4:	24003cd0 	.word	0x24003cd0

08008af8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b086      	sub	sp, #24
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
 8008b00:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	781b      	ldrb	r3, [r3, #0]
 8008b0c:	091b      	lsrs	r3, r3, #4
 8008b0e:	b2db      	uxtb	r3, r3
 8008b10:	2b04      	cmp	r3, #4
 8008b12:	d004      	beq.n	8008b1e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f7f9 fe23 	bl	8002760 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	e114      	b.n	8008d48 <ip4_input+0x250>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	781b      	ldrb	r3, [r3, #0]
 8008b22:	f003 030f 	and.w	r3, r3, #15
 8008b26:	b2db      	uxtb	r3, r3
 8008b28:	009b      	lsls	r3, r3, #2
 8008b2a:	b2db      	uxtb	r3, r3
 8008b2c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	885b      	ldrh	r3, [r3, #2]
 8008b32:	b29b      	uxth	r3, r3
 8008b34:	4618      	mov	r0, r3
 8008b36:	f7f8 fb09 	bl	800114c <lwip_htons>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	891b      	ldrh	r3, [r3, #8]
 8008b42:	89ba      	ldrh	r2, [r7, #12]
 8008b44:	429a      	cmp	r2, r3
 8008b46:	d204      	bcs.n	8008b52 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8008b48:	89bb      	ldrh	r3, [r7, #12]
 8008b4a:	4619      	mov	r1, r3
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f7f9 fca3 	bl	8002498 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	895b      	ldrh	r3, [r3, #10]
 8008b56:	89fa      	ldrh	r2, [r7, #14]
 8008b58:	429a      	cmp	r2, r3
 8008b5a:	d807      	bhi.n	8008b6c <ip4_input+0x74>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	891b      	ldrh	r3, [r3, #8]
 8008b60:	89ba      	ldrh	r2, [r7, #12]
 8008b62:	429a      	cmp	r2, r3
 8008b64:	d802      	bhi.n	8008b6c <ip4_input+0x74>
 8008b66:	89fb      	ldrh	r3, [r7, #14]
 8008b68:	2b13      	cmp	r3, #19
 8008b6a:	d804      	bhi.n	8008b76 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f7f9 fdf7 	bl	8002760 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8008b72:	2300      	movs	r3, #0
 8008b74:	e0e8      	b.n	8008d48 <ip4_input+0x250>
  }

  /* verify checksum */
#if CHECKSUM_CHECK_IP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_IP) {
    if (inet_chksum(iphdr, iphdr_hlen) != 0) {
 8008b76:	89fb      	ldrh	r3, [r7, #14]
 8008b78:	4619      	mov	r1, r3
 8008b7a:	6978      	ldr	r0, [r7, #20]
 8008b7c:	f7f8 fc2e 	bl	80013dc <inet_chksum>
 8008b80:	4603      	mov	r3, r0
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d004      	beq.n	8008b90 <ip4_input+0x98>

      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("Checksum (0x%"X16_F") failed, IP packet dropped.\n", inet_chksum(iphdr, iphdr_hlen)));
      ip4_debug_print(p);
      pbuf_free(p);
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f7f9 fdea 	bl	8002760 <pbuf_free>
      IP_STATS_INC(ip.chkerr);
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinhdrerrors);
      return ERR_OK;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	e0db      	b.n	8008d48 <ip4_input+0x250>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8008b90:	697b      	ldr	r3, [r7, #20]
 8008b92:	691b      	ldr	r3, [r3, #16]
 8008b94:	4a6e      	ldr	r2, [pc, #440]	@ (8008d50 <ip4_input+0x258>)
 8008b96:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8008b98:	697b      	ldr	r3, [r7, #20]
 8008b9a:	68db      	ldr	r3, [r3, #12]
 8008b9c:	4a6c      	ldr	r2, [pc, #432]	@ (8008d50 <ip4_input+0x258>)
 8008b9e:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8008ba0:	4b6b      	ldr	r3, [pc, #428]	@ (8008d50 <ip4_input+0x258>)
 8008ba2:	695b      	ldr	r3, [r3, #20]
 8008ba4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008ba8:	2be0      	cmp	r3, #224	@ 0xe0
 8008baa:	d112      	bne.n	8008bd2 <ip4_input+0xda>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8008bb2:	f003 0301 	and.w	r3, r3, #1
 8008bb6:	b2db      	uxtb	r3, r3
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d007      	beq.n	8008bcc <ip4_input+0xd4>
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	3304      	adds	r3, #4
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d002      	beq.n	8008bcc <ip4_input+0xd4>
      netif = inp;
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	613b      	str	r3, [r7, #16]
 8008bca:	e02a      	b.n	8008c22 <ip4_input+0x12a>
    } else {
      netif = NULL;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	613b      	str	r3, [r7, #16]
 8008bd0:	e027      	b.n	8008c22 <ip4_input+0x12a>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8008bd2:	6838      	ldr	r0, [r7, #0]
 8008bd4:	f7ff ff66 	bl	8008aa4 <ip4_input_accept>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d002      	beq.n	8008be4 <ip4_input+0xec>
      netif = inp;
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	613b      	str	r3, [r7, #16]
 8008be2:	e01e      	b.n	8008c22 <ip4_input+0x12a>
    } else {
      netif = NULL;
 8008be4:	2300      	movs	r3, #0
 8008be6:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8008be8:	4b59      	ldr	r3, [pc, #356]	@ (8008d50 <ip4_input+0x258>)
 8008bea:	695b      	ldr	r3, [r3, #20]
 8008bec:	b2db      	uxtb	r3, r3
 8008bee:	2b7f      	cmp	r3, #127	@ 0x7f
 8008bf0:	d017      	beq.n	8008c22 <ip4_input+0x12a>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8008bf2:	4b58      	ldr	r3, [pc, #352]	@ (8008d54 <ip4_input+0x25c>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	613b      	str	r3, [r7, #16]
 8008bf8:	e00e      	b.n	8008c18 <ip4_input+0x120>
          if (netif == inp) {
 8008bfa:	693a      	ldr	r2, [r7, #16]
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	429a      	cmp	r2, r3
 8008c00:	d006      	beq.n	8008c10 <ip4_input+0x118>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8008c02:	6938      	ldr	r0, [r7, #16]
 8008c04:	f7ff ff4e 	bl	8008aa4 <ip4_input_accept>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d108      	bne.n	8008c20 <ip4_input+0x128>
 8008c0e:	e000      	b.n	8008c12 <ip4_input+0x11a>
            continue;
 8008c10:	bf00      	nop
        NETIF_FOREACH(netif) {
 8008c12:	693b      	ldr	r3, [r7, #16]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	613b      	str	r3, [r7, #16]
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d1ed      	bne.n	8008bfa <ip4_input+0x102>
 8008c1e:	e000      	b.n	8008c22 <ip4_input+0x12a>
            break;
 8008c20:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8008c22:	4b4b      	ldr	r3, [pc, #300]	@ (8008d50 <ip4_input+0x258>)
 8008c24:	691b      	ldr	r3, [r3, #16]
 8008c26:	6839      	ldr	r1, [r7, #0]
 8008c28:	4618      	mov	r0, r3
 8008c2a:	f000 f9c7 	bl	8008fbc <ip4_addr_isbroadcast_u32>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d105      	bne.n	8008c40 <ip4_input+0x148>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8008c34:	4b46      	ldr	r3, [pc, #280]	@ (8008d50 <ip4_input+0x258>)
 8008c36:	691b      	ldr	r3, [r3, #16]
 8008c38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8008c3c:	2be0      	cmp	r3, #224	@ 0xe0
 8008c3e:	d104      	bne.n	8008c4a <ip4_input+0x152>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f7f9 fd8d 	bl	8002760 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8008c46:	2300      	movs	r3, #0
 8008c48:	e07e      	b.n	8008d48 <ip4_input+0x250>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d104      	bne.n	8008c5a <ip4_input+0x162>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f7f9 fd85 	bl	8002760 <pbuf_free>
    return ERR_OK;
 8008c56:	2300      	movs	r3, #0
 8008c58:	e076      	b.n	8008d48 <ip4_input+0x250>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	88db      	ldrh	r3, [r3, #6]
 8008c5e:	b29b      	uxth	r3, r3
 8008c60:	461a      	mov	r2, r3
 8008c62:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8008c66:	4013      	ands	r3, r2
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d00b      	beq.n	8008c84 <ip4_input+0x18c>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f000 fcb7 	bl	80095e0 <ip4_reass>
 8008c72:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d101      	bne.n	8008c7e <ip4_input+0x186>
      return ERR_OK;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	e064      	b.n	8008d48 <ip4_input+0x250>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	685b      	ldr	r3, [r3, #4]
 8008c82:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8008c84:	4a32      	ldr	r2, [pc, #200]	@ (8008d50 <ip4_input+0x258>)
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8008c8a:	4a31      	ldr	r2, [pc, #196]	@ (8008d50 <ip4_input+0x258>)
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8008c90:	4a2f      	ldr	r2, [pc, #188]	@ (8008d50 <ip4_input+0x258>)
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	781b      	ldrb	r3, [r3, #0]
 8008c9a:	f003 030f 	and.w	r3, r3, #15
 8008c9e:	b2db      	uxtb	r3, r3
 8008ca0:	009b      	lsls	r3, r3, #2
 8008ca2:	b2db      	uxtb	r3, r3
 8008ca4:	461a      	mov	r2, r3
 8008ca6:	4b2a      	ldr	r3, [pc, #168]	@ (8008d50 <ip4_input+0x258>)
 8008ca8:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8008caa:	89fb      	ldrh	r3, [r7, #14]
 8008cac:	4619      	mov	r1, r3
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f7f9 fce2 	bl	8002678 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	7a5b      	ldrb	r3, [r3, #9]
 8008cb8:	2b11      	cmp	r3, #17
 8008cba:	d006      	beq.n	8008cca <ip4_input+0x1d2>
 8008cbc:	2b11      	cmp	r3, #17
 8008cbe:	dc13      	bgt.n	8008ce8 <ip4_input+0x1f0>
 8008cc0:	2b01      	cmp	r3, #1
 8008cc2:	d00c      	beq.n	8008cde <ip4_input+0x1e6>
 8008cc4:	2b06      	cmp	r3, #6
 8008cc6:	d005      	beq.n	8008cd4 <ip4_input+0x1dc>
 8008cc8:	e00e      	b.n	8008ce8 <ip4_input+0x1f0>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8008cca:	6839      	ldr	r1, [r7, #0]
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f7fe fc6b 	bl	80075a8 <udp_input>
        break;
 8008cd2:	e026      	b.n	8008d22 <ip4_input+0x22a>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8008cd4:	6839      	ldr	r1, [r7, #0]
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f7fb f9b0 	bl	800403c <tcp_input>
        break;
 8008cdc:	e021      	b.n	8008d22 <ip4_input+0x22a>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8008cde:	6839      	ldr	r1, [r7, #0]
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f7ff fcbb 	bl	800865c <icmp_input>
        break;
 8008ce6:	e01c      	b.n	8008d22 <ip4_input+0x22a>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8008ce8:	4b19      	ldr	r3, [pc, #100]	@ (8008d50 <ip4_input+0x258>)
 8008cea:	695b      	ldr	r3, [r3, #20]
 8008cec:	6939      	ldr	r1, [r7, #16]
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f000 f964 	bl	8008fbc <ip4_addr_isbroadcast_u32>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d10f      	bne.n	8008d1a <ip4_input+0x222>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8008cfa:	4b15      	ldr	r3, [pc, #84]	@ (8008d50 <ip4_input+0x258>)
 8008cfc:	695b      	ldr	r3, [r3, #20]
 8008cfe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8008d02:	2be0      	cmp	r3, #224	@ 0xe0
 8008d04:	d009      	beq.n	8008d1a <ip4_input+0x222>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8008d06:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008d0a:	4619      	mov	r1, r3
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f7f9 fd14 	bl	800273a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8008d12:	2102      	movs	r1, #2
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f7ff fdbf 	bl	8008898 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f7f9 fd20 	bl	8002760 <pbuf_free>
        break;
 8008d20:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8008d22:	4b0b      	ldr	r3, [pc, #44]	@ (8008d50 <ip4_input+0x258>)
 8008d24:	2200      	movs	r2, #0
 8008d26:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8008d28:	4b09      	ldr	r3, [pc, #36]	@ (8008d50 <ip4_input+0x258>)
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8008d2e:	4b08      	ldr	r3, [pc, #32]	@ (8008d50 <ip4_input+0x258>)
 8008d30:	2200      	movs	r2, #0
 8008d32:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8008d34:	4b06      	ldr	r3, [pc, #24]	@ (8008d50 <ip4_input+0x258>)
 8008d36:	2200      	movs	r2, #0
 8008d38:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8008d3a:	4b05      	ldr	r3, [pc, #20]	@ (8008d50 <ip4_input+0x258>)
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8008d40:	4b03      	ldr	r3, [pc, #12]	@ (8008d50 <ip4_input+0x258>)
 8008d42:	2200      	movs	r2, #0
 8008d44:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8008d46:	2300      	movs	r3, #0
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3718      	adds	r7, #24
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}
 8008d50:	24003cd0 	.word	0x24003cd0
 8008d54:	2400a2f4 	.word	0x2400a2f4

08008d58 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b08a      	sub	sp, #40	@ 0x28
 8008d5c:	af04      	add	r7, sp, #16
 8008d5e:	60f8      	str	r0, [r7, #12]
 8008d60:	60b9      	str	r1, [r7, #8]
 8008d62:	607a      	str	r2, [r7, #4]
 8008d64:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d009      	beq.n	8008d84 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d003      	beq.n	8008d7e <ip4_output_if+0x26>
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d102      	bne.n	8008d84 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8008d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d80:	3304      	adds	r3, #4
 8008d82:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8008d84:	78fa      	ldrb	r2, [r7, #3]
 8008d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d88:	9302      	str	r3, [sp, #8]
 8008d8a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008d8e:	9301      	str	r3, [sp, #4]
 8008d90:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008d94:	9300      	str	r3, [sp, #0]
 8008d96:	4613      	mov	r3, r2
 8008d98:	687a      	ldr	r2, [r7, #4]
 8008d9a:	6979      	ldr	r1, [r7, #20]
 8008d9c:	68f8      	ldr	r0, [r7, #12]
 8008d9e:	f000 f805 	bl	8008dac <ip4_output_if_src>
 8008da2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	3718      	adds	r7, #24
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}

08008dac <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b088      	sub	sp, #32
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	60f8      	str	r0, [r7, #12]
 8008db4:	60b9      	str	r1, [r7, #8]
 8008db6:	607a      	str	r2, [r7, #4]
 8008db8:	70fb      	strb	r3, [r7, #3]
{
#endif /* IP_OPTIONS_SEND */
  struct ip_hdr *iphdr;
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	7b9b      	ldrb	r3, [r3, #14]
 8008dc2:	2b01      	cmp	r3, #1
 8008dc4:	d002      	beq.n	8008dcc <ip4_output_if_src+0x20>
 8008dc6:	4879      	ldr	r0, [pc, #484]	@ (8008fac <ip4_output_if_src+0x200>)
 8008dc8:	f001 f8a4 	bl	8009f14 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	f000 80c0 	beq.w	8008f54 <ip4_output_if_src+0x1a8>
    u16_t ip_hlen = IP_HLEN;
 8008dd4:	2314      	movs	r3, #20
 8008dd6:	82fb      	strh	r3, [r7, #22]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8008dd8:	2114      	movs	r1, #20
 8008dda:	68f8      	ldr	r0, [r7, #12]
 8008ddc:	f7f9 fc3c 	bl	8002658 <pbuf_add_header>
 8008de0:	4603      	mov	r3, r0
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d002      	beq.n	8008dec <ip4_output_if_src+0x40>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8008de6:	f06f 0301 	mvn.w	r3, #1
 8008dea:	e0db      	b.n	8008fa4 <ip4_output_if_src+0x1f8>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	685b      	ldr	r3, [r3, #4]
 8008df0:	61bb      	str	r3, [r7, #24]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	895b      	ldrh	r3, [r3, #10]
 8008df6:	2b13      	cmp	r3, #19
 8008df8:	d802      	bhi.n	8008e00 <ip4_output_if_src+0x54>
 8008dfa:	486d      	ldr	r0, [pc, #436]	@ (8008fb0 <ip4_output_if_src+0x204>)
 8008dfc:	f001 f88a 	bl	8009f14 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8008e00:	69bb      	ldr	r3, [r7, #24]
 8008e02:	78fa      	ldrb	r2, [r7, #3]
 8008e04:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8008e06:	69bb      	ldr	r3, [r7, #24]
 8008e08:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8008e0c:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 8008e0e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8008e12:	78fb      	ldrb	r3, [r7, #3]
 8008e14:	021b      	lsls	r3, r3, #8
 8008e16:	4313      	orrs	r3, r2
 8008e18:	021b      	lsls	r3, r3, #8
 8008e1a:	b21a      	sxth	r2, r3
 8008e1c:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8008e20:	78fb      	ldrb	r3, [r7, #3]
 8008e22:	021b      	lsls	r3, r3, #8
 8008e24:	430b      	orrs	r3, r1
 8008e26:	121b      	asrs	r3, r3, #8
 8008e28:	b21b      	sxth	r3, r3
 8008e2a:	b2db      	uxtb	r3, r3
 8008e2c:	b21b      	sxth	r3, r3
 8008e2e:	4313      	orrs	r3, r2
 8008e30:	b21b      	sxth	r3, r3
 8008e32:	b29b      	uxth	r3, r3
 8008e34:	461a      	mov	r2, r3
 8008e36:	69fb      	ldr	r3, [r7, #28]
 8008e38:	4413      	add	r3, r2
 8008e3a:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681a      	ldr	r2, [r3, #0]
 8008e40:	69bb      	ldr	r3, [r7, #24]
 8008e42:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
 8008e44:	69bb      	ldr	r3, [r7, #24]
 8008e46:	691b      	ldr	r3, [r3, #16]
 8008e48:	b29b      	uxth	r3, r3
 8008e4a:	69fa      	ldr	r2, [r7, #28]
 8008e4c:	4413      	add	r3, r2
 8008e4e:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
 8008e50:	69bb      	ldr	r3, [r7, #24]
 8008e52:	691b      	ldr	r3, [r3, #16]
 8008e54:	0c1b      	lsrs	r3, r3, #16
 8008e56:	69fa      	ldr	r2, [r7, #28]
 8008e58:	4413      	add	r3, r2
 8008e5a:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8008e5c:	8afb      	ldrh	r3, [r7, #22]
 8008e5e:	089b      	lsrs	r3, r3, #2
 8008e60:	b29b      	uxth	r3, r3
 8008e62:	b2db      	uxtb	r3, r3
 8008e64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e68:	b2da      	uxtb	r2, r3
 8008e6a:	69bb      	ldr	r3, [r7, #24]
 8008e6c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8008e6e:	69bb      	ldr	r3, [r7, #24]
 8008e70:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8008e74:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 8008e76:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8008e7a:	69bb      	ldr	r3, [r7, #24]
 8008e7c:	781b      	ldrb	r3, [r3, #0]
 8008e7e:	021b      	lsls	r3, r3, #8
 8008e80:	4313      	orrs	r3, r2
 8008e82:	021b      	lsls	r3, r3, #8
 8008e84:	b21a      	sxth	r2, r3
 8008e86:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 8008e8a:	69bb      	ldr	r3, [r7, #24]
 8008e8c:	781b      	ldrb	r3, [r3, #0]
 8008e8e:	021b      	lsls	r3, r3, #8
 8008e90:	430b      	orrs	r3, r1
 8008e92:	121b      	asrs	r3, r3, #8
 8008e94:	b21b      	sxth	r3, r3
 8008e96:	b2db      	uxtb	r3, r3
 8008e98:	b21b      	sxth	r3, r3
 8008e9a:	4313      	orrs	r3, r2
 8008e9c:	b21b      	sxth	r3, r3
 8008e9e:	b29b      	uxth	r3, r3
 8008ea0:	461a      	mov	r2, r3
 8008ea2:	69fb      	ldr	r3, [r7, #28]
 8008ea4:	4413      	add	r3, r2
 8008ea6:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	891b      	ldrh	r3, [r3, #8]
 8008eac:	4618      	mov	r0, r3
 8008eae:	f7f8 f94d 	bl	800114c <lwip_htons>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	461a      	mov	r2, r3
 8008eb6:	69bb      	ldr	r3, [r7, #24]
 8008eb8:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
 8008eba:	69bb      	ldr	r3, [r7, #24]
 8008ebc:	885b      	ldrh	r3, [r3, #2]
 8008ebe:	b29b      	uxth	r3, r3
 8008ec0:	461a      	mov	r2, r3
 8008ec2:	69fb      	ldr	r3, [r7, #28]
 8008ec4:	4413      	add	r3, r2
 8008ec6:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8008ec8:	69bb      	ldr	r3, [r7, #24]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	719a      	strb	r2, [r3, #6]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8008ed2:	4b38      	ldr	r3, [pc, #224]	@ (8008fb4 <ip4_output_if_src+0x208>)
 8008ed4:	881b      	ldrh	r3, [r3, #0]
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f7f8 f938 	bl	800114c <lwip_htons>
 8008edc:	4603      	mov	r3, r0
 8008ede:	461a      	mov	r2, r3
 8008ee0:	69bb      	ldr	r3, [r7, #24]
 8008ee2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
 8008ee4:	69bb      	ldr	r3, [r7, #24]
 8008ee6:	889b      	ldrh	r3, [r3, #4]
 8008ee8:	b29b      	uxth	r3, r3
 8008eea:	461a      	mov	r2, r3
 8008eec:	69fb      	ldr	r3, [r7, #28]
 8008eee:	4413      	add	r3, r2
 8008ef0:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8008ef2:	4b30      	ldr	r3, [pc, #192]	@ (8008fb4 <ip4_output_if_src+0x208>)
 8008ef4:	881b      	ldrh	r3, [r3, #0]
 8008ef6:	3301      	adds	r3, #1
 8008ef8:	b29a      	uxth	r2, r3
 8008efa:	4b2e      	ldr	r3, [pc, #184]	@ (8008fb4 <ip4_output_if_src+0x208>)
 8008efc:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d104      	bne.n	8008f0e <ip4_output_if_src+0x162>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8008f04:	4b2c      	ldr	r3, [pc, #176]	@ (8008fb8 <ip4_output_if_src+0x20c>)
 8008f06:	681a      	ldr	r2, [r3, #0]
 8008f08:	69bb      	ldr	r3, [r7, #24]
 8008f0a:	60da      	str	r2, [r3, #12]
 8008f0c:	e003      	b.n	8008f16 <ip4_output_if_src+0x16a>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	681a      	ldr	r2, [r3, #0]
 8008f12:	69bb      	ldr	r3, [r7, #24]
 8008f14:	60da      	str	r2, [r3, #12]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
 8008f16:	69bb      	ldr	r3, [r7, #24]
 8008f18:	68db      	ldr	r3, [r3, #12]
 8008f1a:	b29b      	uxth	r3, r3
 8008f1c:	69fa      	ldr	r2, [r7, #28]
 8008f1e:	4413      	add	r3, r2
 8008f20:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
 8008f22:	69bb      	ldr	r3, [r7, #24]
 8008f24:	68db      	ldr	r3, [r3, #12]
 8008f26:	0c1b      	lsrs	r3, r3, #16
 8008f28:	69fa      	ldr	r2, [r7, #28]
 8008f2a:	4413      	add	r3, r2
 8008f2c:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
 8008f2e:	69fb      	ldr	r3, [r7, #28]
 8008f30:	0c1a      	lsrs	r2, r3, #16
 8008f32:	69fb      	ldr	r3, [r7, #28]
 8008f34:	b29b      	uxth	r3, r3
 8008f36:	4413      	add	r3, r2
 8008f38:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + chk_sum;
 8008f3a:	69fb      	ldr	r3, [r7, #28]
 8008f3c:	0c1b      	lsrs	r3, r3, #16
 8008f3e:	69fa      	ldr	r2, [r7, #28]
 8008f40:	4413      	add	r3, r2
 8008f42:	61fb      	str	r3, [r7, #28]
    chk_sum = ~chk_sum;
 8008f44:	69fb      	ldr	r3, [r7, #28]
 8008f46:	43db      	mvns	r3, r3
 8008f48:	61fb      	str	r3, [r7, #28]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      iphdr->_chksum = (u16_t)chk_sum; /* network order */
 8008f4a:	69fb      	ldr	r3, [r7, #28]
 8008f4c:	b29a      	uxth	r2, r3
 8008f4e:	69bb      	ldr	r3, [r7, #24]
 8008f50:	815a      	strh	r2, [r3, #10]
 8008f52:	e00f      	b.n	8008f74 <ip4_output_if_src+0x1c8>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	895b      	ldrh	r3, [r3, #10]
 8008f58:	2b13      	cmp	r3, #19
 8008f5a:	d802      	bhi.n	8008f62 <ip4_output_if_src+0x1b6>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8008f5c:	f06f 0301 	mvn.w	r3, #1
 8008f60:	e020      	b.n	8008fa4 <ip4_output_if_src+0x1f8>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	685b      	ldr	r3, [r3, #4]
 8008f66:	61bb      	str	r3, [r7, #24]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8008f68:	69bb      	ldr	r3, [r7, #24]
 8008f6a:	691b      	ldr	r3, [r3, #16]
 8008f6c:	613b      	str	r3, [r7, #16]
    dest = &dest_addr;
 8008f6e:	f107 0310 	add.w	r3, r7, #16
 8008f72:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8008f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f76:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d00c      	beq.n	8008f96 <ip4_output_if_src+0x1ea>
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	891a      	ldrh	r2, [r3, #8]
 8008f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f82:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008f84:	429a      	cmp	r2, r3
 8008f86:	d906      	bls.n	8008f96 <ip4_output_if_src+0x1ea>
    return ip4_frag(p, netif, dest);
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008f8c:	68f8      	ldr	r0, [r7, #12]
 8008f8e:	f000 fcf9 	bl	8009984 <ip4_frag>
 8008f92:	4603      	mov	r3, r0
 8008f94:	e006      	b.n	8008fa4 <ip4_output_if_src+0x1f8>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8008f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f98:	695b      	ldr	r3, [r3, #20]
 8008f9a:	687a      	ldr	r2, [r7, #4]
 8008f9c:	68f9      	ldr	r1, [r7, #12]
 8008f9e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008fa0:	4798      	blx	r3
 8008fa2:	4603      	mov	r3, r0
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3720      	adds	r7, #32
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}
 8008fac:	0800c67c 	.word	0x0800c67c
 8008fb0:	0800c688 	.word	0x0800c688
 8008fb4:	2400a452 	.word	0x2400a452
 8008fb8:	0800c964 	.word	0x0800c964

08008fbc <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b085      	sub	sp, #20
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
 8008fc4:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008fd0:	d002      	beq.n	8008fd8 <ip4_addr_isbroadcast_u32+0x1c>
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d101      	bne.n	8008fdc <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8008fd8:	2301      	movs	r3, #1
 8008fda:	e02a      	b.n	8009032 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8008fe2:	f003 0302 	and.w	r3, r3, #2
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d101      	bne.n	8008fee <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8008fea:	2300      	movs	r3, #0
 8008fec:	e021      	b.n	8009032 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	3304      	adds	r3, #4
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	687a      	ldr	r2, [r7, #4]
 8008ff6:	429a      	cmp	r2, r3
 8008ff8:	d101      	bne.n	8008ffe <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	e019      	b.n	8009032 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_net_eq(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8008ffe:	68fa      	ldr	r2, [r7, #12]
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	3304      	adds	r3, #4
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	405a      	eors	r2, r3
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	3308      	adds	r3, #8
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	4013      	ands	r3, r2
 8009010:	2b00      	cmp	r3, #0
 8009012:	d10d      	bne.n	8009030 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	3308      	adds	r3, #8
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	43da      	mvns	r2, r3
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	3308      	adds	r3, #8
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8009028:	429a      	cmp	r2, r3
 800902a:	d101      	bne.n	8009030 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800902c:	2301      	movs	r3, #1
 800902e:	e000      	b.n	8009032 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8009030:	2300      	movs	r3, #0
  }
}
 8009032:	4618      	mov	r0, r3
 8009034:	3714      	adds	r7, #20
 8009036:	46bd      	mov	sp, r7
 8009038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903c:	4770      	bx	lr
	...

08009040 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b084      	sub	sp, #16
 8009044:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8009046:	2300      	movs	r3, #0
 8009048:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800904a:	4b12      	ldr	r3, [pc, #72]	@ (8009094 <ip_reass_tmr+0x54>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8009050:	e018      	b.n	8009084 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	7fdb      	ldrb	r3, [r3, #31]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d00b      	beq.n	8009072 <ip_reass_tmr+0x32>
      r->timer--;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	7fdb      	ldrb	r3, [r3, #31]
 800905e:	3b01      	subs	r3, #1
 8009060:	b2da      	uxtb	r2, r3
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	60fb      	str	r3, [r7, #12]
 8009070:	e008      	b.n	8009084 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800907c:	68b9      	ldr	r1, [r7, #8]
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f000 f80a 	bl	8009098 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d1e3      	bne.n	8009052 <ip_reass_tmr+0x12>
    }
  }
}
 800908a:	bf00      	nop
 800908c:	bf00      	nop
 800908e:	3710      	adds	r7, #16
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}
 8009094:	2400a454 	.word	0x2400a454

08009098 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b088      	sub	sp, #32
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
 80090a0:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80090a2:	2300      	movs	r3, #0
 80090a4:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80090a6:	683a      	ldr	r2, [r7, #0]
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	429a      	cmp	r2, r3
 80090ac:	d102      	bne.n	80090b4 <ip_reass_free_complete_datagram+0x1c>
 80090ae:	483d      	ldr	r0, [pc, #244]	@ (80091a4 <ip_reass_free_complete_datagram+0x10c>)
 80090b0:	f000 ff30 	bl	8009f14 <iprintf>
  if (prev != NULL) {
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d007      	beq.n	80090ca <ip_reass_free_complete_datagram+0x32>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	687a      	ldr	r2, [r7, #4]
 80090c0:	429a      	cmp	r2, r3
 80090c2:	d002      	beq.n	80090ca <ip_reass_free_complete_datagram+0x32>
 80090c4:	4838      	ldr	r0, [pc, #224]	@ (80091a8 <ip_reass_free_complete_datagram+0x110>)
 80090c6:	f000 ff25 	bl	8009f14 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	685b      	ldr	r3, [r3, #4]
 80090ce:	685b      	ldr	r3, [r3, #4]
 80090d0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	889b      	ldrh	r3, [r3, #4]
 80090d6:	b29b      	uxth	r3, r3
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d127      	bne.n	800912c <ip_reass_free_complete_datagram+0x94>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	685b      	ldr	r3, [r3, #4]
 80090e0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	681a      	ldr	r2, [r3, #0]
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80090ea:	69bb      	ldr	r3, [r7, #24]
 80090ec:	6858      	ldr	r0, [r3, #4]
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	3308      	adds	r3, #8
 80090f2:	2214      	movs	r2, #20
 80090f4:	4619      	mov	r1, r3
 80090f6:	f000 ffee 	bl	800a0d6 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80090fa:	2101      	movs	r1, #1
 80090fc:	69b8      	ldr	r0, [r7, #24]
 80090fe:	f7ff fbdb 	bl	80088b8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8009102:	69b8      	ldr	r0, [r7, #24]
 8009104:	f7f9 fba0 	bl	8002848 <pbuf_clen>
 8009108:	4603      	mov	r3, r0
 800910a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800910c:	8bfa      	ldrh	r2, [r7, #30]
 800910e:	8a7b      	ldrh	r3, [r7, #18]
 8009110:	4413      	add	r3, r2
 8009112:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009116:	db02      	blt.n	800911e <ip_reass_free_complete_datagram+0x86>
 8009118:	4824      	ldr	r0, [pc, #144]	@ (80091ac <ip_reass_free_complete_datagram+0x114>)
 800911a:	f000 fefb 	bl	8009f14 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800911e:	8bfa      	ldrh	r2, [r7, #30]
 8009120:	8a7b      	ldrh	r3, [r7, #18]
 8009122:	4413      	add	r3, r2
 8009124:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8009126:	69b8      	ldr	r0, [r7, #24]
 8009128:	f7f9 fb1a 	bl	8002760 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	685b      	ldr	r3, [r3, #4]
 8009130:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8009132:	e01c      	b.n	800916e <ip_reass_free_complete_datagram+0xd6>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8009134:	69bb      	ldr	r3, [r7, #24]
 8009136:	685b      	ldr	r3, [r3, #4]
 8009138:	617b      	str	r3, [r7, #20]
    pcur = p;
 800913a:	69bb      	ldr	r3, [r7, #24]
 800913c:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8009144:	68f8      	ldr	r0, [r7, #12]
 8009146:	f7f9 fb7f 	bl	8002848 <pbuf_clen>
 800914a:	4603      	mov	r3, r0
 800914c:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800914e:	8bfa      	ldrh	r2, [r7, #30]
 8009150:	8a7b      	ldrh	r3, [r7, #18]
 8009152:	4413      	add	r3, r2
 8009154:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009158:	db02      	blt.n	8009160 <ip_reass_free_complete_datagram+0xc8>
 800915a:	4814      	ldr	r0, [pc, #80]	@ (80091ac <ip_reass_free_complete_datagram+0x114>)
 800915c:	f000 feda 	bl	8009f14 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8009160:	8bfa      	ldrh	r2, [r7, #30]
 8009162:	8a7b      	ldrh	r3, [r7, #18]
 8009164:	4413      	add	r3, r2
 8009166:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8009168:	68f8      	ldr	r0, [r7, #12]
 800916a:	f7f9 faf9 	bl	8002760 <pbuf_free>
  while (p != NULL) {
 800916e:	69bb      	ldr	r3, [r7, #24]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d1df      	bne.n	8009134 <ip_reass_free_complete_datagram+0x9c>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8009174:	6839      	ldr	r1, [r7, #0]
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f000 f8ba 	bl	80092f0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800917c:	4b0c      	ldr	r3, [pc, #48]	@ (80091b0 <ip_reass_free_complete_datagram+0x118>)
 800917e:	881b      	ldrh	r3, [r3, #0]
 8009180:	8bfa      	ldrh	r2, [r7, #30]
 8009182:	429a      	cmp	r2, r3
 8009184:	d902      	bls.n	800918c <ip_reass_free_complete_datagram+0xf4>
 8009186:	480b      	ldr	r0, [pc, #44]	@ (80091b4 <ip_reass_free_complete_datagram+0x11c>)
 8009188:	f000 fec4 	bl	8009f14 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800918c:	4b08      	ldr	r3, [pc, #32]	@ (80091b0 <ip_reass_free_complete_datagram+0x118>)
 800918e:	881a      	ldrh	r2, [r3, #0]
 8009190:	8bfb      	ldrh	r3, [r7, #30]
 8009192:	1ad3      	subs	r3, r2, r3
 8009194:	b29a      	uxth	r2, r3
 8009196:	4b06      	ldr	r3, [pc, #24]	@ (80091b0 <ip_reass_free_complete_datagram+0x118>)
 8009198:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800919a:	8bfb      	ldrh	r3, [r7, #30]
}
 800919c:	4618      	mov	r0, r3
 800919e:	3720      	adds	r7, #32
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}
 80091a4:	0800c6b8 	.word	0x0800c6b8
 80091a8:	0800c6c4 	.word	0x0800c6c4
 80091ac:	0800c6d8 	.word	0x0800c6d8
 80091b0:	2400a458 	.word	0x2400a458
 80091b4:	0800c6f8 	.word	0x0800c6f8

080091b8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b08a      	sub	sp, #40	@ 0x28
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
 80091c0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80091c2:	2300      	movs	r3, #0
 80091c4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80091c6:	2300      	movs	r3, #0
 80091c8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80091ca:	2300      	movs	r3, #0
 80091cc:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80091ce:	2300      	movs	r3, #0
 80091d0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80091d2:	2300      	movs	r3, #0
 80091d4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80091d6:	4b28      	ldr	r3, [pc, #160]	@ (8009278 <ip_reass_remove_oldest_datagram+0xc0>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 80091dc:	e030      	b.n	8009240 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80091de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091e0:	695a      	ldr	r2, [r3, #20]
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	68db      	ldr	r3, [r3, #12]
 80091e6:	429a      	cmp	r2, r3
 80091e8:	d10c      	bne.n	8009204 <ip_reass_remove_oldest_datagram+0x4c>
 80091ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091ec:	699a      	ldr	r2, [r3, #24]
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	691b      	ldr	r3, [r3, #16]
 80091f2:	429a      	cmp	r2, r3
 80091f4:	d106      	bne.n	8009204 <ip_reass_remove_oldest_datagram+0x4c>
 80091f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091f8:	899a      	ldrh	r2, [r3, #12]
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	889b      	ldrh	r3, [r3, #4]
 80091fe:	b29b      	uxth	r3, r3
 8009200:	429a      	cmp	r2, r3
 8009202:	d014      	beq.n	800922e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8009204:	693b      	ldr	r3, [r7, #16]
 8009206:	3301      	adds	r3, #1
 8009208:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800920a:	6a3b      	ldr	r3, [r7, #32]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d104      	bne.n	800921a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8009210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009212:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8009214:	69fb      	ldr	r3, [r7, #28]
 8009216:	61bb      	str	r3, [r7, #24]
 8009218:	e009      	b.n	800922e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800921a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800921c:	7fda      	ldrb	r2, [r3, #31]
 800921e:	6a3b      	ldr	r3, [r7, #32]
 8009220:	7fdb      	ldrb	r3, [r3, #31]
 8009222:	429a      	cmp	r2, r3
 8009224:	d803      	bhi.n	800922e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8009226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009228:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800922a:	69fb      	ldr	r3, [r7, #28]
 800922c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800922e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d001      	beq.n	800923a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8009236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009238:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800923a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8009240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009242:	2b00      	cmp	r3, #0
 8009244:	d1cb      	bne.n	80091de <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8009246:	6a3b      	ldr	r3, [r7, #32]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d008      	beq.n	800925e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800924c:	69b9      	ldr	r1, [r7, #24]
 800924e:	6a38      	ldr	r0, [r7, #32]
 8009250:	f7ff ff22 	bl	8009098 <ip_reass_free_complete_datagram>
 8009254:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8009256:	697a      	ldr	r2, [r7, #20]
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	4413      	add	r3, r2
 800925c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800925e:	697a      	ldr	r2, [r7, #20]
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	429a      	cmp	r2, r3
 8009264:	da02      	bge.n	800926c <ip_reass_remove_oldest_datagram+0xb4>
 8009266:	693b      	ldr	r3, [r7, #16]
 8009268:	2b01      	cmp	r3, #1
 800926a:	dcac      	bgt.n	80091c6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800926c:	697b      	ldr	r3, [r7, #20]
}
 800926e:	4618      	mov	r0, r3
 8009270:	3728      	adds	r7, #40	@ 0x28
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}
 8009276:	bf00      	nop
 8009278:	2400a454 	.word	0x2400a454

0800927c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b084      	sub	sp, #16
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
 8009284:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8009286:	2004      	movs	r0, #4
 8009288:	f7f8 fcd2 	bl	8001c30 <memp_malloc>
 800928c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d110      	bne.n	80092b6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8009294:	6839      	ldr	r1, [r7, #0]
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f7ff ff8e 	bl	80091b8 <ip_reass_remove_oldest_datagram>
 800929c:	4602      	mov	r2, r0
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	4293      	cmp	r3, r2
 80092a2:	dc03      	bgt.n	80092ac <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80092a4:	2004      	movs	r0, #4
 80092a6:	f7f8 fcc3 	bl	8001c30 <memp_malloc>
 80092aa:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d101      	bne.n	80092b6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80092b2:	2300      	movs	r3, #0
 80092b4:	e016      	b.n	80092e4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80092b6:	2220      	movs	r2, #32
 80092b8:	2100      	movs	r1, #0
 80092ba:	68f8      	ldr	r0, [r7, #12]
 80092bc:	f000 fe8f 	bl	8009fde <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	220f      	movs	r2, #15
 80092c4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80092c6:	4b09      	ldr	r3, [pc, #36]	@ (80092ec <ip_reass_enqueue_new_datagram+0x70>)
 80092c8:	681a      	ldr	r2, [r3, #0]
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80092ce:	4a07      	ldr	r2, [pc, #28]	@ (80092ec <ip_reass_enqueue_new_datagram+0x70>)
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	3308      	adds	r3, #8
 80092d8:	2214      	movs	r2, #20
 80092da:	6879      	ldr	r1, [r7, #4]
 80092dc:	4618      	mov	r0, r3
 80092de:	f000 fefa 	bl	800a0d6 <memcpy>
  return ipr;
 80092e2:	68fb      	ldr	r3, [r7, #12]
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3710      	adds	r7, #16
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}
 80092ec:	2400a454 	.word	0x2400a454

080092f0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b082      	sub	sp, #8
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
 80092f8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80092fa:	4b0e      	ldr	r3, [pc, #56]	@ (8009334 <ip_reass_dequeue_datagram+0x44>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	687a      	ldr	r2, [r7, #4]
 8009300:	429a      	cmp	r2, r3
 8009302:	d104      	bne.n	800930e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	4a0a      	ldr	r2, [pc, #40]	@ (8009334 <ip_reass_dequeue_datagram+0x44>)
 800930a:	6013      	str	r3, [r2, #0]
 800930c:	e009      	b.n	8009322 <ip_reass_dequeue_datagram+0x32>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d102      	bne.n	800931a <ip_reass_dequeue_datagram+0x2a>
 8009314:	4808      	ldr	r0, [pc, #32]	@ (8009338 <ip_reass_dequeue_datagram+0x48>)
 8009316:	f000 fdfd 	bl	8009f14 <iprintf>
    prev->next = ipr->next;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681a      	ldr	r2, [r3, #0]
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8009322:	6879      	ldr	r1, [r7, #4]
 8009324:	2004      	movs	r0, #4
 8009326:	f7f8 fcbb 	bl	8001ca0 <memp_free>
}
 800932a:	bf00      	nop
 800932c:	3708      	adds	r7, #8
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}
 8009332:	bf00      	nop
 8009334:	2400a454 	.word	0x2400a454
 8009338:	0800c71c 	.word	0x0800c71c

0800933c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b08c      	sub	sp, #48	@ 0x30
 8009340:	af00      	add	r7, sp, #0
 8009342:	60f8      	str	r0, [r7, #12]
 8009344:	60b9      	str	r1, [r7, #8]
 8009346:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8009348:	2300      	movs	r3, #0
 800934a:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800934c:	2301      	movs	r3, #1
 800934e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	685b      	ldr	r3, [r3, #4]
 8009354:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8009356:	69fb      	ldr	r3, [r7, #28]
 8009358:	885b      	ldrh	r3, [r3, #2]
 800935a:	b29b      	uxth	r3, r3
 800935c:	4618      	mov	r0, r3
 800935e:	f7f7 fef5 	bl	800114c <lwip_htons>
 8009362:	4603      	mov	r3, r0
 8009364:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8009366:	69fb      	ldr	r3, [r7, #28]
 8009368:	781b      	ldrb	r3, [r3, #0]
 800936a:	f003 030f 	and.w	r3, r3, #15
 800936e:	b2db      	uxtb	r3, r3
 8009370:	009b      	lsls	r3, r3, #2
 8009372:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8009374:	7e7b      	ldrb	r3, [r7, #25]
 8009376:	b29b      	uxth	r3, r3
 8009378:	8b7a      	ldrh	r2, [r7, #26]
 800937a:	429a      	cmp	r2, r3
 800937c:	d202      	bcs.n	8009384 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800937e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009382:	e121      	b.n	80095c8 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
  }
  len = (u16_t)(len - hlen);
 8009384:	7e7b      	ldrb	r3, [r7, #25]
 8009386:	b29b      	uxth	r3, r3
 8009388:	8b7a      	ldrh	r2, [r7, #26]
 800938a:	1ad3      	subs	r3, r2, r3
 800938c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800938e:	69fb      	ldr	r3, [r7, #28]
 8009390:	88db      	ldrh	r3, [r3, #6]
 8009392:	b29b      	uxth	r3, r3
 8009394:	4618      	mov	r0, r3
 8009396:	f7f7 fed9 	bl	800114c <lwip_htons>
 800939a:	4603      	mov	r3, r0
 800939c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80093a0:	b29b      	uxth	r3, r3
 80093a2:	00db      	lsls	r3, r3, #3
 80093a4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	685b      	ldr	r3, [r3, #4]
 80093aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 80093ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093ae:	2200      	movs	r2, #0
 80093b0:	701a      	strb	r2, [r3, #0]
 80093b2:	2200      	movs	r2, #0
 80093b4:	705a      	strb	r2, [r3, #1]
 80093b6:	2200      	movs	r2, #0
 80093b8:	709a      	strb	r2, [r3, #2]
 80093ba:	2200      	movs	r2, #0
 80093bc:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80093be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093c0:	8afa      	ldrh	r2, [r7, #22]
 80093c2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80093c4:	8afa      	ldrh	r2, [r7, #22]
 80093c6:	8b7b      	ldrh	r3, [r7, #26]
 80093c8:	4413      	add	r3, r2
 80093ca:	b29a      	uxth	r2, r3
 80093cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093ce:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80093d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093d2:	88db      	ldrh	r3, [r3, #6]
 80093d4:	b29b      	uxth	r3, r3
 80093d6:	8afa      	ldrh	r2, [r7, #22]
 80093d8:	429a      	cmp	r2, r3
 80093da:	d902      	bls.n	80093e2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80093dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80093e0:	e0f2      	b.n	80095c8 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	685b      	ldr	r3, [r3, #4]
 80093e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80093e8:	e068      	b.n	80094bc <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80093ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ec:	685b      	ldr	r3, [r3, #4]
 80093ee:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80093f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093f2:	889b      	ldrh	r3, [r3, #4]
 80093f4:	b29a      	uxth	r2, r3
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	889b      	ldrh	r3, [r3, #4]
 80093fa:	b29b      	uxth	r3, r3
 80093fc:	429a      	cmp	r2, r3
 80093fe:	d235      	bcs.n	800946c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8009400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009402:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009404:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8009406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009408:	2b00      	cmp	r3, #0
 800940a:	d020      	beq.n	800944e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800940c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800940e:	889b      	ldrh	r3, [r3, #4]
 8009410:	b29a      	uxth	r2, r3
 8009412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009414:	88db      	ldrh	r3, [r3, #6]
 8009416:	b29b      	uxth	r3, r3
 8009418:	429a      	cmp	r2, r3
 800941a:	d307      	bcc.n	800942c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800941c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800941e:	88db      	ldrh	r3, [r3, #6]
 8009420:	b29a      	uxth	r2, r3
 8009422:	693b      	ldr	r3, [r7, #16]
 8009424:	889b      	ldrh	r3, [r3, #4]
 8009426:	b29b      	uxth	r3, r3
 8009428:	429a      	cmp	r2, r3
 800942a:	d902      	bls.n	8009432 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800942c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009430:	e0ca      	b.n	80095c8 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8009432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009434:	68ba      	ldr	r2, [r7, #8]
 8009436:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8009438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800943a:	88db      	ldrh	r3, [r3, #6]
 800943c:	b29a      	uxth	r2, r3
 800943e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009440:	889b      	ldrh	r3, [r3, #4]
 8009442:	b29b      	uxth	r3, r3
 8009444:	429a      	cmp	r2, r3
 8009446:	d03d      	beq.n	80094c4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8009448:	2300      	movs	r3, #0
 800944a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800944c:	e03a      	b.n	80094c4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800944e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009450:	88db      	ldrh	r3, [r3, #6]
 8009452:	b29a      	uxth	r2, r3
 8009454:	693b      	ldr	r3, [r7, #16]
 8009456:	889b      	ldrh	r3, [r3, #4]
 8009458:	b29b      	uxth	r3, r3
 800945a:	429a      	cmp	r2, r3
 800945c:	d902      	bls.n	8009464 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800945e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009462:	e0b1      	b.n	80095c8 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
        ipr->p = new_p;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	68ba      	ldr	r2, [r7, #8]
 8009468:	605a      	str	r2, [r3, #4]
      break;
 800946a:	e02b      	b.n	80094c4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800946c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800946e:	889b      	ldrh	r3, [r3, #4]
 8009470:	b29a      	uxth	r2, r3
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	889b      	ldrh	r3, [r3, #4]
 8009476:	b29b      	uxth	r3, r3
 8009478:	429a      	cmp	r2, r3
 800947a:	d102      	bne.n	8009482 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800947c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009480:	e0a2      	b.n	80095c8 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8009482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009484:	889b      	ldrh	r3, [r3, #4]
 8009486:	b29a      	uxth	r2, r3
 8009488:	693b      	ldr	r3, [r7, #16]
 800948a:	88db      	ldrh	r3, [r3, #6]
 800948c:	b29b      	uxth	r3, r3
 800948e:	429a      	cmp	r2, r3
 8009490:	d202      	bcs.n	8009498 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8009492:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009496:	e097      	b.n	80095c8 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8009498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800949a:	2b00      	cmp	r3, #0
 800949c:	d009      	beq.n	80094b2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800949e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094a0:	88db      	ldrh	r3, [r3, #6]
 80094a2:	b29a      	uxth	r2, r3
 80094a4:	693b      	ldr	r3, [r7, #16]
 80094a6:	889b      	ldrh	r3, [r3, #4]
 80094a8:	b29b      	uxth	r3, r3
 80094aa:	429a      	cmp	r2, r3
 80094ac:	d001      	beq.n	80094b2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80094ae:	2300      	movs	r3, #0
 80094b0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80094b2:	693b      	ldr	r3, [r7, #16]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 80094b8:	693b      	ldr	r3, [r7, #16]
 80094ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 80094bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d193      	bne.n	80093ea <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80094c2:	e000      	b.n	80094c6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80094c4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80094c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d125      	bne.n	8009518 <ip_reass_chain_frag_into_datagram_and_validate+0x1dc>
    if (iprh_prev != NULL) {
 80094cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d018      	beq.n	8009504 <ip_reass_chain_frag_into_datagram_and_validate+0x1c8>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80094d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094d4:	88db      	ldrh	r3, [r3, #6]
 80094d6:	b29a      	uxth	r2, r3
 80094d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094da:	889b      	ldrh	r3, [r3, #4]
 80094dc:	b29b      	uxth	r3, r3
 80094de:	429a      	cmp	r2, r3
 80094e0:	d902      	bls.n	80094e8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ac>
 80094e2:	483b      	ldr	r0, [pc, #236]	@ (80095d0 <ip_reass_chain_frag_into_datagram_and_validate+0x294>)
 80094e4:	f000 fd16 	bl	8009f14 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80094e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094ea:	68ba      	ldr	r2, [r7, #8]
 80094ec:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80094ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094f0:	88db      	ldrh	r3, [r3, #6]
 80094f2:	b29a      	uxth	r2, r3
 80094f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094f6:	889b      	ldrh	r3, [r3, #4]
 80094f8:	b29b      	uxth	r3, r3
 80094fa:	429a      	cmp	r2, r3
 80094fc:	d00c      	beq.n	8009518 <ip_reass_chain_frag_into_datagram_and_validate+0x1dc>
        valid = 0;
 80094fe:	2300      	movs	r3, #0
 8009500:	623b      	str	r3, [r7, #32]
 8009502:	e009      	b.n	8009518 <ip_reass_chain_frag_into_datagram_and_validate+0x1dc>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	685b      	ldr	r3, [r3, #4]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d002      	beq.n	8009512 <ip_reass_chain_frag_into_datagram_and_validate+0x1d6>
 800950c:	4831      	ldr	r0, [pc, #196]	@ (80095d4 <ip_reass_chain_frag_into_datagram_and_validate+0x298>)
 800950e:	f000 fd01 	bl	8009f14 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	68ba      	ldr	r2, [r7, #8]
 8009516:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d105      	bne.n	800952a <ip_reass_chain_frag_into_datagram_and_validate+0x1ee>
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	7f9b      	ldrb	r3, [r3, #30]
 8009522:	f003 0301 	and.w	r3, r3, #1
 8009526:	2b00      	cmp	r3, #0
 8009528:	d04d      	beq.n	80095c6 <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
    /* and had no holes so far */
    if (valid) {
 800952a:	6a3b      	ldr	r3, [r7, #32]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d043      	beq.n	80095b8 <ip_reass_chain_frag_into_datagram_and_validate+0x27c>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	685b      	ldr	r3, [r3, #4]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d006      	beq.n	8009546 <ip_reass_chain_frag_into_datagram_and_validate+0x20a>
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	685b      	ldr	r3, [r3, #4]
 800953c:	685b      	ldr	r3, [r3, #4]
 800953e:	889b      	ldrh	r3, [r3, #4]
 8009540:	b29b      	uxth	r3, r3
 8009542:	2b00      	cmp	r3, #0
 8009544:	d002      	beq.n	800954c <ip_reass_chain_frag_into_datagram_and_validate+0x210>
        valid = 0;
 8009546:	2300      	movs	r3, #0
 8009548:	623b      	str	r3, [r7, #32]
 800954a:	e035      	b.n	80095b8 <ip_reass_chain_frag_into_datagram_and_validate+0x27c>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800954c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800954e:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8009550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8009556:	e012      	b.n	800957e <ip_reass_chain_frag_into_datagram_and_validate+0x242>
          iprh = (struct ip_reass_helper *)q->payload;
 8009558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800955a:	685b      	ldr	r3, [r3, #4]
 800955c:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 800955e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009560:	88db      	ldrh	r3, [r3, #6]
 8009562:	b29a      	uxth	r2, r3
 8009564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009566:	889b      	ldrh	r3, [r3, #4]
 8009568:	b29b      	uxth	r3, r3
 800956a:	429a      	cmp	r2, r3
 800956c:	d002      	beq.n	8009574 <ip_reass_chain_frag_into_datagram_and_validate+0x238>
            valid = 0;
 800956e:	2300      	movs	r3, #0
 8009570:	623b      	str	r3, [r7, #32]
            break;
 8009572:	e007      	b.n	8009584 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
          }
          iprh_prev = iprh;
 8009574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009576:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8009578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800957e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009580:	2b00      	cmp	r3, #0
 8009582:	d1e9      	bne.n	8009558 <ip_reass_chain_frag_into_datagram_and_validate+0x21c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8009584:	6a3b      	ldr	r3, [r7, #32]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d016      	beq.n	80095b8 <ip_reass_chain_frag_into_datagram_and_validate+0x27c>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	685b      	ldr	r3, [r3, #4]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d102      	bne.n	8009598 <ip_reass_chain_frag_into_datagram_and_validate+0x25c>
 8009592:	4811      	ldr	r0, [pc, #68]	@ (80095d8 <ip_reass_chain_frag_into_datagram_and_validate+0x29c>)
 8009594:	f000 fcbe 	bl	8009f14 <iprintf>
          LWIP_ASSERT("sanity check",
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	685b      	ldr	r3, [r3, #4]
 800959c:	685b      	ldr	r3, [r3, #4]
 800959e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80095a0:	429a      	cmp	r2, r3
 80095a2:	d102      	bne.n	80095aa <ip_reass_chain_frag_into_datagram_and_validate+0x26e>
 80095a4:	480c      	ldr	r0, [pc, #48]	@ (80095d8 <ip_reass_chain_frag_into_datagram_and_validate+0x29c>)
 80095a6:	f000 fcb5 	bl	8009f14 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80095aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d002      	beq.n	80095b8 <ip_reass_chain_frag_into_datagram_and_validate+0x27c>
 80095b2:	480a      	ldr	r0, [pc, #40]	@ (80095dc <ip_reass_chain_frag_into_datagram_and_validate+0x2a0>)
 80095b4:	f000 fcae 	bl	8009f14 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80095b8:	6a3b      	ldr	r3, [r7, #32]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	bf14      	ite	ne
 80095be:	2301      	movne	r3, #1
 80095c0:	2300      	moveq	r3, #0
 80095c2:	b2db      	uxtb	r3, r3
 80095c4:	e000      	b.n	80095c8 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80095c6:	2300      	movs	r3, #0
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	3730      	adds	r7, #48	@ 0x30
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}
 80095d0:	0800c738 	.word	0x0800c738
 80095d4:	0800c758 	.word	0x0800c758
 80095d8:	0800c790 	.word	0x0800c790
 80095dc:	0800c7a0 	.word	0x0800c7a0

080095e0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b08e      	sub	sp, #56	@ 0x38
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	685b      	ldr	r3, [r3, #4]
 80095ec:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80095ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095f0:	781b      	ldrb	r3, [r3, #0]
 80095f2:	f003 030f 	and.w	r3, r3, #15
 80095f6:	b2db      	uxtb	r3, r3
 80095f8:	009b      	lsls	r3, r3, #2
 80095fa:	b2db      	uxtb	r3, r3
 80095fc:	2b14      	cmp	r3, #20
 80095fe:	f040 816d 	bne.w	80098dc <ip4_reass+0x2fc>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8009602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009604:	88db      	ldrh	r3, [r3, #6]
 8009606:	b29b      	uxth	r3, r3
 8009608:	4618      	mov	r0, r3
 800960a:	f7f7 fd9f 	bl	800114c <lwip_htons>
 800960e:	4603      	mov	r3, r0
 8009610:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009614:	b29b      	uxth	r3, r3
 8009616:	00db      	lsls	r3, r3, #3
 8009618:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800961a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800961c:	885b      	ldrh	r3, [r3, #2]
 800961e:	b29b      	uxth	r3, r3
 8009620:	4618      	mov	r0, r3
 8009622:	f7f7 fd93 	bl	800114c <lwip_htons>
 8009626:	4603      	mov	r3, r0
 8009628:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800962a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800962c:	781b      	ldrb	r3, [r3, #0]
 800962e:	f003 030f 	and.w	r3, r3, #15
 8009632:	b2db      	uxtb	r3, r3
 8009634:	009b      	lsls	r3, r3, #2
 8009636:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 800963a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800963e:	b29b      	uxth	r3, r3
 8009640:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009642:	429a      	cmp	r2, r3
 8009644:	f0c0 814c 	bcc.w	80098e0 <ip4_reass+0x300>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8009648:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800964c:	b29b      	uxth	r3, r3
 800964e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009650:	1ad3      	subs	r3, r2, r3
 8009652:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8009654:	6878      	ldr	r0, [r7, #4]
 8009656:	f7f9 f8f7 	bl	8002848 <pbuf_clen>
 800965a:	4603      	mov	r3, r0
 800965c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800965e:	4b9a      	ldr	r3, [pc, #616]	@ (80098c8 <ip4_reass+0x2e8>)
 8009660:	881b      	ldrh	r3, [r3, #0]
 8009662:	461a      	mov	r2, r3
 8009664:	8c3b      	ldrh	r3, [r7, #32]
 8009666:	4413      	add	r3, r2
 8009668:	2b0a      	cmp	r3, #10
 800966a:	dd10      	ble.n	800968e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800966c:	8c3b      	ldrh	r3, [r7, #32]
 800966e:	4619      	mov	r1, r3
 8009670:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009672:	f7ff fda1 	bl	80091b8 <ip_reass_remove_oldest_datagram>
 8009676:	4603      	mov	r3, r0
 8009678:	2b00      	cmp	r3, #0
 800967a:	f000 8133 	beq.w	80098e4 <ip4_reass+0x304>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800967e:	4b92      	ldr	r3, [pc, #584]	@ (80098c8 <ip4_reass+0x2e8>)
 8009680:	881b      	ldrh	r3, [r3, #0]
 8009682:	461a      	mov	r2, r3
 8009684:	8c3b      	ldrh	r3, [r7, #32]
 8009686:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8009688:	2b0a      	cmp	r3, #10
 800968a:	f300 812b 	bgt.w	80098e4 <ip4_reass+0x304>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800968e:	4b8f      	ldr	r3, [pc, #572]	@ (80098cc <ip4_reass+0x2ec>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	633b      	str	r3, [r7, #48]	@ 0x30
 8009694:	e015      	b.n	80096c2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8009696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009698:	695a      	ldr	r2, [r3, #20]
 800969a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800969c:	68db      	ldr	r3, [r3, #12]
 800969e:	429a      	cmp	r2, r3
 80096a0:	d10c      	bne.n	80096bc <ip4_reass+0xdc>
 80096a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096a4:	699a      	ldr	r2, [r3, #24]
 80096a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096a8:	691b      	ldr	r3, [r3, #16]
 80096aa:	429a      	cmp	r2, r3
 80096ac:	d106      	bne.n	80096bc <ip4_reass+0xdc>
 80096ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096b0:	899a      	ldrh	r2, [r3, #12]
 80096b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096b4:	889b      	ldrh	r3, [r3, #4]
 80096b6:	b29b      	uxth	r3, r3
 80096b8:	429a      	cmp	r2, r3
 80096ba:	d006      	beq.n	80096ca <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80096bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80096c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d1e6      	bne.n	8009696 <ip4_reass+0xb6>
 80096c8:	e000      	b.n	80096cc <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80096ca:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80096cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d109      	bne.n	80096e6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80096d2:	8c3b      	ldrh	r3, [r7, #32]
 80096d4:	4619      	mov	r1, r3
 80096d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80096d8:	f7ff fdd0 	bl	800927c <ip_reass_enqueue_new_datagram>
 80096dc:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80096de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d11c      	bne.n	800971e <ip4_reass+0x13e>
      goto nullreturn;
 80096e4:	e101      	b.n	80098ea <ip4_reass+0x30a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80096e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096e8:	88db      	ldrh	r3, [r3, #6]
 80096ea:	b29b      	uxth	r3, r3
 80096ec:	4618      	mov	r0, r3
 80096ee:	f7f7 fd2d 	bl	800114c <lwip_htons>
 80096f2:	4603      	mov	r3, r0
 80096f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d110      	bne.n	800971e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80096fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096fe:	89db      	ldrh	r3, [r3, #14]
 8009700:	4618      	mov	r0, r3
 8009702:	f7f7 fd23 	bl	800114c <lwip_htons>
 8009706:	4603      	mov	r3, r0
 8009708:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800970c:	2b00      	cmp	r3, #0
 800970e:	d006      	beq.n	800971e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8009710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009712:	3308      	adds	r3, #8
 8009714:	2214      	movs	r2, #20
 8009716:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009718:	4618      	mov	r0, r3
 800971a:	f000 fcdc 	bl	800a0d6 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800971e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009720:	88db      	ldrh	r3, [r3, #6]
 8009722:	b29b      	uxth	r3, r3
 8009724:	f003 0320 	and.w	r3, r3, #32
 8009728:	2b00      	cmp	r3, #0
 800972a:	bf0c      	ite	eq
 800972c:	2301      	moveq	r3, #1
 800972e:	2300      	movne	r3, #0
 8009730:	b2db      	uxtb	r3, r3
 8009732:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8009734:	69fb      	ldr	r3, [r7, #28]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d00e      	beq.n	8009758 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800973a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800973c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800973e:	4413      	add	r3, r2
 8009740:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8009742:	8b7a      	ldrh	r2, [r7, #26]
 8009744:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009746:	429a      	cmp	r2, r3
 8009748:	f0c0 80a4 	bcc.w	8009894 <ip4_reass+0x2b4>
 800974c:	8b7b      	ldrh	r3, [r7, #26]
 800974e:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8009752:	4293      	cmp	r3, r2
 8009754:	f200 809e 	bhi.w	8009894 <ip4_reass+0x2b4>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8009758:	69fa      	ldr	r2, [r7, #28]
 800975a:	6879      	ldr	r1, [r7, #4]
 800975c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800975e:	f7ff fded 	bl	800933c <ip_reass_chain_frag_into_datagram_and_validate>
 8009762:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8009764:	697b      	ldr	r3, [r7, #20]
 8009766:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800976a:	f000 8095 	beq.w	8009898 <ip4_reass+0x2b8>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800976e:	4b56      	ldr	r3, [pc, #344]	@ (80098c8 <ip4_reass+0x2e8>)
 8009770:	881a      	ldrh	r2, [r3, #0]
 8009772:	8c3b      	ldrh	r3, [r7, #32]
 8009774:	4413      	add	r3, r2
 8009776:	b29a      	uxth	r2, r3
 8009778:	4b53      	ldr	r3, [pc, #332]	@ (80098c8 <ip4_reass+0x2e8>)
 800977a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800977c:	69fb      	ldr	r3, [r7, #28]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d00d      	beq.n	800979e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8009782:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8009784:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009786:	4413      	add	r3, r2
 8009788:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800978a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800978c:	8a7a      	ldrh	r2, [r7, #18]
 800978e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8009790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009792:	7f9b      	ldrb	r3, [r3, #30]
 8009794:	f043 0301 	orr.w	r3, r3, #1
 8009798:	b2da      	uxtb	r2, r3
 800979a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800979c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800979e:	697b      	ldr	r3, [r7, #20]
 80097a0:	2b01      	cmp	r3, #1
 80097a2:	d175      	bne.n	8009890 <ip4_reass+0x2b0>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80097a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097a6:	8b9b      	ldrh	r3, [r3, #28]
 80097a8:	3314      	adds	r3, #20
 80097aa:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80097ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097ae:	685b      	ldr	r3, [r3, #4]
 80097b0:	685b      	ldr	r3, [r3, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80097b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097b8:	685b      	ldr	r3, [r3, #4]
 80097ba:	685b      	ldr	r3, [r3, #4]
 80097bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80097be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097c0:	3308      	adds	r3, #8
 80097c2:	2214      	movs	r2, #20
 80097c4:	4619      	mov	r1, r3
 80097c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80097c8:	f000 fc85 	bl	800a0d6 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80097cc:	8a3b      	ldrh	r3, [r7, #16]
 80097ce:	4618      	mov	r0, r3
 80097d0:	f7f7 fcbc 	bl	800114c <lwip_htons>
 80097d4:	4603      	mov	r3, r0
 80097d6:	461a      	mov	r2, r3
 80097d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097da:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80097dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097de:	2200      	movs	r2, #0
 80097e0:	719a      	strb	r2, [r3, #6]
 80097e2:	2200      	movs	r2, #0
 80097e4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80097e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097e8:	2200      	movs	r2, #0
 80097ea:	729a      	strb	r2, [r3, #10]
 80097ec:	2200      	movs	r2, #0
 80097ee:	72da      	strb	r2, [r3, #11]
    /* @todo: do we need to set/calculate the correct checksum? */
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 80097f0:	2114      	movs	r1, #20
 80097f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80097f4:	f7f7 fdf2 	bl	80013dc <inet_chksum>
 80097f8:	4603      	mov	r3, r0
 80097fa:	461a      	mov	r2, r3
 80097fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097fe:	815a      	strh	r2, [r3, #10]
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8009800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009802:	685b      	ldr	r3, [r3, #4]
 8009804:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8009806:	e00d      	b.n	8009824 <ip4_reass+0x244>
      iprh = (struct ip_reass_helper *)r->payload;
 8009808:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800980a:	685b      	ldr	r3, [r3, #4]
 800980c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800980e:	2114      	movs	r1, #20
 8009810:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8009812:	f7f8 ff31 	bl	8002678 <pbuf_remove_header>
      pbuf_cat(p, r);
 8009816:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	f7f9 f847 	bl	80028ac <pbuf_cat>
      r = iprh->next_pbuf;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8009824:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009826:	2b00      	cmp	r3, #0
 8009828:	d1ee      	bne.n	8009808 <ip4_reass+0x228>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800982a:	4b28      	ldr	r3, [pc, #160]	@ (80098cc <ip4_reass+0x2ec>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009830:	429a      	cmp	r2, r3
 8009832:	d102      	bne.n	800983a <ip4_reass+0x25a>
      ipr_prev = NULL;
 8009834:	2300      	movs	r3, #0
 8009836:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009838:	e010      	b.n	800985c <ip4_reass+0x27c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800983a:	4b24      	ldr	r3, [pc, #144]	@ (80098cc <ip4_reass+0x2ec>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009840:	e007      	b.n	8009852 <ip4_reass+0x272>
        if (ipr_prev->next == ipr) {
 8009842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009848:	429a      	cmp	r2, r3
 800984a:	d006      	beq.n	800985a <ip4_reass+0x27a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800984c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009854:	2b00      	cmp	r3, #0
 8009856:	d1f4      	bne.n	8009842 <ip4_reass+0x262>
 8009858:	e000      	b.n	800985c <ip4_reass+0x27c>
          break;
 800985a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800985c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800985e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009860:	f7ff fd46 	bl	80092f0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f7f8 ffef 	bl	8002848 <pbuf_clen>
 800986a:	4603      	mov	r3, r0
 800986c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800986e:	4b16      	ldr	r3, [pc, #88]	@ (80098c8 <ip4_reass+0x2e8>)
 8009870:	881b      	ldrh	r3, [r3, #0]
 8009872:	8c3a      	ldrh	r2, [r7, #32]
 8009874:	429a      	cmp	r2, r3
 8009876:	d902      	bls.n	800987e <ip4_reass+0x29e>
 8009878:	4815      	ldr	r0, [pc, #84]	@ (80098d0 <ip4_reass+0x2f0>)
 800987a:	f000 fb4b 	bl	8009f14 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800987e:	4b12      	ldr	r3, [pc, #72]	@ (80098c8 <ip4_reass+0x2e8>)
 8009880:	881a      	ldrh	r2, [r3, #0]
 8009882:	8c3b      	ldrh	r3, [r7, #32]
 8009884:	1ad3      	subs	r3, r2, r3
 8009886:	b29a      	uxth	r2, r3
 8009888:	4b0f      	ldr	r3, [pc, #60]	@ (80098c8 <ip4_reass+0x2e8>)
 800988a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	e030      	b.n	80098f2 <ip4_reass+0x312>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8009890:	2300      	movs	r3, #0
 8009892:	e02e      	b.n	80098f2 <ip4_reass+0x312>
      goto nullreturn_ipr;
 8009894:	bf00      	nop
 8009896:	e000      	b.n	800989a <ip4_reass+0x2ba>
    goto nullreturn_ipr;
 8009898:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800989a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800989c:	2b00      	cmp	r3, #0
 800989e:	d102      	bne.n	80098a6 <ip4_reass+0x2c6>
 80098a0:	480c      	ldr	r0, [pc, #48]	@ (80098d4 <ip4_reass+0x2f4>)
 80098a2:	f000 fb37 	bl	8009f14 <iprintf>
  if (ipr->p == NULL) {
 80098a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098a8:	685b      	ldr	r3, [r3, #4]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d11c      	bne.n	80098e8 <ip4_reass+0x308>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80098ae:	4b07      	ldr	r3, [pc, #28]	@ (80098cc <ip4_reass+0x2ec>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80098b4:	429a      	cmp	r2, r3
 80098b6:	d002      	beq.n	80098be <ip4_reass+0x2de>
 80098b8:	4807      	ldr	r0, [pc, #28]	@ (80098d8 <ip4_reass+0x2f8>)
 80098ba:	f000 fb2b 	bl	8009f14 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80098be:	2100      	movs	r1, #0
 80098c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80098c2:	f7ff fd15 	bl	80092f0 <ip_reass_dequeue_datagram>
 80098c6:	e010      	b.n	80098ea <ip4_reass+0x30a>
 80098c8:	2400a458 	.word	0x2400a458
 80098cc:	2400a454 	.word	0x2400a454
 80098d0:	0800c7c4 	.word	0x0800c7c4
 80098d4:	0800c7e0 	.word	0x0800c7e0
 80098d8:	0800c7ec 	.word	0x0800c7ec
    goto nullreturn;
 80098dc:	bf00      	nop
 80098de:	e004      	b.n	80098ea <ip4_reass+0x30a>
    goto nullreturn;
 80098e0:	bf00      	nop
 80098e2:	e002      	b.n	80098ea <ip4_reass+0x30a>
      goto nullreturn;
 80098e4:	bf00      	nop
 80098e6:	e000      	b.n	80098ea <ip4_reass+0x30a>
  }

nullreturn:
 80098e8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f7f8 ff38 	bl	8002760 <pbuf_free>
  return NULL;
 80098f0:	2300      	movs	r3, #0
}
 80098f2:	4618      	mov	r0, r3
 80098f4:	3738      	adds	r7, #56	@ 0x38
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}
 80098fa:	bf00      	nop

080098fc <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8009900:	2005      	movs	r0, #5
 8009902:	f7f8 f995 	bl	8001c30 <memp_malloc>
 8009906:	4603      	mov	r3, r0
}
 8009908:	4618      	mov	r0, r3
 800990a:	bd80      	pop	{r7, pc}

0800990c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b082      	sub	sp, #8
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d102      	bne.n	8009920 <ip_frag_free_pbuf_custom_ref+0x14>
 800991a:	4805      	ldr	r0, [pc, #20]	@ (8009930 <ip_frag_free_pbuf_custom_ref+0x24>)
 800991c:	f000 fafa 	bl	8009f14 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8009920:	6879      	ldr	r1, [r7, #4]
 8009922:	2005      	movs	r0, #5
 8009924:	f7f8 f9bc 	bl	8001ca0 <memp_free>
}
 8009928:	bf00      	nop
 800992a:	3708      	adds	r7, #8
 800992c:	46bd      	mov	sp, r7
 800992e:	bd80      	pop	{r7, pc}
 8009930:	0800c80c 	.word	0x0800c80c

08009934 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b084      	sub	sp, #16
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d102      	bne.n	800994c <ipfrag_free_pbuf_custom+0x18>
 8009946:	480d      	ldr	r0, [pc, #52]	@ (800997c <ipfrag_free_pbuf_custom+0x48>)
 8009948:	f000 fae4 	bl	8009f14 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800994c:	68fa      	ldr	r2, [r7, #12]
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	429a      	cmp	r2, r3
 8009952:	d002      	beq.n	800995a <ipfrag_free_pbuf_custom+0x26>
 8009954:	480a      	ldr	r0, [pc, #40]	@ (8009980 <ipfrag_free_pbuf_custom+0x4c>)
 8009956:	f000 fadd 	bl	8009f14 <iprintf>
  if (pcr->original != NULL) {
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	695b      	ldr	r3, [r3, #20]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d004      	beq.n	800996c <ipfrag_free_pbuf_custom+0x38>
    pbuf_free(pcr->original);
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	695b      	ldr	r3, [r3, #20]
 8009966:	4618      	mov	r0, r3
 8009968:	f7f8 fefa 	bl	8002760 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800996c:	68f8      	ldr	r0, [r7, #12]
 800996e:	f7ff ffcd 	bl	800990c <ip_frag_free_pbuf_custom_ref>
}
 8009972:	bf00      	nop
 8009974:	3710      	adds	r7, #16
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}
 800997a:	bf00      	nop
 800997c:	0800c818 	.word	0x0800c818
 8009980:	0800c824 	.word	0x0800c824

08009984 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b094      	sub	sp, #80	@ 0x50
 8009988:	af02      	add	r7, sp, #8
 800998a:	60f8      	str	r0, [r7, #12]
 800998c:	60b9      	str	r1, [r7, #8]
 800998e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8009990:	2300      	movs	r3, #0
 8009992:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8009996:	68bb      	ldr	r3, [r7, #8]
 8009998:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800999a:	3b14      	subs	r3, #20
 800999c:	2b00      	cmp	r3, #0
 800999e:	da00      	bge.n	80099a2 <ip4_frag+0x1e>
 80099a0:	3307      	adds	r3, #7
 80099a2:	10db      	asrs	r3, r3, #3
 80099a4:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80099a6:	2314      	movs	r3, #20
 80099a8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	685b      	ldr	r3, [r3, #4]
 80099ae:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 80099b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099b2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80099b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099b6:	781b      	ldrb	r3, [r3, #0]
 80099b8:	f003 030f 	and.w	r3, r3, #15
 80099bc:	b2db      	uxtb	r3, r3
 80099be:	009b      	lsls	r3, r3, #2
 80099c0:	b2db      	uxtb	r3, r3
 80099c2:	2b14      	cmp	r3, #20
 80099c4:	d002      	beq.n	80099cc <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80099c6:	f06f 0305 	mvn.w	r3, #5
 80099ca:	e109      	b.n	8009be0 <ip4_frag+0x25c>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	895b      	ldrh	r3, [r3, #10]
 80099d0:	2b13      	cmp	r3, #19
 80099d2:	d802      	bhi.n	80099da <ip4_frag+0x56>
 80099d4:	f06f 0305 	mvn.w	r3, #5
 80099d8:	e102      	b.n	8009be0 <ip4_frag+0x25c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80099da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099dc:	88db      	ldrh	r3, [r3, #6]
 80099de:	b29b      	uxth	r3, r3
 80099e0:	4618      	mov	r0, r3
 80099e2:	f7f7 fbb3 	bl	800114c <lwip_htons>
 80099e6:	4603      	mov	r3, r0
 80099e8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 80099ea:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80099ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80099f0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80099f4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80099f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80099fa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	891b      	ldrh	r3, [r3, #8]
 8009a00:	3b14      	subs	r3, #20
 8009a02:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8009a06:	e0e1      	b.n	8009bcc <ip4_frag+0x248>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8009a08:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8009a0a:	00db      	lsls	r3, r3, #3
 8009a0c:	b29b      	uxth	r3, r3
 8009a0e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8009a12:	4293      	cmp	r3, r2
 8009a14:	bf28      	it	cs
 8009a16:	4613      	movcs	r3, r2
 8009a18:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8009a1a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8009a1e:	2114      	movs	r1, #20
 8009a20:	200e      	movs	r0, #14
 8009a22:	f7f8 fbf7 	bl	8002214 <pbuf_alloc>
 8009a26:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8009a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	f000 80d5 	beq.w	8009bda <ip4_frag+0x256>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8009a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a32:	895b      	ldrh	r3, [r3, #10]
 8009a34:	2b13      	cmp	r3, #19
 8009a36:	d802      	bhi.n	8009a3e <ip4_frag+0xba>
 8009a38:	486b      	ldr	r0, [pc, #428]	@ (8009be8 <ip4_frag+0x264>)
 8009a3a:	f000 fa6b 	bl	8009f14 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8009a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a40:	685b      	ldr	r3, [r3, #4]
 8009a42:	2214      	movs	r2, #20
 8009a44:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009a46:	4618      	mov	r0, r3
 8009a48:	f000 fb45 	bl	800a0d6 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8009a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a4e:	685b      	ldr	r3, [r3, #4]
 8009a50:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8009a52:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009a54:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 8009a58:	e060      	b.n	8009b1c <ip4_frag+0x198>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	895a      	ldrh	r2, [r3, #10]
 8009a5e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009a60:	1ad3      	subs	r3, r2, r3
 8009a62:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	895b      	ldrh	r3, [r3, #10]
 8009a68:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8009a6a:	429a      	cmp	r2, r3
 8009a6c:	d902      	bls.n	8009a74 <ip4_frag+0xf0>
 8009a6e:	485f      	ldr	r0, [pc, #380]	@ (8009bec <ip4_frag+0x268>)
 8009a70:	f000 fa50 	bl	8009f14 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8009a74:	8bfa      	ldrh	r2, [r7, #30]
 8009a76:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	bf28      	it	cs
 8009a7e:	4613      	movcs	r3, r2
 8009a80:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8009a84:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d105      	bne.n	8009a98 <ip4_frag+0x114>
        poff = 0;
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	60fb      	str	r3, [r7, #12]
        continue;
 8009a96:	e041      	b.n	8009b1c <ip4_frag+0x198>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8009a98:	f7ff ff30 	bl	80098fc <ip_frag_alloc_pbuf_custom_ref>
 8009a9c:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8009a9e:	69bb      	ldr	r3, [r7, #24]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d103      	bne.n	8009aac <ip4_frag+0x128>
        pbuf_free(rambuf);
 8009aa4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009aa6:	f7f8 fe5b 	bl	8002760 <pbuf_free>
        goto memerr;
 8009aaa:	e097      	b.n	8009bdc <ip4_frag+0x258>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8009aac:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8009ab2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009ab4:	4413      	add	r3, r2
 8009ab6:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8009aba:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8009abe:	9201      	str	r2, [sp, #4]
 8009ac0:	9300      	str	r3, [sp, #0]
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	2241      	movs	r2, #65	@ 0x41
 8009ac6:	2000      	movs	r0, #0
 8009ac8:	f7f8 fcb2 	bl	8002430 <pbuf_alloced_custom>
 8009acc:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d106      	bne.n	8009ae2 <ip4_frag+0x15e>
        ip_frag_free_pbuf_custom_ref(pcr);
 8009ad4:	69b8      	ldr	r0, [r7, #24]
 8009ad6:	f7ff ff19 	bl	800990c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8009ada:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009adc:	f7f8 fe40 	bl	8002760 <pbuf_free>
        goto memerr;
 8009ae0:	e07c      	b.n	8009bdc <ip4_frag+0x258>
      }
      pbuf_ref(p);
 8009ae2:	68f8      	ldr	r0, [r7, #12]
 8009ae4:	f7f8 fec8 	bl	8002878 <pbuf_ref>
      pcr->original = p;
 8009ae8:	69bb      	ldr	r3, [r7, #24]
 8009aea:	68fa      	ldr	r2, [r7, #12]
 8009aec:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8009aee:	69bb      	ldr	r3, [r7, #24]
 8009af0:	4a3f      	ldr	r2, [pc, #252]	@ (8009bf0 <ip4_frag+0x26c>)
 8009af2:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8009af4:	6979      	ldr	r1, [r7, #20]
 8009af6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009af8:	f7f8 fed8 	bl	80028ac <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8009afc:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8009b00:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8009b04:	1ad3      	subs	r3, r2, r3
 8009b06:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8009b0a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d004      	beq.n	8009b1c <ip4_frag+0x198>
        poff = 0;
 8009b12:	2300      	movs	r3, #0
 8009b14:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8009b1c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d19a      	bne.n	8009a5a <ip4_frag+0xd6>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8009b24:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8009b26:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8009b2a:	4413      	add	r3, r2
 8009b2c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8009b32:	f1a3 0213 	sub.w	r2, r3, #19
 8009b36:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009b3a:	429a      	cmp	r2, r3
 8009b3c:	bfcc      	ite	gt
 8009b3e:	2301      	movgt	r3, #1
 8009b40:	2300      	movle	r3, #0
 8009b42:	b2db      	uxtb	r3, r3
 8009b44:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8009b46:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8009b4a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009b4e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8009b50:	6a3b      	ldr	r3, [r7, #32]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d002      	beq.n	8009b5c <ip4_frag+0x1d8>
 8009b56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d003      	beq.n	8009b64 <ip4_frag+0x1e0>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8009b5c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8009b5e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8009b62:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8009b64:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8009b66:	4618      	mov	r0, r3
 8009b68:	f7f7 faf0 	bl	800114c <lwip_htons>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	461a      	mov	r2, r3
 8009b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b72:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8009b74:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009b76:	3314      	adds	r3, #20
 8009b78:	b29b      	uxth	r3, r3
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f7f7 fae6 	bl	800114c <lwip_htons>
 8009b80:	4603      	mov	r3, r0
 8009b82:	461a      	mov	r2, r3
 8009b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b86:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8009b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	729a      	strb	r2, [r3, #10]
 8009b8e:	2200      	movs	r2, #0
 8009b90:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 8009b92:	2114      	movs	r1, #20
 8009b94:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009b96:	f7f7 fc21 	bl	80013dc <inet_chksum>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	461a      	mov	r2, r3
 8009b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ba0:	815a      	strh	r2, [r3, #10]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	695b      	ldr	r3, [r3, #20]
 8009ba6:	687a      	ldr	r2, [r7, #4]
 8009ba8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009baa:	68b8      	ldr	r0, [r7, #8]
 8009bac:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8009bae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009bb0:	f7f8 fdd6 	bl	8002760 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8009bb4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8009bb8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009bba:	1ad3      	subs	r3, r2, r3
 8009bbc:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8009bc0:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8009bc4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8009bc6:	4413      	add	r3, r2
 8009bc8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8009bcc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	f47f af19 	bne.w	8009a08 <ip4_frag+0x84>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	e002      	b.n	8009be0 <ip4_frag+0x25c>
      goto memerr;
 8009bda:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8009bdc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	3748      	adds	r7, #72	@ 0x48
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}
 8009be8:	0800c830 	.word	0x0800c830
 8009bec:	0800c850 	.word	0x0800c850
 8009bf0:	08009935 	.word	0x08009935

08009bf4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b086      	sub	sp, #24
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
 8009bfc:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8009bfe:	230e      	movs	r3, #14
 8009c00:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	895b      	ldrh	r3, [r3, #10]
 8009c06:	2b0e      	cmp	r3, #14
 8009c08:	d96e      	bls.n	8009ce8 <ethernet_input+0xf4>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	685b      	ldr	r3, [r3, #4]
 8009c0e:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8009c10:	693b      	ldr	r3, [r7, #16]
 8009c12:	7b1a      	ldrb	r2, [r3, #12]
 8009c14:	7b5b      	ldrb	r3, [r3, #13]
 8009c16:	021b      	lsls	r3, r3, #8
 8009c18:	4313      	orrs	r3, r2
 8009c1a:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (p->if_idx == NETIF_NO_INDEX) {
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	7bdb      	ldrb	r3, [r3, #15]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d106      	bne.n	8009c32 <ethernet_input+0x3e>
    p->if_idx = netif_get_index(netif);
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009c2a:	3301      	adds	r3, #1
 8009c2c:	b2da      	uxtb	r2, r3
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	73da      	strb	r2, [r3, #15]
  }

  if (ethhdr->dest.addr[0] & 1) {
 8009c32:	693b      	ldr	r3, [r7, #16]
 8009c34:	781b      	ldrb	r3, [r3, #0]
 8009c36:	f003 0301 	and.w	r3, r3, #1
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d023      	beq.n	8009c86 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8009c3e:	693b      	ldr	r3, [r7, #16]
 8009c40:	781b      	ldrb	r3, [r3, #0]
 8009c42:	2b01      	cmp	r3, #1
 8009c44:	d10f      	bne.n	8009c66 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8009c46:	693b      	ldr	r3, [r7, #16]
 8009c48:	785b      	ldrb	r3, [r3, #1]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d11b      	bne.n	8009c86 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8009c4e:	693b      	ldr	r3, [r7, #16]
 8009c50:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8009c52:	2b5e      	cmp	r3, #94	@ 0x5e
 8009c54:	d117      	bne.n	8009c86 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	7b5b      	ldrb	r3, [r3, #13]
 8009c5a:	f043 0310 	orr.w	r3, r3, #16
 8009c5e:	b2da      	uxtb	r2, r3
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	735a      	strb	r2, [r3, #13]
 8009c64:	e00f      	b.n	8009c86 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8009c66:	693b      	ldr	r3, [r7, #16]
 8009c68:	2206      	movs	r2, #6
 8009c6a:	4928      	ldr	r1, [pc, #160]	@ (8009d0c <ethernet_input+0x118>)
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f000 f9a6 	bl	8009fbe <memcmp>
 8009c72:	4603      	mov	r3, r0
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d106      	bne.n	8009c86 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	7b5b      	ldrb	r3, [r3, #13]
 8009c7c:	f043 0308 	orr.w	r3, r3, #8
 8009c80:	b2da      	uxtb	r2, r3
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8009c86:	89fb      	ldrh	r3, [r7, #14]
 8009c88:	2b08      	cmp	r3, #8
 8009c8a:	d003      	beq.n	8009c94 <ethernet_input+0xa0>
 8009c8c:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8009c90:	d014      	beq.n	8009cbc <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8009c92:	e032      	b.n	8009cfa <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009c9a:	f003 0308 	and.w	r3, r3, #8
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d024      	beq.n	8009cec <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8009ca2:	8afb      	ldrh	r3, [r7, #22]
 8009ca4:	4619      	mov	r1, r3
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	f7f8 fce6 	bl	8002678 <pbuf_remove_header>
 8009cac:	4603      	mov	r3, r0
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d11e      	bne.n	8009cf0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8009cb2:	6839      	ldr	r1, [r7, #0]
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f7fe ff1f 	bl	8008af8 <ip4_input>
      break;
 8009cba:	e013      	b.n	8009ce4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009cc2:	f003 0308 	and.w	r3, r3, #8
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d014      	beq.n	8009cf4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8009cca:	8afb      	ldrh	r3, [r7, #22]
 8009ccc:	4619      	mov	r1, r3
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f7f8 fcd2 	bl	8002678 <pbuf_remove_header>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d10e      	bne.n	8009cf8 <ethernet_input+0x104>
        etharp_input(p, netif);
 8009cda:	6839      	ldr	r1, [r7, #0]
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f7fe f8b9 	bl	8007e54 <etharp_input>
      break;
 8009ce2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	e00c      	b.n	8009d02 <ethernet_input+0x10e>
    goto free_and_return;
 8009ce8:	bf00      	nop
 8009cea:	e006      	b.n	8009cfa <ethernet_input+0x106>
        goto free_and_return;
 8009cec:	bf00      	nop
 8009cee:	e004      	b.n	8009cfa <ethernet_input+0x106>
        goto free_and_return;
 8009cf0:	bf00      	nop
 8009cf2:	e002      	b.n	8009cfa <ethernet_input+0x106>
        goto free_and_return;
 8009cf4:	bf00      	nop
 8009cf6:	e000      	b.n	8009cfa <ethernet_input+0x106>
        goto free_and_return;
 8009cf8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f7f8 fd30 	bl	8002760 <pbuf_free>
  return ERR_OK;
 8009d00:	2300      	movs	r3, #0
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3718      	adds	r7, #24
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}
 8009d0a:	bf00      	nop
 8009d0c:	0800c968 	.word	0x0800c968

08009d10 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b086      	sub	sp, #24
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	60f8      	str	r0, [r7, #12]
 8009d18:	60b9      	str	r1, [r7, #8]
 8009d1a:	607a      	str	r2, [r7, #4]
 8009d1c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8009d1e:	8c3b      	ldrh	r3, [r7, #32]
 8009d20:	4618      	mov	r0, r3
 8009d22:	f7f7 fa13 	bl	800114c <lwip_htons>
 8009d26:	4603      	mov	r3, r0
 8009d28:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && (defined(LWIP_HOOK_VLAN_SET) || LWIP_VLAN_PCP) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8009d2a:	210e      	movs	r1, #14
 8009d2c:	68b8      	ldr	r0, [r7, #8]
 8009d2e:	f7f8 fc93 	bl	8002658 <pbuf_add_header>
 8009d32:	4603      	mov	r3, r0
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d121      	bne.n	8009d7c <ethernet_output+0x6c>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	685b      	ldr	r3, [r3, #4]
 8009d3c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8009d3e:	693b      	ldr	r3, [r7, #16]
 8009d40:	8afa      	ldrh	r2, [r7, #22]
 8009d42:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8009d44:	693b      	ldr	r3, [r7, #16]
 8009d46:	2206      	movs	r2, #6
 8009d48:	6839      	ldr	r1, [r7, #0]
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f000 f9c3 	bl	800a0d6 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8009d50:	693b      	ldr	r3, [r7, #16]
 8009d52:	3306      	adds	r3, #6
 8009d54:	2206      	movs	r2, #6
 8009d56:	6879      	ldr	r1, [r7, #4]
 8009d58:	4618      	mov	r0, r3
 8009d5a:	f000 f9bc 	bl	800a0d6 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8009d64:	2b06      	cmp	r3, #6
 8009d66:	d002      	beq.n	8009d6e <ethernet_output+0x5e>
 8009d68:	4808      	ldr	r0, [pc, #32]	@ (8009d8c <ethernet_output+0x7c>)
 8009d6a:	f000 f8d3 	bl	8009f14 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	699b      	ldr	r3, [r3, #24]
 8009d72:	68b9      	ldr	r1, [r7, #8]
 8009d74:	68f8      	ldr	r0, [r7, #12]
 8009d76:	4798      	blx	r3
 8009d78:	4603      	mov	r3, r0
 8009d7a:	e002      	b.n	8009d82 <ethernet_output+0x72>
      goto pbuf_header_failed;
 8009d7c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8009d7e:	f06f 0301 	mvn.w	r3, #1
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	3718      	adds	r7, #24
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}
 8009d8a:	bf00      	nop
 8009d8c:	0800c860 	.word	0x0800c860

08009d90 <std>:
 8009d90:	2300      	movs	r3, #0
 8009d92:	b510      	push	{r4, lr}
 8009d94:	4604      	mov	r4, r0
 8009d96:	e9c0 3300 	strd	r3, r3, [r0]
 8009d9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009d9e:	6083      	str	r3, [r0, #8]
 8009da0:	8181      	strh	r1, [r0, #12]
 8009da2:	6643      	str	r3, [r0, #100]	@ 0x64
 8009da4:	81c2      	strh	r2, [r0, #14]
 8009da6:	6183      	str	r3, [r0, #24]
 8009da8:	4619      	mov	r1, r3
 8009daa:	2208      	movs	r2, #8
 8009dac:	305c      	adds	r0, #92	@ 0x5c
 8009dae:	f000 f916 	bl	8009fde <memset>
 8009db2:	4b0d      	ldr	r3, [pc, #52]	@ (8009de8 <std+0x58>)
 8009db4:	6263      	str	r3, [r4, #36]	@ 0x24
 8009db6:	4b0d      	ldr	r3, [pc, #52]	@ (8009dec <std+0x5c>)
 8009db8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009dba:	4b0d      	ldr	r3, [pc, #52]	@ (8009df0 <std+0x60>)
 8009dbc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8009df4 <std+0x64>)
 8009dc0:	6323      	str	r3, [r4, #48]	@ 0x30
 8009dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8009df8 <std+0x68>)
 8009dc4:	6224      	str	r4, [r4, #32]
 8009dc6:	429c      	cmp	r4, r3
 8009dc8:	d006      	beq.n	8009dd8 <std+0x48>
 8009dca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009dce:	4294      	cmp	r4, r2
 8009dd0:	d002      	beq.n	8009dd8 <std+0x48>
 8009dd2:	33d0      	adds	r3, #208	@ 0xd0
 8009dd4:	429c      	cmp	r4, r3
 8009dd6:	d105      	bne.n	8009de4 <std+0x54>
 8009dd8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009ddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009de0:	f000 b976 	b.w	800a0d0 <__retarget_lock_init_recursive>
 8009de4:	bd10      	pop	{r4, pc}
 8009de6:	bf00      	nop
 8009de8:	08009f39 	.word	0x08009f39
 8009dec:	08009f5b 	.word	0x08009f5b
 8009df0:	08009f93 	.word	0x08009f93
 8009df4:	08009fb7 	.word	0x08009fb7
 8009df8:	2400a45c 	.word	0x2400a45c

08009dfc <stdio_exit_handler>:
 8009dfc:	4a02      	ldr	r2, [pc, #8]	@ (8009e08 <stdio_exit_handler+0xc>)
 8009dfe:	4903      	ldr	r1, [pc, #12]	@ (8009e0c <stdio_exit_handler+0x10>)
 8009e00:	4803      	ldr	r0, [pc, #12]	@ (8009e10 <stdio_exit_handler+0x14>)
 8009e02:	f000 b869 	b.w	8009ed8 <_fwalk_sglue>
 8009e06:	bf00      	nop
 8009e08:	2400000c 	.word	0x2400000c
 8009e0c:	0800a98d 	.word	0x0800a98d
 8009e10:	2400001c 	.word	0x2400001c

08009e14 <cleanup_stdio>:
 8009e14:	6841      	ldr	r1, [r0, #4]
 8009e16:	4b0c      	ldr	r3, [pc, #48]	@ (8009e48 <cleanup_stdio+0x34>)
 8009e18:	4299      	cmp	r1, r3
 8009e1a:	b510      	push	{r4, lr}
 8009e1c:	4604      	mov	r4, r0
 8009e1e:	d001      	beq.n	8009e24 <cleanup_stdio+0x10>
 8009e20:	f000 fdb4 	bl	800a98c <_fflush_r>
 8009e24:	68a1      	ldr	r1, [r4, #8]
 8009e26:	4b09      	ldr	r3, [pc, #36]	@ (8009e4c <cleanup_stdio+0x38>)
 8009e28:	4299      	cmp	r1, r3
 8009e2a:	d002      	beq.n	8009e32 <cleanup_stdio+0x1e>
 8009e2c:	4620      	mov	r0, r4
 8009e2e:	f000 fdad 	bl	800a98c <_fflush_r>
 8009e32:	68e1      	ldr	r1, [r4, #12]
 8009e34:	4b06      	ldr	r3, [pc, #24]	@ (8009e50 <cleanup_stdio+0x3c>)
 8009e36:	4299      	cmp	r1, r3
 8009e38:	d004      	beq.n	8009e44 <cleanup_stdio+0x30>
 8009e3a:	4620      	mov	r0, r4
 8009e3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e40:	f000 bda4 	b.w	800a98c <_fflush_r>
 8009e44:	bd10      	pop	{r4, pc}
 8009e46:	bf00      	nop
 8009e48:	2400a45c 	.word	0x2400a45c
 8009e4c:	2400a4c4 	.word	0x2400a4c4
 8009e50:	2400a52c 	.word	0x2400a52c

08009e54 <global_stdio_init.part.0>:
 8009e54:	b510      	push	{r4, lr}
 8009e56:	4b0b      	ldr	r3, [pc, #44]	@ (8009e84 <global_stdio_init.part.0+0x30>)
 8009e58:	4c0b      	ldr	r4, [pc, #44]	@ (8009e88 <global_stdio_init.part.0+0x34>)
 8009e5a:	4a0c      	ldr	r2, [pc, #48]	@ (8009e8c <global_stdio_init.part.0+0x38>)
 8009e5c:	601a      	str	r2, [r3, #0]
 8009e5e:	4620      	mov	r0, r4
 8009e60:	2200      	movs	r2, #0
 8009e62:	2104      	movs	r1, #4
 8009e64:	f7ff ff94 	bl	8009d90 <std>
 8009e68:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009e6c:	2201      	movs	r2, #1
 8009e6e:	2109      	movs	r1, #9
 8009e70:	f7ff ff8e 	bl	8009d90 <std>
 8009e74:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009e78:	2202      	movs	r2, #2
 8009e7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e7e:	2112      	movs	r1, #18
 8009e80:	f7ff bf86 	b.w	8009d90 <std>
 8009e84:	2400a594 	.word	0x2400a594
 8009e88:	2400a45c 	.word	0x2400a45c
 8009e8c:	08009dfd 	.word	0x08009dfd

08009e90 <__sfp_lock_acquire>:
 8009e90:	4801      	ldr	r0, [pc, #4]	@ (8009e98 <__sfp_lock_acquire+0x8>)
 8009e92:	f000 b91e 	b.w	800a0d2 <__retarget_lock_acquire_recursive>
 8009e96:	bf00      	nop
 8009e98:	2400a59d 	.word	0x2400a59d

08009e9c <__sfp_lock_release>:
 8009e9c:	4801      	ldr	r0, [pc, #4]	@ (8009ea4 <__sfp_lock_release+0x8>)
 8009e9e:	f000 b919 	b.w	800a0d4 <__retarget_lock_release_recursive>
 8009ea2:	bf00      	nop
 8009ea4:	2400a59d 	.word	0x2400a59d

08009ea8 <__sinit>:
 8009ea8:	b510      	push	{r4, lr}
 8009eaa:	4604      	mov	r4, r0
 8009eac:	f7ff fff0 	bl	8009e90 <__sfp_lock_acquire>
 8009eb0:	6a23      	ldr	r3, [r4, #32]
 8009eb2:	b11b      	cbz	r3, 8009ebc <__sinit+0x14>
 8009eb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009eb8:	f7ff bff0 	b.w	8009e9c <__sfp_lock_release>
 8009ebc:	4b04      	ldr	r3, [pc, #16]	@ (8009ed0 <__sinit+0x28>)
 8009ebe:	6223      	str	r3, [r4, #32]
 8009ec0:	4b04      	ldr	r3, [pc, #16]	@ (8009ed4 <__sinit+0x2c>)
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d1f5      	bne.n	8009eb4 <__sinit+0xc>
 8009ec8:	f7ff ffc4 	bl	8009e54 <global_stdio_init.part.0>
 8009ecc:	e7f2      	b.n	8009eb4 <__sinit+0xc>
 8009ece:	bf00      	nop
 8009ed0:	08009e15 	.word	0x08009e15
 8009ed4:	2400a594 	.word	0x2400a594

08009ed8 <_fwalk_sglue>:
 8009ed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009edc:	4607      	mov	r7, r0
 8009ede:	4688      	mov	r8, r1
 8009ee0:	4614      	mov	r4, r2
 8009ee2:	2600      	movs	r6, #0
 8009ee4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009ee8:	f1b9 0901 	subs.w	r9, r9, #1
 8009eec:	d505      	bpl.n	8009efa <_fwalk_sglue+0x22>
 8009eee:	6824      	ldr	r4, [r4, #0]
 8009ef0:	2c00      	cmp	r4, #0
 8009ef2:	d1f7      	bne.n	8009ee4 <_fwalk_sglue+0xc>
 8009ef4:	4630      	mov	r0, r6
 8009ef6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009efa:	89ab      	ldrh	r3, [r5, #12]
 8009efc:	2b01      	cmp	r3, #1
 8009efe:	d907      	bls.n	8009f10 <_fwalk_sglue+0x38>
 8009f00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009f04:	3301      	adds	r3, #1
 8009f06:	d003      	beq.n	8009f10 <_fwalk_sglue+0x38>
 8009f08:	4629      	mov	r1, r5
 8009f0a:	4638      	mov	r0, r7
 8009f0c:	47c0      	blx	r8
 8009f0e:	4306      	orrs	r6, r0
 8009f10:	3568      	adds	r5, #104	@ 0x68
 8009f12:	e7e9      	b.n	8009ee8 <_fwalk_sglue+0x10>

08009f14 <iprintf>:
 8009f14:	b40f      	push	{r0, r1, r2, r3}
 8009f16:	b507      	push	{r0, r1, r2, lr}
 8009f18:	4906      	ldr	r1, [pc, #24]	@ (8009f34 <iprintf+0x20>)
 8009f1a:	ab04      	add	r3, sp, #16
 8009f1c:	6808      	ldr	r0, [r1, #0]
 8009f1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f22:	6881      	ldr	r1, [r0, #8]
 8009f24:	9301      	str	r3, [sp, #4]
 8009f26:	f000 fa07 	bl	800a338 <_vfiprintf_r>
 8009f2a:	b003      	add	sp, #12
 8009f2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f30:	b004      	add	sp, #16
 8009f32:	4770      	bx	lr
 8009f34:	24000018 	.word	0x24000018

08009f38 <__sread>:
 8009f38:	b510      	push	{r4, lr}
 8009f3a:	460c      	mov	r4, r1
 8009f3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f40:	f000 f878 	bl	800a034 <_read_r>
 8009f44:	2800      	cmp	r0, #0
 8009f46:	bfab      	itete	ge
 8009f48:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009f4a:	89a3      	ldrhlt	r3, [r4, #12]
 8009f4c:	181b      	addge	r3, r3, r0
 8009f4e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009f52:	bfac      	ite	ge
 8009f54:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009f56:	81a3      	strhlt	r3, [r4, #12]
 8009f58:	bd10      	pop	{r4, pc}

08009f5a <__swrite>:
 8009f5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f5e:	461f      	mov	r7, r3
 8009f60:	898b      	ldrh	r3, [r1, #12]
 8009f62:	05db      	lsls	r3, r3, #23
 8009f64:	4605      	mov	r5, r0
 8009f66:	460c      	mov	r4, r1
 8009f68:	4616      	mov	r6, r2
 8009f6a:	d505      	bpl.n	8009f78 <__swrite+0x1e>
 8009f6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f70:	2302      	movs	r3, #2
 8009f72:	2200      	movs	r2, #0
 8009f74:	f000 f84c 	bl	800a010 <_lseek_r>
 8009f78:	89a3      	ldrh	r3, [r4, #12]
 8009f7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f7e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009f82:	81a3      	strh	r3, [r4, #12]
 8009f84:	4632      	mov	r2, r6
 8009f86:	463b      	mov	r3, r7
 8009f88:	4628      	mov	r0, r5
 8009f8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f8e:	f000 b863 	b.w	800a058 <_write_r>

08009f92 <__sseek>:
 8009f92:	b510      	push	{r4, lr}
 8009f94:	460c      	mov	r4, r1
 8009f96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f9a:	f000 f839 	bl	800a010 <_lseek_r>
 8009f9e:	1c43      	adds	r3, r0, #1
 8009fa0:	89a3      	ldrh	r3, [r4, #12]
 8009fa2:	bf15      	itete	ne
 8009fa4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009fa6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009faa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009fae:	81a3      	strheq	r3, [r4, #12]
 8009fb0:	bf18      	it	ne
 8009fb2:	81a3      	strhne	r3, [r4, #12]
 8009fb4:	bd10      	pop	{r4, pc}

08009fb6 <__sclose>:
 8009fb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fba:	f000 b819 	b.w	8009ff0 <_close_r>

08009fbe <memcmp>:
 8009fbe:	b510      	push	{r4, lr}
 8009fc0:	3901      	subs	r1, #1
 8009fc2:	4402      	add	r2, r0
 8009fc4:	4290      	cmp	r0, r2
 8009fc6:	d101      	bne.n	8009fcc <memcmp+0xe>
 8009fc8:	2000      	movs	r0, #0
 8009fca:	e005      	b.n	8009fd8 <memcmp+0x1a>
 8009fcc:	7803      	ldrb	r3, [r0, #0]
 8009fce:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009fd2:	42a3      	cmp	r3, r4
 8009fd4:	d001      	beq.n	8009fda <memcmp+0x1c>
 8009fd6:	1b18      	subs	r0, r3, r4
 8009fd8:	bd10      	pop	{r4, pc}
 8009fda:	3001      	adds	r0, #1
 8009fdc:	e7f2      	b.n	8009fc4 <memcmp+0x6>

08009fde <memset>:
 8009fde:	4402      	add	r2, r0
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	4293      	cmp	r3, r2
 8009fe4:	d100      	bne.n	8009fe8 <memset+0xa>
 8009fe6:	4770      	bx	lr
 8009fe8:	f803 1b01 	strb.w	r1, [r3], #1
 8009fec:	e7f9      	b.n	8009fe2 <memset+0x4>
	...

08009ff0 <_close_r>:
 8009ff0:	b538      	push	{r3, r4, r5, lr}
 8009ff2:	4d06      	ldr	r5, [pc, #24]	@ (800a00c <_close_r+0x1c>)
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	4604      	mov	r4, r0
 8009ff8:	4608      	mov	r0, r1
 8009ffa:	602b      	str	r3, [r5, #0]
 8009ffc:	f7f6 fd91 	bl	8000b22 <_close>
 800a000:	1c43      	adds	r3, r0, #1
 800a002:	d102      	bne.n	800a00a <_close_r+0x1a>
 800a004:	682b      	ldr	r3, [r5, #0]
 800a006:	b103      	cbz	r3, 800a00a <_close_r+0x1a>
 800a008:	6023      	str	r3, [r4, #0]
 800a00a:	bd38      	pop	{r3, r4, r5, pc}
 800a00c:	2400a598 	.word	0x2400a598

0800a010 <_lseek_r>:
 800a010:	b538      	push	{r3, r4, r5, lr}
 800a012:	4d07      	ldr	r5, [pc, #28]	@ (800a030 <_lseek_r+0x20>)
 800a014:	4604      	mov	r4, r0
 800a016:	4608      	mov	r0, r1
 800a018:	4611      	mov	r1, r2
 800a01a:	2200      	movs	r2, #0
 800a01c:	602a      	str	r2, [r5, #0]
 800a01e:	461a      	mov	r2, r3
 800a020:	f7f6 fda6 	bl	8000b70 <_lseek>
 800a024:	1c43      	adds	r3, r0, #1
 800a026:	d102      	bne.n	800a02e <_lseek_r+0x1e>
 800a028:	682b      	ldr	r3, [r5, #0]
 800a02a:	b103      	cbz	r3, 800a02e <_lseek_r+0x1e>
 800a02c:	6023      	str	r3, [r4, #0]
 800a02e:	bd38      	pop	{r3, r4, r5, pc}
 800a030:	2400a598 	.word	0x2400a598

0800a034 <_read_r>:
 800a034:	b538      	push	{r3, r4, r5, lr}
 800a036:	4d07      	ldr	r5, [pc, #28]	@ (800a054 <_read_r+0x20>)
 800a038:	4604      	mov	r4, r0
 800a03a:	4608      	mov	r0, r1
 800a03c:	4611      	mov	r1, r2
 800a03e:	2200      	movs	r2, #0
 800a040:	602a      	str	r2, [r5, #0]
 800a042:	461a      	mov	r2, r3
 800a044:	f7f6 fd34 	bl	8000ab0 <_read>
 800a048:	1c43      	adds	r3, r0, #1
 800a04a:	d102      	bne.n	800a052 <_read_r+0x1e>
 800a04c:	682b      	ldr	r3, [r5, #0]
 800a04e:	b103      	cbz	r3, 800a052 <_read_r+0x1e>
 800a050:	6023      	str	r3, [r4, #0]
 800a052:	bd38      	pop	{r3, r4, r5, pc}
 800a054:	2400a598 	.word	0x2400a598

0800a058 <_write_r>:
 800a058:	b538      	push	{r3, r4, r5, lr}
 800a05a:	4d07      	ldr	r5, [pc, #28]	@ (800a078 <_write_r+0x20>)
 800a05c:	4604      	mov	r4, r0
 800a05e:	4608      	mov	r0, r1
 800a060:	4611      	mov	r1, r2
 800a062:	2200      	movs	r2, #0
 800a064:	602a      	str	r2, [r5, #0]
 800a066:	461a      	mov	r2, r3
 800a068:	f7f6 fd3f 	bl	8000aea <_write>
 800a06c:	1c43      	adds	r3, r0, #1
 800a06e:	d102      	bne.n	800a076 <_write_r+0x1e>
 800a070:	682b      	ldr	r3, [r5, #0]
 800a072:	b103      	cbz	r3, 800a076 <_write_r+0x1e>
 800a074:	6023      	str	r3, [r4, #0]
 800a076:	bd38      	pop	{r3, r4, r5, pc}
 800a078:	2400a598 	.word	0x2400a598

0800a07c <__errno>:
 800a07c:	4b01      	ldr	r3, [pc, #4]	@ (800a084 <__errno+0x8>)
 800a07e:	6818      	ldr	r0, [r3, #0]
 800a080:	4770      	bx	lr
 800a082:	bf00      	nop
 800a084:	24000018 	.word	0x24000018

0800a088 <__libc_init_array>:
 800a088:	b570      	push	{r4, r5, r6, lr}
 800a08a:	4d0d      	ldr	r5, [pc, #52]	@ (800a0c0 <__libc_init_array+0x38>)
 800a08c:	4c0d      	ldr	r4, [pc, #52]	@ (800a0c4 <__libc_init_array+0x3c>)
 800a08e:	1b64      	subs	r4, r4, r5
 800a090:	10a4      	asrs	r4, r4, #2
 800a092:	2600      	movs	r6, #0
 800a094:	42a6      	cmp	r6, r4
 800a096:	d109      	bne.n	800a0ac <__libc_init_array+0x24>
 800a098:	4d0b      	ldr	r5, [pc, #44]	@ (800a0c8 <__libc_init_array+0x40>)
 800a09a:	4c0c      	ldr	r4, [pc, #48]	@ (800a0cc <__libc_init_array+0x44>)
 800a09c:	f000 fdc6 	bl	800ac2c <_init>
 800a0a0:	1b64      	subs	r4, r4, r5
 800a0a2:	10a4      	asrs	r4, r4, #2
 800a0a4:	2600      	movs	r6, #0
 800a0a6:	42a6      	cmp	r6, r4
 800a0a8:	d105      	bne.n	800a0b6 <__libc_init_array+0x2e>
 800a0aa:	bd70      	pop	{r4, r5, r6, pc}
 800a0ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0b0:	4798      	blx	r3
 800a0b2:	3601      	adds	r6, #1
 800a0b4:	e7ee      	b.n	800a094 <__libc_init_array+0xc>
 800a0b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0ba:	4798      	blx	r3
 800a0bc:	3601      	adds	r6, #1
 800a0be:	e7f2      	b.n	800a0a6 <__libc_init_array+0x1e>
 800a0c0:	0800c9b4 	.word	0x0800c9b4
 800a0c4:	0800c9b4 	.word	0x0800c9b4
 800a0c8:	0800c9b4 	.word	0x0800c9b4
 800a0cc:	0800c9b8 	.word	0x0800c9b8

0800a0d0 <__retarget_lock_init_recursive>:
 800a0d0:	4770      	bx	lr

0800a0d2 <__retarget_lock_acquire_recursive>:
 800a0d2:	4770      	bx	lr

0800a0d4 <__retarget_lock_release_recursive>:
 800a0d4:	4770      	bx	lr

0800a0d6 <memcpy>:
 800a0d6:	440a      	add	r2, r1
 800a0d8:	4291      	cmp	r1, r2
 800a0da:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800a0de:	d100      	bne.n	800a0e2 <memcpy+0xc>
 800a0e0:	4770      	bx	lr
 800a0e2:	b510      	push	{r4, lr}
 800a0e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a0e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a0ec:	4291      	cmp	r1, r2
 800a0ee:	d1f9      	bne.n	800a0e4 <memcpy+0xe>
 800a0f0:	bd10      	pop	{r4, pc}
	...

0800a0f4 <_free_r>:
 800a0f4:	b538      	push	{r3, r4, r5, lr}
 800a0f6:	4605      	mov	r5, r0
 800a0f8:	2900      	cmp	r1, #0
 800a0fa:	d041      	beq.n	800a180 <_free_r+0x8c>
 800a0fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a100:	1f0c      	subs	r4, r1, #4
 800a102:	2b00      	cmp	r3, #0
 800a104:	bfb8      	it	lt
 800a106:	18e4      	addlt	r4, r4, r3
 800a108:	f000 f8e0 	bl	800a2cc <__malloc_lock>
 800a10c:	4a1d      	ldr	r2, [pc, #116]	@ (800a184 <_free_r+0x90>)
 800a10e:	6813      	ldr	r3, [r2, #0]
 800a110:	b933      	cbnz	r3, 800a120 <_free_r+0x2c>
 800a112:	6063      	str	r3, [r4, #4]
 800a114:	6014      	str	r4, [r2, #0]
 800a116:	4628      	mov	r0, r5
 800a118:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a11c:	f000 b8dc 	b.w	800a2d8 <__malloc_unlock>
 800a120:	42a3      	cmp	r3, r4
 800a122:	d908      	bls.n	800a136 <_free_r+0x42>
 800a124:	6820      	ldr	r0, [r4, #0]
 800a126:	1821      	adds	r1, r4, r0
 800a128:	428b      	cmp	r3, r1
 800a12a:	bf01      	itttt	eq
 800a12c:	6819      	ldreq	r1, [r3, #0]
 800a12e:	685b      	ldreq	r3, [r3, #4]
 800a130:	1809      	addeq	r1, r1, r0
 800a132:	6021      	streq	r1, [r4, #0]
 800a134:	e7ed      	b.n	800a112 <_free_r+0x1e>
 800a136:	461a      	mov	r2, r3
 800a138:	685b      	ldr	r3, [r3, #4]
 800a13a:	b10b      	cbz	r3, 800a140 <_free_r+0x4c>
 800a13c:	42a3      	cmp	r3, r4
 800a13e:	d9fa      	bls.n	800a136 <_free_r+0x42>
 800a140:	6811      	ldr	r1, [r2, #0]
 800a142:	1850      	adds	r0, r2, r1
 800a144:	42a0      	cmp	r0, r4
 800a146:	d10b      	bne.n	800a160 <_free_r+0x6c>
 800a148:	6820      	ldr	r0, [r4, #0]
 800a14a:	4401      	add	r1, r0
 800a14c:	1850      	adds	r0, r2, r1
 800a14e:	4283      	cmp	r3, r0
 800a150:	6011      	str	r1, [r2, #0]
 800a152:	d1e0      	bne.n	800a116 <_free_r+0x22>
 800a154:	6818      	ldr	r0, [r3, #0]
 800a156:	685b      	ldr	r3, [r3, #4]
 800a158:	6053      	str	r3, [r2, #4]
 800a15a:	4408      	add	r0, r1
 800a15c:	6010      	str	r0, [r2, #0]
 800a15e:	e7da      	b.n	800a116 <_free_r+0x22>
 800a160:	d902      	bls.n	800a168 <_free_r+0x74>
 800a162:	230c      	movs	r3, #12
 800a164:	602b      	str	r3, [r5, #0]
 800a166:	e7d6      	b.n	800a116 <_free_r+0x22>
 800a168:	6820      	ldr	r0, [r4, #0]
 800a16a:	1821      	adds	r1, r4, r0
 800a16c:	428b      	cmp	r3, r1
 800a16e:	bf04      	itt	eq
 800a170:	6819      	ldreq	r1, [r3, #0]
 800a172:	685b      	ldreq	r3, [r3, #4]
 800a174:	6063      	str	r3, [r4, #4]
 800a176:	bf04      	itt	eq
 800a178:	1809      	addeq	r1, r1, r0
 800a17a:	6021      	streq	r1, [r4, #0]
 800a17c:	6054      	str	r4, [r2, #4]
 800a17e:	e7ca      	b.n	800a116 <_free_r+0x22>
 800a180:	bd38      	pop	{r3, r4, r5, pc}
 800a182:	bf00      	nop
 800a184:	2400a5a4 	.word	0x2400a5a4

0800a188 <sbrk_aligned>:
 800a188:	b570      	push	{r4, r5, r6, lr}
 800a18a:	4e0f      	ldr	r6, [pc, #60]	@ (800a1c8 <sbrk_aligned+0x40>)
 800a18c:	460c      	mov	r4, r1
 800a18e:	6831      	ldr	r1, [r6, #0]
 800a190:	4605      	mov	r5, r0
 800a192:	b911      	cbnz	r1, 800a19a <sbrk_aligned+0x12>
 800a194:	f000 fcb6 	bl	800ab04 <_sbrk_r>
 800a198:	6030      	str	r0, [r6, #0]
 800a19a:	4621      	mov	r1, r4
 800a19c:	4628      	mov	r0, r5
 800a19e:	f000 fcb1 	bl	800ab04 <_sbrk_r>
 800a1a2:	1c43      	adds	r3, r0, #1
 800a1a4:	d103      	bne.n	800a1ae <sbrk_aligned+0x26>
 800a1a6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800a1aa:	4620      	mov	r0, r4
 800a1ac:	bd70      	pop	{r4, r5, r6, pc}
 800a1ae:	1cc4      	adds	r4, r0, #3
 800a1b0:	f024 0403 	bic.w	r4, r4, #3
 800a1b4:	42a0      	cmp	r0, r4
 800a1b6:	d0f8      	beq.n	800a1aa <sbrk_aligned+0x22>
 800a1b8:	1a21      	subs	r1, r4, r0
 800a1ba:	4628      	mov	r0, r5
 800a1bc:	f000 fca2 	bl	800ab04 <_sbrk_r>
 800a1c0:	3001      	adds	r0, #1
 800a1c2:	d1f2      	bne.n	800a1aa <sbrk_aligned+0x22>
 800a1c4:	e7ef      	b.n	800a1a6 <sbrk_aligned+0x1e>
 800a1c6:	bf00      	nop
 800a1c8:	2400a5a0 	.word	0x2400a5a0

0800a1cc <_malloc_r>:
 800a1cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1d0:	1ccd      	adds	r5, r1, #3
 800a1d2:	f025 0503 	bic.w	r5, r5, #3
 800a1d6:	3508      	adds	r5, #8
 800a1d8:	2d0c      	cmp	r5, #12
 800a1da:	bf38      	it	cc
 800a1dc:	250c      	movcc	r5, #12
 800a1de:	2d00      	cmp	r5, #0
 800a1e0:	4606      	mov	r6, r0
 800a1e2:	db01      	blt.n	800a1e8 <_malloc_r+0x1c>
 800a1e4:	42a9      	cmp	r1, r5
 800a1e6:	d904      	bls.n	800a1f2 <_malloc_r+0x26>
 800a1e8:	230c      	movs	r3, #12
 800a1ea:	6033      	str	r3, [r6, #0]
 800a1ec:	2000      	movs	r0, #0
 800a1ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a2c8 <_malloc_r+0xfc>
 800a1f6:	f000 f869 	bl	800a2cc <__malloc_lock>
 800a1fa:	f8d8 3000 	ldr.w	r3, [r8]
 800a1fe:	461c      	mov	r4, r3
 800a200:	bb44      	cbnz	r4, 800a254 <_malloc_r+0x88>
 800a202:	4629      	mov	r1, r5
 800a204:	4630      	mov	r0, r6
 800a206:	f7ff ffbf 	bl	800a188 <sbrk_aligned>
 800a20a:	1c43      	adds	r3, r0, #1
 800a20c:	4604      	mov	r4, r0
 800a20e:	d158      	bne.n	800a2c2 <_malloc_r+0xf6>
 800a210:	f8d8 4000 	ldr.w	r4, [r8]
 800a214:	4627      	mov	r7, r4
 800a216:	2f00      	cmp	r7, #0
 800a218:	d143      	bne.n	800a2a2 <_malloc_r+0xd6>
 800a21a:	2c00      	cmp	r4, #0
 800a21c:	d04b      	beq.n	800a2b6 <_malloc_r+0xea>
 800a21e:	6823      	ldr	r3, [r4, #0]
 800a220:	4639      	mov	r1, r7
 800a222:	4630      	mov	r0, r6
 800a224:	eb04 0903 	add.w	r9, r4, r3
 800a228:	f000 fc6c 	bl	800ab04 <_sbrk_r>
 800a22c:	4581      	cmp	r9, r0
 800a22e:	d142      	bne.n	800a2b6 <_malloc_r+0xea>
 800a230:	6821      	ldr	r1, [r4, #0]
 800a232:	1a6d      	subs	r5, r5, r1
 800a234:	4629      	mov	r1, r5
 800a236:	4630      	mov	r0, r6
 800a238:	f7ff ffa6 	bl	800a188 <sbrk_aligned>
 800a23c:	3001      	adds	r0, #1
 800a23e:	d03a      	beq.n	800a2b6 <_malloc_r+0xea>
 800a240:	6823      	ldr	r3, [r4, #0]
 800a242:	442b      	add	r3, r5
 800a244:	6023      	str	r3, [r4, #0]
 800a246:	f8d8 3000 	ldr.w	r3, [r8]
 800a24a:	685a      	ldr	r2, [r3, #4]
 800a24c:	bb62      	cbnz	r2, 800a2a8 <_malloc_r+0xdc>
 800a24e:	f8c8 7000 	str.w	r7, [r8]
 800a252:	e00f      	b.n	800a274 <_malloc_r+0xa8>
 800a254:	6822      	ldr	r2, [r4, #0]
 800a256:	1b52      	subs	r2, r2, r5
 800a258:	d420      	bmi.n	800a29c <_malloc_r+0xd0>
 800a25a:	2a0b      	cmp	r2, #11
 800a25c:	d917      	bls.n	800a28e <_malloc_r+0xc2>
 800a25e:	1961      	adds	r1, r4, r5
 800a260:	42a3      	cmp	r3, r4
 800a262:	6025      	str	r5, [r4, #0]
 800a264:	bf18      	it	ne
 800a266:	6059      	strne	r1, [r3, #4]
 800a268:	6863      	ldr	r3, [r4, #4]
 800a26a:	bf08      	it	eq
 800a26c:	f8c8 1000 	streq.w	r1, [r8]
 800a270:	5162      	str	r2, [r4, r5]
 800a272:	604b      	str	r3, [r1, #4]
 800a274:	4630      	mov	r0, r6
 800a276:	f000 f82f 	bl	800a2d8 <__malloc_unlock>
 800a27a:	f104 000b 	add.w	r0, r4, #11
 800a27e:	1d23      	adds	r3, r4, #4
 800a280:	f020 0007 	bic.w	r0, r0, #7
 800a284:	1ac2      	subs	r2, r0, r3
 800a286:	bf1c      	itt	ne
 800a288:	1a1b      	subne	r3, r3, r0
 800a28a:	50a3      	strne	r3, [r4, r2]
 800a28c:	e7af      	b.n	800a1ee <_malloc_r+0x22>
 800a28e:	6862      	ldr	r2, [r4, #4]
 800a290:	42a3      	cmp	r3, r4
 800a292:	bf0c      	ite	eq
 800a294:	f8c8 2000 	streq.w	r2, [r8]
 800a298:	605a      	strne	r2, [r3, #4]
 800a29a:	e7eb      	b.n	800a274 <_malloc_r+0xa8>
 800a29c:	4623      	mov	r3, r4
 800a29e:	6864      	ldr	r4, [r4, #4]
 800a2a0:	e7ae      	b.n	800a200 <_malloc_r+0x34>
 800a2a2:	463c      	mov	r4, r7
 800a2a4:	687f      	ldr	r7, [r7, #4]
 800a2a6:	e7b6      	b.n	800a216 <_malloc_r+0x4a>
 800a2a8:	461a      	mov	r2, r3
 800a2aa:	685b      	ldr	r3, [r3, #4]
 800a2ac:	42a3      	cmp	r3, r4
 800a2ae:	d1fb      	bne.n	800a2a8 <_malloc_r+0xdc>
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	6053      	str	r3, [r2, #4]
 800a2b4:	e7de      	b.n	800a274 <_malloc_r+0xa8>
 800a2b6:	230c      	movs	r3, #12
 800a2b8:	6033      	str	r3, [r6, #0]
 800a2ba:	4630      	mov	r0, r6
 800a2bc:	f000 f80c 	bl	800a2d8 <__malloc_unlock>
 800a2c0:	e794      	b.n	800a1ec <_malloc_r+0x20>
 800a2c2:	6005      	str	r5, [r0, #0]
 800a2c4:	e7d6      	b.n	800a274 <_malloc_r+0xa8>
 800a2c6:	bf00      	nop
 800a2c8:	2400a5a4 	.word	0x2400a5a4

0800a2cc <__malloc_lock>:
 800a2cc:	4801      	ldr	r0, [pc, #4]	@ (800a2d4 <__malloc_lock+0x8>)
 800a2ce:	f7ff bf00 	b.w	800a0d2 <__retarget_lock_acquire_recursive>
 800a2d2:	bf00      	nop
 800a2d4:	2400a59c 	.word	0x2400a59c

0800a2d8 <__malloc_unlock>:
 800a2d8:	4801      	ldr	r0, [pc, #4]	@ (800a2e0 <__malloc_unlock+0x8>)
 800a2da:	f7ff befb 	b.w	800a0d4 <__retarget_lock_release_recursive>
 800a2de:	bf00      	nop
 800a2e0:	2400a59c 	.word	0x2400a59c

0800a2e4 <__sfputc_r>:
 800a2e4:	6893      	ldr	r3, [r2, #8]
 800a2e6:	3b01      	subs	r3, #1
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	b410      	push	{r4}
 800a2ec:	6093      	str	r3, [r2, #8]
 800a2ee:	da08      	bge.n	800a302 <__sfputc_r+0x1e>
 800a2f0:	6994      	ldr	r4, [r2, #24]
 800a2f2:	42a3      	cmp	r3, r4
 800a2f4:	db01      	blt.n	800a2fa <__sfputc_r+0x16>
 800a2f6:	290a      	cmp	r1, #10
 800a2f8:	d103      	bne.n	800a302 <__sfputc_r+0x1e>
 800a2fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2fe:	f000 bb6d 	b.w	800a9dc <__swbuf_r>
 800a302:	6813      	ldr	r3, [r2, #0]
 800a304:	1c58      	adds	r0, r3, #1
 800a306:	6010      	str	r0, [r2, #0]
 800a308:	7019      	strb	r1, [r3, #0]
 800a30a:	4608      	mov	r0, r1
 800a30c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a310:	4770      	bx	lr

0800a312 <__sfputs_r>:
 800a312:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a314:	4606      	mov	r6, r0
 800a316:	460f      	mov	r7, r1
 800a318:	4614      	mov	r4, r2
 800a31a:	18d5      	adds	r5, r2, r3
 800a31c:	42ac      	cmp	r4, r5
 800a31e:	d101      	bne.n	800a324 <__sfputs_r+0x12>
 800a320:	2000      	movs	r0, #0
 800a322:	e007      	b.n	800a334 <__sfputs_r+0x22>
 800a324:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a328:	463a      	mov	r2, r7
 800a32a:	4630      	mov	r0, r6
 800a32c:	f7ff ffda 	bl	800a2e4 <__sfputc_r>
 800a330:	1c43      	adds	r3, r0, #1
 800a332:	d1f3      	bne.n	800a31c <__sfputs_r+0xa>
 800a334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a338 <_vfiprintf_r>:
 800a338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a33c:	460d      	mov	r5, r1
 800a33e:	b09d      	sub	sp, #116	@ 0x74
 800a340:	4614      	mov	r4, r2
 800a342:	4698      	mov	r8, r3
 800a344:	4606      	mov	r6, r0
 800a346:	b118      	cbz	r0, 800a350 <_vfiprintf_r+0x18>
 800a348:	6a03      	ldr	r3, [r0, #32]
 800a34a:	b90b      	cbnz	r3, 800a350 <_vfiprintf_r+0x18>
 800a34c:	f7ff fdac 	bl	8009ea8 <__sinit>
 800a350:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a352:	07d9      	lsls	r1, r3, #31
 800a354:	d405      	bmi.n	800a362 <_vfiprintf_r+0x2a>
 800a356:	89ab      	ldrh	r3, [r5, #12]
 800a358:	059a      	lsls	r2, r3, #22
 800a35a:	d402      	bmi.n	800a362 <_vfiprintf_r+0x2a>
 800a35c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a35e:	f7ff feb8 	bl	800a0d2 <__retarget_lock_acquire_recursive>
 800a362:	89ab      	ldrh	r3, [r5, #12]
 800a364:	071b      	lsls	r3, r3, #28
 800a366:	d501      	bpl.n	800a36c <_vfiprintf_r+0x34>
 800a368:	692b      	ldr	r3, [r5, #16]
 800a36a:	b99b      	cbnz	r3, 800a394 <_vfiprintf_r+0x5c>
 800a36c:	4629      	mov	r1, r5
 800a36e:	4630      	mov	r0, r6
 800a370:	f000 fb72 	bl	800aa58 <__swsetup_r>
 800a374:	b170      	cbz	r0, 800a394 <_vfiprintf_r+0x5c>
 800a376:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a378:	07dc      	lsls	r4, r3, #31
 800a37a:	d504      	bpl.n	800a386 <_vfiprintf_r+0x4e>
 800a37c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a380:	b01d      	add	sp, #116	@ 0x74
 800a382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a386:	89ab      	ldrh	r3, [r5, #12]
 800a388:	0598      	lsls	r0, r3, #22
 800a38a:	d4f7      	bmi.n	800a37c <_vfiprintf_r+0x44>
 800a38c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a38e:	f7ff fea1 	bl	800a0d4 <__retarget_lock_release_recursive>
 800a392:	e7f3      	b.n	800a37c <_vfiprintf_r+0x44>
 800a394:	2300      	movs	r3, #0
 800a396:	9309      	str	r3, [sp, #36]	@ 0x24
 800a398:	2320      	movs	r3, #32
 800a39a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a39e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a3a2:	2330      	movs	r3, #48	@ 0x30
 800a3a4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a554 <_vfiprintf_r+0x21c>
 800a3a8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a3ac:	f04f 0901 	mov.w	r9, #1
 800a3b0:	4623      	mov	r3, r4
 800a3b2:	469a      	mov	sl, r3
 800a3b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3b8:	b10a      	cbz	r2, 800a3be <_vfiprintf_r+0x86>
 800a3ba:	2a25      	cmp	r2, #37	@ 0x25
 800a3bc:	d1f9      	bne.n	800a3b2 <_vfiprintf_r+0x7a>
 800a3be:	ebba 0b04 	subs.w	fp, sl, r4
 800a3c2:	d00b      	beq.n	800a3dc <_vfiprintf_r+0xa4>
 800a3c4:	465b      	mov	r3, fp
 800a3c6:	4622      	mov	r2, r4
 800a3c8:	4629      	mov	r1, r5
 800a3ca:	4630      	mov	r0, r6
 800a3cc:	f7ff ffa1 	bl	800a312 <__sfputs_r>
 800a3d0:	3001      	adds	r0, #1
 800a3d2:	f000 80a7 	beq.w	800a524 <_vfiprintf_r+0x1ec>
 800a3d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a3d8:	445a      	add	r2, fp
 800a3da:	9209      	str	r2, [sp, #36]	@ 0x24
 800a3dc:	f89a 3000 	ldrb.w	r3, [sl]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	f000 809f 	beq.w	800a524 <_vfiprintf_r+0x1ec>
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a3ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a3f0:	f10a 0a01 	add.w	sl, sl, #1
 800a3f4:	9304      	str	r3, [sp, #16]
 800a3f6:	9307      	str	r3, [sp, #28]
 800a3f8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a3fc:	931a      	str	r3, [sp, #104]	@ 0x68
 800a3fe:	4654      	mov	r4, sl
 800a400:	2205      	movs	r2, #5
 800a402:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a406:	4853      	ldr	r0, [pc, #332]	@ (800a554 <_vfiprintf_r+0x21c>)
 800a408:	f7f5 ff6a 	bl	80002e0 <memchr>
 800a40c:	9a04      	ldr	r2, [sp, #16]
 800a40e:	b9d8      	cbnz	r0, 800a448 <_vfiprintf_r+0x110>
 800a410:	06d1      	lsls	r1, r2, #27
 800a412:	bf44      	itt	mi
 800a414:	2320      	movmi	r3, #32
 800a416:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a41a:	0713      	lsls	r3, r2, #28
 800a41c:	bf44      	itt	mi
 800a41e:	232b      	movmi	r3, #43	@ 0x2b
 800a420:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a424:	f89a 3000 	ldrb.w	r3, [sl]
 800a428:	2b2a      	cmp	r3, #42	@ 0x2a
 800a42a:	d015      	beq.n	800a458 <_vfiprintf_r+0x120>
 800a42c:	9a07      	ldr	r2, [sp, #28]
 800a42e:	4654      	mov	r4, sl
 800a430:	2000      	movs	r0, #0
 800a432:	f04f 0c0a 	mov.w	ip, #10
 800a436:	4621      	mov	r1, r4
 800a438:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a43c:	3b30      	subs	r3, #48	@ 0x30
 800a43e:	2b09      	cmp	r3, #9
 800a440:	d94b      	bls.n	800a4da <_vfiprintf_r+0x1a2>
 800a442:	b1b0      	cbz	r0, 800a472 <_vfiprintf_r+0x13a>
 800a444:	9207      	str	r2, [sp, #28]
 800a446:	e014      	b.n	800a472 <_vfiprintf_r+0x13a>
 800a448:	eba0 0308 	sub.w	r3, r0, r8
 800a44c:	fa09 f303 	lsl.w	r3, r9, r3
 800a450:	4313      	orrs	r3, r2
 800a452:	9304      	str	r3, [sp, #16]
 800a454:	46a2      	mov	sl, r4
 800a456:	e7d2      	b.n	800a3fe <_vfiprintf_r+0xc6>
 800a458:	9b03      	ldr	r3, [sp, #12]
 800a45a:	1d19      	adds	r1, r3, #4
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	9103      	str	r1, [sp, #12]
 800a460:	2b00      	cmp	r3, #0
 800a462:	bfbb      	ittet	lt
 800a464:	425b      	neglt	r3, r3
 800a466:	f042 0202 	orrlt.w	r2, r2, #2
 800a46a:	9307      	strge	r3, [sp, #28]
 800a46c:	9307      	strlt	r3, [sp, #28]
 800a46e:	bfb8      	it	lt
 800a470:	9204      	strlt	r2, [sp, #16]
 800a472:	7823      	ldrb	r3, [r4, #0]
 800a474:	2b2e      	cmp	r3, #46	@ 0x2e
 800a476:	d10a      	bne.n	800a48e <_vfiprintf_r+0x156>
 800a478:	7863      	ldrb	r3, [r4, #1]
 800a47a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a47c:	d132      	bne.n	800a4e4 <_vfiprintf_r+0x1ac>
 800a47e:	9b03      	ldr	r3, [sp, #12]
 800a480:	1d1a      	adds	r2, r3, #4
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	9203      	str	r2, [sp, #12]
 800a486:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a48a:	3402      	adds	r4, #2
 800a48c:	9305      	str	r3, [sp, #20]
 800a48e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a564 <_vfiprintf_r+0x22c>
 800a492:	7821      	ldrb	r1, [r4, #0]
 800a494:	2203      	movs	r2, #3
 800a496:	4650      	mov	r0, sl
 800a498:	f7f5 ff22 	bl	80002e0 <memchr>
 800a49c:	b138      	cbz	r0, 800a4ae <_vfiprintf_r+0x176>
 800a49e:	9b04      	ldr	r3, [sp, #16]
 800a4a0:	eba0 000a 	sub.w	r0, r0, sl
 800a4a4:	2240      	movs	r2, #64	@ 0x40
 800a4a6:	4082      	lsls	r2, r0
 800a4a8:	4313      	orrs	r3, r2
 800a4aa:	3401      	adds	r4, #1
 800a4ac:	9304      	str	r3, [sp, #16]
 800a4ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4b2:	4829      	ldr	r0, [pc, #164]	@ (800a558 <_vfiprintf_r+0x220>)
 800a4b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a4b8:	2206      	movs	r2, #6
 800a4ba:	f7f5 ff11 	bl	80002e0 <memchr>
 800a4be:	2800      	cmp	r0, #0
 800a4c0:	d03f      	beq.n	800a542 <_vfiprintf_r+0x20a>
 800a4c2:	4b26      	ldr	r3, [pc, #152]	@ (800a55c <_vfiprintf_r+0x224>)
 800a4c4:	bb1b      	cbnz	r3, 800a50e <_vfiprintf_r+0x1d6>
 800a4c6:	9b03      	ldr	r3, [sp, #12]
 800a4c8:	3307      	adds	r3, #7
 800a4ca:	f023 0307 	bic.w	r3, r3, #7
 800a4ce:	3308      	adds	r3, #8
 800a4d0:	9303      	str	r3, [sp, #12]
 800a4d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4d4:	443b      	add	r3, r7
 800a4d6:	9309      	str	r3, [sp, #36]	@ 0x24
 800a4d8:	e76a      	b.n	800a3b0 <_vfiprintf_r+0x78>
 800a4da:	fb0c 3202 	mla	r2, ip, r2, r3
 800a4de:	460c      	mov	r4, r1
 800a4e0:	2001      	movs	r0, #1
 800a4e2:	e7a8      	b.n	800a436 <_vfiprintf_r+0xfe>
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	3401      	adds	r4, #1
 800a4e8:	9305      	str	r3, [sp, #20]
 800a4ea:	4619      	mov	r1, r3
 800a4ec:	f04f 0c0a 	mov.w	ip, #10
 800a4f0:	4620      	mov	r0, r4
 800a4f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a4f6:	3a30      	subs	r2, #48	@ 0x30
 800a4f8:	2a09      	cmp	r2, #9
 800a4fa:	d903      	bls.n	800a504 <_vfiprintf_r+0x1cc>
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d0c6      	beq.n	800a48e <_vfiprintf_r+0x156>
 800a500:	9105      	str	r1, [sp, #20]
 800a502:	e7c4      	b.n	800a48e <_vfiprintf_r+0x156>
 800a504:	fb0c 2101 	mla	r1, ip, r1, r2
 800a508:	4604      	mov	r4, r0
 800a50a:	2301      	movs	r3, #1
 800a50c:	e7f0      	b.n	800a4f0 <_vfiprintf_r+0x1b8>
 800a50e:	ab03      	add	r3, sp, #12
 800a510:	9300      	str	r3, [sp, #0]
 800a512:	462a      	mov	r2, r5
 800a514:	4b12      	ldr	r3, [pc, #72]	@ (800a560 <_vfiprintf_r+0x228>)
 800a516:	a904      	add	r1, sp, #16
 800a518:	4630      	mov	r0, r6
 800a51a:	f3af 8000 	nop.w
 800a51e:	4607      	mov	r7, r0
 800a520:	1c78      	adds	r0, r7, #1
 800a522:	d1d6      	bne.n	800a4d2 <_vfiprintf_r+0x19a>
 800a524:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a526:	07d9      	lsls	r1, r3, #31
 800a528:	d405      	bmi.n	800a536 <_vfiprintf_r+0x1fe>
 800a52a:	89ab      	ldrh	r3, [r5, #12]
 800a52c:	059a      	lsls	r2, r3, #22
 800a52e:	d402      	bmi.n	800a536 <_vfiprintf_r+0x1fe>
 800a530:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a532:	f7ff fdcf 	bl	800a0d4 <__retarget_lock_release_recursive>
 800a536:	89ab      	ldrh	r3, [r5, #12]
 800a538:	065b      	lsls	r3, r3, #25
 800a53a:	f53f af1f 	bmi.w	800a37c <_vfiprintf_r+0x44>
 800a53e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a540:	e71e      	b.n	800a380 <_vfiprintf_r+0x48>
 800a542:	ab03      	add	r3, sp, #12
 800a544:	9300      	str	r3, [sp, #0]
 800a546:	462a      	mov	r2, r5
 800a548:	4b05      	ldr	r3, [pc, #20]	@ (800a560 <_vfiprintf_r+0x228>)
 800a54a:	a904      	add	r1, sp, #16
 800a54c:	4630      	mov	r0, r6
 800a54e:	f000 f879 	bl	800a644 <_printf_i>
 800a552:	e7e4      	b.n	800a51e <_vfiprintf_r+0x1e6>
 800a554:	0800c976 	.word	0x0800c976
 800a558:	0800c980 	.word	0x0800c980
 800a55c:	00000000 	.word	0x00000000
 800a560:	0800a313 	.word	0x0800a313
 800a564:	0800c97c 	.word	0x0800c97c

0800a568 <_printf_common>:
 800a568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a56c:	4616      	mov	r6, r2
 800a56e:	4698      	mov	r8, r3
 800a570:	688a      	ldr	r2, [r1, #8]
 800a572:	690b      	ldr	r3, [r1, #16]
 800a574:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a578:	4293      	cmp	r3, r2
 800a57a:	bfb8      	it	lt
 800a57c:	4613      	movlt	r3, r2
 800a57e:	6033      	str	r3, [r6, #0]
 800a580:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a584:	4607      	mov	r7, r0
 800a586:	460c      	mov	r4, r1
 800a588:	b10a      	cbz	r2, 800a58e <_printf_common+0x26>
 800a58a:	3301      	adds	r3, #1
 800a58c:	6033      	str	r3, [r6, #0]
 800a58e:	6823      	ldr	r3, [r4, #0]
 800a590:	0699      	lsls	r1, r3, #26
 800a592:	bf42      	ittt	mi
 800a594:	6833      	ldrmi	r3, [r6, #0]
 800a596:	3302      	addmi	r3, #2
 800a598:	6033      	strmi	r3, [r6, #0]
 800a59a:	6825      	ldr	r5, [r4, #0]
 800a59c:	f015 0506 	ands.w	r5, r5, #6
 800a5a0:	d106      	bne.n	800a5b0 <_printf_common+0x48>
 800a5a2:	f104 0a19 	add.w	sl, r4, #25
 800a5a6:	68e3      	ldr	r3, [r4, #12]
 800a5a8:	6832      	ldr	r2, [r6, #0]
 800a5aa:	1a9b      	subs	r3, r3, r2
 800a5ac:	42ab      	cmp	r3, r5
 800a5ae:	dc26      	bgt.n	800a5fe <_printf_common+0x96>
 800a5b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a5b4:	6822      	ldr	r2, [r4, #0]
 800a5b6:	3b00      	subs	r3, #0
 800a5b8:	bf18      	it	ne
 800a5ba:	2301      	movne	r3, #1
 800a5bc:	0692      	lsls	r2, r2, #26
 800a5be:	d42b      	bmi.n	800a618 <_printf_common+0xb0>
 800a5c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a5c4:	4641      	mov	r1, r8
 800a5c6:	4638      	mov	r0, r7
 800a5c8:	47c8      	blx	r9
 800a5ca:	3001      	adds	r0, #1
 800a5cc:	d01e      	beq.n	800a60c <_printf_common+0xa4>
 800a5ce:	6823      	ldr	r3, [r4, #0]
 800a5d0:	6922      	ldr	r2, [r4, #16]
 800a5d2:	f003 0306 	and.w	r3, r3, #6
 800a5d6:	2b04      	cmp	r3, #4
 800a5d8:	bf02      	ittt	eq
 800a5da:	68e5      	ldreq	r5, [r4, #12]
 800a5dc:	6833      	ldreq	r3, [r6, #0]
 800a5de:	1aed      	subeq	r5, r5, r3
 800a5e0:	68a3      	ldr	r3, [r4, #8]
 800a5e2:	bf0c      	ite	eq
 800a5e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a5e8:	2500      	movne	r5, #0
 800a5ea:	4293      	cmp	r3, r2
 800a5ec:	bfc4      	itt	gt
 800a5ee:	1a9b      	subgt	r3, r3, r2
 800a5f0:	18ed      	addgt	r5, r5, r3
 800a5f2:	2600      	movs	r6, #0
 800a5f4:	341a      	adds	r4, #26
 800a5f6:	42b5      	cmp	r5, r6
 800a5f8:	d11a      	bne.n	800a630 <_printf_common+0xc8>
 800a5fa:	2000      	movs	r0, #0
 800a5fc:	e008      	b.n	800a610 <_printf_common+0xa8>
 800a5fe:	2301      	movs	r3, #1
 800a600:	4652      	mov	r2, sl
 800a602:	4641      	mov	r1, r8
 800a604:	4638      	mov	r0, r7
 800a606:	47c8      	blx	r9
 800a608:	3001      	adds	r0, #1
 800a60a:	d103      	bne.n	800a614 <_printf_common+0xac>
 800a60c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a614:	3501      	adds	r5, #1
 800a616:	e7c6      	b.n	800a5a6 <_printf_common+0x3e>
 800a618:	18e1      	adds	r1, r4, r3
 800a61a:	1c5a      	adds	r2, r3, #1
 800a61c:	2030      	movs	r0, #48	@ 0x30
 800a61e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a622:	4422      	add	r2, r4
 800a624:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a628:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a62c:	3302      	adds	r3, #2
 800a62e:	e7c7      	b.n	800a5c0 <_printf_common+0x58>
 800a630:	2301      	movs	r3, #1
 800a632:	4622      	mov	r2, r4
 800a634:	4641      	mov	r1, r8
 800a636:	4638      	mov	r0, r7
 800a638:	47c8      	blx	r9
 800a63a:	3001      	adds	r0, #1
 800a63c:	d0e6      	beq.n	800a60c <_printf_common+0xa4>
 800a63e:	3601      	adds	r6, #1
 800a640:	e7d9      	b.n	800a5f6 <_printf_common+0x8e>
	...

0800a644 <_printf_i>:
 800a644:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a648:	7e0f      	ldrb	r7, [r1, #24]
 800a64a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a64c:	2f78      	cmp	r7, #120	@ 0x78
 800a64e:	4691      	mov	r9, r2
 800a650:	4680      	mov	r8, r0
 800a652:	460c      	mov	r4, r1
 800a654:	469a      	mov	sl, r3
 800a656:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a65a:	d807      	bhi.n	800a66c <_printf_i+0x28>
 800a65c:	2f62      	cmp	r7, #98	@ 0x62
 800a65e:	d80a      	bhi.n	800a676 <_printf_i+0x32>
 800a660:	2f00      	cmp	r7, #0
 800a662:	f000 80d2 	beq.w	800a80a <_printf_i+0x1c6>
 800a666:	2f58      	cmp	r7, #88	@ 0x58
 800a668:	f000 80b9 	beq.w	800a7de <_printf_i+0x19a>
 800a66c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a670:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a674:	e03a      	b.n	800a6ec <_printf_i+0xa8>
 800a676:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a67a:	2b15      	cmp	r3, #21
 800a67c:	d8f6      	bhi.n	800a66c <_printf_i+0x28>
 800a67e:	a101      	add	r1, pc, #4	@ (adr r1, 800a684 <_printf_i+0x40>)
 800a680:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a684:	0800a6dd 	.word	0x0800a6dd
 800a688:	0800a6f1 	.word	0x0800a6f1
 800a68c:	0800a66d 	.word	0x0800a66d
 800a690:	0800a66d 	.word	0x0800a66d
 800a694:	0800a66d 	.word	0x0800a66d
 800a698:	0800a66d 	.word	0x0800a66d
 800a69c:	0800a6f1 	.word	0x0800a6f1
 800a6a0:	0800a66d 	.word	0x0800a66d
 800a6a4:	0800a66d 	.word	0x0800a66d
 800a6a8:	0800a66d 	.word	0x0800a66d
 800a6ac:	0800a66d 	.word	0x0800a66d
 800a6b0:	0800a7f1 	.word	0x0800a7f1
 800a6b4:	0800a71b 	.word	0x0800a71b
 800a6b8:	0800a7ab 	.word	0x0800a7ab
 800a6bc:	0800a66d 	.word	0x0800a66d
 800a6c0:	0800a66d 	.word	0x0800a66d
 800a6c4:	0800a813 	.word	0x0800a813
 800a6c8:	0800a66d 	.word	0x0800a66d
 800a6cc:	0800a71b 	.word	0x0800a71b
 800a6d0:	0800a66d 	.word	0x0800a66d
 800a6d4:	0800a66d 	.word	0x0800a66d
 800a6d8:	0800a7b3 	.word	0x0800a7b3
 800a6dc:	6833      	ldr	r3, [r6, #0]
 800a6de:	1d1a      	adds	r2, r3, #4
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	6032      	str	r2, [r6, #0]
 800a6e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a6e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a6ec:	2301      	movs	r3, #1
 800a6ee:	e09d      	b.n	800a82c <_printf_i+0x1e8>
 800a6f0:	6833      	ldr	r3, [r6, #0]
 800a6f2:	6820      	ldr	r0, [r4, #0]
 800a6f4:	1d19      	adds	r1, r3, #4
 800a6f6:	6031      	str	r1, [r6, #0]
 800a6f8:	0606      	lsls	r6, r0, #24
 800a6fa:	d501      	bpl.n	800a700 <_printf_i+0xbc>
 800a6fc:	681d      	ldr	r5, [r3, #0]
 800a6fe:	e003      	b.n	800a708 <_printf_i+0xc4>
 800a700:	0645      	lsls	r5, r0, #25
 800a702:	d5fb      	bpl.n	800a6fc <_printf_i+0xb8>
 800a704:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a708:	2d00      	cmp	r5, #0
 800a70a:	da03      	bge.n	800a714 <_printf_i+0xd0>
 800a70c:	232d      	movs	r3, #45	@ 0x2d
 800a70e:	426d      	negs	r5, r5
 800a710:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a714:	4859      	ldr	r0, [pc, #356]	@ (800a87c <_printf_i+0x238>)
 800a716:	230a      	movs	r3, #10
 800a718:	e011      	b.n	800a73e <_printf_i+0xfa>
 800a71a:	6821      	ldr	r1, [r4, #0]
 800a71c:	6833      	ldr	r3, [r6, #0]
 800a71e:	0608      	lsls	r0, r1, #24
 800a720:	f853 5b04 	ldr.w	r5, [r3], #4
 800a724:	d402      	bmi.n	800a72c <_printf_i+0xe8>
 800a726:	0649      	lsls	r1, r1, #25
 800a728:	bf48      	it	mi
 800a72a:	b2ad      	uxthmi	r5, r5
 800a72c:	2f6f      	cmp	r7, #111	@ 0x6f
 800a72e:	4853      	ldr	r0, [pc, #332]	@ (800a87c <_printf_i+0x238>)
 800a730:	6033      	str	r3, [r6, #0]
 800a732:	bf14      	ite	ne
 800a734:	230a      	movne	r3, #10
 800a736:	2308      	moveq	r3, #8
 800a738:	2100      	movs	r1, #0
 800a73a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a73e:	6866      	ldr	r6, [r4, #4]
 800a740:	60a6      	str	r6, [r4, #8]
 800a742:	2e00      	cmp	r6, #0
 800a744:	bfa2      	ittt	ge
 800a746:	6821      	ldrge	r1, [r4, #0]
 800a748:	f021 0104 	bicge.w	r1, r1, #4
 800a74c:	6021      	strge	r1, [r4, #0]
 800a74e:	b90d      	cbnz	r5, 800a754 <_printf_i+0x110>
 800a750:	2e00      	cmp	r6, #0
 800a752:	d04b      	beq.n	800a7ec <_printf_i+0x1a8>
 800a754:	4616      	mov	r6, r2
 800a756:	fbb5 f1f3 	udiv	r1, r5, r3
 800a75a:	fb03 5711 	mls	r7, r3, r1, r5
 800a75e:	5dc7      	ldrb	r7, [r0, r7]
 800a760:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a764:	462f      	mov	r7, r5
 800a766:	42bb      	cmp	r3, r7
 800a768:	460d      	mov	r5, r1
 800a76a:	d9f4      	bls.n	800a756 <_printf_i+0x112>
 800a76c:	2b08      	cmp	r3, #8
 800a76e:	d10b      	bne.n	800a788 <_printf_i+0x144>
 800a770:	6823      	ldr	r3, [r4, #0]
 800a772:	07df      	lsls	r7, r3, #31
 800a774:	d508      	bpl.n	800a788 <_printf_i+0x144>
 800a776:	6923      	ldr	r3, [r4, #16]
 800a778:	6861      	ldr	r1, [r4, #4]
 800a77a:	4299      	cmp	r1, r3
 800a77c:	bfde      	ittt	le
 800a77e:	2330      	movle	r3, #48	@ 0x30
 800a780:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a784:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800a788:	1b92      	subs	r2, r2, r6
 800a78a:	6122      	str	r2, [r4, #16]
 800a78c:	f8cd a000 	str.w	sl, [sp]
 800a790:	464b      	mov	r3, r9
 800a792:	aa03      	add	r2, sp, #12
 800a794:	4621      	mov	r1, r4
 800a796:	4640      	mov	r0, r8
 800a798:	f7ff fee6 	bl	800a568 <_printf_common>
 800a79c:	3001      	adds	r0, #1
 800a79e:	d14a      	bne.n	800a836 <_printf_i+0x1f2>
 800a7a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a7a4:	b004      	add	sp, #16
 800a7a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7aa:	6823      	ldr	r3, [r4, #0]
 800a7ac:	f043 0320 	orr.w	r3, r3, #32
 800a7b0:	6023      	str	r3, [r4, #0]
 800a7b2:	4833      	ldr	r0, [pc, #204]	@ (800a880 <_printf_i+0x23c>)
 800a7b4:	2778      	movs	r7, #120	@ 0x78
 800a7b6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a7ba:	6823      	ldr	r3, [r4, #0]
 800a7bc:	6831      	ldr	r1, [r6, #0]
 800a7be:	061f      	lsls	r7, r3, #24
 800a7c0:	f851 5b04 	ldr.w	r5, [r1], #4
 800a7c4:	d402      	bmi.n	800a7cc <_printf_i+0x188>
 800a7c6:	065f      	lsls	r7, r3, #25
 800a7c8:	bf48      	it	mi
 800a7ca:	b2ad      	uxthmi	r5, r5
 800a7cc:	6031      	str	r1, [r6, #0]
 800a7ce:	07d9      	lsls	r1, r3, #31
 800a7d0:	bf44      	itt	mi
 800a7d2:	f043 0320 	orrmi.w	r3, r3, #32
 800a7d6:	6023      	strmi	r3, [r4, #0]
 800a7d8:	b11d      	cbz	r5, 800a7e2 <_printf_i+0x19e>
 800a7da:	2310      	movs	r3, #16
 800a7dc:	e7ac      	b.n	800a738 <_printf_i+0xf4>
 800a7de:	4827      	ldr	r0, [pc, #156]	@ (800a87c <_printf_i+0x238>)
 800a7e0:	e7e9      	b.n	800a7b6 <_printf_i+0x172>
 800a7e2:	6823      	ldr	r3, [r4, #0]
 800a7e4:	f023 0320 	bic.w	r3, r3, #32
 800a7e8:	6023      	str	r3, [r4, #0]
 800a7ea:	e7f6      	b.n	800a7da <_printf_i+0x196>
 800a7ec:	4616      	mov	r6, r2
 800a7ee:	e7bd      	b.n	800a76c <_printf_i+0x128>
 800a7f0:	6833      	ldr	r3, [r6, #0]
 800a7f2:	6825      	ldr	r5, [r4, #0]
 800a7f4:	6961      	ldr	r1, [r4, #20]
 800a7f6:	1d18      	adds	r0, r3, #4
 800a7f8:	6030      	str	r0, [r6, #0]
 800a7fa:	062e      	lsls	r6, r5, #24
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	d501      	bpl.n	800a804 <_printf_i+0x1c0>
 800a800:	6019      	str	r1, [r3, #0]
 800a802:	e002      	b.n	800a80a <_printf_i+0x1c6>
 800a804:	0668      	lsls	r0, r5, #25
 800a806:	d5fb      	bpl.n	800a800 <_printf_i+0x1bc>
 800a808:	8019      	strh	r1, [r3, #0]
 800a80a:	2300      	movs	r3, #0
 800a80c:	6123      	str	r3, [r4, #16]
 800a80e:	4616      	mov	r6, r2
 800a810:	e7bc      	b.n	800a78c <_printf_i+0x148>
 800a812:	6833      	ldr	r3, [r6, #0]
 800a814:	1d1a      	adds	r2, r3, #4
 800a816:	6032      	str	r2, [r6, #0]
 800a818:	681e      	ldr	r6, [r3, #0]
 800a81a:	6862      	ldr	r2, [r4, #4]
 800a81c:	2100      	movs	r1, #0
 800a81e:	4630      	mov	r0, r6
 800a820:	f7f5 fd5e 	bl	80002e0 <memchr>
 800a824:	b108      	cbz	r0, 800a82a <_printf_i+0x1e6>
 800a826:	1b80      	subs	r0, r0, r6
 800a828:	6060      	str	r0, [r4, #4]
 800a82a:	6863      	ldr	r3, [r4, #4]
 800a82c:	6123      	str	r3, [r4, #16]
 800a82e:	2300      	movs	r3, #0
 800a830:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a834:	e7aa      	b.n	800a78c <_printf_i+0x148>
 800a836:	6923      	ldr	r3, [r4, #16]
 800a838:	4632      	mov	r2, r6
 800a83a:	4649      	mov	r1, r9
 800a83c:	4640      	mov	r0, r8
 800a83e:	47d0      	blx	sl
 800a840:	3001      	adds	r0, #1
 800a842:	d0ad      	beq.n	800a7a0 <_printf_i+0x15c>
 800a844:	6823      	ldr	r3, [r4, #0]
 800a846:	079b      	lsls	r3, r3, #30
 800a848:	d413      	bmi.n	800a872 <_printf_i+0x22e>
 800a84a:	68e0      	ldr	r0, [r4, #12]
 800a84c:	9b03      	ldr	r3, [sp, #12]
 800a84e:	4298      	cmp	r0, r3
 800a850:	bfb8      	it	lt
 800a852:	4618      	movlt	r0, r3
 800a854:	e7a6      	b.n	800a7a4 <_printf_i+0x160>
 800a856:	2301      	movs	r3, #1
 800a858:	4632      	mov	r2, r6
 800a85a:	4649      	mov	r1, r9
 800a85c:	4640      	mov	r0, r8
 800a85e:	47d0      	blx	sl
 800a860:	3001      	adds	r0, #1
 800a862:	d09d      	beq.n	800a7a0 <_printf_i+0x15c>
 800a864:	3501      	adds	r5, #1
 800a866:	68e3      	ldr	r3, [r4, #12]
 800a868:	9903      	ldr	r1, [sp, #12]
 800a86a:	1a5b      	subs	r3, r3, r1
 800a86c:	42ab      	cmp	r3, r5
 800a86e:	dcf2      	bgt.n	800a856 <_printf_i+0x212>
 800a870:	e7eb      	b.n	800a84a <_printf_i+0x206>
 800a872:	2500      	movs	r5, #0
 800a874:	f104 0619 	add.w	r6, r4, #25
 800a878:	e7f5      	b.n	800a866 <_printf_i+0x222>
 800a87a:	bf00      	nop
 800a87c:	0800c987 	.word	0x0800c987
 800a880:	0800c998 	.word	0x0800c998

0800a884 <__sflush_r>:
 800a884:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a88c:	0716      	lsls	r6, r2, #28
 800a88e:	4605      	mov	r5, r0
 800a890:	460c      	mov	r4, r1
 800a892:	d454      	bmi.n	800a93e <__sflush_r+0xba>
 800a894:	684b      	ldr	r3, [r1, #4]
 800a896:	2b00      	cmp	r3, #0
 800a898:	dc02      	bgt.n	800a8a0 <__sflush_r+0x1c>
 800a89a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	dd48      	ble.n	800a932 <__sflush_r+0xae>
 800a8a0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a8a2:	2e00      	cmp	r6, #0
 800a8a4:	d045      	beq.n	800a932 <__sflush_r+0xae>
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a8ac:	682f      	ldr	r7, [r5, #0]
 800a8ae:	6a21      	ldr	r1, [r4, #32]
 800a8b0:	602b      	str	r3, [r5, #0]
 800a8b2:	d030      	beq.n	800a916 <__sflush_r+0x92>
 800a8b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a8b6:	89a3      	ldrh	r3, [r4, #12]
 800a8b8:	0759      	lsls	r1, r3, #29
 800a8ba:	d505      	bpl.n	800a8c8 <__sflush_r+0x44>
 800a8bc:	6863      	ldr	r3, [r4, #4]
 800a8be:	1ad2      	subs	r2, r2, r3
 800a8c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a8c2:	b10b      	cbz	r3, 800a8c8 <__sflush_r+0x44>
 800a8c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a8c6:	1ad2      	subs	r2, r2, r3
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a8cc:	6a21      	ldr	r1, [r4, #32]
 800a8ce:	4628      	mov	r0, r5
 800a8d0:	47b0      	blx	r6
 800a8d2:	1c43      	adds	r3, r0, #1
 800a8d4:	89a3      	ldrh	r3, [r4, #12]
 800a8d6:	d106      	bne.n	800a8e6 <__sflush_r+0x62>
 800a8d8:	6829      	ldr	r1, [r5, #0]
 800a8da:	291d      	cmp	r1, #29
 800a8dc:	d82b      	bhi.n	800a936 <__sflush_r+0xb2>
 800a8de:	4a2a      	ldr	r2, [pc, #168]	@ (800a988 <__sflush_r+0x104>)
 800a8e0:	410a      	asrs	r2, r1
 800a8e2:	07d6      	lsls	r6, r2, #31
 800a8e4:	d427      	bmi.n	800a936 <__sflush_r+0xb2>
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	6062      	str	r2, [r4, #4]
 800a8ea:	04d9      	lsls	r1, r3, #19
 800a8ec:	6922      	ldr	r2, [r4, #16]
 800a8ee:	6022      	str	r2, [r4, #0]
 800a8f0:	d504      	bpl.n	800a8fc <__sflush_r+0x78>
 800a8f2:	1c42      	adds	r2, r0, #1
 800a8f4:	d101      	bne.n	800a8fa <__sflush_r+0x76>
 800a8f6:	682b      	ldr	r3, [r5, #0]
 800a8f8:	b903      	cbnz	r3, 800a8fc <__sflush_r+0x78>
 800a8fa:	6560      	str	r0, [r4, #84]	@ 0x54
 800a8fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a8fe:	602f      	str	r7, [r5, #0]
 800a900:	b1b9      	cbz	r1, 800a932 <__sflush_r+0xae>
 800a902:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a906:	4299      	cmp	r1, r3
 800a908:	d002      	beq.n	800a910 <__sflush_r+0x8c>
 800a90a:	4628      	mov	r0, r5
 800a90c:	f7ff fbf2 	bl	800a0f4 <_free_r>
 800a910:	2300      	movs	r3, #0
 800a912:	6363      	str	r3, [r4, #52]	@ 0x34
 800a914:	e00d      	b.n	800a932 <__sflush_r+0xae>
 800a916:	2301      	movs	r3, #1
 800a918:	4628      	mov	r0, r5
 800a91a:	47b0      	blx	r6
 800a91c:	4602      	mov	r2, r0
 800a91e:	1c50      	adds	r0, r2, #1
 800a920:	d1c9      	bne.n	800a8b6 <__sflush_r+0x32>
 800a922:	682b      	ldr	r3, [r5, #0]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d0c6      	beq.n	800a8b6 <__sflush_r+0x32>
 800a928:	2b1d      	cmp	r3, #29
 800a92a:	d001      	beq.n	800a930 <__sflush_r+0xac>
 800a92c:	2b16      	cmp	r3, #22
 800a92e:	d11e      	bne.n	800a96e <__sflush_r+0xea>
 800a930:	602f      	str	r7, [r5, #0]
 800a932:	2000      	movs	r0, #0
 800a934:	e022      	b.n	800a97c <__sflush_r+0xf8>
 800a936:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a93a:	b21b      	sxth	r3, r3
 800a93c:	e01b      	b.n	800a976 <__sflush_r+0xf2>
 800a93e:	690f      	ldr	r7, [r1, #16]
 800a940:	2f00      	cmp	r7, #0
 800a942:	d0f6      	beq.n	800a932 <__sflush_r+0xae>
 800a944:	0793      	lsls	r3, r2, #30
 800a946:	680e      	ldr	r6, [r1, #0]
 800a948:	bf08      	it	eq
 800a94a:	694b      	ldreq	r3, [r1, #20]
 800a94c:	600f      	str	r7, [r1, #0]
 800a94e:	bf18      	it	ne
 800a950:	2300      	movne	r3, #0
 800a952:	eba6 0807 	sub.w	r8, r6, r7
 800a956:	608b      	str	r3, [r1, #8]
 800a958:	f1b8 0f00 	cmp.w	r8, #0
 800a95c:	dde9      	ble.n	800a932 <__sflush_r+0xae>
 800a95e:	6a21      	ldr	r1, [r4, #32]
 800a960:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a962:	4643      	mov	r3, r8
 800a964:	463a      	mov	r2, r7
 800a966:	4628      	mov	r0, r5
 800a968:	47b0      	blx	r6
 800a96a:	2800      	cmp	r0, #0
 800a96c:	dc08      	bgt.n	800a980 <__sflush_r+0xfc>
 800a96e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a972:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a976:	81a3      	strh	r3, [r4, #12]
 800a978:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a97c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a980:	4407      	add	r7, r0
 800a982:	eba8 0800 	sub.w	r8, r8, r0
 800a986:	e7e7      	b.n	800a958 <__sflush_r+0xd4>
 800a988:	dfbffffe 	.word	0xdfbffffe

0800a98c <_fflush_r>:
 800a98c:	b538      	push	{r3, r4, r5, lr}
 800a98e:	690b      	ldr	r3, [r1, #16]
 800a990:	4605      	mov	r5, r0
 800a992:	460c      	mov	r4, r1
 800a994:	b913      	cbnz	r3, 800a99c <_fflush_r+0x10>
 800a996:	2500      	movs	r5, #0
 800a998:	4628      	mov	r0, r5
 800a99a:	bd38      	pop	{r3, r4, r5, pc}
 800a99c:	b118      	cbz	r0, 800a9a6 <_fflush_r+0x1a>
 800a99e:	6a03      	ldr	r3, [r0, #32]
 800a9a0:	b90b      	cbnz	r3, 800a9a6 <_fflush_r+0x1a>
 800a9a2:	f7ff fa81 	bl	8009ea8 <__sinit>
 800a9a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d0f3      	beq.n	800a996 <_fflush_r+0xa>
 800a9ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a9b0:	07d0      	lsls	r0, r2, #31
 800a9b2:	d404      	bmi.n	800a9be <_fflush_r+0x32>
 800a9b4:	0599      	lsls	r1, r3, #22
 800a9b6:	d402      	bmi.n	800a9be <_fflush_r+0x32>
 800a9b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a9ba:	f7ff fb8a 	bl	800a0d2 <__retarget_lock_acquire_recursive>
 800a9be:	4628      	mov	r0, r5
 800a9c0:	4621      	mov	r1, r4
 800a9c2:	f7ff ff5f 	bl	800a884 <__sflush_r>
 800a9c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a9c8:	07da      	lsls	r2, r3, #31
 800a9ca:	4605      	mov	r5, r0
 800a9cc:	d4e4      	bmi.n	800a998 <_fflush_r+0xc>
 800a9ce:	89a3      	ldrh	r3, [r4, #12]
 800a9d0:	059b      	lsls	r3, r3, #22
 800a9d2:	d4e1      	bmi.n	800a998 <_fflush_r+0xc>
 800a9d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a9d6:	f7ff fb7d 	bl	800a0d4 <__retarget_lock_release_recursive>
 800a9da:	e7dd      	b.n	800a998 <_fflush_r+0xc>

0800a9dc <__swbuf_r>:
 800a9dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9de:	460e      	mov	r6, r1
 800a9e0:	4614      	mov	r4, r2
 800a9e2:	4605      	mov	r5, r0
 800a9e4:	b118      	cbz	r0, 800a9ee <__swbuf_r+0x12>
 800a9e6:	6a03      	ldr	r3, [r0, #32]
 800a9e8:	b90b      	cbnz	r3, 800a9ee <__swbuf_r+0x12>
 800a9ea:	f7ff fa5d 	bl	8009ea8 <__sinit>
 800a9ee:	69a3      	ldr	r3, [r4, #24]
 800a9f0:	60a3      	str	r3, [r4, #8]
 800a9f2:	89a3      	ldrh	r3, [r4, #12]
 800a9f4:	071a      	lsls	r2, r3, #28
 800a9f6:	d501      	bpl.n	800a9fc <__swbuf_r+0x20>
 800a9f8:	6923      	ldr	r3, [r4, #16]
 800a9fa:	b943      	cbnz	r3, 800aa0e <__swbuf_r+0x32>
 800a9fc:	4621      	mov	r1, r4
 800a9fe:	4628      	mov	r0, r5
 800aa00:	f000 f82a 	bl	800aa58 <__swsetup_r>
 800aa04:	b118      	cbz	r0, 800aa0e <__swbuf_r+0x32>
 800aa06:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800aa0a:	4638      	mov	r0, r7
 800aa0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa0e:	6823      	ldr	r3, [r4, #0]
 800aa10:	6922      	ldr	r2, [r4, #16]
 800aa12:	1a98      	subs	r0, r3, r2
 800aa14:	6963      	ldr	r3, [r4, #20]
 800aa16:	b2f6      	uxtb	r6, r6
 800aa18:	4283      	cmp	r3, r0
 800aa1a:	4637      	mov	r7, r6
 800aa1c:	dc05      	bgt.n	800aa2a <__swbuf_r+0x4e>
 800aa1e:	4621      	mov	r1, r4
 800aa20:	4628      	mov	r0, r5
 800aa22:	f7ff ffb3 	bl	800a98c <_fflush_r>
 800aa26:	2800      	cmp	r0, #0
 800aa28:	d1ed      	bne.n	800aa06 <__swbuf_r+0x2a>
 800aa2a:	68a3      	ldr	r3, [r4, #8]
 800aa2c:	3b01      	subs	r3, #1
 800aa2e:	60a3      	str	r3, [r4, #8]
 800aa30:	6823      	ldr	r3, [r4, #0]
 800aa32:	1c5a      	adds	r2, r3, #1
 800aa34:	6022      	str	r2, [r4, #0]
 800aa36:	701e      	strb	r6, [r3, #0]
 800aa38:	6962      	ldr	r2, [r4, #20]
 800aa3a:	1c43      	adds	r3, r0, #1
 800aa3c:	429a      	cmp	r2, r3
 800aa3e:	d004      	beq.n	800aa4a <__swbuf_r+0x6e>
 800aa40:	89a3      	ldrh	r3, [r4, #12]
 800aa42:	07db      	lsls	r3, r3, #31
 800aa44:	d5e1      	bpl.n	800aa0a <__swbuf_r+0x2e>
 800aa46:	2e0a      	cmp	r6, #10
 800aa48:	d1df      	bne.n	800aa0a <__swbuf_r+0x2e>
 800aa4a:	4621      	mov	r1, r4
 800aa4c:	4628      	mov	r0, r5
 800aa4e:	f7ff ff9d 	bl	800a98c <_fflush_r>
 800aa52:	2800      	cmp	r0, #0
 800aa54:	d0d9      	beq.n	800aa0a <__swbuf_r+0x2e>
 800aa56:	e7d6      	b.n	800aa06 <__swbuf_r+0x2a>

0800aa58 <__swsetup_r>:
 800aa58:	b538      	push	{r3, r4, r5, lr}
 800aa5a:	4b29      	ldr	r3, [pc, #164]	@ (800ab00 <__swsetup_r+0xa8>)
 800aa5c:	4605      	mov	r5, r0
 800aa5e:	6818      	ldr	r0, [r3, #0]
 800aa60:	460c      	mov	r4, r1
 800aa62:	b118      	cbz	r0, 800aa6c <__swsetup_r+0x14>
 800aa64:	6a03      	ldr	r3, [r0, #32]
 800aa66:	b90b      	cbnz	r3, 800aa6c <__swsetup_r+0x14>
 800aa68:	f7ff fa1e 	bl	8009ea8 <__sinit>
 800aa6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa70:	0719      	lsls	r1, r3, #28
 800aa72:	d422      	bmi.n	800aaba <__swsetup_r+0x62>
 800aa74:	06da      	lsls	r2, r3, #27
 800aa76:	d407      	bmi.n	800aa88 <__swsetup_r+0x30>
 800aa78:	2209      	movs	r2, #9
 800aa7a:	602a      	str	r2, [r5, #0]
 800aa7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa80:	81a3      	strh	r3, [r4, #12]
 800aa82:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aa86:	e033      	b.n	800aaf0 <__swsetup_r+0x98>
 800aa88:	0758      	lsls	r0, r3, #29
 800aa8a:	d512      	bpl.n	800aab2 <__swsetup_r+0x5a>
 800aa8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aa8e:	b141      	cbz	r1, 800aaa2 <__swsetup_r+0x4a>
 800aa90:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aa94:	4299      	cmp	r1, r3
 800aa96:	d002      	beq.n	800aa9e <__swsetup_r+0x46>
 800aa98:	4628      	mov	r0, r5
 800aa9a:	f7ff fb2b 	bl	800a0f4 <_free_r>
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	6363      	str	r3, [r4, #52]	@ 0x34
 800aaa2:	89a3      	ldrh	r3, [r4, #12]
 800aaa4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800aaa8:	81a3      	strh	r3, [r4, #12]
 800aaaa:	2300      	movs	r3, #0
 800aaac:	6063      	str	r3, [r4, #4]
 800aaae:	6923      	ldr	r3, [r4, #16]
 800aab0:	6023      	str	r3, [r4, #0]
 800aab2:	89a3      	ldrh	r3, [r4, #12]
 800aab4:	f043 0308 	orr.w	r3, r3, #8
 800aab8:	81a3      	strh	r3, [r4, #12]
 800aaba:	6923      	ldr	r3, [r4, #16]
 800aabc:	b94b      	cbnz	r3, 800aad2 <__swsetup_r+0x7a>
 800aabe:	89a3      	ldrh	r3, [r4, #12]
 800aac0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800aac4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aac8:	d003      	beq.n	800aad2 <__swsetup_r+0x7a>
 800aaca:	4621      	mov	r1, r4
 800aacc:	4628      	mov	r0, r5
 800aace:	f000 f84f 	bl	800ab70 <__smakebuf_r>
 800aad2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aad6:	f013 0201 	ands.w	r2, r3, #1
 800aada:	d00a      	beq.n	800aaf2 <__swsetup_r+0x9a>
 800aadc:	2200      	movs	r2, #0
 800aade:	60a2      	str	r2, [r4, #8]
 800aae0:	6962      	ldr	r2, [r4, #20]
 800aae2:	4252      	negs	r2, r2
 800aae4:	61a2      	str	r2, [r4, #24]
 800aae6:	6922      	ldr	r2, [r4, #16]
 800aae8:	b942      	cbnz	r2, 800aafc <__swsetup_r+0xa4>
 800aaea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800aaee:	d1c5      	bne.n	800aa7c <__swsetup_r+0x24>
 800aaf0:	bd38      	pop	{r3, r4, r5, pc}
 800aaf2:	0799      	lsls	r1, r3, #30
 800aaf4:	bf58      	it	pl
 800aaf6:	6962      	ldrpl	r2, [r4, #20]
 800aaf8:	60a2      	str	r2, [r4, #8]
 800aafa:	e7f4      	b.n	800aae6 <__swsetup_r+0x8e>
 800aafc:	2000      	movs	r0, #0
 800aafe:	e7f7      	b.n	800aaf0 <__swsetup_r+0x98>
 800ab00:	24000018 	.word	0x24000018

0800ab04 <_sbrk_r>:
 800ab04:	b538      	push	{r3, r4, r5, lr}
 800ab06:	4d06      	ldr	r5, [pc, #24]	@ (800ab20 <_sbrk_r+0x1c>)
 800ab08:	2300      	movs	r3, #0
 800ab0a:	4604      	mov	r4, r0
 800ab0c:	4608      	mov	r0, r1
 800ab0e:	602b      	str	r3, [r5, #0]
 800ab10:	f7f6 f83c 	bl	8000b8c <_sbrk>
 800ab14:	1c43      	adds	r3, r0, #1
 800ab16:	d102      	bne.n	800ab1e <_sbrk_r+0x1a>
 800ab18:	682b      	ldr	r3, [r5, #0]
 800ab1a:	b103      	cbz	r3, 800ab1e <_sbrk_r+0x1a>
 800ab1c:	6023      	str	r3, [r4, #0]
 800ab1e:	bd38      	pop	{r3, r4, r5, pc}
 800ab20:	2400a598 	.word	0x2400a598

0800ab24 <__swhatbuf_r>:
 800ab24:	b570      	push	{r4, r5, r6, lr}
 800ab26:	460c      	mov	r4, r1
 800ab28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab2c:	2900      	cmp	r1, #0
 800ab2e:	b096      	sub	sp, #88	@ 0x58
 800ab30:	4615      	mov	r5, r2
 800ab32:	461e      	mov	r6, r3
 800ab34:	da0d      	bge.n	800ab52 <__swhatbuf_r+0x2e>
 800ab36:	89a3      	ldrh	r3, [r4, #12]
 800ab38:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ab3c:	f04f 0100 	mov.w	r1, #0
 800ab40:	bf14      	ite	ne
 800ab42:	2340      	movne	r3, #64	@ 0x40
 800ab44:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ab48:	2000      	movs	r0, #0
 800ab4a:	6031      	str	r1, [r6, #0]
 800ab4c:	602b      	str	r3, [r5, #0]
 800ab4e:	b016      	add	sp, #88	@ 0x58
 800ab50:	bd70      	pop	{r4, r5, r6, pc}
 800ab52:	466a      	mov	r2, sp
 800ab54:	f000 f848 	bl	800abe8 <_fstat_r>
 800ab58:	2800      	cmp	r0, #0
 800ab5a:	dbec      	blt.n	800ab36 <__swhatbuf_r+0x12>
 800ab5c:	9901      	ldr	r1, [sp, #4]
 800ab5e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ab62:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ab66:	4259      	negs	r1, r3
 800ab68:	4159      	adcs	r1, r3
 800ab6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ab6e:	e7eb      	b.n	800ab48 <__swhatbuf_r+0x24>

0800ab70 <__smakebuf_r>:
 800ab70:	898b      	ldrh	r3, [r1, #12]
 800ab72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ab74:	079d      	lsls	r5, r3, #30
 800ab76:	4606      	mov	r6, r0
 800ab78:	460c      	mov	r4, r1
 800ab7a:	d507      	bpl.n	800ab8c <__smakebuf_r+0x1c>
 800ab7c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ab80:	6023      	str	r3, [r4, #0]
 800ab82:	6123      	str	r3, [r4, #16]
 800ab84:	2301      	movs	r3, #1
 800ab86:	6163      	str	r3, [r4, #20]
 800ab88:	b003      	add	sp, #12
 800ab8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab8c:	ab01      	add	r3, sp, #4
 800ab8e:	466a      	mov	r2, sp
 800ab90:	f7ff ffc8 	bl	800ab24 <__swhatbuf_r>
 800ab94:	9f00      	ldr	r7, [sp, #0]
 800ab96:	4605      	mov	r5, r0
 800ab98:	4639      	mov	r1, r7
 800ab9a:	4630      	mov	r0, r6
 800ab9c:	f7ff fb16 	bl	800a1cc <_malloc_r>
 800aba0:	b948      	cbnz	r0, 800abb6 <__smakebuf_r+0x46>
 800aba2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aba6:	059a      	lsls	r2, r3, #22
 800aba8:	d4ee      	bmi.n	800ab88 <__smakebuf_r+0x18>
 800abaa:	f023 0303 	bic.w	r3, r3, #3
 800abae:	f043 0302 	orr.w	r3, r3, #2
 800abb2:	81a3      	strh	r3, [r4, #12]
 800abb4:	e7e2      	b.n	800ab7c <__smakebuf_r+0xc>
 800abb6:	89a3      	ldrh	r3, [r4, #12]
 800abb8:	6020      	str	r0, [r4, #0]
 800abba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800abbe:	81a3      	strh	r3, [r4, #12]
 800abc0:	9b01      	ldr	r3, [sp, #4]
 800abc2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800abc6:	b15b      	cbz	r3, 800abe0 <__smakebuf_r+0x70>
 800abc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800abcc:	4630      	mov	r0, r6
 800abce:	f000 f81d 	bl	800ac0c <_isatty_r>
 800abd2:	b128      	cbz	r0, 800abe0 <__smakebuf_r+0x70>
 800abd4:	89a3      	ldrh	r3, [r4, #12]
 800abd6:	f023 0303 	bic.w	r3, r3, #3
 800abda:	f043 0301 	orr.w	r3, r3, #1
 800abde:	81a3      	strh	r3, [r4, #12]
 800abe0:	89a3      	ldrh	r3, [r4, #12]
 800abe2:	431d      	orrs	r5, r3
 800abe4:	81a5      	strh	r5, [r4, #12]
 800abe6:	e7cf      	b.n	800ab88 <__smakebuf_r+0x18>

0800abe8 <_fstat_r>:
 800abe8:	b538      	push	{r3, r4, r5, lr}
 800abea:	4d07      	ldr	r5, [pc, #28]	@ (800ac08 <_fstat_r+0x20>)
 800abec:	2300      	movs	r3, #0
 800abee:	4604      	mov	r4, r0
 800abf0:	4608      	mov	r0, r1
 800abf2:	4611      	mov	r1, r2
 800abf4:	602b      	str	r3, [r5, #0]
 800abf6:	f7f5 ffa0 	bl	8000b3a <_fstat>
 800abfa:	1c43      	adds	r3, r0, #1
 800abfc:	d102      	bne.n	800ac04 <_fstat_r+0x1c>
 800abfe:	682b      	ldr	r3, [r5, #0]
 800ac00:	b103      	cbz	r3, 800ac04 <_fstat_r+0x1c>
 800ac02:	6023      	str	r3, [r4, #0]
 800ac04:	bd38      	pop	{r3, r4, r5, pc}
 800ac06:	bf00      	nop
 800ac08:	2400a598 	.word	0x2400a598

0800ac0c <_isatty_r>:
 800ac0c:	b538      	push	{r3, r4, r5, lr}
 800ac0e:	4d06      	ldr	r5, [pc, #24]	@ (800ac28 <_isatty_r+0x1c>)
 800ac10:	2300      	movs	r3, #0
 800ac12:	4604      	mov	r4, r0
 800ac14:	4608      	mov	r0, r1
 800ac16:	602b      	str	r3, [r5, #0]
 800ac18:	f7f5 ff9f 	bl	8000b5a <_isatty>
 800ac1c:	1c43      	adds	r3, r0, #1
 800ac1e:	d102      	bne.n	800ac26 <_isatty_r+0x1a>
 800ac20:	682b      	ldr	r3, [r5, #0]
 800ac22:	b103      	cbz	r3, 800ac26 <_isatty_r+0x1a>
 800ac24:	6023      	str	r3, [r4, #0]
 800ac26:	bd38      	pop	{r3, r4, r5, pc}
 800ac28:	2400a598 	.word	0x2400a598

0800ac2c <_init>:
 800ac2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac2e:	bf00      	nop
 800ac30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac32:	bc08      	pop	{r3}
 800ac34:	469e      	mov	lr, r3
 800ac36:	4770      	bx	lr

0800ac38 <_fini>:
 800ac38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac3a:	bf00      	nop
 800ac3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac3e:	bc08      	pop	{r3}
 800ac40:	469e      	mov	lr, r3
 800ac42:	4770      	bx	lr
