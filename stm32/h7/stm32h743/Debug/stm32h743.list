
stm32h743.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000634  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080008cc  080008cc  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080008cc  080008cc  000018cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  080008d0  080008d0  000018d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000004  24000000  080008d4  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000001c  24000004  080008d8  00002004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000020  080008d8  00002020  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
  9 .debug_info   00002438  00000000  00000000  00002032  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000004e5  00000000  00000000  0000446a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000000e8  00000000  00000000  00004950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000098  00000000  00000000  00004a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0002814b  00000000  00000000  00004ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000017ac  00000000  00000000  0002cc1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000e67d6  00000000  00000000  0002e3c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  00114b9d  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000210  00000000  00000000  00114be0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000057  00000000  00000000  00114df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000004 	.word	0x24000004
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080008b4 	.word	0x080008b4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000008 	.word	0x24000008
 80002d4:	080008b4 	.word	0x080008b4

080002d8 <init_mac_clk>:

#include "stm32h7xx.h"
#include "main.h"

void init_mac_clk(void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
	RCC->APB4ENR |= (1<<1);								//syscfg
 80002dc:	4b0e      	ldr	r3, [pc, #56]	@ (8000318 <init_mac_clk+0x40>)
 80002de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80002e2:	4a0d      	ldr	r2, [pc, #52]	@ (8000318 <init_mac_clk+0x40>)
 80002e4:	f043 0302 	orr.w	r3, r3, #2
 80002e8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
	RCC->AHB1ENR |= (1<<17)|(1<<16)|(1<<15);
 80002ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000318 <init_mac_clk+0x40>)
 80002ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80002f2:	4a09      	ldr	r2, [pc, #36]	@ (8000318 <init_mac_clk+0x40>)
 80002f4:	f443 3360 	orr.w	r3, r3, #229376	@ 0x38000
 80002f8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
	RCC->AHB4ENR |= (1<<6)|(1<<2)|(1<<1)|(1<<0);
 80002fc:	4b06      	ldr	r3, [pc, #24]	@ (8000318 <init_mac_clk+0x40>)
 80002fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000302:	4a05      	ldr	r2, [pc, #20]	@ (8000318 <init_mac_clk+0x40>)
 8000304:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
 8000308:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
}
 800030c:	bf00      	nop
 800030e:	46bd      	mov	sp, r7
 8000310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000314:	4770      	bx	lr
 8000316:	bf00      	nop
 8000318:	58024400 	.word	0x58024400

0800031c <init_mac_pin>:


void init_mac_pin(void)
{
 800031c:	b480      	push	{r7}
 800031e:	af00      	add	r7, sp, #0
	//PC1,PC4,PC5
	GPIOC->MODER &= ~((0b11<<10)|(0b11<<8)|(0b11<<2));
 8000320:	4b33      	ldr	r3, [pc, #204]	@ (80003f0 <init_mac_pin+0xd4>)
 8000322:	681a      	ldr	r2, [r3, #0]
 8000324:	4932      	ldr	r1, [pc, #200]	@ (80003f0 <init_mac_pin+0xd4>)
 8000326:	4b33      	ldr	r3, [pc, #204]	@ (80003f4 <init_mac_pin+0xd8>)
 8000328:	4013      	ands	r3, r2
 800032a:	600b      	str	r3, [r1, #0]
	GPIOC->MODER |= (0b10<<10)|(0b10<<8)|(0b10<<2);
 800032c:	4b30      	ldr	r3, [pc, #192]	@ (80003f0 <init_mac_pin+0xd4>)
 800032e:	681a      	ldr	r2, [r3, #0]
 8000330:	492f      	ldr	r1, [pc, #188]	@ (80003f0 <init_mac_pin+0xd4>)
 8000332:	f640 2308 	movw	r3, #2568	@ 0xa08
 8000336:	4313      	orrs	r3, r2
 8000338:	600b      	str	r3, [r1, #0]
	GPIOC->AFR[0] &= ~((0b1111<<20)|(0b1111<<16)|(0b1111<<4));
 800033a:	4b2d      	ldr	r3, [pc, #180]	@ (80003f0 <init_mac_pin+0xd4>)
 800033c:	6a1a      	ldr	r2, [r3, #32]
 800033e:	492c      	ldr	r1, [pc, #176]	@ (80003f0 <init_mac_pin+0xd4>)
 8000340:	4b2d      	ldr	r3, [pc, #180]	@ (80003f8 <init_mac_pin+0xdc>)
 8000342:	4013      	ands	r3, r2
 8000344:	620b      	str	r3, [r1, #32]
	GPIOC->AFR[0] |= (11<<20)|(11<<16)|(11<<4);
 8000346:	4b2a      	ldr	r3, [pc, #168]	@ (80003f0 <init_mac_pin+0xd4>)
 8000348:	6a1a      	ldr	r2, [r3, #32]
 800034a:	4929      	ldr	r1, [pc, #164]	@ (80003f0 <init_mac_pin+0xd4>)
 800034c:	4b2b      	ldr	r3, [pc, #172]	@ (80003fc <init_mac_pin+0xe0>)
 800034e:	4313      	orrs	r3, r2
 8000350:	620b      	str	r3, [r1, #32]

	//PA2,PA7
	GPIOA->MODER &= ~((0b11<<14)|(0b11<<4));
 8000352:	4b2b      	ldr	r3, [pc, #172]	@ (8000400 <init_mac_pin+0xe4>)
 8000354:	681a      	ldr	r2, [r3, #0]
 8000356:	492a      	ldr	r1, [pc, #168]	@ (8000400 <init_mac_pin+0xe4>)
 8000358:	4b2a      	ldr	r3, [pc, #168]	@ (8000404 <init_mac_pin+0xe8>)
 800035a:	4013      	ands	r3, r2
 800035c:	600b      	str	r3, [r1, #0]
	GPIOA->MODER |= (0b10<<14)|(0b10<<4);
 800035e:	4b28      	ldr	r3, [pc, #160]	@ (8000400 <init_mac_pin+0xe4>)
 8000360:	681a      	ldr	r2, [r3, #0]
 8000362:	4927      	ldr	r1, [pc, #156]	@ (8000400 <init_mac_pin+0xe4>)
 8000364:	f248 0320 	movw	r3, #32800	@ 0x8020
 8000368:	4313      	orrs	r3, r2
 800036a:	600b      	str	r3, [r1, #0]
	GPIOA->AFR[0] &= ~((0b1111<<28)|(0b1111<<8));
 800036c:	4b24      	ldr	r3, [pc, #144]	@ (8000400 <init_mac_pin+0xe4>)
 800036e:	6a1a      	ldr	r2, [r3, #32]
 8000370:	4923      	ldr	r1, [pc, #140]	@ (8000400 <init_mac_pin+0xe4>)
 8000372:	4b25      	ldr	r3, [pc, #148]	@ (8000408 <init_mac_pin+0xec>)
 8000374:	4013      	ands	r3, r2
 8000376:	620b      	str	r3, [r1, #32]
	GPIOA->AFR[0] |= (11<<28)|(11<<8);
 8000378:	4b21      	ldr	r3, [pc, #132]	@ (8000400 <init_mac_pin+0xe4>)
 800037a:	6a1a      	ldr	r2, [r3, #32]
 800037c:	4920      	ldr	r1, [pc, #128]	@ (8000400 <init_mac_pin+0xe4>)
 800037e:	4b23      	ldr	r3, [pc, #140]	@ (800040c <init_mac_pin+0xf0>)
 8000380:	4313      	orrs	r3, r2
 8000382:	620b      	str	r3, [r1, #32]

	//PB11
	GPIOB->MODER &= ~(0b11<<22);
 8000384:	4b22      	ldr	r3, [pc, #136]	@ (8000410 <init_mac_pin+0xf4>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	4a21      	ldr	r2, [pc, #132]	@ (8000410 <init_mac_pin+0xf4>)
 800038a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800038e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0b10<<22);
 8000390:	4b1f      	ldr	r3, [pc, #124]	@ (8000410 <init_mac_pin+0xf4>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a1e      	ldr	r2, [pc, #120]	@ (8000410 <init_mac_pin+0xf4>)
 8000396:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800039a:	6013      	str	r3, [r2, #0]
	GPIOB->AFR[1] &= ~((0b1111<<12));
 800039c:	4b1c      	ldr	r3, [pc, #112]	@ (8000410 <init_mac_pin+0xf4>)
 800039e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80003a0:	4a1b      	ldr	r2, [pc, #108]	@ (8000410 <init_mac_pin+0xf4>)
 80003a2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80003a6:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] |= (11<<12);
 80003a8:	4b19      	ldr	r3, [pc, #100]	@ (8000410 <init_mac_pin+0xf4>)
 80003aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80003ac:	4a18      	ldr	r2, [pc, #96]	@ (8000410 <init_mac_pin+0xf4>)
 80003ae:	f443 4330 	orr.w	r3, r3, #45056	@ 0xb000
 80003b2:	6253      	str	r3, [r2, #36]	@ 0x24

	//PG13,PG14
	GPIOG->MODER &= ~((0b11<<28)|(0b11<<26));
 80003b4:	4b17      	ldr	r3, [pc, #92]	@ (8000414 <init_mac_pin+0xf8>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	4a16      	ldr	r2, [pc, #88]	@ (8000414 <init_mac_pin+0xf8>)
 80003ba:	f023 5370 	bic.w	r3, r3, #1006632960	@ 0x3c000000
 80003be:	6013      	str	r3, [r2, #0]
	GPIOG->MODER |= (0b10<<28)|(0b10<<26);
 80003c0:	4b14      	ldr	r3, [pc, #80]	@ (8000414 <init_mac_pin+0xf8>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	4a13      	ldr	r2, [pc, #76]	@ (8000414 <init_mac_pin+0xf8>)
 80003c6:	f043 5320 	orr.w	r3, r3, #671088640	@ 0x28000000
 80003ca:	6013      	str	r3, [r2, #0]
	GPIOG->AFR[1] &= ~((0b1111<<24)|(0b1111<<20));
 80003cc:	4b11      	ldr	r3, [pc, #68]	@ (8000414 <init_mac_pin+0xf8>)
 80003ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80003d0:	4a10      	ldr	r2, [pc, #64]	@ (8000414 <init_mac_pin+0xf8>)
 80003d2:	f023 637f 	bic.w	r3, r3, #267386880	@ 0xff00000
 80003d6:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOG->AFR[1] |= (11<<24)|(11<<20);
 80003d8:	4b0e      	ldr	r3, [pc, #56]	@ (8000414 <init_mac_pin+0xf8>)
 80003da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80003dc:	4a0d      	ldr	r2, [pc, #52]	@ (8000414 <init_mac_pin+0xf8>)
 80003de:	f043 633b 	orr.w	r3, r3, #196083712	@ 0xbb00000
 80003e2:	6253      	str	r3, [r2, #36]	@ 0x24

	//

}
 80003e4:	bf00      	nop
 80003e6:	46bd      	mov	sp, r7
 80003e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ec:	4770      	bx	lr
 80003ee:	bf00      	nop
 80003f0:	58020800 	.word	0x58020800
 80003f4:	fffff0f3 	.word	0xfffff0f3
 80003f8:	ff00ff0f 	.word	0xff00ff0f
 80003fc:	00bb00b0 	.word	0x00bb00b0
 8000400:	58020000 	.word	0x58020000
 8000404:	ffff3fcf 	.word	0xffff3fcf
 8000408:	0ffff0ff 	.word	0x0ffff0ff
 800040c:	b0000b00 	.word	0xb0000b00
 8000410:	58020400 	.word	0x58020400
 8000414:	58021800 	.word	0x58021800

08000418 <write_phy>:


void write_phy(unsigned char addr, unsigned char reg, unsigned short value)
{
 8000418:	b480      	push	{r7}
 800041a:	b083      	sub	sp, #12
 800041c:	af00      	add	r7, sp, #0
 800041e:	4603      	mov	r3, r0
 8000420:	71fb      	strb	r3, [r7, #7]
 8000422:	460b      	mov	r3, r1
 8000424:	71bb      	strb	r3, [r7, #6]
 8000426:	4613      	mov	r3, r2
 8000428:	80bb      	strh	r3, [r7, #4]
  while (ETH->MACMDIOAR & (1<<0));
 800042a:	bf00      	nop
 800042c:	4b16      	ldr	r3, [pc, #88]	@ (8000488 <write_phy+0x70>)
 800042e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000432:	f003 0301 	and.w	r3, r3, #1
 8000436:	2b00      	cmp	r3, #0
 8000438:	d1f8      	bne.n	800042c <write_phy+0x14>
  ETH->MACMDIOAR = (addr<<21)|(reg<<16)|(7<<12)|(0b100<<8)|(1<<2);
 800043a:	79fb      	ldrb	r3, [r7, #7]
 800043c:	055a      	lsls	r2, r3, #21
 800043e:	79bb      	ldrb	r3, [r7, #6]
 8000440:	041b      	lsls	r3, r3, #16
 8000442:	431a      	orrs	r2, r3
 8000444:	f247 4304 	movw	r3, #29700	@ 0x7404
 8000448:	4313      	orrs	r3, r2
 800044a:	4a0f      	ldr	r2, [pc, #60]	@ (8000488 <write_phy+0x70>)
 800044c:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
  ETH->MACMDIODR = value;
 8000450:	4a0d      	ldr	r2, [pc, #52]	@ (8000488 <write_phy+0x70>)
 8000452:	88bb      	ldrh	r3, [r7, #4]
 8000454:	f8c2 3204 	str.w	r3, [r2, #516]	@ 0x204
  ETH->MACMDIOAR |= (1<<0);
 8000458:	4b0b      	ldr	r3, [pc, #44]	@ (8000488 <write_phy+0x70>)
 800045a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800045e:	4a0a      	ldr	r2, [pc, #40]	@ (8000488 <write_phy+0x70>)
 8000460:	f043 0301 	orr.w	r3, r3, #1
 8000464:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
  while (ETH->MACMDIOAR & (1<<0));
 8000468:	bf00      	nop
 800046a:	4b07      	ldr	r3, [pc, #28]	@ (8000488 <write_phy+0x70>)
 800046c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000470:	f003 0301 	and.w	r3, r3, #1
 8000474:	2b00      	cmp	r3, #0
 8000476:	d1f8      	bne.n	800046a <write_phy+0x52>
}
 8000478:	bf00      	nop
 800047a:	bf00      	nop
 800047c:	370c      	adds	r7, #12
 800047e:	46bd      	mov	sp, r7
 8000480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000484:	4770      	bx	lr
 8000486:	bf00      	nop
 8000488:	40028000 	.word	0x40028000

0800048c <read_phy>:

unsigned short read_phy(unsigned char addr, unsigned char reg)
{
 800048c:	b480      	push	{r7}
 800048e:	b083      	sub	sp, #12
 8000490:	af00      	add	r7, sp, #0
 8000492:	4603      	mov	r3, r0
 8000494:	460a      	mov	r2, r1
 8000496:	71fb      	strb	r3, [r7, #7]
 8000498:	4613      	mov	r3, r2
 800049a:	71bb      	strb	r3, [r7, #6]
	while (ETH->MACMDIOAR & (1<<0));
 800049c:	bf00      	nop
 800049e:	4b12      	ldr	r3, [pc, #72]	@ (80004e8 <read_phy+0x5c>)
 80004a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80004a4:	f003 0301 	and.w	r3, r3, #1
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d1f8      	bne.n	800049e <read_phy+0x12>
	ETH->MACMDIOAR = (addr<<21)|(reg<<16)|(7<<12)|(0b100<<8)|(0b11<<2)|(1<<0);
 80004ac:	79fb      	ldrb	r3, [r7, #7]
 80004ae:	055a      	lsls	r2, r3, #21
 80004b0:	79bb      	ldrb	r3, [r7, #6]
 80004b2:	041b      	lsls	r3, r3, #16
 80004b4:	431a      	orrs	r2, r3
 80004b6:	f247 430d 	movw	r3, #29709	@ 0x740d
 80004ba:	4313      	orrs	r3, r2
 80004bc:	4a0a      	ldr	r2, [pc, #40]	@ (80004e8 <read_phy+0x5c>)
 80004be:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
	while (ETH->MACMDIOAR & (1<<0));
 80004c2:	bf00      	nop
 80004c4:	4b08      	ldr	r3, [pc, #32]	@ (80004e8 <read_phy+0x5c>)
 80004c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80004ca:	f003 0301 	and.w	r3, r3, #1
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d1f8      	bne.n	80004c4 <read_phy+0x38>
	return ETH->MACMDIODR & 0xffff;
 80004d2:	4b05      	ldr	r3, [pc, #20]	@ (80004e8 <read_phy+0x5c>)
 80004d4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80004d8:	b29b      	uxth	r3, r3
}
 80004da:	4618      	mov	r0, r3
 80004dc:	370c      	adds	r7, #12
 80004de:	46bd      	mov	sp, r7
 80004e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	40028000 	.word	0x40028000

080004ec <init_mac>:


void init_mac(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
	init_mac_clk();
 80004f2:	f7ff fef1 	bl	80002d8 <init_mac_clk>
	init_mac_pin();
 80004f6:	f7ff ff11 	bl	800031c <init_mac_pin>

	SYSCFG->PMCR &= ~(0b111<<21);
 80004fa:	4b30      	ldr	r3, [pc, #192]	@ (80005bc <init_mac+0xd0>)
 80004fc:	685b      	ldr	r3, [r3, #4]
 80004fe:	4a2f      	ldr	r2, [pc, #188]	@ (80005bc <init_mac+0xd0>)
 8000500:	f423 0360 	bic.w	r3, r3, #14680064	@ 0xe00000
 8000504:	6053      	str	r3, [r2, #4]
	SYSCFG->PMCR |= (0b100<<21);
 8000506:	4b2d      	ldr	r3, [pc, #180]	@ (80005bc <init_mac+0xd0>)
 8000508:	685b      	ldr	r3, [r3, #4]
 800050a:	4a2c      	ldr	r2, [pc, #176]	@ (80005bc <init_mac+0xd0>)
 800050c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000510:	6053      	str	r3, [r2, #4]

	ETH->DMAMR |= (1<<0);
 8000512:	4b2b      	ldr	r3, [pc, #172]	@ (80005c0 <init_mac+0xd4>)
 8000514:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	4a29      	ldr	r2, [pc, #164]	@ (80005c0 <init_mac+0xd4>)
 800051c:	f043 0301 	orr.w	r3, r3, #1
 8000520:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8000524:	6013      	str	r3, [r2, #0]
	while(!(ETH->DMAMR & (1<<0)));
 8000526:	bf00      	nop
 8000528:	4b25      	ldr	r3, [pc, #148]	@ (80005c0 <init_mac+0xd4>)
 800052a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	f003 0301 	and.w	r3, r3, #1
 8000534:	2b00      	cmp	r3, #0
 8000536:	d0f7      	beq.n	8000528 <init_mac+0x3c>

	ETH->MACMDIOAR &= ~(0b111<<8);
 8000538:	4b21      	ldr	r3, [pc, #132]	@ (80005c0 <init_mac+0xd4>)
 800053a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800053e:	4a20      	ldr	r2, [pc, #128]	@ (80005c0 <init_mac+0xd4>)
 8000540:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000544:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
	ETH->MACMDIOAR |= 0b100;
 8000548:	4b1d      	ldr	r3, [pc, #116]	@ (80005c0 <init_mac+0xd4>)
 800054a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800054e:	4a1c      	ldr	r2, [pc, #112]	@ (80005c0 <init_mac+0xd4>)
 8000550:	f043 0304 	orr.w	r3, r3, #4
 8000554:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

	write_phy(0 , 0 , 0x8000);
 8000558:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800055c:	2100      	movs	r1, #0
 800055e:	2000      	movs	r0, #0
 8000560:	f7ff ff5a 	bl	8000418 <write_phy>
	delay(0xfffff);
 8000564:	4817      	ldr	r0, [pc, #92]	@ (80005c4 <init_mac+0xd8>)
 8000566:	f000 f82f 	bl	80005c8 <delay>
	volatile unsigned short read_reg = read_phy(0 , 0);
 800056a:	2100      	movs	r1, #0
 800056c:	2000      	movs	r0, #0
 800056e:	f7ff ff8d 	bl	800048c <read_phy>
 8000572:	4603      	mov	r3, r0
 8000574:	80fb      	strh	r3, [r7, #6]

	write_phy(0,0,0x1000);
 8000576:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800057a:	2100      	movs	r1, #0
 800057c:	2000      	movs	r0, #0
 800057e:	f7ff ff4b 	bl	8000418 <write_phy>
	delay(0xfffff);
 8000582:	4810      	ldr	r0, [pc, #64]	@ (80005c4 <init_mac+0xd8>)
 8000584:	f000 f820 	bl	80005c8 <delay>

	read_reg = 0;
 8000588:	2300      	movs	r3, #0
 800058a:	80fb      	strh	r3, [r7, #6]
	while(!(read_reg & (1<<5)))
 800058c:	e008      	b.n	80005a0 <init_mac+0xb4>
	{
		read_reg = read_phy(0 , 1);
 800058e:	2101      	movs	r1, #1
 8000590:	2000      	movs	r0, #0
 8000592:	f7ff ff7b 	bl	800048c <read_phy>
 8000596:	4603      	mov	r3, r0
 8000598:	80fb      	strh	r3, [r7, #6]
		delay(0xfffff);
 800059a:	480a      	ldr	r0, [pc, #40]	@ (80005c4 <init_mac+0xd8>)
 800059c:	f000 f814 	bl	80005c8 <delay>
	while(!(read_reg & (1<<5)))
 80005a0:	88fb      	ldrh	r3, [r7, #6]
 80005a2:	b29b      	uxth	r3, r3
 80005a4:	f003 0320 	and.w	r3, r3, #32
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d0f0      	beq.n	800058e <init_mac+0xa2>
	}

	delay(0xfffff);
 80005ac:	4805      	ldr	r0, [pc, #20]	@ (80005c4 <init_mac+0xd8>)
 80005ae:	f000 f80b 	bl	80005c8 <delay>
}
 80005b2:	bf00      	nop
 80005b4:	3708      	adds	r7, #8
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	58000400 	.word	0x58000400
 80005c0:	40028000 	.word	0x40028000
 80005c4:	000fffff 	.word	0x000fffff

080005c8 <delay>:
#include "rcc.h"
#include "stm32h7xx.h"
#include "uasrt.h"

void delay(unsigned int times)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
	while(times--);
 80005d0:	bf00      	nop
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	1e5a      	subs	r2, r3, #1
 80005d6:	607a      	str	r2, [r7, #4]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d1fa      	bne.n	80005d2 <delay+0xa>
}
 80005dc:	bf00      	nop
 80005de:	bf00      	nop
 80005e0:	370c      	adds	r7, #12
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
	...

080005ec <main>:

unsigned char tmp = 'a';

int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
	init_rcc();
 80005f0:	f000 f810 	bl	8000614 <init_rcc>
	init_usart();
 80005f4:	f000 f8d2 	bl	800079c <init_usart>
	init_mac();
 80005f8:	f7ff ff78 	bl	80004ec <init_mac>
	while(1)
	{
		delay(5000);
 80005fc:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000600:	f7ff ffe2 	bl	80005c8 <delay>
		usart1_send(&tmp , 1);
 8000604:	2101      	movs	r1, #1
 8000606:	4802      	ldr	r0, [pc, #8]	@ (8000610 <main+0x24>)
 8000608:	f000 f8e0 	bl	80007cc <usart1_send>
		delay(5000);
 800060c:	bf00      	nop
 800060e:	e7f5      	b.n	80005fc <main+0x10>
 8000610:	24000000 	.word	0x24000000

08000614 <init_rcc>:
#include "stm32h7xx.h"


void init_rcc(void)
{
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
	SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));
 800061a:	4b33      	ldr	r3, [pc, #204]	@ (80006e8 <init_rcc+0xd4>)
 800061c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000620:	4a31      	ldr	r2, [pc, #196]	@ (80006e8 <init_rcc+0xd4>)
 8000622:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000626:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	PWR->D3CR |= (3<<14);
 800062a:	4b30      	ldr	r3, [pc, #192]	@ (80006ec <init_rcc+0xd8>)
 800062c:	699b      	ldr	r3, [r3, #24]
 800062e:	4a2f      	ldr	r2, [pc, #188]	@ (80006ec <init_rcc+0xd8>)
 8000630:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000634:	6193      	str	r3, [r2, #24]
	FLASH->KEYR1 = 0x45670123;
 8000636:	4b2e      	ldr	r3, [pc, #184]	@ (80006f0 <init_rcc+0xdc>)
 8000638:	4a2e      	ldr	r2, [pc, #184]	@ (80006f4 <init_rcc+0xe0>)
 800063a:	605a      	str	r2, [r3, #4]
	FLASH->KEYR1 = 0xCDEF89AB;
 800063c:	4b2c      	ldr	r3, [pc, #176]	@ (80006f0 <init_rcc+0xdc>)
 800063e:	4a2e      	ldr	r2, [pc, #184]	@ (80006f8 <init_rcc+0xe4>)
 8000640:	605a      	str	r2, [r3, #4]
	FLASH->ACR = 0x1f;
 8000642:	4b2b      	ldr	r3, [pc, #172]	@ (80006f0 <init_rcc+0xdc>)
 8000644:	221f      	movs	r2, #31
 8000646:	601a      	str	r2, [r3, #0]


	RCC->PLLCFGR = 0x1FF0888;
 8000648:	4b2c      	ldr	r3, [pc, #176]	@ (80006fc <init_rcc+0xe8>)
 800064a:	4a2d      	ldr	r2, [pc, #180]	@ (8000700 <init_rcc+0xec>)
 800064c:	62da      	str	r2, [r3, #44]	@ 0x2c
	RCC->PLLCKSELR = 0x505052;
 800064e:	4b2b      	ldr	r3, [pc, #172]	@ (80006fc <init_rcc+0xe8>)
 8000650:	4a2c      	ldr	r2, [pc, #176]	@ (8000704 <init_rcc+0xf0>)
 8000652:	629a      	str	r2, [r3, #40]	@ 0x28
	RCC->PLL1DIVR = (1<<24)|(3<<16)|(1<<9)|(159);
 8000654:	4b29      	ldr	r3, [pc, #164]	@ (80006fc <init_rcc+0xe8>)
 8000656:	4a2c      	ldr	r2, [pc, #176]	@ (8000708 <init_rcc+0xf4>)
 8000658:	631a      	str	r2, [r3, #48]	@ 0x30
	RCC->PLL2DIVR = (1<<24)|(3<<16)|(1<<9)|(159);
 800065a:	4b28      	ldr	r3, [pc, #160]	@ (80006fc <init_rcc+0xe8>)
 800065c:	4a2a      	ldr	r2, [pc, #168]	@ (8000708 <init_rcc+0xf4>)
 800065e:	639a      	str	r2, [r3, #56]	@ 0x38
	RCC->PLL3DIVR = (1<<24)|(3<<16)|(1<<9)|(159);
 8000660:	4b26      	ldr	r3, [pc, #152]	@ (80006fc <init_rcc+0xe8>)
 8000662:	4a29      	ldr	r2, [pc, #164]	@ (8000708 <init_rcc+0xf4>)
 8000664:	641a      	str	r2, [r3, #64]	@ 0x40
	RCC->D1CFGR = (0b100<<4)|(0b1000);
 8000666:	4b25      	ldr	r3, [pc, #148]	@ (80006fc <init_rcc+0xe8>)
 8000668:	2248      	movs	r2, #72	@ 0x48
 800066a:	619a      	str	r2, [r3, #24]
	RCC->D2CFGR = (0b100<<8)|(0b100<<4);
 800066c:	4b23      	ldr	r3, [pc, #140]	@ (80006fc <init_rcc+0xe8>)
 800066e:	f44f 6288 	mov.w	r2, #1088	@ 0x440
 8000672:	61da      	str	r2, [r3, #28]
	RCC->D3CFGR = (0b100<<4);
 8000674:	4b21      	ldr	r3, [pc, #132]	@ (80006fc <init_rcc+0xe8>)
 8000676:	2240      	movs	r2, #64	@ 0x40
 8000678:	621a      	str	r2, [r3, #32]

	RCC->CR |= (1<<16);
 800067a:	4b20      	ldr	r3, [pc, #128]	@ (80006fc <init_rcc+0xe8>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	4a1f      	ldr	r2, [pc, #124]	@ (80006fc <init_rcc+0xe8>)
 8000680:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000684:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & (1<<17)));
 8000686:	bf00      	nop
 8000688:	4b1c      	ldr	r3, [pc, #112]	@ (80006fc <init_rcc+0xe8>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000690:	2b00      	cmp	r3, #0
 8000692:	d0f9      	beq.n	8000688 <init_rcc+0x74>

	RCC->CR |= (1<<24);
 8000694:	4b19      	ldr	r3, [pc, #100]	@ (80006fc <init_rcc+0xe8>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a18      	ldr	r2, [pc, #96]	@ (80006fc <init_rcc+0xe8>)
 800069a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800069e:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & (1<<25)));
 80006a0:	bf00      	nop
 80006a2:	4b16      	ldr	r3, [pc, #88]	@ (80006fc <init_rcc+0xe8>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d0f9      	beq.n	80006a2 <init_rcc+0x8e>

	unsigned int tmp = RCC->CFGR;
 80006ae:	4b13      	ldr	r3, [pc, #76]	@ (80006fc <init_rcc+0xe8>)
 80006b0:	691b      	ldr	r3, [r3, #16]
 80006b2:	607b      	str	r3, [r7, #4]
	tmp &= ~(0b111);
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	f023 0307 	bic.w	r3, r3, #7
 80006ba:	607b      	str	r3, [r7, #4]
	tmp |= 3;
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	f043 0303 	orr.w	r3, r3, #3
 80006c2:	607b      	str	r3, [r7, #4]
	RCC->CFGR = tmp;
 80006c4:	4a0d      	ldr	r2, [pc, #52]	@ (80006fc <init_rcc+0xe8>)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	6113      	str	r3, [r2, #16]

	while((0b11<<3) != (RCC->CFGR & (0b111<<3)));
 80006ca:	bf00      	nop
 80006cc:	4b0b      	ldr	r3, [pc, #44]	@ (80006fc <init_rcc+0xe8>)
 80006ce:	691b      	ldr	r3, [r3, #16]
 80006d0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80006d4:	2b18      	cmp	r3, #24
 80006d6:	d1f9      	bne.n	80006cc <init_rcc+0xb8>

}
 80006d8:	bf00      	nop
 80006da:	bf00      	nop
 80006dc:	370c      	adds	r7, #12
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	e000ed00 	.word	0xe000ed00
 80006ec:	58024800 	.word	0x58024800
 80006f0:	52002000 	.word	0x52002000
 80006f4:	45670123 	.word	0x45670123
 80006f8:	cdef89ab 	.word	0xcdef89ab
 80006fc:	58024400 	.word	0x58024400
 8000700:	01ff0888 	.word	0x01ff0888
 8000704:	00505052 	.word	0x00505052
 8000708:	0103029f 	.word	0x0103029f

0800070c <init_usart1_clk>:
#include "stm32h7xx.h"



void init_usart1_clk(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
	RCC->AHB4ENR |= (1<<0);
 8000710:	4b0a      	ldr	r3, [pc, #40]	@ (800073c <init_usart1_clk+0x30>)
 8000712:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000716:	4a09      	ldr	r2, [pc, #36]	@ (800073c <init_usart1_clk+0x30>)
 8000718:	f043 0301 	orr.w	r3, r3, #1
 800071c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
	RCC->APB2ENR |= (1<<4);
 8000720:	4b06      	ldr	r3, [pc, #24]	@ (800073c <init_usart1_clk+0x30>)
 8000722:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000726:	4a05      	ldr	r2, [pc, #20]	@ (800073c <init_usart1_clk+0x30>)
 8000728:	f043 0310 	orr.w	r3, r3, #16
 800072c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
}
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	58024400 	.word	0x58024400

08000740 <init_usart1_pin>:

void init_usart1_pin(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
	GPIOA->MODER &= ~(0xf<<18);
 8000744:	4b14      	ldr	r3, [pc, #80]	@ (8000798 <init_usart1_pin+0x58>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a13      	ldr	r2, [pc, #76]	@ (8000798 <init_usart1_pin+0x58>)
 800074a:	f423 1370 	bic.w	r3, r3, #3932160	@ 0x3c0000
 800074e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (2<<20)|(2<<18);
 8000750:	4b11      	ldr	r3, [pc, #68]	@ (8000798 <init_usart1_pin+0x58>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a10      	ldr	r2, [pc, #64]	@ (8000798 <init_usart1_pin+0x58>)
 8000756:	f443 1320 	orr.w	r3, r3, #2621440	@ 0x280000
 800075a:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[1] &= ~(0xf<<4);
 800075c:	4b0e      	ldr	r3, [pc, #56]	@ (8000798 <init_usart1_pin+0x58>)
 800075e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000760:	4a0d      	ldr	r2, [pc, #52]	@ (8000798 <init_usart1_pin+0x58>)
 8000762:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000766:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA->AFR[1] |= (7<<4);
 8000768:	4b0b      	ldr	r3, [pc, #44]	@ (8000798 <init_usart1_pin+0x58>)
 800076a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800076c:	4a0a      	ldr	r2, [pc, #40]	@ (8000798 <init_usart1_pin+0x58>)
 800076e:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8000772:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA->AFR[1] &= ~(0xf<<8);
 8000774:	4b08      	ldr	r3, [pc, #32]	@ (8000798 <init_usart1_pin+0x58>)
 8000776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000778:	4a07      	ldr	r2, [pc, #28]	@ (8000798 <init_usart1_pin+0x58>)
 800077a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800077e:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA->AFR[1] |= (7<<8);
 8000780:	4b05      	ldr	r3, [pc, #20]	@ (8000798 <init_usart1_pin+0x58>)
 8000782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000784:	4a04      	ldr	r2, [pc, #16]	@ (8000798 <init_usart1_pin+0x58>)
 8000786:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800078a:	6253      	str	r3, [r2, #36]	@ 0x24
}
 800078c:	bf00      	nop
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	58020000 	.word	0x58020000

0800079c <init_usart>:

void init_usart(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
	init_usart1_clk();
 80007a0:	f7ff ffb4 	bl	800070c <init_usart1_clk>
	init_usart1_pin();
 80007a4:	f7ff ffcc 	bl	8000740 <init_usart1_pin>
	USART1->BRR = 0x364;
 80007a8:	4b07      	ldr	r3, [pc, #28]	@ (80007c8 <init_usart+0x2c>)
 80007aa:	f44f 7259 	mov.w	r2, #868	@ 0x364
 80007ae:	60da      	str	r2, [r3, #12]
	USART1->PRESC = 0;
 80007b0:	4b05      	ldr	r3, [pc, #20]	@ (80007c8 <init_usart+0x2c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	62da      	str	r2, [r3, #44]	@ 0x2c
	USART1->CR1 |= (1<<3)|(1<<2)|(1<<0);
 80007b6:	4b04      	ldr	r3, [pc, #16]	@ (80007c8 <init_usart+0x2c>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	4a03      	ldr	r2, [pc, #12]	@ (80007c8 <init_usart+0x2c>)
 80007bc:	f043 030d 	orr.w	r3, r3, #13
 80007c0:	6013      	str	r3, [r2, #0]

}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40011000 	.word	0x40011000

080007cc <usart1_send>:

void usart1_send(unsigned char* data , unsigned int num)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b085      	sub	sp, #20
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	6039      	str	r1, [r7, #0]
	for(unsigned int i = 0 ; i < num ; i++)
 80007d6:	2300      	movs	r3, #0
 80007d8:	60fb      	str	r3, [r7, #12]
 80007da:	e00f      	b.n	80007fc <usart1_send+0x30>
	{
		while(!(USART1->ISR & (1<<6)));
 80007dc:	bf00      	nop
 80007de:	4b0d      	ldr	r3, [pc, #52]	@ (8000814 <usart1_send+0x48>)
 80007e0:	69db      	ldr	r3, [r3, #28]
 80007e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d0f9      	beq.n	80007de <usart1_send+0x12>
		USART1->TDR = data[i];
 80007ea:	687a      	ldr	r2, [r7, #4]
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	4413      	add	r3, r2
 80007f0:	781a      	ldrb	r2, [r3, #0]
 80007f2:	4b08      	ldr	r3, [pc, #32]	@ (8000814 <usart1_send+0x48>)
 80007f4:	629a      	str	r2, [r3, #40]	@ 0x28
	for(unsigned int i = 0 ; i < num ; i++)
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	3301      	adds	r3, #1
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	68fa      	ldr	r2, [r7, #12]
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	429a      	cmp	r2, r3
 8000802:	d3eb      	bcc.n	80007dc <usart1_send+0x10>
	}
}
 8000804:	bf00      	nop
 8000806:	bf00      	nop
 8000808:	3714      	adds	r7, #20
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	40011000 	.word	0x40011000

08000818 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000818:	480d      	ldr	r0, [pc, #52]	@ (8000850 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800081a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800081c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000820:	480c      	ldr	r0, [pc, #48]	@ (8000854 <LoopForever+0x6>)
  ldr r1, =_edata
 8000822:	490d      	ldr	r1, [pc, #52]	@ (8000858 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000824:	4a0d      	ldr	r2, [pc, #52]	@ (800085c <LoopForever+0xe>)
  movs r3, #0
 8000826:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000828:	e002      	b.n	8000830 <LoopCopyDataInit>

0800082a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800082a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800082c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800082e:	3304      	adds	r3, #4

08000830 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000830:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000832:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000834:	d3f9      	bcc.n	800082a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000836:	4a0a      	ldr	r2, [pc, #40]	@ (8000860 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000838:	4c0a      	ldr	r4, [pc, #40]	@ (8000864 <LoopForever+0x16>)
  movs r3, #0
 800083a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800083c:	e001      	b.n	8000842 <LoopFillZerobss>

0800083e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800083e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000840:	3204      	adds	r2, #4

08000842 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000842:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000844:	d3fb      	bcc.n	800083e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000846:	f000 f811 	bl	800086c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800084a:	f7ff fecf 	bl	80005ec <main>

0800084e <LoopForever>:

LoopForever:
  b LoopForever
 800084e:	e7fe      	b.n	800084e <LoopForever>
  ldr   r0, =_estack
 8000850:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000854:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000858:	24000004 	.word	0x24000004
  ldr r2, =_sidata
 800085c:	080008d4 	.word	0x080008d4
  ldr r2, =_sbss
 8000860:	24000004 	.word	0x24000004
  ldr r4, =_ebss
 8000864:	24000020 	.word	0x24000020

08000868 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000868:	e7fe      	b.n	8000868 <ADC1_2_IRQHandler>
	...

0800086c <__libc_init_array>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	4d0d      	ldr	r5, [pc, #52]	@ (80008a4 <__libc_init_array+0x38>)
 8000870:	4c0d      	ldr	r4, [pc, #52]	@ (80008a8 <__libc_init_array+0x3c>)
 8000872:	1b64      	subs	r4, r4, r5
 8000874:	10a4      	asrs	r4, r4, #2
 8000876:	2600      	movs	r6, #0
 8000878:	42a6      	cmp	r6, r4
 800087a:	d109      	bne.n	8000890 <__libc_init_array+0x24>
 800087c:	4d0b      	ldr	r5, [pc, #44]	@ (80008ac <__libc_init_array+0x40>)
 800087e:	4c0c      	ldr	r4, [pc, #48]	@ (80008b0 <__libc_init_array+0x44>)
 8000880:	f000 f818 	bl	80008b4 <_init>
 8000884:	1b64      	subs	r4, r4, r5
 8000886:	10a4      	asrs	r4, r4, #2
 8000888:	2600      	movs	r6, #0
 800088a:	42a6      	cmp	r6, r4
 800088c:	d105      	bne.n	800089a <__libc_init_array+0x2e>
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f855 3b04 	ldr.w	r3, [r5], #4
 8000894:	4798      	blx	r3
 8000896:	3601      	adds	r6, #1
 8000898:	e7ee      	b.n	8000878 <__libc_init_array+0xc>
 800089a:	f855 3b04 	ldr.w	r3, [r5], #4
 800089e:	4798      	blx	r3
 80008a0:	3601      	adds	r6, #1
 80008a2:	e7f2      	b.n	800088a <__libc_init_array+0x1e>
 80008a4:	080008cc 	.word	0x080008cc
 80008a8:	080008cc 	.word	0x080008cc
 80008ac:	080008cc 	.word	0x080008cc
 80008b0:	080008d0 	.word	0x080008d0

080008b4 <_init>:
 80008b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008b6:	bf00      	nop
 80008b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008ba:	bc08      	pop	{r3}
 80008bc:	469e      	mov	lr, r3
 80008be:	4770      	bx	lr

080008c0 <_fini>:
 80008c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008c2:	bf00      	nop
 80008c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008c6:	bc08      	pop	{r3}
 80008c8:	469e      	mov	lr, r3
 80008ca:	4770      	bx	lr
