
stm32h743.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000340  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005d8  080005d8  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080005d8  080005d8  000015d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  080005dc  080005dc  000015dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000004  24000000  080005e0  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000001c  24000004  080005e4  00002004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000020  080005e4  00002020  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000127f  00000000  00000000  00002032  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000032a  00000000  00000000  000032b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000000a8  00000000  00000000  000035e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 0000006b  00000000  00000000  00003688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00028076  00000000  00000000  000036f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000010df  00000000  00000000  0002b769  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000e617c  00000000  00000000  0002c848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001129c4  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000014c  00000000  00000000  00112a08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000057  00000000  00000000  00112b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000004 	.word	0x24000004
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080005c0 	.word	0x080005c0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000008 	.word	0x24000008
 80002d4:	080005c0 	.word	0x080005c0

080002d8 <delay>:
#include "rcc.h"
#include "stm32h7xx.h"
#include "uasrt.h"

void delay(unsigned int times)
{
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
	while(times--);
 80002e0:	bf00      	nop
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	1e5a      	subs	r2, r3, #1
 80002e6:	607a      	str	r2, [r7, #4]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d1fa      	bne.n	80002e2 <delay+0xa>
}
 80002ec:	bf00      	nop
 80002ee:	bf00      	nop
 80002f0:	370c      	adds	r7, #12
 80002f2:	46bd      	mov	sp, r7
 80002f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f8:	4770      	bx	lr
	...

080002fc <main>:

unsigned char tmp = 'a';

int main(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
	init_rcc();
 8000300:	f000 f80e 	bl	8000320 <init_rcc>
	init_usart();
 8000304:	f000 f8d0 	bl	80004a8 <init_usart>
	while(1)
	{
		delay(5000);
 8000308:	f241 3088 	movw	r0, #5000	@ 0x1388
 800030c:	f7ff ffe4 	bl	80002d8 <delay>
		usart1_send(&tmp , 1);
 8000310:	2101      	movs	r1, #1
 8000312:	4802      	ldr	r0, [pc, #8]	@ (800031c <main+0x20>)
 8000314:	f000 f8e0 	bl	80004d8 <usart1_send>
		delay(5000);
 8000318:	bf00      	nop
 800031a:	e7f5      	b.n	8000308 <main+0xc>
 800031c:	24000000 	.word	0x24000000

08000320 <init_rcc>:
#include "stm32h7xx.h"


void init_rcc(void)
{
 8000320:	b480      	push	{r7}
 8000322:	b083      	sub	sp, #12
 8000324:	af00      	add	r7, sp, #0
	SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));
 8000326:	4b33      	ldr	r3, [pc, #204]	@ (80003f4 <init_rcc+0xd4>)
 8000328:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800032c:	4a31      	ldr	r2, [pc, #196]	@ (80003f4 <init_rcc+0xd4>)
 800032e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000332:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	PWR->D3CR |= (3<<14);
 8000336:	4b30      	ldr	r3, [pc, #192]	@ (80003f8 <init_rcc+0xd8>)
 8000338:	699b      	ldr	r3, [r3, #24]
 800033a:	4a2f      	ldr	r2, [pc, #188]	@ (80003f8 <init_rcc+0xd8>)
 800033c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000340:	6193      	str	r3, [r2, #24]
	FLASH->KEYR1 = 0x45670123;
 8000342:	4b2e      	ldr	r3, [pc, #184]	@ (80003fc <init_rcc+0xdc>)
 8000344:	4a2e      	ldr	r2, [pc, #184]	@ (8000400 <init_rcc+0xe0>)
 8000346:	605a      	str	r2, [r3, #4]
	FLASH->KEYR1 = 0xCDEF89AB;
 8000348:	4b2c      	ldr	r3, [pc, #176]	@ (80003fc <init_rcc+0xdc>)
 800034a:	4a2e      	ldr	r2, [pc, #184]	@ (8000404 <init_rcc+0xe4>)
 800034c:	605a      	str	r2, [r3, #4]
	FLASH->ACR = 0x1f;
 800034e:	4b2b      	ldr	r3, [pc, #172]	@ (80003fc <init_rcc+0xdc>)
 8000350:	221f      	movs	r2, #31
 8000352:	601a      	str	r2, [r3, #0]


	RCC->PLLCFGR = 0x1FF0888;
 8000354:	4b2c      	ldr	r3, [pc, #176]	@ (8000408 <init_rcc+0xe8>)
 8000356:	4a2d      	ldr	r2, [pc, #180]	@ (800040c <init_rcc+0xec>)
 8000358:	62da      	str	r2, [r3, #44]	@ 0x2c
	RCC->PLLCKSELR = 0x505052;
 800035a:	4b2b      	ldr	r3, [pc, #172]	@ (8000408 <init_rcc+0xe8>)
 800035c:	4a2c      	ldr	r2, [pc, #176]	@ (8000410 <init_rcc+0xf0>)
 800035e:	629a      	str	r2, [r3, #40]	@ 0x28
	RCC->PLL1DIVR = (1<<24)|(3<<16)|(1<<9)|(159);
 8000360:	4b29      	ldr	r3, [pc, #164]	@ (8000408 <init_rcc+0xe8>)
 8000362:	4a2c      	ldr	r2, [pc, #176]	@ (8000414 <init_rcc+0xf4>)
 8000364:	631a      	str	r2, [r3, #48]	@ 0x30
	RCC->PLL2DIVR = (1<<24)|(3<<16)|(1<<9)|(159);
 8000366:	4b28      	ldr	r3, [pc, #160]	@ (8000408 <init_rcc+0xe8>)
 8000368:	4a2a      	ldr	r2, [pc, #168]	@ (8000414 <init_rcc+0xf4>)
 800036a:	639a      	str	r2, [r3, #56]	@ 0x38
	RCC->PLL3DIVR = (1<<24)|(3<<16)|(1<<9)|(159);
 800036c:	4b26      	ldr	r3, [pc, #152]	@ (8000408 <init_rcc+0xe8>)
 800036e:	4a29      	ldr	r2, [pc, #164]	@ (8000414 <init_rcc+0xf4>)
 8000370:	641a      	str	r2, [r3, #64]	@ 0x40
	RCC->D1CFGR = (0b100<<4)|(0b1000);
 8000372:	4b25      	ldr	r3, [pc, #148]	@ (8000408 <init_rcc+0xe8>)
 8000374:	2248      	movs	r2, #72	@ 0x48
 8000376:	619a      	str	r2, [r3, #24]
	RCC->D2CFGR = (0b100<<8)|(0b100<<4);
 8000378:	4b23      	ldr	r3, [pc, #140]	@ (8000408 <init_rcc+0xe8>)
 800037a:	f44f 6288 	mov.w	r2, #1088	@ 0x440
 800037e:	61da      	str	r2, [r3, #28]
	RCC->D3CFGR = (0b100<<4);
 8000380:	4b21      	ldr	r3, [pc, #132]	@ (8000408 <init_rcc+0xe8>)
 8000382:	2240      	movs	r2, #64	@ 0x40
 8000384:	621a      	str	r2, [r3, #32]

	RCC->CR |= (1<<16);
 8000386:	4b20      	ldr	r3, [pc, #128]	@ (8000408 <init_rcc+0xe8>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	4a1f      	ldr	r2, [pc, #124]	@ (8000408 <init_rcc+0xe8>)
 800038c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000390:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & (1<<17)));
 8000392:	bf00      	nop
 8000394:	4b1c      	ldr	r3, [pc, #112]	@ (8000408 <init_rcc+0xe8>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800039c:	2b00      	cmp	r3, #0
 800039e:	d0f9      	beq.n	8000394 <init_rcc+0x74>

	RCC->CR |= (1<<24);
 80003a0:	4b19      	ldr	r3, [pc, #100]	@ (8000408 <init_rcc+0xe8>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	4a18      	ldr	r2, [pc, #96]	@ (8000408 <init_rcc+0xe8>)
 80003a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80003aa:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & (1<<25)));
 80003ac:	bf00      	nop
 80003ae:	4b16      	ldr	r3, [pc, #88]	@ (8000408 <init_rcc+0xe8>)
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d0f9      	beq.n	80003ae <init_rcc+0x8e>

	unsigned int tmp = RCC->CFGR;
 80003ba:	4b13      	ldr	r3, [pc, #76]	@ (8000408 <init_rcc+0xe8>)
 80003bc:	691b      	ldr	r3, [r3, #16]
 80003be:	607b      	str	r3, [r7, #4]
	tmp &= ~(0b111);
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	f023 0307 	bic.w	r3, r3, #7
 80003c6:	607b      	str	r3, [r7, #4]
	tmp |= 3;
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	f043 0303 	orr.w	r3, r3, #3
 80003ce:	607b      	str	r3, [r7, #4]
	RCC->CFGR = tmp;
 80003d0:	4a0d      	ldr	r2, [pc, #52]	@ (8000408 <init_rcc+0xe8>)
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	6113      	str	r3, [r2, #16]

	while((0b11<<3) != (RCC->CFGR & (0b111<<3)));
 80003d6:	bf00      	nop
 80003d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000408 <init_rcc+0xe8>)
 80003da:	691b      	ldr	r3, [r3, #16]
 80003dc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80003e0:	2b18      	cmp	r3, #24
 80003e2:	d1f9      	bne.n	80003d8 <init_rcc+0xb8>

}
 80003e4:	bf00      	nop
 80003e6:	bf00      	nop
 80003e8:	370c      	adds	r7, #12
 80003ea:	46bd      	mov	sp, r7
 80003ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f0:	4770      	bx	lr
 80003f2:	bf00      	nop
 80003f4:	e000ed00 	.word	0xe000ed00
 80003f8:	58024800 	.word	0x58024800
 80003fc:	52002000 	.word	0x52002000
 8000400:	45670123 	.word	0x45670123
 8000404:	cdef89ab 	.word	0xcdef89ab
 8000408:	58024400 	.word	0x58024400
 800040c:	01ff0888 	.word	0x01ff0888
 8000410:	00505052 	.word	0x00505052
 8000414:	0103029f 	.word	0x0103029f

08000418 <init_usart1_clk>:
#include "stm32h7xx.h"



void init_usart1_clk(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
	RCC->AHB4ENR |= (1<<0);
 800041c:	4b0a      	ldr	r3, [pc, #40]	@ (8000448 <init_usart1_clk+0x30>)
 800041e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000422:	4a09      	ldr	r2, [pc, #36]	@ (8000448 <init_usart1_clk+0x30>)
 8000424:	f043 0301 	orr.w	r3, r3, #1
 8000428:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
	RCC->APB2ENR |= (1<<4);
 800042c:	4b06      	ldr	r3, [pc, #24]	@ (8000448 <init_usart1_clk+0x30>)
 800042e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000432:	4a05      	ldr	r2, [pc, #20]	@ (8000448 <init_usart1_clk+0x30>)
 8000434:	f043 0310 	orr.w	r3, r3, #16
 8000438:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
}
 800043c:	bf00      	nop
 800043e:	46bd      	mov	sp, r7
 8000440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000444:	4770      	bx	lr
 8000446:	bf00      	nop
 8000448:	58024400 	.word	0x58024400

0800044c <init_usart1_pin>:

void init_usart1_pin(void)
{
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0
	GPIOA->MODER &= ~(0xf<<18);
 8000450:	4b14      	ldr	r3, [pc, #80]	@ (80004a4 <init_usart1_pin+0x58>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	4a13      	ldr	r2, [pc, #76]	@ (80004a4 <init_usart1_pin+0x58>)
 8000456:	f423 1370 	bic.w	r3, r3, #3932160	@ 0x3c0000
 800045a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (2<<20)|(2<<18);
 800045c:	4b11      	ldr	r3, [pc, #68]	@ (80004a4 <init_usart1_pin+0x58>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	4a10      	ldr	r2, [pc, #64]	@ (80004a4 <init_usart1_pin+0x58>)
 8000462:	f443 1320 	orr.w	r3, r3, #2621440	@ 0x280000
 8000466:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[1] &= ~(0xf<<4);
 8000468:	4b0e      	ldr	r3, [pc, #56]	@ (80004a4 <init_usart1_pin+0x58>)
 800046a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800046c:	4a0d      	ldr	r2, [pc, #52]	@ (80004a4 <init_usart1_pin+0x58>)
 800046e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000472:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA->AFR[1] |= (7<<4);
 8000474:	4b0b      	ldr	r3, [pc, #44]	@ (80004a4 <init_usart1_pin+0x58>)
 8000476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000478:	4a0a      	ldr	r2, [pc, #40]	@ (80004a4 <init_usart1_pin+0x58>)
 800047a:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 800047e:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA->AFR[1] &= ~(0xf<<8);
 8000480:	4b08      	ldr	r3, [pc, #32]	@ (80004a4 <init_usart1_pin+0x58>)
 8000482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000484:	4a07      	ldr	r2, [pc, #28]	@ (80004a4 <init_usart1_pin+0x58>)
 8000486:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800048a:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA->AFR[1] |= (7<<8);
 800048c:	4b05      	ldr	r3, [pc, #20]	@ (80004a4 <init_usart1_pin+0x58>)
 800048e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000490:	4a04      	ldr	r2, [pc, #16]	@ (80004a4 <init_usart1_pin+0x58>)
 8000492:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000496:	6253      	str	r3, [r2, #36]	@ 0x24
}
 8000498:	bf00      	nop
 800049a:	46bd      	mov	sp, r7
 800049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
 80004a4:	58020000 	.word	0x58020000

080004a8 <init_usart>:

void init_usart(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
	init_usart1_clk();
 80004ac:	f7ff ffb4 	bl	8000418 <init_usart1_clk>
	init_usart1_pin();
 80004b0:	f7ff ffcc 	bl	800044c <init_usart1_pin>
	USART1->BRR = 0x364;
 80004b4:	4b07      	ldr	r3, [pc, #28]	@ (80004d4 <init_usart+0x2c>)
 80004b6:	f44f 7259 	mov.w	r2, #868	@ 0x364
 80004ba:	60da      	str	r2, [r3, #12]
	USART1->PRESC = 0;
 80004bc:	4b05      	ldr	r3, [pc, #20]	@ (80004d4 <init_usart+0x2c>)
 80004be:	2200      	movs	r2, #0
 80004c0:	62da      	str	r2, [r3, #44]	@ 0x2c
	USART1->CR1 |= (1<<3)|(1<<2)|(1<<0);
 80004c2:	4b04      	ldr	r3, [pc, #16]	@ (80004d4 <init_usart+0x2c>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	4a03      	ldr	r2, [pc, #12]	@ (80004d4 <init_usart+0x2c>)
 80004c8:	f043 030d 	orr.w	r3, r3, #13
 80004cc:	6013      	str	r3, [r2, #0]

}
 80004ce:	bf00      	nop
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	40011000 	.word	0x40011000

080004d8 <usart1_send>:

void usart1_send(unsigned char* data , unsigned int num)
{
 80004d8:	b480      	push	{r7}
 80004da:	b085      	sub	sp, #20
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
 80004e0:	6039      	str	r1, [r7, #0]
	for(unsigned int i = 0 ; i < num ; i++)
 80004e2:	2300      	movs	r3, #0
 80004e4:	60fb      	str	r3, [r7, #12]
 80004e6:	e00f      	b.n	8000508 <usart1_send+0x30>
	{
		while(!(USART1->ISR & (1<<6)));
 80004e8:	bf00      	nop
 80004ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000520 <usart1_send+0x48>)
 80004ec:	69db      	ldr	r3, [r3, #28]
 80004ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d0f9      	beq.n	80004ea <usart1_send+0x12>
		USART1->TDR = data[i];
 80004f6:	687a      	ldr	r2, [r7, #4]
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	4413      	add	r3, r2
 80004fc:	781a      	ldrb	r2, [r3, #0]
 80004fe:	4b08      	ldr	r3, [pc, #32]	@ (8000520 <usart1_send+0x48>)
 8000500:	629a      	str	r2, [r3, #40]	@ 0x28
	for(unsigned int i = 0 ; i < num ; i++)
 8000502:	68fb      	ldr	r3, [r7, #12]
 8000504:	3301      	adds	r3, #1
 8000506:	60fb      	str	r3, [r7, #12]
 8000508:	68fa      	ldr	r2, [r7, #12]
 800050a:	683b      	ldr	r3, [r7, #0]
 800050c:	429a      	cmp	r2, r3
 800050e:	d3eb      	bcc.n	80004e8 <usart1_send+0x10>
	}
}
 8000510:	bf00      	nop
 8000512:	bf00      	nop
 8000514:	3714      	adds	r7, #20
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	40011000 	.word	0x40011000

08000524 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000524:	480d      	ldr	r0, [pc, #52]	@ (800055c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000526:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000528:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800052c:	480c      	ldr	r0, [pc, #48]	@ (8000560 <LoopForever+0x6>)
  ldr r1, =_edata
 800052e:	490d      	ldr	r1, [pc, #52]	@ (8000564 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000530:	4a0d      	ldr	r2, [pc, #52]	@ (8000568 <LoopForever+0xe>)
  movs r3, #0
 8000532:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000534:	e002      	b.n	800053c <LoopCopyDataInit>

08000536 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000536:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000538:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800053a:	3304      	adds	r3, #4

0800053c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800053c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800053e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000540:	d3f9      	bcc.n	8000536 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000542:	4a0a      	ldr	r2, [pc, #40]	@ (800056c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000544:	4c0a      	ldr	r4, [pc, #40]	@ (8000570 <LoopForever+0x16>)
  movs r3, #0
 8000546:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000548:	e001      	b.n	800054e <LoopFillZerobss>

0800054a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800054a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800054c:	3204      	adds	r2, #4

0800054e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800054e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000550:	d3fb      	bcc.n	800054a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000552:	f000 f811 	bl	8000578 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000556:	f7ff fed1 	bl	80002fc <main>

0800055a <LoopForever>:

LoopForever:
  b LoopForever
 800055a:	e7fe      	b.n	800055a <LoopForever>
  ldr   r0, =_estack
 800055c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000560:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000564:	24000004 	.word	0x24000004
  ldr r2, =_sidata
 8000568:	080005e0 	.word	0x080005e0
  ldr r2, =_sbss
 800056c:	24000004 	.word	0x24000004
  ldr r4, =_ebss
 8000570:	24000020 	.word	0x24000020

08000574 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000574:	e7fe      	b.n	8000574 <ADC1_2_IRQHandler>
	...

08000578 <__libc_init_array>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	4d0d      	ldr	r5, [pc, #52]	@ (80005b0 <__libc_init_array+0x38>)
 800057c:	4c0d      	ldr	r4, [pc, #52]	@ (80005b4 <__libc_init_array+0x3c>)
 800057e:	1b64      	subs	r4, r4, r5
 8000580:	10a4      	asrs	r4, r4, #2
 8000582:	2600      	movs	r6, #0
 8000584:	42a6      	cmp	r6, r4
 8000586:	d109      	bne.n	800059c <__libc_init_array+0x24>
 8000588:	4d0b      	ldr	r5, [pc, #44]	@ (80005b8 <__libc_init_array+0x40>)
 800058a:	4c0c      	ldr	r4, [pc, #48]	@ (80005bc <__libc_init_array+0x44>)
 800058c:	f000 f818 	bl	80005c0 <_init>
 8000590:	1b64      	subs	r4, r4, r5
 8000592:	10a4      	asrs	r4, r4, #2
 8000594:	2600      	movs	r6, #0
 8000596:	42a6      	cmp	r6, r4
 8000598:	d105      	bne.n	80005a6 <__libc_init_array+0x2e>
 800059a:	bd70      	pop	{r4, r5, r6, pc}
 800059c:	f855 3b04 	ldr.w	r3, [r5], #4
 80005a0:	4798      	blx	r3
 80005a2:	3601      	adds	r6, #1
 80005a4:	e7ee      	b.n	8000584 <__libc_init_array+0xc>
 80005a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80005aa:	4798      	blx	r3
 80005ac:	3601      	adds	r6, #1
 80005ae:	e7f2      	b.n	8000596 <__libc_init_array+0x1e>
 80005b0:	080005d8 	.word	0x080005d8
 80005b4:	080005d8 	.word	0x080005d8
 80005b8:	080005d8 	.word	0x080005d8
 80005bc:	080005dc 	.word	0x080005dc

080005c0 <_init>:
 80005c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005c2:	bf00      	nop
 80005c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005c6:	bc08      	pop	{r3}
 80005c8:	469e      	mov	lr, r3
 80005ca:	4770      	bx	lr

080005cc <_fini>:
 80005cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005ce:	bf00      	nop
 80005d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005d2:	bc08      	pop	{r3}
 80005d4:	469e      	mov	lr, r3
 80005d6:	4770      	bx	lr
