
stm32h743.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b6f4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d68  0800b994  0800b994  0000c994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d6fc  0800d6fc  0000e6fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d704  0800d704  0000e704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800d708  0800d708  0000e708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  24000000  0800d70c  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00008d48  2400006c  0800d778  0000f06c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24008db4  0800d778  0000fdb4  2**0
                  ALLOC
  9 .sdram        00177000  c0000000  c0000000  00010000  2**2
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  0000f06c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00015910  00000000  00000000  0000f09a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000044a6  00000000  00000000  000249aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000d28  00000000  00000000  00028e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000a7a  00000000  00000000  00029b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000319c8  00000000  00000000  0002a5f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00017dcf  00000000  00000000  0005bfba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000fc818  00000000  00000000  00073d89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000086  00000000  00000000  001705a1  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000391c  00000000  00000000  00170628  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000059  00000000  00000000  00173f44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400006c 	.word	0x2400006c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800b97c 	.word	0x0800b97c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000070 	.word	0x24000070
 80002dc:	0800b97c 	.word	0x0800b97c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <init_lcd_pin>:
__attribute__ ((section (".sdram"))) unsigned int layer1_buf[HEIGHT*WIDTH];
//unsigned int layer2_buf[HEIGHT*WIDTH];
uint32_t *g_ltdc_framebuf[2];
uint16_t* ltdc_lcd_framebuf = 0xc0000000;
void init_lcd_pin(void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
	RCC->AHB4ENR |= (1<<7)|(1<<8)|(1<<5)|(1<<6)|(1<<1);
 8000384:	4b84      	ldr	r3, [pc, #528]	@ (8000598 <init_lcd_pin+0x218>)
 8000386:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800038a:	4a83      	ldr	r2, [pc, #524]	@ (8000598 <init_lcd_pin+0x218>)
 800038c:	f443 73f1 	orr.w	r3, r3, #482	@ 0x1e2
 8000390:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0

	//PB5(背光)
	GPIOB->MODER &= ~(0b11<<10);
 8000394:	4b81      	ldr	r3, [pc, #516]	@ (800059c <init_lcd_pin+0x21c>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	4a80      	ldr	r2, [pc, #512]	@ (800059c <init_lcd_pin+0x21c>)
 800039a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800039e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0b01<<10);			//输出模式
 80003a0:	4b7e      	ldr	r3, [pc, #504]	@ (800059c <init_lcd_pin+0x21c>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	4a7d      	ldr	r2, [pc, #500]	@ (800059c <init_lcd_pin+0x21c>)
 80003a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80003aa:	6013      	str	r3, [r2, #0]
	GPIOB->PUPDR &= ~((0b11<<10));
 80003ac:	4b7b      	ldr	r3, [pc, #492]	@ (800059c <init_lcd_pin+0x21c>)
 80003ae:	68db      	ldr	r3, [r3, #12]
 80003b0:	4a7a      	ldr	r2, [pc, #488]	@ (800059c <init_lcd_pin+0x21c>)
 80003b2:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80003b6:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |= (0b1<<10);
 80003b8:	4b78      	ldr	r3, [pc, #480]	@ (800059c <init_lcd_pin+0x21c>)
 80003ba:	68db      	ldr	r3, [r3, #12]
 80003bc:	4a77      	ldr	r2, [pc, #476]	@ (800059c <init_lcd_pin+0x21c>)
 80003be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80003c2:	60d3      	str	r3, [r2, #12]
	GPIOB->OSPEEDR &= ~(0b11<<10);
 80003c4:	4b75      	ldr	r3, [pc, #468]	@ (800059c <init_lcd_pin+0x21c>)
 80003c6:	689b      	ldr	r3, [r3, #8]
 80003c8:	4a74      	ldr	r2, [pc, #464]	@ (800059c <init_lcd_pin+0x21c>)
 80003ca:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80003ce:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |= (0b11<<10);
 80003d0:	4b72      	ldr	r3, [pc, #456]	@ (800059c <init_lcd_pin+0x21c>)
 80003d2:	689b      	ldr	r3, [r3, #8]
 80003d4:	4a71      	ldr	r2, [pc, #452]	@ (800059c <init_lcd_pin+0x21c>)
 80003d6:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 80003da:	6093      	str	r3, [r2, #8]


	//PF10
	GPIOF->MODER &= ~((0b11<<20));
 80003dc:	4b70      	ldr	r3, [pc, #448]	@ (80005a0 <init_lcd_pin+0x220>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	4a6f      	ldr	r2, [pc, #444]	@ (80005a0 <init_lcd_pin+0x220>)
 80003e2:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80003e6:	6013      	str	r3, [r2, #0]
	GPIOF->MODER |= (0b10<<20);			//AF模式
 80003e8:	4b6d      	ldr	r3, [pc, #436]	@ (80005a0 <init_lcd_pin+0x220>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	4a6c      	ldr	r2, [pc, #432]	@ (80005a0 <init_lcd_pin+0x220>)
 80003ee:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80003f2:	6013      	str	r3, [r2, #0]
	GPIOF->PUPDR &= ~((0b11<<20));
 80003f4:	4b6a      	ldr	r3, [pc, #424]	@ (80005a0 <init_lcd_pin+0x220>)
 80003f6:	68db      	ldr	r3, [r3, #12]
 80003f8:	4a69      	ldr	r2, [pc, #420]	@ (80005a0 <init_lcd_pin+0x220>)
 80003fa:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80003fe:	60d3      	str	r3, [r2, #12]
	GPIOF->PUPDR |= (0b1<<20);
 8000400:	4b67      	ldr	r3, [pc, #412]	@ (80005a0 <init_lcd_pin+0x220>)
 8000402:	68db      	ldr	r3, [r3, #12]
 8000404:	4a66      	ldr	r2, [pc, #408]	@ (80005a0 <init_lcd_pin+0x220>)
 8000406:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800040a:	60d3      	str	r3, [r2, #12]
	GPIOF->OSPEEDR &= ~((0b11<<20));
 800040c:	4b64      	ldr	r3, [pc, #400]	@ (80005a0 <init_lcd_pin+0x220>)
 800040e:	689b      	ldr	r3, [r3, #8]
 8000410:	4a63      	ldr	r2, [pc, #396]	@ (80005a0 <init_lcd_pin+0x220>)
 8000412:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8000416:	6093      	str	r3, [r2, #8]
	GPIOF->OSPEEDR |= (0b11<<20);
 8000418:	4b61      	ldr	r3, [pc, #388]	@ (80005a0 <init_lcd_pin+0x220>)
 800041a:	689b      	ldr	r3, [r3, #8]
 800041c:	4a60      	ldr	r2, [pc, #384]	@ (80005a0 <init_lcd_pin+0x220>)
 800041e:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8000422:	6093      	str	r3, [r2, #8]
	GPIOF->AFR[1] &= ~(0b1111<<8);
 8000424:	4b5e      	ldr	r3, [pc, #376]	@ (80005a0 <init_lcd_pin+0x220>)
 8000426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000428:	4a5d      	ldr	r2, [pc, #372]	@ (80005a0 <init_lcd_pin+0x220>)
 800042a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800042e:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOF->AFR[1] |= (14<<8);
 8000430:	4b5b      	ldr	r3, [pc, #364]	@ (80005a0 <init_lcd_pin+0x220>)
 8000432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000434:	4a5a      	ldr	r2, [pc, #360]	@ (80005a0 <init_lcd_pin+0x220>)
 8000436:	f443 6360 	orr.w	r3, r3, #3584	@ 0xe00
 800043a:	6253      	str	r3, [r2, #36]	@ 0x24

	//PG6 PG7 PG11
	GPIOG->MODER &= ~((0b11<<12)|(0b11<<14)|(0b11<<22));
 800043c:	4b59      	ldr	r3, [pc, #356]	@ (80005a4 <init_lcd_pin+0x224>)
 800043e:	681a      	ldr	r2, [r3, #0]
 8000440:	4958      	ldr	r1, [pc, #352]	@ (80005a4 <init_lcd_pin+0x224>)
 8000442:	4b59      	ldr	r3, [pc, #356]	@ (80005a8 <init_lcd_pin+0x228>)
 8000444:	4013      	ands	r3, r2
 8000446:	600b      	str	r3, [r1, #0]
	GPIOG->MODER |= (0b10<<12)|(0b10<<14)|(0b10<<22);			//AF模式
 8000448:	4b56      	ldr	r3, [pc, #344]	@ (80005a4 <init_lcd_pin+0x224>)
 800044a:	681a      	ldr	r2, [r3, #0]
 800044c:	4955      	ldr	r1, [pc, #340]	@ (80005a4 <init_lcd_pin+0x224>)
 800044e:	4b57      	ldr	r3, [pc, #348]	@ (80005ac <init_lcd_pin+0x22c>)
 8000450:	4313      	orrs	r3, r2
 8000452:	600b      	str	r3, [r1, #0]
	GPIOG->PUPDR &= ~((0b11<<12)|(0b11<<14)|(0b11<<22));
 8000454:	4b53      	ldr	r3, [pc, #332]	@ (80005a4 <init_lcd_pin+0x224>)
 8000456:	68da      	ldr	r2, [r3, #12]
 8000458:	4952      	ldr	r1, [pc, #328]	@ (80005a4 <init_lcd_pin+0x224>)
 800045a:	4b53      	ldr	r3, [pc, #332]	@ (80005a8 <init_lcd_pin+0x228>)
 800045c:	4013      	ands	r3, r2
 800045e:	60cb      	str	r3, [r1, #12]
	GPIOG->PUPDR |= (0b1<<12)|(0b1<<14)|(0b1<<22);
 8000460:	4b50      	ldr	r3, [pc, #320]	@ (80005a4 <init_lcd_pin+0x224>)
 8000462:	68da      	ldr	r2, [r3, #12]
 8000464:	494f      	ldr	r1, [pc, #316]	@ (80005a4 <init_lcd_pin+0x224>)
 8000466:	4b52      	ldr	r3, [pc, #328]	@ (80005b0 <init_lcd_pin+0x230>)
 8000468:	4313      	orrs	r3, r2
 800046a:	60cb      	str	r3, [r1, #12]

	GPIOG->OSPEEDR &= ~((0b11<<12)|(0b11<<14)|(0b11<<22));
 800046c:	4b4d      	ldr	r3, [pc, #308]	@ (80005a4 <init_lcd_pin+0x224>)
 800046e:	689a      	ldr	r2, [r3, #8]
 8000470:	494c      	ldr	r1, [pc, #304]	@ (80005a4 <init_lcd_pin+0x224>)
 8000472:	4b4d      	ldr	r3, [pc, #308]	@ (80005a8 <init_lcd_pin+0x228>)
 8000474:	4013      	ands	r3, r2
 8000476:	608b      	str	r3, [r1, #8]
	GPIOG->OSPEEDR |= (0b11<<12)|(0b11<<14)|(0b11<<22);
 8000478:	4b4a      	ldr	r3, [pc, #296]	@ (80005a4 <init_lcd_pin+0x224>)
 800047a:	689a      	ldr	r2, [r3, #8]
 800047c:	4949      	ldr	r1, [pc, #292]	@ (80005a4 <init_lcd_pin+0x224>)
 800047e:	4b4d      	ldr	r3, [pc, #308]	@ (80005b4 <init_lcd_pin+0x234>)
 8000480:	4313      	orrs	r3, r2
 8000482:	608b      	str	r3, [r1, #8]
	GPIOG->AFR[0] &= ~((0b1111<<24)|(0b1111<<28));
 8000484:	4b47      	ldr	r3, [pc, #284]	@ (80005a4 <init_lcd_pin+0x224>)
 8000486:	6a1b      	ldr	r3, [r3, #32]
 8000488:	4a46      	ldr	r2, [pc, #280]	@ (80005a4 <init_lcd_pin+0x224>)
 800048a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800048e:	6213      	str	r3, [r2, #32]
	GPIOG->AFR[0] |= (14<<24)|(14<<28);
 8000490:	4b44      	ldr	r3, [pc, #272]	@ (80005a4 <init_lcd_pin+0x224>)
 8000492:	6a1b      	ldr	r3, [r3, #32]
 8000494:	4a43      	ldr	r2, [pc, #268]	@ (80005a4 <init_lcd_pin+0x224>)
 8000496:	f043 436e 	orr.w	r3, r3, #3992977408	@ 0xee000000
 800049a:	6213      	str	r3, [r2, #32]
	GPIOG->AFR[1] &= ~(0b1111<<12);
 800049c:	4b41      	ldr	r3, [pc, #260]	@ (80005a4 <init_lcd_pin+0x224>)
 800049e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80004a0:	4a40      	ldr	r2, [pc, #256]	@ (80005a4 <init_lcd_pin+0x224>)
 80004a2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80004a6:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOG->AFR[1] |= (14<<12);
 80004a8:	4b3e      	ldr	r3, [pc, #248]	@ (80005a4 <init_lcd_pin+0x224>)
 80004aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80004ac:	4a3d      	ldr	r2, [pc, #244]	@ (80005a4 <init_lcd_pin+0x224>)
 80004ae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80004b2:	6253      	str	r3, [r2, #36]	@ 0x24

	//PH9 PH10 PH11 PH12 PH13 PH14 PH15
	GPIOH->MODER &= ~((0b11<<18)|(0b11<<20)|(0b11<<22)|(0b11<<24)|(0b11<<26)|(0b11<<28)|(0b11<<30));
 80004b4:	4b40      	ldr	r3, [pc, #256]	@ (80005b8 <init_lcd_pin+0x238>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4a3f      	ldr	r2, [pc, #252]	@ (80005b8 <init_lcd_pin+0x238>)
 80004ba:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80004be:	6013      	str	r3, [r2, #0]
	GPIOH->MODER |= (0b10<<18)|(0b10<<20)|(0b10<<22)|(0b10<<24)|(0b10<<26)|(0b10<<28)|(0b10<<30);			//AF模式
 80004c0:	4b3d      	ldr	r3, [pc, #244]	@ (80005b8 <init_lcd_pin+0x238>)
 80004c2:	681a      	ldr	r2, [r3, #0]
 80004c4:	493c      	ldr	r1, [pc, #240]	@ (80005b8 <init_lcd_pin+0x238>)
 80004c6:	4b3d      	ldr	r3, [pc, #244]	@ (80005bc <init_lcd_pin+0x23c>)
 80004c8:	4313      	orrs	r3, r2
 80004ca:	600b      	str	r3, [r1, #0]
	GPIOH->PUPDR &= ~((0b11<<18)|(0b11<<20)|(0b11<<22)|(0b11<<24)|(0b11<<26)|(0b11<<28)|(0b11<<30));
 80004cc:	4b3a      	ldr	r3, [pc, #232]	@ (80005b8 <init_lcd_pin+0x238>)
 80004ce:	68db      	ldr	r3, [r3, #12]
 80004d0:	4a39      	ldr	r2, [pc, #228]	@ (80005b8 <init_lcd_pin+0x238>)
 80004d2:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80004d6:	60d3      	str	r3, [r2, #12]
	GPIOH->PUPDR |= (0b01<<18)|(0b1<<20)|(0b1<<22)|(0b1<<24)|(0b1<<26)|(0b1<<28)|(0b1<<30);
 80004d8:	4b37      	ldr	r3, [pc, #220]	@ (80005b8 <init_lcd_pin+0x238>)
 80004da:	68da      	ldr	r2, [r3, #12]
 80004dc:	4936      	ldr	r1, [pc, #216]	@ (80005b8 <init_lcd_pin+0x238>)
 80004de:	4b38      	ldr	r3, [pc, #224]	@ (80005c0 <init_lcd_pin+0x240>)
 80004e0:	4313      	orrs	r3, r2
 80004e2:	60cb      	str	r3, [r1, #12]
	GPIOH->OSPEEDR &= ~((0b11<<18)|(0b11<<20)|(0b11<<22)|(0b11<<24)|(0b11<<26)|(0b11<<28)|(0b11<<30));
 80004e4:	4b34      	ldr	r3, [pc, #208]	@ (80005b8 <init_lcd_pin+0x238>)
 80004e6:	689b      	ldr	r3, [r3, #8]
 80004e8:	4a33      	ldr	r2, [pc, #204]	@ (80005b8 <init_lcd_pin+0x238>)
 80004ea:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80004ee:	6093      	str	r3, [r2, #8]
	GPIOH->OSPEEDR |= (0b11<<18)|(0b11<<20)|(0b11<<22)|(0b11<<24)|(0b11<<26)|(0b11<<28)|(0b11<<30);
 80004f0:	4b31      	ldr	r3, [pc, #196]	@ (80005b8 <init_lcd_pin+0x238>)
 80004f2:	689a      	ldr	r2, [r3, #8]
 80004f4:	4930      	ldr	r1, [pc, #192]	@ (80005b8 <init_lcd_pin+0x238>)
 80004f6:	4b33      	ldr	r3, [pc, #204]	@ (80005c4 <init_lcd_pin+0x244>)
 80004f8:	4313      	orrs	r3, r2
 80004fa:	608b      	str	r3, [r1, #8]
	GPIOH->AFR[1] &= ~((0b1111<<4)|(0b1111<<8)|(0b1111<<12)|(0b1111<<16)|(0b1111<<20)|(0b1111<<24)|(0b1111<<28));
 80004fc:	4b2e      	ldr	r3, [pc, #184]	@ (80005b8 <init_lcd_pin+0x238>)
 80004fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000500:	4a2d      	ldr	r2, [pc, #180]	@ (80005b8 <init_lcd_pin+0x238>)
 8000502:	f003 030f 	and.w	r3, r3, #15
 8000506:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOH->AFR[1] |= (14<<4)|(14<<8)|(14<<12)|(14<<16)|(14<<20)|(14<<24)|(14<<28);
 8000508:	4b2b      	ldr	r3, [pc, #172]	@ (80005b8 <init_lcd_pin+0x238>)
 800050a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800050c:	492a      	ldr	r1, [pc, #168]	@ (80005b8 <init_lcd_pin+0x238>)
 800050e:	4b2e      	ldr	r3, [pc, #184]	@ (80005c8 <init_lcd_pin+0x248>)
 8000510:	4313      	orrs	r3, r2
 8000512:	624b      	str	r3, [r1, #36]	@ 0x24

	//PI0 PI1 PI2 PI4 PI5 PI6 PI7 PI9 PI10
	GPIOI->MODER &= ~((0b11<<0)|(0b11<<2)|(0b11<<4)|(0b11<<8)|(0b11<<10)|(0b11<<12)|(0b11<<14)|(0b11<<18)|(0b11<<20));
 8000514:	4b2d      	ldr	r3, [pc, #180]	@ (80005cc <init_lcd_pin+0x24c>)
 8000516:	681a      	ldr	r2, [r3, #0]
 8000518:	492c      	ldr	r1, [pc, #176]	@ (80005cc <init_lcd_pin+0x24c>)
 800051a:	4b2d      	ldr	r3, [pc, #180]	@ (80005d0 <init_lcd_pin+0x250>)
 800051c:	4013      	ands	r3, r2
 800051e:	600b      	str	r3, [r1, #0]
	GPIOI->MODER |= (0b10<<0)|(0b10<<2)|(0b10<<4)|(0b10<<8)|(0b10<<10)|(0b10<<12)|(0b10<<14)|(0b10<<18)|(0b10<<20);			//AF模式
 8000520:	4b2a      	ldr	r3, [pc, #168]	@ (80005cc <init_lcd_pin+0x24c>)
 8000522:	681a      	ldr	r2, [r3, #0]
 8000524:	4929      	ldr	r1, [pc, #164]	@ (80005cc <init_lcd_pin+0x24c>)
 8000526:	4b2b      	ldr	r3, [pc, #172]	@ (80005d4 <init_lcd_pin+0x254>)
 8000528:	4313      	orrs	r3, r2
 800052a:	600b      	str	r3, [r1, #0]
	GPIOI->PUPDR &= ~((0b11<<0)|(0b11<<2)|(0b11<<4)|(0b11<<8)|(0b11<<10)|(0b11<<12)|(0b11<<14)|(0b11<<18)|(0b11<<20));
 800052c:	4b27      	ldr	r3, [pc, #156]	@ (80005cc <init_lcd_pin+0x24c>)
 800052e:	68da      	ldr	r2, [r3, #12]
 8000530:	4926      	ldr	r1, [pc, #152]	@ (80005cc <init_lcd_pin+0x24c>)
 8000532:	4b27      	ldr	r3, [pc, #156]	@ (80005d0 <init_lcd_pin+0x250>)
 8000534:	4013      	ands	r3, r2
 8000536:	60cb      	str	r3, [r1, #12]
	GPIOI->PUPDR |= (0b1<<0)|(0b1<<2)|(0b1<<4)|(0b1<<8)|(0b1<<10)|(0b1<<12)|(0b1<<14)|(0b1<<18)|(0b1<<20);
 8000538:	4b24      	ldr	r3, [pc, #144]	@ (80005cc <init_lcd_pin+0x24c>)
 800053a:	68da      	ldr	r2, [r3, #12]
 800053c:	4923      	ldr	r1, [pc, #140]	@ (80005cc <init_lcd_pin+0x24c>)
 800053e:	4b26      	ldr	r3, [pc, #152]	@ (80005d8 <init_lcd_pin+0x258>)
 8000540:	4313      	orrs	r3, r2
 8000542:	60cb      	str	r3, [r1, #12]

	GPIOI->OSPEEDR &= ~((0b11<<0)|(0b11<<2)|(0b11<<4)|(0b11<<8)|(0b11<<10)|(0b11<<12)|(0b11<<14)|(0b11<<18)|(0b11<<20));
 8000544:	4b21      	ldr	r3, [pc, #132]	@ (80005cc <init_lcd_pin+0x24c>)
 8000546:	689a      	ldr	r2, [r3, #8]
 8000548:	4920      	ldr	r1, [pc, #128]	@ (80005cc <init_lcd_pin+0x24c>)
 800054a:	4b21      	ldr	r3, [pc, #132]	@ (80005d0 <init_lcd_pin+0x250>)
 800054c:	4013      	ands	r3, r2
 800054e:	608b      	str	r3, [r1, #8]
	GPIOI->OSPEEDR |= (0b11<<0)|(0b11<<2)|(0b11<<4)|(0b11<<8)|(0b11<<10)|(0b11<<12)|(0b11<<14)|(0b11<<18)|(0b11<<20);
 8000550:	4b1e      	ldr	r3, [pc, #120]	@ (80005cc <init_lcd_pin+0x24c>)
 8000552:	689a      	ldr	r2, [r3, #8]
 8000554:	491d      	ldr	r1, [pc, #116]	@ (80005cc <init_lcd_pin+0x24c>)
 8000556:	4b21      	ldr	r3, [pc, #132]	@ (80005dc <init_lcd_pin+0x25c>)
 8000558:	4313      	orrs	r3, r2
 800055a:	608b      	str	r3, [r1, #8]
	GPIOI->AFR[0] &= ~((0b1111<<0)|(0b1111<<4)|(0b1111<<8)|(0b1111<<16)|(0b1111<<20)|(0b1111<<24)|(0b1111<<28));
 800055c:	4b1b      	ldr	r3, [pc, #108]	@ (80005cc <init_lcd_pin+0x24c>)
 800055e:	6a1b      	ldr	r3, [r3, #32]
 8000560:	4a1a      	ldr	r2, [pc, #104]	@ (80005cc <init_lcd_pin+0x24c>)
 8000562:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8000566:	6213      	str	r3, [r2, #32]
	GPIOI->AFR[0] |= (14<<0)|(14<<4)|(14<<8)|(14<<16)|(14<<20)|(14<<24)|(14<<28);
 8000568:	4b18      	ldr	r3, [pc, #96]	@ (80005cc <init_lcd_pin+0x24c>)
 800056a:	6a1a      	ldr	r2, [r3, #32]
 800056c:	4917      	ldr	r1, [pc, #92]	@ (80005cc <init_lcd_pin+0x24c>)
 800056e:	4b1c      	ldr	r3, [pc, #112]	@ (80005e0 <init_lcd_pin+0x260>)
 8000570:	4313      	orrs	r3, r2
 8000572:	620b      	str	r3, [r1, #32]
	GPIOI->AFR[1] &= ~((0b1111<<4)|(0b1111<<8));
 8000574:	4b15      	ldr	r3, [pc, #84]	@ (80005cc <init_lcd_pin+0x24c>)
 8000576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000578:	4a14      	ldr	r2, [pc, #80]	@ (80005cc <init_lcd_pin+0x24c>)
 800057a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800057e:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOI->AFR[1] |= (14<<4)|(14<<8);
 8000580:	4b12      	ldr	r3, [pc, #72]	@ (80005cc <init_lcd_pin+0x24c>)
 8000582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000584:	4a11      	ldr	r2, [pc, #68]	@ (80005cc <init_lcd_pin+0x24c>)
 8000586:	f443 636e 	orr.w	r3, r3, #3808	@ 0xee0
 800058a:	6253      	str	r3, [r2, #36]	@ 0x24
}
 800058c:	bf00      	nop
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	58024400 	.word	0x58024400
 800059c:	58020400 	.word	0x58020400
 80005a0:	58021400 	.word	0x58021400
 80005a4:	58021800 	.word	0x58021800
 80005a8:	ff3f0fff 	.word	0xff3f0fff
 80005ac:	0080a000 	.word	0x0080a000
 80005b0:	00405000 	.word	0x00405000
 80005b4:	00c0f000 	.word	0x00c0f000
 80005b8:	58021c00 	.word	0x58021c00
 80005bc:	aaa80000 	.word	0xaaa80000
 80005c0:	55540000 	.word	0x55540000
 80005c4:	fffc0000 	.word	0xfffc0000
 80005c8:	eeeeeee0 	.word	0xeeeeeee0
 80005cc:	58022000 	.word	0x58022000
 80005d0:	ffc300c0 	.word	0xffc300c0
 80005d4:	0028aa2a 	.word	0x0028aa2a
 80005d8:	00145515 	.word	0x00145515
 80005dc:	003cff3f 	.word	0x003cff3f
 80005e0:	eeee0eee 	.word	0xeeee0eee

080005e4 <init_lcd>:
}



void init_lcd(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	init_lcd_pin();
 80005e8:	f7ff feca 	bl	8000380 <init_lcd_pin>
	GPIOB->ODR |= (1<<5);   //打开背光
 80005ec:	4b33      	ldr	r3, [pc, #204]	@ (80006bc <init_lcd+0xd8>)
 80005ee:	695b      	ldr	r3, [r3, #20]
 80005f0:	4a32      	ldr	r2, [pc, #200]	@ (80006bc <init_lcd+0xd8>)
 80005f2:	f043 0320 	orr.w	r3, r3, #32
 80005f6:	6153      	str	r3, [r2, #20]
	//ltdc的时钟频率固定为pll3_r_ck,设置为33M
	RCC->APB3ENR |= 1<<3;
 80005f8:	4b31      	ldr	r3, [pc, #196]	@ (80006c0 <init_lcd+0xdc>)
 80005fa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80005fe:	4a30      	ldr	r2, [pc, #192]	@ (80006c0 <init_lcd+0xdc>)
 8000600:	f043 0308 	orr.w	r3, r3, #8
 8000604:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
	LTDC->GCR = 0;
 8000608:	4b2e      	ldr	r3, [pc, #184]	@ (80006c4 <init_lcd+0xe0>)
 800060a:	2200      	movs	r2, #0
 800060c:	619a      	str	r2, [r3, #24]
	LTDC->SSCR = (VSW-1)|((HSW-1)<<16);
 800060e:	4b2d      	ldr	r3, [pc, #180]	@ (80006c4 <init_lcd+0xe0>)
 8000610:	4a2d      	ldr	r2, [pc, #180]	@ (80006c8 <init_lcd+0xe4>)
 8000612:	609a      	str	r2, [r3, #8]
	//LTDC->SSCR = 0x002f0002;
	LTDC->BPCR = (VSW+VBP-1)|((HSW+HBP-1)<<16);
 8000614:	4b2b      	ldr	r3, [pc, #172]	@ (80006c4 <init_lcd+0xe0>)
 8000616:	4a2d      	ldr	r2, [pc, #180]	@ (80006cc <init_lcd+0xe8>)
 8000618:	60da      	str	r2, [r3, #12]
	LTDC->AWCR = (VSW+VBP+HEIGHT-1)|((HSW+HBP+WIDTH-1)<<16);
 800061a:	4b2a      	ldr	r3, [pc, #168]	@ (80006c4 <init_lcd+0xe0>)
 800061c:	4a2c      	ldr	r2, [pc, #176]	@ (80006d0 <init_lcd+0xec>)
 800061e:	611a      	str	r2, [r3, #16]
	LTDC->TWCR = (VSW+VBP+HEIGHT+VFP-1)|((HSW+HBP+WIDTH+HFP-1)<<16);
 8000620:	4b28      	ldr	r3, [pc, #160]	@ (80006c4 <init_lcd+0xe0>)
 8000622:	4a2c      	ldr	r2, [pc, #176]	@ (80006d4 <init_lcd+0xf0>)
 8000624:	615a      	str	r2, [r3, #20]
	LTDC->BCCR = 0x00000000;
 8000626:	4b27      	ldr	r3, [pc, #156]	@ (80006c4 <init_lcd+0xe0>)
 8000628:	2200      	movs	r2, #0
 800062a:	62da      	str	r2, [r3, #44]	@ 0x2c
	LTDC->GCR |= 1<<0;
 800062c:	4b25      	ldr	r3, [pc, #148]	@ (80006c4 <init_lcd+0xe0>)
 800062e:	699b      	ldr	r3, [r3, #24]
 8000630:	4a24      	ldr	r2, [pc, #144]	@ (80006c4 <init_lcd+0xe0>)
 8000632:	f043 0301 	orr.w	r3, r3, #1
 8000636:	6193      	str	r3, [r2, #24]

	LTDC_Layer1->CFBAR = layer1_buf;
 8000638:	4b27      	ldr	r3, [pc, #156]	@ (80006d8 <init_lcd+0xf4>)
 800063a:	4a28      	ldr	r2, [pc, #160]	@ (80006dc <init_lcd+0xf8>)
 800063c:	629a      	str	r2, [r3, #40]	@ 0x28
	LTDC_Layer1->PFCR = 0;						//ARGB
 800063e:	4b26      	ldr	r3, [pc, #152]	@ (80006d8 <init_lcd+0xf4>)
 8000640:	2200      	movs	r2, #0
 8000642:	611a      	str	r2, [r3, #16]
	LTDC_Layer1->CACR = 255;
 8000644:	4b24      	ldr	r3, [pc, #144]	@ (80006d8 <init_lcd+0xf4>)
 8000646:	22ff      	movs	r2, #255	@ 0xff
 8000648:	615a      	str	r2, [r3, #20]
	LTDC_Layer1->DCCR = 0;
 800064a:	4b23      	ldr	r3, [pc, #140]	@ (80006d8 <init_lcd+0xf4>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]
	LTDC_Layer1->BFCR = (0b110<<8)|(0b111);
 8000650:	4b21      	ldr	r3, [pc, #132]	@ (80006d8 <init_lcd+0xf4>)
 8000652:	f240 6207 	movw	r2, #1543	@ 0x607
 8000656:	61da      	str	r2, [r3, #28]

	LTDC_Layer1->WHPCR = (((LTDC->BPCR & 0x0FFF0000) >> 16) + 1)|((((LTDC->BPCR & 0x0FFF0000) >> 16) + 1 + WIDTH)<<16);
 8000658:	4b1a      	ldr	r3, [pc, #104]	@ (80006c4 <init_lcd+0xe0>)
 800065a:	68db      	ldr	r3, [r3, #12]
 800065c:	0c1b      	lsrs	r3, r3, #16
 800065e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000662:	1c5a      	adds	r2, r3, #1
 8000664:	4b17      	ldr	r3, [pc, #92]	@ (80006c4 <init_lcd+0xe0>)
 8000666:	68db      	ldr	r3, [r3, #12]
 8000668:	0c1b      	lsrs	r3, r3, #16
 800066a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800066e:	f203 3321 	addw	r3, r3, #801	@ 0x321
 8000672:	041b      	lsls	r3, r3, #16
 8000674:	4918      	ldr	r1, [pc, #96]	@ (80006d8 <init_lcd+0xf4>)
 8000676:	4313      	orrs	r3, r2
 8000678:	604b      	str	r3, [r1, #4]
	LTDC_Layer1->WVPCR = ((LTDC->BPCR & 0X7FF) + 1)|(((LTDC->BPCR & 0X7FF) + 1 + HEIGHT)<<16);
 800067a:	4b12      	ldr	r3, [pc, #72]	@ (80006c4 <init_lcd+0xe0>)
 800067c:	68db      	ldr	r3, [r3, #12]
 800067e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000682:	1c5a      	adds	r2, r3, #1
 8000684:	4b0f      	ldr	r3, [pc, #60]	@ (80006c4 <init_lcd+0xe0>)
 8000686:	68db      	ldr	r3, [r3, #12]
 8000688:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800068c:	f203 13e1 	addw	r3, r3, #481	@ 0x1e1
 8000690:	041b      	lsls	r3, r3, #16
 8000692:	4911      	ldr	r1, [pc, #68]	@ (80006d8 <init_lcd+0xf4>)
 8000694:	4313      	orrs	r3, r2
 8000696:	608b      	str	r3, [r1, #8]
	LTDC_Layer1->CFBLR = (WIDTH * 4 << 16) | (WIDTH * 4 + 7);
 8000698:	4b0f      	ldr	r3, [pc, #60]	@ (80006d8 <init_lcd+0xf4>)
 800069a:	4a11      	ldr	r2, [pc, #68]	@ (80006e0 <init_lcd+0xfc>)
 800069c:	62da      	str	r2, [r3, #44]	@ 0x2c
	LTDC_Layer1->CFBLNR = HEIGHT;
 800069e:	4b0e      	ldr	r3, [pc, #56]	@ (80006d8 <init_lcd+0xf4>)
 80006a0:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80006a4:	631a      	str	r2, [r3, #48]	@ 0x30
	LTDC_Layer1->CR = 1;
 80006a6:	4b0c      	ldr	r3, [pc, #48]	@ (80006d8 <init_lcd+0xf4>)
 80006a8:	2201      	movs	r2, #1
 80006aa:	601a      	str	r2, [r3, #0]
	LTDC->SRCR |= 1 << 0;
 80006ac:	4b05      	ldr	r3, [pc, #20]	@ (80006c4 <init_lcd+0xe0>)
 80006ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006b0:	4a04      	ldr	r2, [pc, #16]	@ (80006c4 <init_lcd+0xe0>)
 80006b2:	f043 0301 	orr.w	r3, r3, #1
 80006b6:	6253      	str	r3, [r2, #36]	@ 0x24

}
 80006b8:	bf00      	nop
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	58020400 	.word	0x58020400
 80006c0:	58024400 	.word	0x58024400
 80006c4:	50001000 	.word	0x50001000
 80006c8:	002f0002 	.word	0x002f0002
 80006cc:	00870022 	.word	0x00870022
 80006d0:	03a70202 	.word	0x03a70202
 80006d4:	03cf020f 	.word	0x03cf020f
 80006d8:	50001084 	.word	0x50001084
 80006dc:	c0000000 	.word	0xc0000000
 80006e0:	0c800c87 	.word	0x0c800c87

080006e4 <lcd_fill_color>:

void lcd_fill_color(unsigned int color)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b085      	sub	sp, #20
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
	for(int i = 0 ; i < HEIGHT*WIDTH ; i++)
 80006ec:	2300      	movs	r3, #0
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	e007      	b.n	8000702 <lcd_fill_color+0x1e>
		layer1_buf[i] = color;
 80006f2:	4909      	ldr	r1, [pc, #36]	@ (8000718 <lcd_fill_color+0x34>)
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	687a      	ldr	r2, [r7, #4]
 80006f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0 ; i < HEIGHT*WIDTH ; i++)
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	3301      	adds	r3, #1
 8000700:	60fb      	str	r3, [r7, #12]
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	4a05      	ldr	r2, [pc, #20]	@ (800071c <lcd_fill_color+0x38>)
 8000706:	4293      	cmp	r3, r2
 8000708:	ddf3      	ble.n	80006f2 <lcd_fill_color+0xe>

}
 800070a:	bf00      	nop
 800070c:	bf00      	nop
 800070e:	3714      	adds	r7, #20
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr
 8000718:	c0000000 	.word	0xc0000000
 800071c:	0005dbff 	.word	0x0005dbff

08000720 <init_dma_desc>:
	ETH->DMACTDTPR = (unsigned int)&tx_desc[ETH_TX_DESC_NUM-1];
}


void init_dma_desc(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
  memset((void *)tx_desc, 0, sizeof(tx_desc));
 8000726:	2230      	movs	r2, #48	@ 0x30
 8000728:	2100      	movs	r1, #0
 800072a:	484f      	ldr	r0, [pc, #316]	@ (8000868 <init_dma_desc+0x148>)
 800072c:	f00a faff 	bl	800ad2e <memset>
  memset((void *)rx_desc, 0, sizeof(rx_desc));
 8000730:	2230      	movs	r2, #48	@ 0x30
 8000732:	2100      	movs	r1, #0
 8000734:	484d      	ldr	r0, [pc, #308]	@ (800086c <init_dma_desc+0x14c>)
 8000736:	f00a fafa 	bl	800ad2e <memset>


  for (unsigned int i = 0; i < ETH_TX_DESC_NUM; i++)
 800073a:	2300      	movs	r3, #0
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	e036      	b.n	80007ae <init_dma_desc+0x8e>
  {
	  tx_desc[i].tdes0.bit.buf1ap = &dma_tx_buf[i];
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	f44f 62be 	mov.w	r2, #1520	@ 0x5f0
 8000746:	fb02 f303 	mul.w	r3, r2, r3
 800074a:	4a49      	ldr	r2, [pc, #292]	@ (8000870 <init_dma_desc+0x150>)
 800074c:	4413      	add	r3, r2
 800074e:	4619      	mov	r1, r3
 8000750:	4a45      	ldr	r2, [pc, #276]	@ (8000868 <init_dma_desc+0x148>)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	011b      	lsls	r3, r3, #4
 8000756:	4413      	add	r3, r2
 8000758:	6019      	str	r1, [r3, #0]
	  tx_desc[i].tdes1.bit.buf2ap = 0;
 800075a:	4a43      	ldr	r2, [pc, #268]	@ (8000868 <init_dma_desc+0x148>)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	011b      	lsls	r3, r3, #4
 8000760:	4413      	add	r3, r2
 8000762:	3304      	adds	r3, #4
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]

	  tx_desc[i].tdes2.bit.b1l = TX_DMA_BUF_LEN;
 8000768:	4a3f      	ldr	r2, [pc, #252]	@ (8000868 <init_dma_desc+0x148>)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	011b      	lsls	r3, r3, #4
 800076e:	4413      	add	r3, r2
 8000770:	f103 0208 	add.w	r2, r3, #8
 8000774:	6813      	ldr	r3, [r2, #0]
 8000776:	f44f 61be 	mov.w	r1, #1520	@ 0x5f0
 800077a:	f361 030d 	bfi	r3, r1, #0, #14
 800077e:	6013      	str	r3, [r2, #0]
	  tx_desc[i].tdes2.bit.b2l = 0;
 8000780:	4a39      	ldr	r2, [pc, #228]	@ (8000868 <init_dma_desc+0x148>)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	011b      	lsls	r3, r3, #4
 8000786:	4413      	add	r3, r2
 8000788:	f103 0208 	add.w	r2, r3, #8
 800078c:	6813      	ldr	r3, [r2, #0]
 800078e:	f36f 431d 	bfc	r3, #16, #14
 8000792:	6013      	str	r3, [r2, #0]

	  tx_desc[i].tdes3.bit.cic = 3;
 8000794:	4a34      	ldr	r2, [pc, #208]	@ (8000868 <init_dma_desc+0x148>)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	011b      	lsls	r3, r3, #4
 800079a:	4413      	add	r3, r2
 800079c:	f103 0208 	add.w	r2, r3, #8
 80007a0:	6853      	ldr	r3, [r2, #4]
 80007a2:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 80007a6:	6053      	str	r3, [r2, #4]
  for (unsigned int i = 0; i < ETH_TX_DESC_NUM; i++)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	3301      	adds	r3, #1
 80007ac:	607b      	str	r3, [r7, #4]
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	2b02      	cmp	r3, #2
 80007b2:	d9c5      	bls.n	8000740 <init_dma_desc+0x20>

  }

  for (unsigned int i = 0; i < ETH_RX_DESC_NUM; i++)
 80007b4:	2300      	movs	r3, #0
 80007b6:	603b      	str	r3, [r7, #0]
 80007b8:	e034      	b.n	8000824 <init_dma_desc+0x104>
  {
	  rx_desc[i].rdes0.read_bit.buf1ap = (unsigned int)(&dma_rx_buf[i]);
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	f44f 62be 	mov.w	r2, #1520	@ 0x5f0
 80007c0:	fb02 f303 	mul.w	r3, r2, r3
 80007c4:	4a2b      	ldr	r2, [pc, #172]	@ (8000874 <init_dma_desc+0x154>)
 80007c6:	4413      	add	r3, r2
 80007c8:	4619      	mov	r1, r3
 80007ca:	4a28      	ldr	r2, [pc, #160]	@ (800086c <init_dma_desc+0x14c>)
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	011b      	lsls	r3, r3, #4
 80007d0:	4413      	add	r3, r2
 80007d2:	6019      	str	r1, [r3, #0]
	  rx_desc[i].rdes2.read_bit.buf2ap = 0;
 80007d4:	4a25      	ldr	r2, [pc, #148]	@ (800086c <init_dma_desc+0x14c>)
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	011b      	lsls	r3, r3, #4
 80007da:	4413      	add	r3, r2
 80007dc:	3308      	adds	r3, #8
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
	  rx_desc[i].rdes3.read_bit.buf1v = 1;
 80007e2:	4a22      	ldr	r2, [pc, #136]	@ (800086c <init_dma_desc+0x14c>)
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	011b      	lsls	r3, r3, #4
 80007e8:	4413      	add	r3, r2
 80007ea:	f103 0208 	add.w	r2, r3, #8
 80007ee:	6853      	ldr	r3, [r2, #4]
 80007f0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80007f4:	6053      	str	r3, [r2, #4]
	  rx_desc[i].rdes3.read_bit.buf2v = 0;
 80007f6:	4a1d      	ldr	r2, [pc, #116]	@ (800086c <init_dma_desc+0x14c>)
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	011b      	lsls	r3, r3, #4
 80007fc:	4413      	add	r3, r2
 80007fe:	f103 0208 	add.w	r2, r3, #8
 8000802:	6853      	ldr	r3, [r2, #4]
 8000804:	f36f 6359 	bfc	r3, #25, #1
 8000808:	6053      	str	r3, [r2, #4]
	  rx_desc[i].rdes3.read_bit.own = 1;
 800080a:	4a18      	ldr	r2, [pc, #96]	@ (800086c <init_dma_desc+0x14c>)
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	011b      	lsls	r3, r3, #4
 8000810:	4413      	add	r3, r2
 8000812:	f103 0208 	add.w	r2, r3, #8
 8000816:	6853      	ldr	r3, [r2, #4]
 8000818:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800081c:	6053      	str	r3, [r2, #4]
  for (unsigned int i = 0; i < ETH_RX_DESC_NUM; i++)
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	3301      	adds	r3, #1
 8000822:	603b      	str	r3, [r7, #0]
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	2b02      	cmp	r3, #2
 8000828:	d9c7      	bls.n	80007ba <init_dma_desc+0x9a>
  }

  ETH->DMACTDLAR = (unsigned int)&tx_desc;
 800082a:	4a13      	ldr	r2, [pc, #76]	@ (8000878 <init_dma_desc+0x158>)
 800082c:	4b0e      	ldr	r3, [pc, #56]	@ (8000868 <init_dma_desc+0x148>)
 800082e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8000832:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114
  ETH->DMACRDLAR = (unsigned int)&rx_desc;
 8000836:	4a10      	ldr	r2, [pc, #64]	@ (8000878 <init_dma_desc+0x158>)
 8000838:	4b0c      	ldr	r3, [pc, #48]	@ (800086c <init_dma_desc+0x14c>)
 800083a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800083e:	f8c2 311c 	str.w	r3, [r2, #284]	@ 0x11c
//  ETH->DMACTDTPR = (unsigned int)&tx_desc[ETH_TX_DESC_NUM];
//  ETH->DMACRDTPR = (unsigned int)&rx_desc[ETH_RX_DESC_NUM];
  ETH->DMACTDRLR = ETH_TX_DESC_NUM-1;
 8000842:	4b0d      	ldr	r3, [pc, #52]	@ (8000878 <init_dma_desc+0x158>)
 8000844:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000848:	461a      	mov	r2, r3
 800084a:	2302      	movs	r3, #2
 800084c:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c
  ETH->DMACRDRLR = ETH_RX_DESC_NUM-1;
 8000850:	4b09      	ldr	r3, [pc, #36]	@ (8000878 <init_dma_desc+0x158>)
 8000852:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000856:	461a      	mov	r2, r3
 8000858:	2302      	movs	r3, #2
 800085a:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130
}
 800085e:	bf00      	nop
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	24002430 	.word	0x24002430
 800086c:	24002460 	.word	0x24002460
 8000870:	24000088 	.word	0x24000088
 8000874:	24001258 	.word	0x24001258
 8000878:	40028000 	.word	0x40028000

0800087c <init_mac_clk>:



void init_mac_clk(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
	RCC->APB4ENR |= (1<<1);								//syscfg
 8000880:	4b0e      	ldr	r3, [pc, #56]	@ (80008bc <init_mac_clk+0x40>)
 8000882:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000886:	4a0d      	ldr	r2, [pc, #52]	@ (80008bc <init_mac_clk+0x40>)
 8000888:	f043 0302 	orr.w	r3, r3, #2
 800088c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
	RCC->AHB1ENR |= (1<<17)|(1<<16)|(1<<15);
 8000890:	4b0a      	ldr	r3, [pc, #40]	@ (80008bc <init_mac_clk+0x40>)
 8000892:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000896:	4a09      	ldr	r2, [pc, #36]	@ (80008bc <init_mac_clk+0x40>)
 8000898:	f443 3360 	orr.w	r3, r3, #229376	@ 0x38000
 800089c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
	RCC->AHB4ENR |= (1<<6)|(1<<2)|(1<<1)|(1<<0);
 80008a0:	4b06      	ldr	r3, [pc, #24]	@ (80008bc <init_mac_clk+0x40>)
 80008a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008a6:	4a05      	ldr	r2, [pc, #20]	@ (80008bc <init_mac_clk+0x40>)
 80008a8:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
 80008ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
}
 80008b0:	bf00      	nop
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	58024400 	.word	0x58024400

080008c0 <init_mac_pin>:


void init_mac_pin(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
	//PC1,PC4,PC5
	GPIOC->MODER &= ~((0b11<<10)|(0b11<<8)|(0b11<<2));
 80008c4:	4b4c      	ldr	r3, [pc, #304]	@ (80009f8 <init_mac_pin+0x138>)
 80008c6:	681a      	ldr	r2, [r3, #0]
 80008c8:	494b      	ldr	r1, [pc, #300]	@ (80009f8 <init_mac_pin+0x138>)
 80008ca:	4b4c      	ldr	r3, [pc, #304]	@ (80009fc <init_mac_pin+0x13c>)
 80008cc:	4013      	ands	r3, r2
 80008ce:	600b      	str	r3, [r1, #0]
	GPIOC->MODER |= (0b10<<10)|(0b10<<8)|(0b10<<2);
 80008d0:	4b49      	ldr	r3, [pc, #292]	@ (80009f8 <init_mac_pin+0x138>)
 80008d2:	681a      	ldr	r2, [r3, #0]
 80008d4:	4948      	ldr	r1, [pc, #288]	@ (80009f8 <init_mac_pin+0x138>)
 80008d6:	f640 2308 	movw	r3, #2568	@ 0xa08
 80008da:	4313      	orrs	r3, r2
 80008dc:	600b      	str	r3, [r1, #0]
	GPIOC->OSPEEDR &= ~((0b11<<10)|(0b11<<8)|(0b11<<2));
 80008de:	4b46      	ldr	r3, [pc, #280]	@ (80009f8 <init_mac_pin+0x138>)
 80008e0:	689a      	ldr	r2, [r3, #8]
 80008e2:	4945      	ldr	r1, [pc, #276]	@ (80009f8 <init_mac_pin+0x138>)
 80008e4:	4b45      	ldr	r3, [pc, #276]	@ (80009fc <init_mac_pin+0x13c>)
 80008e6:	4013      	ands	r3, r2
 80008e8:	608b      	str	r3, [r1, #8]
	GPIOC->OSPEEDR |= (0b10<<10)|(0b10<<8)|(0b10<<2);
 80008ea:	4b43      	ldr	r3, [pc, #268]	@ (80009f8 <init_mac_pin+0x138>)
 80008ec:	689a      	ldr	r2, [r3, #8]
 80008ee:	4942      	ldr	r1, [pc, #264]	@ (80009f8 <init_mac_pin+0x138>)
 80008f0:	f640 2308 	movw	r3, #2568	@ 0xa08
 80008f4:	4313      	orrs	r3, r2
 80008f6:	608b      	str	r3, [r1, #8]
	GPIOC->AFR[0] &= ~((0b1111<<20)|(0b1111<<16)|(0b1111<<4));
 80008f8:	4b3f      	ldr	r3, [pc, #252]	@ (80009f8 <init_mac_pin+0x138>)
 80008fa:	6a1a      	ldr	r2, [r3, #32]
 80008fc:	493e      	ldr	r1, [pc, #248]	@ (80009f8 <init_mac_pin+0x138>)
 80008fe:	4b40      	ldr	r3, [pc, #256]	@ (8000a00 <init_mac_pin+0x140>)
 8000900:	4013      	ands	r3, r2
 8000902:	620b      	str	r3, [r1, #32]
	GPIOC->AFR[0] |= (11<<20)|(11<<16)|(11<<4);
 8000904:	4b3c      	ldr	r3, [pc, #240]	@ (80009f8 <init_mac_pin+0x138>)
 8000906:	6a1a      	ldr	r2, [r3, #32]
 8000908:	493b      	ldr	r1, [pc, #236]	@ (80009f8 <init_mac_pin+0x138>)
 800090a:	4b3e      	ldr	r3, [pc, #248]	@ (8000a04 <init_mac_pin+0x144>)
 800090c:	4313      	orrs	r3, r2
 800090e:	620b      	str	r3, [r1, #32]

	//PA1,PA2,PA7
	GPIOA->MODER &= ~((0b11<<14)|(0b11<<4)|(0b11<<2));
 8000910:	4b3d      	ldr	r3, [pc, #244]	@ (8000a08 <init_mac_pin+0x148>)
 8000912:	681a      	ldr	r2, [r3, #0]
 8000914:	493c      	ldr	r1, [pc, #240]	@ (8000a08 <init_mac_pin+0x148>)
 8000916:	4b3d      	ldr	r3, [pc, #244]	@ (8000a0c <init_mac_pin+0x14c>)
 8000918:	4013      	ands	r3, r2
 800091a:	600b      	str	r3, [r1, #0]
	GPIOA->MODER |= (0b10<<14)|(0b10<<4)|(0b10<<2);
 800091c:	4b3a      	ldr	r3, [pc, #232]	@ (8000a08 <init_mac_pin+0x148>)
 800091e:	681a      	ldr	r2, [r3, #0]
 8000920:	4939      	ldr	r1, [pc, #228]	@ (8000a08 <init_mac_pin+0x148>)
 8000922:	f248 0328 	movw	r3, #32808	@ 0x8028
 8000926:	4313      	orrs	r3, r2
 8000928:	600b      	str	r3, [r1, #0]
	GPIOA->OSPEEDR &= ~((0b11<<10)|(0b11<<8)|(0b11<<2));
 800092a:	4b37      	ldr	r3, [pc, #220]	@ (8000a08 <init_mac_pin+0x148>)
 800092c:	689a      	ldr	r2, [r3, #8]
 800092e:	4936      	ldr	r1, [pc, #216]	@ (8000a08 <init_mac_pin+0x148>)
 8000930:	4b32      	ldr	r3, [pc, #200]	@ (80009fc <init_mac_pin+0x13c>)
 8000932:	4013      	ands	r3, r2
 8000934:	608b      	str	r3, [r1, #8]
	GPIOA->OSPEEDR |= (0b10<<10)|(0b10<<8)|(0b10<<2);
 8000936:	4b34      	ldr	r3, [pc, #208]	@ (8000a08 <init_mac_pin+0x148>)
 8000938:	689a      	ldr	r2, [r3, #8]
 800093a:	4933      	ldr	r1, [pc, #204]	@ (8000a08 <init_mac_pin+0x148>)
 800093c:	f640 2308 	movw	r3, #2568	@ 0xa08
 8000940:	4313      	orrs	r3, r2
 8000942:	608b      	str	r3, [r1, #8]
	GPIOA->AFR[0] &= ~((0b1111<<28)|(0b1111<<8)|(0b1111<<4));
 8000944:	4b30      	ldr	r3, [pc, #192]	@ (8000a08 <init_mac_pin+0x148>)
 8000946:	6a1a      	ldr	r2, [r3, #32]
 8000948:	492f      	ldr	r1, [pc, #188]	@ (8000a08 <init_mac_pin+0x148>)
 800094a:	4b31      	ldr	r3, [pc, #196]	@ (8000a10 <init_mac_pin+0x150>)
 800094c:	4013      	ands	r3, r2
 800094e:	620b      	str	r3, [r1, #32]
	GPIOA->AFR[0] |= (11<<28)|(11<<8)|(11<<4);
 8000950:	4b2d      	ldr	r3, [pc, #180]	@ (8000a08 <init_mac_pin+0x148>)
 8000952:	6a1a      	ldr	r2, [r3, #32]
 8000954:	492c      	ldr	r1, [pc, #176]	@ (8000a08 <init_mac_pin+0x148>)
 8000956:	4b2f      	ldr	r3, [pc, #188]	@ (8000a14 <init_mac_pin+0x154>)
 8000958:	4313      	orrs	r3, r2
 800095a:	620b      	str	r3, [r1, #32]

	//PB11
	GPIOB->MODER &= ~(0b11<<22);
 800095c:	4b2e      	ldr	r3, [pc, #184]	@ (8000a18 <init_mac_pin+0x158>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a2d      	ldr	r2, [pc, #180]	@ (8000a18 <init_mac_pin+0x158>)
 8000962:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000966:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0b10<<22);
 8000968:	4b2b      	ldr	r3, [pc, #172]	@ (8000a18 <init_mac_pin+0x158>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a2a      	ldr	r2, [pc, #168]	@ (8000a18 <init_mac_pin+0x158>)
 800096e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000972:	6013      	str	r3, [r2, #0]
	GPIOB->OSPEEDR &= ~(0b11<<22);
 8000974:	4b28      	ldr	r3, [pc, #160]	@ (8000a18 <init_mac_pin+0x158>)
 8000976:	689b      	ldr	r3, [r3, #8]
 8000978:	4a27      	ldr	r2, [pc, #156]	@ (8000a18 <init_mac_pin+0x158>)
 800097a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800097e:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |= (0b10<<22);
 8000980:	4b25      	ldr	r3, [pc, #148]	@ (8000a18 <init_mac_pin+0x158>)
 8000982:	689b      	ldr	r3, [r3, #8]
 8000984:	4a24      	ldr	r2, [pc, #144]	@ (8000a18 <init_mac_pin+0x158>)
 8000986:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800098a:	6093      	str	r3, [r2, #8]
	GPIOB->AFR[1] &= ~((0b1111<<12));
 800098c:	4b22      	ldr	r3, [pc, #136]	@ (8000a18 <init_mac_pin+0x158>)
 800098e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000990:	4a21      	ldr	r2, [pc, #132]	@ (8000a18 <init_mac_pin+0x158>)
 8000992:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8000996:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] |= (11<<12);
 8000998:	4b1f      	ldr	r3, [pc, #124]	@ (8000a18 <init_mac_pin+0x158>)
 800099a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800099c:	4a1e      	ldr	r2, [pc, #120]	@ (8000a18 <init_mac_pin+0x158>)
 800099e:	f443 4330 	orr.w	r3, r3, #45056	@ 0xb000
 80009a2:	6253      	str	r3, [r2, #36]	@ 0x24

	//PG13,PG14
	GPIOG->MODER &= ~((0b11<<28)|(0b11<<26));
 80009a4:	4b1d      	ldr	r3, [pc, #116]	@ (8000a1c <init_mac_pin+0x15c>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a1c      	ldr	r2, [pc, #112]	@ (8000a1c <init_mac_pin+0x15c>)
 80009aa:	f023 5370 	bic.w	r3, r3, #1006632960	@ 0x3c000000
 80009ae:	6013      	str	r3, [r2, #0]
	GPIOG->MODER |= (0b10<<28)|(0b10<<26);
 80009b0:	4b1a      	ldr	r3, [pc, #104]	@ (8000a1c <init_mac_pin+0x15c>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a19      	ldr	r2, [pc, #100]	@ (8000a1c <init_mac_pin+0x15c>)
 80009b6:	f043 5320 	orr.w	r3, r3, #671088640	@ 0x28000000
 80009ba:	6013      	str	r3, [r2, #0]
	GPIOG->OSPEEDR &= ~((0b11<<28)|(0b11<<26));
 80009bc:	4b17      	ldr	r3, [pc, #92]	@ (8000a1c <init_mac_pin+0x15c>)
 80009be:	689b      	ldr	r3, [r3, #8]
 80009c0:	4a16      	ldr	r2, [pc, #88]	@ (8000a1c <init_mac_pin+0x15c>)
 80009c2:	f023 5370 	bic.w	r3, r3, #1006632960	@ 0x3c000000
 80009c6:	6093      	str	r3, [r2, #8]
	GPIOG->OSPEEDR |= (0b10<<28)|(0b10<<26);
 80009c8:	4b14      	ldr	r3, [pc, #80]	@ (8000a1c <init_mac_pin+0x15c>)
 80009ca:	689b      	ldr	r3, [r3, #8]
 80009cc:	4a13      	ldr	r2, [pc, #76]	@ (8000a1c <init_mac_pin+0x15c>)
 80009ce:	f043 5320 	orr.w	r3, r3, #671088640	@ 0x28000000
 80009d2:	6093      	str	r3, [r2, #8]
	GPIOG->AFR[1] &= ~((0b1111<<24)|(0b1111<<20));
 80009d4:	4b11      	ldr	r3, [pc, #68]	@ (8000a1c <init_mac_pin+0x15c>)
 80009d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009d8:	4a10      	ldr	r2, [pc, #64]	@ (8000a1c <init_mac_pin+0x15c>)
 80009da:	f023 637f 	bic.w	r3, r3, #267386880	@ 0xff00000
 80009de:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOG->AFR[1] |= (11<<24)|(11<<20);
 80009e0:	4b0e      	ldr	r3, [pc, #56]	@ (8000a1c <init_mac_pin+0x15c>)
 80009e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009e4:	4a0d      	ldr	r2, [pc, #52]	@ (8000a1c <init_mac_pin+0x15c>)
 80009e6:	f043 633b 	orr.w	r3, r3, #196083712	@ 0xbb00000
 80009ea:	6253      	str	r3, [r2, #36]	@ 0x24
//	GPIOC->MODER &= ~((0b11<<6));
//	GPIOC->MODER |= (0b10<<6);
//	GPIOC->AFR[0] &= ~(0b1111<<12);
//	GPIOC->AFR[0] |= (11<<12);

}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	58020800 	.word	0x58020800
 80009fc:	fffff0f3 	.word	0xfffff0f3
 8000a00:	ff00ff0f 	.word	0xff00ff0f
 8000a04:	00bb00b0 	.word	0x00bb00b0
 8000a08:	58020000 	.word	0x58020000
 8000a0c:	ffff3fc3 	.word	0xffff3fc3
 8000a10:	0ffff00f 	.word	0x0ffff00f
 8000a14:	b0000bb0 	.word	0xb0000bb0
 8000a18:	58020400 	.word	0x58020400
 8000a1c:	58021800 	.word	0x58021800

08000a20 <write_phy>:


void write_phy(unsigned char addr, unsigned char reg, unsigned short value)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	71fb      	strb	r3, [r7, #7]
 8000a2a:	460b      	mov	r3, r1
 8000a2c:	71bb      	strb	r3, [r7, #6]
 8000a2e:	4613      	mov	r3, r2
 8000a30:	80bb      	strh	r3, [r7, #4]
  while (ETH->MACMDIOAR & (1<<0));
 8000a32:	bf00      	nop
 8000a34:	4b16      	ldr	r3, [pc, #88]	@ (8000a90 <write_phy+0x70>)
 8000a36:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d1f8      	bne.n	8000a34 <write_phy+0x14>
  ETH->MACMDIOAR = (addr<<21)|(reg<<16)|(7<<12)|(0b100<<8)|(1<<2);
 8000a42:	79fb      	ldrb	r3, [r7, #7]
 8000a44:	055a      	lsls	r2, r3, #21
 8000a46:	79bb      	ldrb	r3, [r7, #6]
 8000a48:	041b      	lsls	r3, r3, #16
 8000a4a:	431a      	orrs	r2, r3
 8000a4c:	f247 4304 	movw	r3, #29700	@ 0x7404
 8000a50:	4313      	orrs	r3, r2
 8000a52:	4a0f      	ldr	r2, [pc, #60]	@ (8000a90 <write_phy+0x70>)
 8000a54:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
  ETH->MACMDIODR = value;
 8000a58:	4a0d      	ldr	r2, [pc, #52]	@ (8000a90 <write_phy+0x70>)
 8000a5a:	88bb      	ldrh	r3, [r7, #4]
 8000a5c:	f8c2 3204 	str.w	r3, [r2, #516]	@ 0x204
  ETH->MACMDIOAR |= (1<<0);
 8000a60:	4b0b      	ldr	r3, [pc, #44]	@ (8000a90 <write_phy+0x70>)
 8000a62:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000a66:	4a0a      	ldr	r2, [pc, #40]	@ (8000a90 <write_phy+0x70>)
 8000a68:	f043 0301 	orr.w	r3, r3, #1
 8000a6c:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
  while (ETH->MACMDIOAR & (1<<0));
 8000a70:	bf00      	nop
 8000a72:	4b07      	ldr	r3, [pc, #28]	@ (8000a90 <write_phy+0x70>)
 8000a74:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000a78:	f003 0301 	and.w	r3, r3, #1
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d1f8      	bne.n	8000a72 <write_phy+0x52>
}
 8000a80:	bf00      	nop
 8000a82:	bf00      	nop
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	40028000 	.word	0x40028000

08000a94 <read_phy>:

unsigned short read_phy(unsigned char addr, unsigned char reg)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	460a      	mov	r2, r1
 8000a9e:	71fb      	strb	r3, [r7, #7]
 8000aa0:	4613      	mov	r3, r2
 8000aa2:	71bb      	strb	r3, [r7, #6]
	while (ETH->MACMDIOAR & (1<<0));
 8000aa4:	bf00      	nop
 8000aa6:	4b12      	ldr	r3, [pc, #72]	@ (8000af0 <read_phy+0x5c>)
 8000aa8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000aac:	f003 0301 	and.w	r3, r3, #1
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d1f8      	bne.n	8000aa6 <read_phy+0x12>
	ETH->MACMDIOAR = (addr<<21)|(reg<<16)|(7<<12)|(0b100<<8)|(0b11<<2)|(1<<0);
 8000ab4:	79fb      	ldrb	r3, [r7, #7]
 8000ab6:	055a      	lsls	r2, r3, #21
 8000ab8:	79bb      	ldrb	r3, [r7, #6]
 8000aba:	041b      	lsls	r3, r3, #16
 8000abc:	431a      	orrs	r2, r3
 8000abe:	f247 430d 	movw	r3, #29709	@ 0x740d
 8000ac2:	4313      	orrs	r3, r2
 8000ac4:	4a0a      	ldr	r2, [pc, #40]	@ (8000af0 <read_phy+0x5c>)
 8000ac6:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
	while (ETH->MACMDIOAR & (1<<0));
 8000aca:	bf00      	nop
 8000acc:	4b08      	ldr	r3, [pc, #32]	@ (8000af0 <read_phy+0x5c>)
 8000ace:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d1f8      	bne.n	8000acc <read_phy+0x38>
	return ETH->MACMDIODR & 0xffff;
 8000ada:	4b05      	ldr	r3, [pc, #20]	@ (8000af0 <read_phy+0x5c>)
 8000adc:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8000ae0:	b29b      	uxth	r3, r3
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	370c      	adds	r7, #12
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	40028000 	.word	0x40028000

08000af4 <init_mac>:


void init_mac(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
	init_mac_clk();
 8000afa:	f7ff febf 	bl	800087c <init_mac_clk>
	init_mac_pin();
 8000afe:	f7ff fedf 	bl	80008c0 <init_mac_pin>

	SYSCFG->PMCR &= ~(0b111<<21);
 8000b02:	4b7c      	ldr	r3, [pc, #496]	@ (8000cf4 <init_mac+0x200>)
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	4a7b      	ldr	r2, [pc, #492]	@ (8000cf4 <init_mac+0x200>)
 8000b08:	f423 0360 	bic.w	r3, r3, #14680064	@ 0xe00000
 8000b0c:	6053      	str	r3, [r2, #4]
	SYSCFG->PMCR |= (0b100<<21);
 8000b0e:	4b79      	ldr	r3, [pc, #484]	@ (8000cf4 <init_mac+0x200>)
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	4a78      	ldr	r2, [pc, #480]	@ (8000cf4 <init_mac+0x200>)
 8000b14:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000b18:	6053      	str	r3, [r2, #4]

	ETH->DMAMR |= (1<<0);
 8000b1a:	4b77      	ldr	r3, [pc, #476]	@ (8000cf8 <init_mac+0x204>)
 8000b1c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4a75      	ldr	r2, [pc, #468]	@ (8000cf8 <init_mac+0x204>)
 8000b24:	f043 0301 	orr.w	r3, r3, #1
 8000b28:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8000b2c:	6013      	str	r3, [r2, #0]
	while(!(ETH->DMAMR & (1<<0)));
 8000b2e:	bf00      	nop
 8000b30:	4b71      	ldr	r3, [pc, #452]	@ (8000cf8 <init_mac+0x204>)
 8000b32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f003 0301 	and.w	r3, r3, #1
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d0f7      	beq.n	8000b30 <init_mac+0x3c>

	ETH->MACMDIOAR &= ~(0b111<<8);
 8000b40:	4b6d      	ldr	r3, [pc, #436]	@ (8000cf8 <init_mac+0x204>)
 8000b42:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000b46:	4a6c      	ldr	r2, [pc, #432]	@ (8000cf8 <init_mac+0x204>)
 8000b48:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000b4c:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
	ETH->MACMDIOAR |= (0b100<<8);
 8000b50:	4b69      	ldr	r3, [pc, #420]	@ (8000cf8 <init_mac+0x204>)
 8000b52:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000b56:	4a68      	ldr	r2, [pc, #416]	@ (8000cf8 <init_mac+0x204>)
 8000b58:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b5c:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

	ETH->MACECR = 1520;
 8000b60:	4b65      	ldr	r3, [pc, #404]	@ (8000cf8 <init_mac+0x204>)
 8000b62:	f44f 62be 	mov.w	r2, #1520	@ 0x5f0
 8000b66:	605a      	str	r2, [r3, #4]

	write_phy(0 , 0 , 0x8000);
 8000b68:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	2000      	movs	r0, #0
 8000b70:	f7ff ff56 	bl	8000a20 <write_phy>
	delay(0xfffff);
 8000b74:	4861      	ldr	r0, [pc, #388]	@ (8000cfc <init_mac+0x208>)
 8000b76:	f000 f8cb 	bl	8000d10 <delay>
	while(read_phy(0 , 0))
 8000b7a:	bf00      	nop
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	2000      	movs	r0, #0
 8000b80:	f7ff ff88 	bl	8000a94 <read_phy>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d1f8      	bne.n	8000b7c <init_mac+0x88>
		;

	write_phy(0,0,0x1000);
 8000b8a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000b8e:	2100      	movs	r1, #0
 8000b90:	2000      	movs	r0, #0
 8000b92:	f7ff ff45 	bl	8000a20 <write_phy>
	delay(0xfffff);
 8000b96:	4859      	ldr	r0, [pc, #356]	@ (8000cfc <init_mac+0x208>)
 8000b98:	f000 f8ba 	bl	8000d10 <delay>

	unsigned short read_reg = read_phy(0 , 1);
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	2000      	movs	r0, #0
 8000ba0:	f7ff ff78 	bl	8000a94 <read_phy>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	80fb      	strh	r3, [r7, #6]
	while(!(read_reg & (1<<5)))
 8000ba8:	e008      	b.n	8000bbc <init_mac+0xc8>
	{
		read_reg = read_phy(0 , 1);
 8000baa:	2101      	movs	r1, #1
 8000bac:	2000      	movs	r0, #0
 8000bae:	f7ff ff71 	bl	8000a94 <read_phy>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	80fb      	strh	r3, [r7, #6]
		delay(0xfffff);
 8000bb6:	4851      	ldr	r0, [pc, #324]	@ (8000cfc <init_mac+0x208>)
 8000bb8:	f000 f8aa 	bl	8000d10 <delay>
	while(!(read_reg & (1<<5)))
 8000bbc:	88fb      	ldrh	r3, [r7, #6]
 8000bbe:	f003 0320 	and.w	r3, r3, #32
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d0f1      	beq.n	8000baa <init_mac+0xb6>
	}

	delay(0xfffff);
 8000bc6:	484d      	ldr	r0, [pc, #308]	@ (8000cfc <init_mac+0x208>)
 8000bc8:	f000 f8a2 	bl	8000d10 <delay>



	read_reg = read_phy(0 , 0x11);
 8000bcc:	2111      	movs	r1, #17
 8000bce:	2000      	movs	r0, #0
 8000bd0:	f7ff ff60 	bl	8000a94 <read_phy>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	80fb      	strh	r3, [r7, #6]
	while(!read_phy(0 , 0x11))
 8000bd8:	bf00      	nop
 8000bda:	2111      	movs	r1, #17
 8000bdc:	2000      	movs	r0, #0
 8000bde:	f7ff ff59 	bl	8000a94 <read_phy>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d0f8      	beq.n	8000bda <init_mac+0xe6>
		;

	ETH->MACCR = 0x30006800;
 8000be8:	4b43      	ldr	r3, [pc, #268]	@ (8000cf8 <init_mac+0x204>)
 8000bea:	4a45      	ldr	r2, [pc, #276]	@ (8000d00 <init_mac+0x20c>)
 8000bec:	601a      	str	r2, [r3, #0]
	ETH->DMASBMR = 0x0;
 8000bee:	4b42      	ldr	r3, [pc, #264]	@ (8000cf8 <init_mac+0x204>)
 8000bf0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	6053      	str	r3, [r2, #4]
	ETH->DMACCR = 0x00000;
 8000bfa:	4b3f      	ldr	r3, [pc, #252]	@ (8000cf8 <init_mac+0x204>)
 8000bfc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000c00:	461a      	mov	r2, r3
 8000c02:	2300      	movs	r3, #0
 8000c04:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
	ETH->DMACTCR = 0x10000;
 8000c08:	4b3b      	ldr	r3, [pc, #236]	@ (8000cf8 <init_mac+0x204>)
 8000c0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000c0e:	461a      	mov	r2, r3
 8000c10:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c14:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
	ETH->DMACRCR = (1<<16)|(1520<<1);
 8000c18:	4b37      	ldr	r3, [pc, #220]	@ (8000cf8 <init_mac+0x204>)
 8000c1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000c1e:	461a      	mov	r2, r3
 8000c20:	4b38      	ldr	r3, [pc, #224]	@ (8000d04 <init_mac+0x210>)
 8000c22:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

	ETH->MTLRQOMR = 0x28;
 8000c26:	4b34      	ldr	r3, [pc, #208]	@ (8000cf8 <init_mac+0x204>)
 8000c28:	2228      	movs	r2, #40	@ 0x28
 8000c2a:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30

	ETH->MACA0HR = ((unsigned int)mac_hw_addr[5] << 8) | (unsigned int)mac_hw_addr[4];
 8000c2e:	4b36      	ldr	r3, [pc, #216]	@ (8000d08 <init_mac+0x214>)
 8000c30:	795b      	ldrb	r3, [r3, #5]
 8000c32:	021b      	lsls	r3, r3, #8
 8000c34:	4a34      	ldr	r2, [pc, #208]	@ (8000d08 <init_mac+0x214>)
 8000c36:	7912      	ldrb	r2, [r2, #4]
 8000c38:	4611      	mov	r1, r2
 8000c3a:	4a2f      	ldr	r2, [pc, #188]	@ (8000cf8 <init_mac+0x204>)
 8000c3c:	430b      	orrs	r3, r1
 8000c3e:	f8c2 3300 	str.w	r3, [r2, #768]	@ 0x300
	ETH->MACA0LR = ((unsigned int)mac_hw_addr[3] << 24) | (unsigned int)mac_hw_addr[2] << 16 | ((unsigned int)mac_hw_addr[1] << 8) | (unsigned int)mac_hw_addr[0];
 8000c42:	4b31      	ldr	r3, [pc, #196]	@ (8000d08 <init_mac+0x214>)
 8000c44:	78db      	ldrb	r3, [r3, #3]
 8000c46:	061a      	lsls	r2, r3, #24
 8000c48:	4b2f      	ldr	r3, [pc, #188]	@ (8000d08 <init_mac+0x214>)
 8000c4a:	789b      	ldrb	r3, [r3, #2]
 8000c4c:	041b      	lsls	r3, r3, #16
 8000c4e:	431a      	orrs	r2, r3
 8000c50:	4b2d      	ldr	r3, [pc, #180]	@ (8000d08 <init_mac+0x214>)
 8000c52:	785b      	ldrb	r3, [r3, #1]
 8000c54:	021b      	lsls	r3, r3, #8
 8000c56:	4313      	orrs	r3, r2
 8000c58:	4a2b      	ldr	r2, [pc, #172]	@ (8000d08 <init_mac+0x214>)
 8000c5a:	7812      	ldrb	r2, [r2, #0]
 8000c5c:	4611      	mov	r1, r2
 8000c5e:	4a26      	ldr	r2, [pc, #152]	@ (8000cf8 <init_mac+0x204>)
 8000c60:	430b      	orrs	r3, r1
 8000c62:	f8c2 3304 	str.w	r3, [r2, #772]	@ 0x304

//	ETH->MACPFR &= ~(0b11<<6);
//	ETH->MACPFR |= (0b10<<6)|(1<<0);
	ETH->MACPFR = 0x800000c0;
 8000c66:	4b24      	ldr	r3, [pc, #144]	@ (8000cf8 <init_mac+0x204>)
 8000c68:	4a28      	ldr	r2, [pc, #160]	@ (8000d0c <init_mac+0x218>)
 8000c6a:	609a      	str	r2, [r3, #8]
	ETH->MACTFCR = 0;
 8000c6c:	4b22      	ldr	r3, [pc, #136]	@ (8000cf8 <init_mac+0x204>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	671a      	str	r2, [r3, #112]	@ 0x70
	ETH->MACHWF1R &= ~(1<<18);
 8000c72:	4b21      	ldr	r3, [pc, #132]	@ (8000cf8 <init_mac+0x204>)
 8000c74:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8000c78:	4a1f      	ldr	r2, [pc, #124]	@ (8000cf8 <init_mac+0x204>)
 8000c7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c7e:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120




	init_dma_desc();
 8000c82:	f7ff fd4d 	bl	8000720 <init_dma_desc>

	ETH->MACCR |= (1<<1)|(1<<0);
 8000c86:	4b1c      	ldr	r3, [pc, #112]	@ (8000cf8 <init_mac+0x204>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a1b      	ldr	r2, [pc, #108]	@ (8000cf8 <init_mac+0x204>)
 8000c8c:	f043 0303 	orr.w	r3, r3, #3
 8000c90:	6013      	str	r3, [r2, #0]

	ETH->MTLTQOMR = (unsigned int)0xa;
 8000c92:	4b19      	ldr	r3, [pc, #100]	@ (8000cf8 <init_mac+0x204>)
 8000c94:	220a      	movs	r2, #10
 8000c96:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00
	ETH->MTLTQOMR |= (1<<0);
 8000c9a:	4b17      	ldr	r3, [pc, #92]	@ (8000cf8 <init_mac+0x204>)
 8000c9c:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8000ca0:	4a15      	ldr	r2, [pc, #84]	@ (8000cf8 <init_mac+0x204>)
 8000ca2:	f043 0301 	orr.w	r3, r3, #1
 8000ca6:	f8c2 3d00 	str.w	r3, [r2, #3328]	@ 0xd00
	while(ETH->MTLTQOMR & (1<<0));
 8000caa:	bf00      	nop
 8000cac:	4b12      	ldr	r3, [pc, #72]	@ (8000cf8 <init_mac+0x204>)
 8000cae:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d1f8      	bne.n	8000cac <init_mac+0x1b8>

	ETH->DMACTCR |= (1<<0);
 8000cba:	4b0f      	ldr	r3, [pc, #60]	@ (8000cf8 <init_mac+0x204>)
 8000cbc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000cc0:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8000cc4:	4a0c      	ldr	r2, [pc, #48]	@ (8000cf8 <init_mac+0x204>)
 8000cc6:	f043 0301 	orr.w	r3, r3, #1
 8000cca:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8000cce:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
	ETH->DMACRCR |= (1<<0);
 8000cd2:	4b09      	ldr	r3, [pc, #36]	@ (8000cf8 <init_mac+0x204>)
 8000cd4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000cd8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8000cdc:	4a06      	ldr	r2, [pc, #24]	@ (8000cf8 <init_mac+0x204>)
 8000cde:	f043 0301 	orr.w	r3, r3, #1
 8000ce2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8000ce6:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108


	//enable_mac();
}
 8000cea:	bf00      	nop
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	58000400 	.word	0x58000400
 8000cf8:	40028000 	.word	0x40028000
 8000cfc:	000fffff 	.word	0x000fffff
 8000d00:	30006800 	.word	0x30006800
 8000d04:	00010be0 	.word	0x00010be0
 8000d08:	24000000 	.word	0x24000000
 8000d0c:	800000c0 	.word	0x800000c0

08000d10 <delay>:
#include "lcd.h"
#include "sdram.h"
#include "udp_app.h"

void delay(unsigned int times)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
	while(times--);
 8000d18:	bf00      	nop
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	1e5a      	subs	r2, r3, #1
 8000d1e:	607a      	str	r2, [r7, #4]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d1fa      	bne.n	8000d1a <delay+0xa>
}
 8000d24:	bf00      	nop
 8000d26:	bf00      	nop
 8000d28:	370c      	adds	r7, #12
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
	...

08000d34 <main>:

unsigned char tmp = 'a';

int main(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
	init_rcc();
 8000d3a:	f000 f831 	bl	8000da0 <init_rcc>
	sdram_init();
 8000d3e:	f000 f8fb 	bl	8000f38 <sdram_init>
	unsigned char* test_sdram = BANK5_SDRAM_ADDR;
 8000d42:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8000d46:	603b      	str	r3, [r7, #0]
	for(int i = 0 ; i < 10 ; i++)
 8000d48:	2300      	movs	r3, #0
 8000d4a:	607b      	str	r3, [r7, #4]
 8000d4c:	e008      	b.n	8000d60 <main+0x2c>
		test_sdram[i] = i;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	683a      	ldr	r2, [r7, #0]
 8000d52:	4413      	add	r3, r2
 8000d54:	687a      	ldr	r2, [r7, #4]
 8000d56:	b2d2      	uxtb	r2, r2
 8000d58:	701a      	strb	r2, [r3, #0]
	for(int i = 0 ; i < 10 ; i++)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	607b      	str	r3, [r7, #4]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2b09      	cmp	r3, #9
 8000d64:	ddf3      	ble.n	8000d4e <main+0x1a>


	init_usart();
 8000d66:	f000 fbf5 	bl	8001554 <init_usart>
	init_mac();
 8000d6a:	f7ff fec3 	bl	8000af4 <init_mac>
	port_init_lwip();
 8000d6e:	f000 fe09 	bl	8001984 <port_init_lwip>
	//test_eth();
	//while(1);

	init_lcd();
 8000d72:	f7ff fc37 	bl	80005e4 <init_lcd>

	//ltdc_init();
	lcd_fill_color(0xffff00ff);
 8000d76:	f46f 407f 	mvn.w	r0, #65280	@ 0xff00
 8000d7a:	f7ff fcb3 	bl	80006e4 <lcd_fill_color>
	init_udp_pcb();
 8000d7e:	f000 fb57 	bl	8001430 <init_udp_pcb>
	//while(1);
//#if 0
	while (1)
	{
	//tx_mutex_get(&mutex_eth, TX_WAIT_FOREVER);
	test_udp_send();
 8000d82:	f000 fb7b 	bl	800147c <test_udp_send>
	delay(10000);
 8000d86:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000d8a:	f7ff ffc1 	bl	8000d10 <delay>
	ethernetif_input(&gnetif);
 8000d8e:	4803      	ldr	r0, [pc, #12]	@ (8000d9c <main+0x68>)
 8000d90:	f000 fdba 	bl	8001908 <ethernetif_input>
	sys_check_timeouts();
 8000d94:	f006 ffe2 	bl	8007d5c <sys_check_timeouts>
	{
 8000d98:	bf00      	nop
 8000d9a:	e7f2      	b.n	8000d82 <main+0x4e>
 8000d9c:	2400249c 	.word	0x2400249c

08000da0 <init_rcc>:
#include "stm32h7xx.h"


void init_rcc(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
	SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));
 8000da6:	4b37      	ldr	r3, [pc, #220]	@ (8000e84 <init_rcc+0xe4>)
 8000da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dac:	4a35      	ldr	r2, [pc, #212]	@ (8000e84 <init_rcc+0xe4>)
 8000dae:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000db2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	PWR->D3CR |= (3<<14);
 8000db6:	4b34      	ldr	r3, [pc, #208]	@ (8000e88 <init_rcc+0xe8>)
 8000db8:	699b      	ldr	r3, [r3, #24]
 8000dba:	4a33      	ldr	r2, [pc, #204]	@ (8000e88 <init_rcc+0xe8>)
 8000dbc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000dc0:	6193      	str	r3, [r2, #24]
	FLASH->KEYR1 = 0x45670123;
 8000dc2:	4b32      	ldr	r3, [pc, #200]	@ (8000e8c <init_rcc+0xec>)
 8000dc4:	4a32      	ldr	r2, [pc, #200]	@ (8000e90 <init_rcc+0xf0>)
 8000dc6:	605a      	str	r2, [r3, #4]
	FLASH->KEYR1 = 0xCDEF89AB;
 8000dc8:	4b30      	ldr	r3, [pc, #192]	@ (8000e8c <init_rcc+0xec>)
 8000dca:	4a32      	ldr	r2, [pc, #200]	@ (8000e94 <init_rcc+0xf4>)
 8000dcc:	605a      	str	r2, [r3, #4]
	FLASH->ACR = 0x1f;
 8000dce:	4b2f      	ldr	r3, [pc, #188]	@ (8000e8c <init_rcc+0xec>)
 8000dd0:	221f      	movs	r2, #31
 8000dd2:	601a      	str	r2, [r3, #0]


	RCC->PLLCFGR = 0x888;
 8000dd4:	4b30      	ldr	r3, [pc, #192]	@ (8000e98 <init_rcc+0xf8>)
 8000dd6:	f640 0288 	movw	r2, #2184	@ 0x888
 8000dda:	62da      	str	r2, [r3, #44]	@ 0x2c

	RCC->PLLCKSELR = 0x505052;
 8000ddc:	4b2e      	ldr	r3, [pc, #184]	@ (8000e98 <init_rcc+0xf8>)
 8000dde:	4a2f      	ldr	r2, [pc, #188]	@ (8000e9c <init_rcc+0xfc>)
 8000de0:	629a      	str	r2, [r3, #40]	@ 0x28
	//RCC->PLLCKSELR &= ~(0b111111<<20);
	//RCC->PLLCKSELR |= (25<<20);

	RCC->PLLCFGR |= 0x1FF<<16;
 8000de2:	4b2d      	ldr	r3, [pc, #180]	@ (8000e98 <init_rcc+0xf8>)
 8000de4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000de6:	492c      	ldr	r1, [pc, #176]	@ (8000e98 <init_rcc+0xf8>)
 8000de8:	4b2d      	ldr	r3, [pc, #180]	@ (8000ea0 <init_rcc+0x100>)
 8000dea:	4313      	orrs	r3, r2
 8000dec:	62cb      	str	r3, [r1, #44]	@ 0x2c



//Fvco=25*160/5=800M

	RCC->PLL1DIVR = (1<<24)|(3<<16)|(1<<9)|(159);
 8000dee:	4b2a      	ldr	r3, [pc, #168]	@ (8000e98 <init_rcc+0xf8>)
 8000df0:	4a2c      	ldr	r2, [pc, #176]	@ (8000ea4 <init_rcc+0x104>)
 8000df2:	631a      	str	r2, [r3, #48]	@ 0x30
	RCC->PLL2DIVR = (1<<24)|(3<<16)|(1<<9)|(159);
 8000df4:	4b28      	ldr	r3, [pc, #160]	@ (8000e98 <init_rcc+0xf8>)
 8000df6:	4a2b      	ldr	r2, [pc, #172]	@ (8000ea4 <init_rcc+0x104>)
 8000df8:	639a      	str	r2, [r3, #56]	@ 0x38
	RCC->PLL3DIVR = (8<<24)|(1<<16)|(0<<9)|(59);
 8000dfa:	4b27      	ldr	r3, [pc, #156]	@ (8000e98 <init_rcc+0xf8>)
 8000dfc:	4a2a      	ldr	r2, [pc, #168]	@ (8000ea8 <init_rcc+0x108>)
 8000dfe:	641a      	str	r2, [r3, #64]	@ 0x40
	//RCC->PLL3DIVR = (8<<24)|(1<<16)|(0<<9)|(299);



	RCC->D1CFGR = (0b100<<4)|(0b1000);
 8000e00:	4b25      	ldr	r3, [pc, #148]	@ (8000e98 <init_rcc+0xf8>)
 8000e02:	2248      	movs	r2, #72	@ 0x48
 8000e04:	619a      	str	r2, [r3, #24]
	RCC->D2CFGR = (0b100<<8)|(0b100<<4);
 8000e06:	4b24      	ldr	r3, [pc, #144]	@ (8000e98 <init_rcc+0xf8>)
 8000e08:	f44f 6288 	mov.w	r2, #1088	@ 0x440
 8000e0c:	61da      	str	r2, [r3, #28]
	RCC->D3CFGR = (0b100<<4);
 8000e0e:	4b22      	ldr	r3, [pc, #136]	@ (8000e98 <init_rcc+0xf8>)
 8000e10:	2240      	movs	r2, #64	@ 0x40
 8000e12:	621a      	str	r2, [r3, #32]

	RCC->CR |= (1<<16);
 8000e14:	4b20      	ldr	r3, [pc, #128]	@ (8000e98 <init_rcc+0xf8>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a1f      	ldr	r2, [pc, #124]	@ (8000e98 <init_rcc+0xf8>)
 8000e1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e1e:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & (1<<17)));
 8000e20:	bf00      	nop
 8000e22:	4b1d      	ldr	r3, [pc, #116]	@ (8000e98 <init_rcc+0xf8>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d0f9      	beq.n	8000e22 <init_rcc+0x82>

	RCC->CR |= (1<<24)|(1<<26)|(1<<28);
 8000e2e:	4b1a      	ldr	r3, [pc, #104]	@ (8000e98 <init_rcc+0xf8>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a19      	ldr	r2, [pc, #100]	@ (8000e98 <init_rcc+0xf8>)
 8000e34:	f043 53a8 	orr.w	r3, r3, #352321536	@ 0x15000000
 8000e38:	6013      	str	r3, [r2, #0]
	while(((1<<25)|(1<<27)|(1<<29)) != (RCC->CR & ((1<<25)|(1<<27)|(1<<29))));
 8000e3a:	bf00      	nop
 8000e3c:	4b16      	ldr	r3, [pc, #88]	@ (8000e98 <init_rcc+0xf8>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f003 5328 	and.w	r3, r3, #704643072	@ 0x2a000000
 8000e44:	f1b3 5f28 	cmp.w	r3, #704643072	@ 0x2a000000
 8000e48:	d1f8      	bne.n	8000e3c <init_rcc+0x9c>




	unsigned int tmp = RCC->CFGR;
 8000e4a:	4b13      	ldr	r3, [pc, #76]	@ (8000e98 <init_rcc+0xf8>)
 8000e4c:	691b      	ldr	r3, [r3, #16]
 8000e4e:	607b      	str	r3, [r7, #4]
	tmp &= ~(0b111);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	f023 0307 	bic.w	r3, r3, #7
 8000e56:	607b      	str	r3, [r7, #4]
	tmp |= 3;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	f043 0303 	orr.w	r3, r3, #3
 8000e5e:	607b      	str	r3, [r7, #4]
	RCC->CFGR = tmp;
 8000e60:	4a0d      	ldr	r2, [pc, #52]	@ (8000e98 <init_rcc+0xf8>)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6113      	str	r3, [r2, #16]

	while((0b11<<3) != (RCC->CFGR & (0b111<<3)));
 8000e66:	bf00      	nop
 8000e68:	4b0b      	ldr	r3, [pc, #44]	@ (8000e98 <init_rcc+0xf8>)
 8000e6a:	691b      	ldr	r3, [r3, #16]
 8000e6c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8000e70:	2b18      	cmp	r3, #24
 8000e72:	d1f9      	bne.n	8000e68 <init_rcc+0xc8>

}
 8000e74:	bf00      	nop
 8000e76:	bf00      	nop
 8000e78:	370c      	adds	r7, #12
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	e000ed00 	.word	0xe000ed00
 8000e88:	58024800 	.word	0x58024800
 8000e8c:	52002000 	.word	0x52002000
 8000e90:	45670123 	.word	0x45670123
 8000e94:	cdef89ab 	.word	0xcdef89ab
 8000e98:	58024400 	.word	0x58024400
 8000e9c:	00505052 	.word	0x00505052
 8000ea0:	01ff0000 	.word	0x01ff0000
 8000ea4:	0103029f 	.word	0x0103029f
 8000ea8:	0801003b 	.word	0x0801003b

08000eac <sdram_send_cmd>:
 * @param       regval      : 模式寄存器值
 * @retval      返回值       :0,正常; 1,失败.
 */

uint8_t sdram_send_cmd(uint8_t bankx, uint8_t cmd, uint8_t refresh, uint16_t regval)
{
 8000eac:	b490      	push	{r4, r7}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4604      	mov	r4, r0
 8000eb4:	4608      	mov	r0, r1
 8000eb6:	4611      	mov	r1, r2
 8000eb8:	461a      	mov	r2, r3
 8000eba:	4623      	mov	r3, r4
 8000ebc:	71fb      	strb	r3, [r7, #7]
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	71bb      	strb	r3, [r7, #6]
 8000ec2:	460b      	mov	r3, r1
 8000ec4:	717b      	strb	r3, [r7, #5]
 8000ec6:	4613      	mov	r3, r2
 8000ec8:	807b      	strh	r3, [r7, #2]
    uint32_t retry = 0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	60fb      	str	r3, [r7, #12]
    uint32_t tempreg = 0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60bb      	str	r3, [r7, #8]

    tempreg |= cmd << 0;            /* 设置指令 */
 8000ed2:	79bb      	ldrb	r3, [r7, #6]
 8000ed4:	68ba      	ldr	r2, [r7, #8]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	60bb      	str	r3, [r7, #8]
    tempreg |= 1 << (4 - bankx);    /* 设置发送指令到bank5还是6 */
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	f1c3 0304 	rsb	r3, r3, #4
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	60bb      	str	r3, [r7, #8]
    tempreg |= refresh << 5;        /* 设置自刷新次数 */
 8000eee:	797b      	ldrb	r3, [r7, #5]
 8000ef0:	015b      	lsls	r3, r3, #5
 8000ef2:	68ba      	ldr	r2, [r7, #8]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	60bb      	str	r3, [r7, #8]
    tempreg |= regval << 9;         /* 设置模式寄存器的值 */
 8000ef8:	887b      	ldrh	r3, [r7, #2]
 8000efa:	025b      	lsls	r3, r3, #9
 8000efc:	68ba      	ldr	r2, [r7, #8]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	60bb      	str	r3, [r7, #8]
    FMC_Bank5_6_R->SDCMR = tempreg; /* 配置寄存器 */
 8000f02:	4a0c      	ldr	r2, [pc, #48]	@ (8000f34 <sdram_send_cmd+0x88>)
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	6113      	str	r3, [r2, #16]

    while ((FMC_Bank5_6_R->SDSR & (1 << 5)))    /* 等待指令发送完成 */
 8000f08:	e008      	b.n	8000f1c <sdram_send_cmd+0x70>
    {
        retry++;
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	60fb      	str	r3, [r7, #12]

        if (retry > 0X1FFFFF)return 1;
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8000f16:	d301      	bcc.n	8000f1c <sdram_send_cmd+0x70>
 8000f18:	2301      	movs	r3, #1
 8000f1a:	e006      	b.n	8000f2a <sdram_send_cmd+0x7e>
    while ((FMC_Bank5_6_R->SDSR & (1 << 5)))    /* 等待指令发送完成 */
 8000f1c:	4b05      	ldr	r3, [pc, #20]	@ (8000f34 <sdram_send_cmd+0x88>)
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	f003 0320 	and.w	r3, r3, #32
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d1f0      	bne.n	8000f0a <sdram_send_cmd+0x5e>
    }

    return 0;
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3710      	adds	r7, #16
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bc90      	pop	{r4, r7}
 8000f32:	4770      	bx	lr
 8000f34:	52004140 	.word	0x52004140

08000f38 <sdram_init>:
 * @brief       初始化SDRAM
 * @param       无
 * @retval      无
 */
void sdram_init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af02      	add	r7, sp, #8
    uint32_t sdctrlreg = 0, sdtimereg = 0;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60fb      	str	r3, [r7, #12]
 8000f42:	2300      	movs	r3, #0
 8000f44:	60bb      	str	r3, [r7, #8]
    uint16_t mregval = 0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	80fb      	strh	r3, [r7, #6]

    RCC->AHB4ENR |= 0X1F << 2;  /* 使能PC/PD/PE/PF/PG时钟 */
 8000f4a:	4b6b      	ldr	r3, [pc, #428]	@ (80010f8 <sdram_init+0x1c0>)
 8000f4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f50:	4a69      	ldr	r2, [pc, #420]	@ (80010f8 <sdram_init+0x1c0>)
 8000f52:	f043 037c 	orr.w	r3, r3, #124	@ 0x7c
 8000f56:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    RCC->AHB3ENR |= 1 << 12;    /* 使能FMC时钟 */
 8000f5a:	4b67      	ldr	r3, [pc, #412]	@ (80010f8 <sdram_init+0x1c0>)
 8000f5c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000f60:	4a65      	ldr	r2, [pc, #404]	@ (80010f8 <sdram_init+0x1c0>)
 8000f62:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f66:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4


    sys_gpio_set(GPIOC, SYS_GPIO_PIN0 | SYS_GPIO_PIN2 | SYS_GPIO_PIN3,                          /* PC0/2/3 复用功能输出 */
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	9301      	str	r3, [sp, #4]
 8000f6e:	2303      	movs	r3, #3
 8000f70:	9300      	str	r3, [sp, #0]
 8000f72:	2300      	movs	r3, #0
 8000f74:	2202      	movs	r2, #2
 8000f76:	210d      	movs	r1, #13
 8000f78:	4860      	ldr	r0, [pc, #384]	@ (80010fc <sdram_init+0x1c4>)
 8000f7a:	f000 f922 	bl	80011c2 <sys_gpio_set>
                 SYS_GPIO_MODE_AF, SYS_GPIO_OTYPE_PP, SYS_GPIO_SPEED_HIGH, SYS_GPIO_PUPD_PU);

    sys_gpio_set(GPIOD, 3 << 0 | 7 << 8 | 3 << 14,                                              /* PD0/1/8/9/10/14/15 复用功能输出 */
 8000f7e:	2301      	movs	r3, #1
 8000f80:	9301      	str	r3, [sp, #4]
 8000f82:	2303      	movs	r3, #3
 8000f84:	9300      	str	r3, [sp, #0]
 8000f86:	2300      	movs	r3, #0
 8000f88:	2202      	movs	r2, #2
 8000f8a:	f24c 7103 	movw	r1, #50947	@ 0xc703
 8000f8e:	485c      	ldr	r0, [pc, #368]	@ (8001100 <sdram_init+0x1c8>)
 8000f90:	f000 f917 	bl	80011c2 <sys_gpio_set>
                 SYS_GPIO_MODE_AF, SYS_GPIO_OTYPE_PP, SYS_GPIO_SPEED_HIGH, SYS_GPIO_PUPD_PU);

    sys_gpio_set(GPIOE, 3 << 0 | 0X1FF << 7,                                                    /* PE0/1/7~15 复用功能输出 */
 8000f94:	2301      	movs	r3, #1
 8000f96:	9301      	str	r3, [sp, #4]
 8000f98:	2303      	movs	r3, #3
 8000f9a:	9300      	str	r3, [sp, #0]
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	2202      	movs	r2, #2
 8000fa0:	f64f 7183 	movw	r1, #65411	@ 0xff83
 8000fa4:	4857      	ldr	r0, [pc, #348]	@ (8001104 <sdram_init+0x1cc>)
 8000fa6:	f000 f90c 	bl	80011c2 <sys_gpio_set>
                 SYS_GPIO_MODE_AF, SYS_GPIO_OTYPE_PP, SYS_GPIO_SPEED_HIGH, SYS_GPIO_PUPD_PU);

    sys_gpio_set(GPIOF, 0X3F << 0 | 0X1F << 11,                                                 /* PF0~5/11~15 复用功能输出 */
 8000faa:	2301      	movs	r3, #1
 8000fac:	9301      	str	r3, [sp, #4]
 8000fae:	2303      	movs	r3, #3
 8000fb0:	9300      	str	r3, [sp, #0]
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	2202      	movs	r2, #2
 8000fb6:	f64f 013f 	movw	r1, #63551	@ 0xf83f
 8000fba:	4853      	ldr	r0, [pc, #332]	@ (8001108 <sdram_init+0x1d0>)
 8000fbc:	f000 f901 	bl	80011c2 <sys_gpio_set>
                 SYS_GPIO_MODE_AF, SYS_GPIO_OTYPE_PP, SYS_GPIO_SPEED_HIGH, SYS_GPIO_PUPD_PU);

    sys_gpio_set(GPIOG, 7 << 0 | 3 << 4 | SYS_GPIO_PIN8 | SYS_GPIO_PIN15,                       /* PG0~2/4/5/8/15 复用功能输出 */
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	9301      	str	r3, [sp, #4]
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	9300      	str	r3, [sp, #0]
 8000fc8:	2300      	movs	r3, #0
 8000fca:	2202      	movs	r2, #2
 8000fcc:	f248 1137 	movw	r1, #33079	@ 0x8137
 8000fd0:	484e      	ldr	r0, [pc, #312]	@ (800110c <sdram_init+0x1d4>)
 8000fd2:	f000 f8f6 	bl	80011c2 <sys_gpio_set>
                 SYS_GPIO_MODE_AF, SYS_GPIO_OTYPE_PP, SYS_GPIO_SPEED_HIGH, SYS_GPIO_PUPD_PU);

    sys_gpio_af_set(GPIOC, SYS_GPIO_PIN0 | SYS_GPIO_PIN2 | SYS_GPIO_PIN3, 12);      /* PC0,2,3              AF12 */
 8000fd6:	220c      	movs	r2, #12
 8000fd8:	210d      	movs	r1, #13
 8000fda:	4848      	ldr	r0, [pc, #288]	@ (80010fc <sdram_init+0x1c4>)
 8000fdc:	f000 f89c 	bl	8001118 <sys_gpio_af_set>
    sys_gpio_af_set(GPIOD, 3 << 0 | 7 << 8 | 3 << 14, 12);                          /* PD0/1/8/9/10/14/15   AF12 */
 8000fe0:	220c      	movs	r2, #12
 8000fe2:	f24c 7103 	movw	r1, #50947	@ 0xc703
 8000fe6:	4846      	ldr	r0, [pc, #280]	@ (8001100 <sdram_init+0x1c8>)
 8000fe8:	f000 f896 	bl	8001118 <sys_gpio_af_set>
    sys_gpio_af_set(GPIOE, 3 << 0 | 0X1FF << 7, 12);                                /* PE0/1/7~15           AF12 */
 8000fec:	220c      	movs	r2, #12
 8000fee:	f64f 7183 	movw	r1, #65411	@ 0xff83
 8000ff2:	4844      	ldr	r0, [pc, #272]	@ (8001104 <sdram_init+0x1cc>)
 8000ff4:	f000 f890 	bl	8001118 <sys_gpio_af_set>
    sys_gpio_af_set(GPIOF, 0X3F << 0 | 0X1F << 11, 12);                             /* PF0~5/11~15          AF12 */
 8000ff8:	220c      	movs	r2, #12
 8000ffa:	f64f 013f 	movw	r1, #63551	@ 0xf83f
 8000ffe:	4842      	ldr	r0, [pc, #264]	@ (8001108 <sdram_init+0x1d0>)
 8001000:	f000 f88a 	bl	8001118 <sys_gpio_af_set>
    sys_gpio_af_set(GPIOG, 7 << 0 | 3 << 4 | SYS_GPIO_PIN8 | SYS_GPIO_PIN15, 12);   /* PG0~2/4/5/8/15       AF12 */
 8001004:	220c      	movs	r2, #12
 8001006:	f248 1137 	movw	r1, #33079	@ 0x8137
 800100a:	4840      	ldr	r0, [pc, #256]	@ (800110c <sdram_init+0x1d4>)
 800100c:	f000 f884 	bl	8001118 <sys_gpio_af_set>


    sdctrlreg |= 1 << 0;                /* 9位列地址 */
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	f043 0301 	orr.w	r3, r3, #1
 8001016:	60fb      	str	r3, [r7, #12]
    sdctrlreg |= 2 << 2;                /* 13位行地址 */
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	f043 0308 	orr.w	r3, r3, #8
 800101e:	60fb      	str	r3, [r7, #12]
    sdctrlreg |= 1 << 4;                /* 16位数据位宽 */
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	f043 0310 	orr.w	r3, r3, #16
 8001026:	60fb      	str	r3, [r7, #12]
    sdctrlreg |= 1 << 6;                /* 4个内部存区(4 BANKS) */
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800102e:	60fb      	str	r3, [r7, #12]
    sdctrlreg |= 2 << 7;                /* 2个CAS延迟 */
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001036:	60fb      	str	r3, [r7, #12]
    sdctrlreg |= 0 << 9;                /* 允许写访问 */
    sdctrlreg |= 2 << 10;               /* SDRAM时钟=pll2_r_ck/2=220M/2=110M=9.1ns */
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800103e:	60fb      	str	r3, [r7, #12]
    sdctrlreg |= 1 << 12;               /* 使能突发访问 */
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001046:	60fb      	str	r3, [r7, #12]
    sdctrlreg |= 0 << 13;               /* 读通道延迟0个pll2_r_ck */
    FMC_Bank5_6_R->SDCR[0] = sdctrlreg; /* 设置FMC BANK5 SDRAM控制寄存器(BANK5和6用于管理SDRAM) */
 8001048:	4a31      	ldr	r2, [pc, #196]	@ (8001110 <sdram_init+0x1d8>)
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	6013      	str	r3, [r2, #0]

    sdtimereg |= 1 << 0;                /* 加载模式寄存器到激活时间的延迟为2个时钟周期 */
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	f043 0301 	orr.w	r3, r3, #1
 8001054:	60bb      	str	r3, [r7, #8]
    sdtimereg |= 7 << 4;                /* 退出自刷新延迟为8个时钟周期 */
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 800105c:	60bb      	str	r3, [r7, #8]
    sdtimereg |= 6 << 8;                /* 自刷新时间为7个时钟周期 */
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8001064:	60bb      	str	r3, [r7, #8]
    sdtimereg |= 6 << 12;               /* 行循环延迟为7个时钟周期 */
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 800106c:	60bb      	str	r3, [r7, #8]
    sdtimereg |= 1 << 16;               /* 恢复延迟为2个时钟周期 */
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001074:	60bb      	str	r3, [r7, #8]
    sdtimereg |= 1 << 20;               /* 行预充电延迟为2个时钟周期 */
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800107c:	60bb      	str	r3, [r7, #8]
    sdtimereg |= 1 << 24;               /* 行到列延迟为2个时钟周期 */
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001084:	60bb      	str	r3, [r7, #8]
    FMC_Bank5_6_R->SDTR[0] = sdtimereg; /* 设置FMC BANK5 SDRAM时序寄存器 */
 8001086:	4a22      	ldr	r2, [pc, #136]	@ (8001110 <sdram_init+0x1d8>)
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	6093      	str	r3, [r2, #8]
    FMC_Bank1_R->BTCR[0] |= (uint32_t)1 << 31;  /* 使能FMC */
 800108c:	4b21      	ldr	r3, [pc, #132]	@ (8001114 <sdram_init+0x1dc>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a20      	ldr	r2, [pc, #128]	@ (8001114 <sdram_init+0x1dc>)
 8001092:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001096:	6013      	str	r3, [r2, #0]

    sdram_send_cmd(0, 1, 0, 0);         /* 时钟配置使能 */
 8001098:	2300      	movs	r3, #0
 800109a:	2200      	movs	r2, #0
 800109c:	2101      	movs	r1, #1
 800109e:	2000      	movs	r0, #0
 80010a0:	f7ff ff04 	bl	8000eac <sdram_send_cmd>
    //delay_us(500);                      /* 至少延迟200us. */
    delay(10000);
 80010a4:	f242 7010 	movw	r0, #10000	@ 0x2710
 80010a8:	f7ff fe32 	bl	8000d10 <delay>

    sdram_send_cmd(0, 2, 0, 0);         /* 对所有存储区预充电 */
 80010ac:	2300      	movs	r3, #0
 80010ae:	2200      	movs	r2, #0
 80010b0:	2102      	movs	r1, #2
 80010b2:	2000      	movs	r0, #0
 80010b4:	f7ff fefa 	bl	8000eac <sdram_send_cmd>
    sdram_send_cmd(0, 3, 8, 0);         /* 设置自刷新次数 */
 80010b8:	2300      	movs	r3, #0
 80010ba:	2208      	movs	r2, #8
 80010bc:	2103      	movs	r1, #3
 80010be:	2000      	movs	r0, #0
 80010c0:	f7ff fef4 	bl	8000eac <sdram_send_cmd>
    mregval |= 1 << 0;                  /* 设置突发长度:1(可以是1/2/4/8) */
 80010c4:	88fb      	ldrh	r3, [r7, #6]
 80010c6:	f043 0301 	orr.w	r3, r3, #1
 80010ca:	80fb      	strh	r3, [r7, #6]
    mregval |= 0 << 3;                  /* 设置突发类型:连续(可以是连续/交错) */
    mregval |= 2 << 4;                  /* 设置CAS值:2(可以是2/3) */
 80010cc:	88fb      	ldrh	r3, [r7, #6]
 80010ce:	f043 0320 	orr.w	r3, r3, #32
 80010d2:	80fb      	strh	r3, [r7, #6]
    mregval |= 0 << 7;                  /* 设置操作模式:0,标准模式 */
    mregval |= 1 << 9;                  /* 设置突发写模式:1,单点访问 */
 80010d4:	88fb      	ldrh	r3, [r7, #6]
 80010d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010da:	80fb      	strh	r3, [r7, #6]
    sdram_send_cmd(0, 4, 0, mregval);   /* 设置SDRAM的模式寄存器 */
 80010dc:	88fb      	ldrh	r3, [r7, #6]
 80010de:	2200      	movs	r2, #0
 80010e0:	2104      	movs	r1, #4
 80010e2:	2000      	movs	r0, #0
 80010e4:	f7ff fee2 	bl	8000eac <sdram_send_cmd>
     * 刷新频率计数器(以SDCLK频率计数),计算方法:
     * COUNT=SDRAM刷新周期/行数-20=SDRAM刷新周期(us)*SDCLK频率(Mhz)/行数
     * 我们使用的SDRAM刷新周期为64ms,SDCLK=220/2=110Mhz,行数为8192(2^13).
     * 所以,COUNT=64*1000*110/8192-20=839
     */
    FMC_Bank5_6_R->SDRTR = 839 << 1;    /* 设置刷新频率计数器 */
 80010e8:	4b09      	ldr	r3, [pc, #36]	@ (8001110 <sdram_init+0x1d8>)
 80010ea:	f240 628e 	movw	r2, #1678	@ 0x68e
 80010ee:	615a      	str	r2, [r3, #20]
}
 80010f0:	bf00      	nop
 80010f2:	3710      	adds	r7, #16
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	58024400 	.word	0x58024400
 80010fc:	58020800 	.word	0x58020800
 8001100:	58020c00 	.word	0x58020c00
 8001104:	58021000 	.word	0x58021000
 8001108:	58021400 	.word	0x58021400
 800110c:	58021800 	.word	0x58021800
 8001110:	52004140 	.word	0x52004140
 8001114:	52004000 	.word	0x52004000

08001118 <sys_gpio_af_set>:
 *   @arg       AF8: USART4/5/8/SPDIF/SAI2/4;  AF9; FDCAN1~2/TIM13/14/LCD/QSPI; AF10: USB_OTG1/2/SAI2/4/QSPI;    AF11: ETH/UART7/SDIO2/I2C4/COMP1/2;
 *   @arg       AF12: FMC/SDIO1/OTG2/LCD;      AF13: DCIM/DSI/LCD/COMP1/2;      AF14: LCD/UART5;                 AF15: EVENTOUT;
 * @retval      ��
 */
void sys_gpio_af_set(GPIO_TypeDef *p_gpiox, uint16_t pinx, uint8_t afx)
{
 8001118:	b480      	push	{r7}
 800111a:	b087      	sub	sp, #28
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	460b      	mov	r3, r1
 8001122:	807b      	strh	r3, [r7, #2]
 8001124:	4613      	mov	r3, r2
 8001126:	707b      	strb	r3, [r7, #1]
    uint32_t pinpos = 0, pos = 0, curpin = 0;;
 8001128:	2300      	movs	r3, #0
 800112a:	617b      	str	r3, [r7, #20]
 800112c:	2300      	movs	r3, #0
 800112e:	613b      	str	r3, [r7, #16]
 8001130:	2300      	movs	r3, #0
 8001132:	60fb      	str	r3, [r7, #12]

    for (pinpos = 0; pinpos < 16; pinpos++)
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]
 8001138:	e039      	b.n	80011ae <sys_gpio_af_set+0x96>
    {
        pos = 1 << pinpos;      /* һ����λ��� */
 800113a:	2201      	movs	r2, #1
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	613b      	str	r3, [r7, #16]
        curpin = pinx & pos;    /* ��������Ƿ�Ҫ���� */
 8001144:	887b      	ldrh	r3, [r7, #2]
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	4013      	ands	r3, r2
 800114a:	60fb      	str	r3, [r7, #12]

        if (curpin == pos)      /* ��Ҫ���� */
 800114c:	68fa      	ldr	r2, [r7, #12]
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	429a      	cmp	r2, r3
 8001152:	d129      	bne.n	80011a8 <sys_gpio_af_set+0x90>
        {
            p_gpiox->AFR[pinpos >> 3] &= ~(0X0F << ((pinpos & 0X07) * 4));
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	08da      	lsrs	r2, r3, #3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	3208      	adds	r2, #8
 800115c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001160:	697a      	ldr	r2, [r7, #20]
 8001162:	f002 0207 	and.w	r2, r2, #7
 8001166:	0092      	lsls	r2, r2, #2
 8001168:	210f      	movs	r1, #15
 800116a:	fa01 f202 	lsl.w	r2, r1, r2
 800116e:	43d2      	mvns	r2, r2
 8001170:	4611      	mov	r1, r2
 8001172:	697a      	ldr	r2, [r7, #20]
 8001174:	08d2      	lsrs	r2, r2, #3
 8001176:	4019      	ands	r1, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	3208      	adds	r2, #8
 800117c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            p_gpiox->AFR[pinpos >> 3] |= (uint32_t)afx << ((pinpos & 0X07) * 4);
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	08da      	lsrs	r2, r3, #3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	3208      	adds	r2, #8
 8001188:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800118c:	787a      	ldrb	r2, [r7, #1]
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	f003 0307 	and.w	r3, r3, #7
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	697a      	ldr	r2, [r7, #20]
 800119c:	08d2      	lsrs	r2, r2, #3
 800119e:	4319      	orrs	r1, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	3208      	adds	r2, #8
 80011a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (pinpos = 0; pinpos < 16; pinpos++)
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	3301      	adds	r3, #1
 80011ac:	617b      	str	r3, [r7, #20]
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	2b0f      	cmp	r3, #15
 80011b2:	d9c2      	bls.n	800113a <sys_gpio_af_set+0x22>
        }
    }
}
 80011b4:	bf00      	nop
 80011b6:	bf00      	nop
 80011b8:	371c      	adds	r7, #28
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr

080011c2 <sys_gpio_set>:
 *
 * @note:       ע��: ������ģʽ(��ͨ����/ģ������)��, OTYPE��OSPEED������Ч!!
 * @retval      ��
 */
void sys_gpio_set(GPIO_TypeDef *p_gpiox, uint16_t pinx, uint32_t mode, uint32_t otype, uint32_t ospeed, uint32_t pupd)
{
 80011c2:	b480      	push	{r7}
 80011c4:	b089      	sub	sp, #36	@ 0x24
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	60f8      	str	r0, [r7, #12]
 80011ca:	607a      	str	r2, [r7, #4]
 80011cc:	603b      	str	r3, [r7, #0]
 80011ce:	460b      	mov	r3, r1
 80011d0:	817b      	strh	r3, [r7, #10]
    uint32_t pinpos = 0, pos = 0, curpin = 0;
 80011d2:	2300      	movs	r3, #0
 80011d4:	61fb      	str	r3, [r7, #28]
 80011d6:	2300      	movs	r3, #0
 80011d8:	61bb      	str	r3, [r7, #24]
 80011da:	2300      	movs	r3, #0
 80011dc:	617b      	str	r3, [r7, #20]

    for (pinpos = 0; pinpos < 16; pinpos++)
 80011de:	2300      	movs	r3, #0
 80011e0:	61fb      	str	r3, [r7, #28]
 80011e2:	e067      	b.n	80012b4 <sys_gpio_set+0xf2>
    {
        pos = 1 << pinpos;      /* һ����λ��� */
 80011e4:	2201      	movs	r2, #1
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	61bb      	str	r3, [r7, #24]
        curpin = pinx & pos;    /* ��������Ƿ�Ҫ���� */
 80011ee:	897b      	ldrh	r3, [r7, #10]
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4013      	ands	r3, r2
 80011f4:	617b      	str	r3, [r7, #20]

        if (curpin == pos)      /* ��Ҫ���� */
 80011f6:	697a      	ldr	r2, [r7, #20]
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	429a      	cmp	r2, r3
 80011fc:	d157      	bne.n	80012ae <sys_gpio_set+0xec>
        {
            p_gpiox->MODER &= ~(3 << (pinpos * 2)); /* �����ԭ�������� */
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	69fa      	ldr	r2, [r7, #28]
 8001204:	0052      	lsls	r2, r2, #1
 8001206:	2103      	movs	r1, #3
 8001208:	fa01 f202 	lsl.w	r2, r1, r2
 800120c:	43d2      	mvns	r2, r2
 800120e:	401a      	ands	r2, r3
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	601a      	str	r2, [r3, #0]
            p_gpiox->MODER |= mode << (pinpos * 2); /* �����µ�ģʽ */
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	6879      	ldr	r1, [r7, #4]
 800121e:	fa01 f303 	lsl.w	r3, r1, r3
 8001222:	431a      	orrs	r2, r3
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	601a      	str	r2, [r3, #0]

            if ((mode == 0X01) || (mode == 0X02))   /* ��������ģʽ/���ù���ģʽ */
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2b01      	cmp	r3, #1
 800122c:	d002      	beq.n	8001234 <sys_gpio_set+0x72>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2b02      	cmp	r3, #2
 8001232:	d127      	bne.n	8001284 <sys_gpio_set+0xc2>
            {
                p_gpiox->OSPEEDR &= ~(3 << (pinpos * 2));       /* ���ԭ�������� */
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	69fa      	ldr	r2, [r7, #28]
 800123a:	0052      	lsls	r2, r2, #1
 800123c:	2103      	movs	r1, #3
 800123e:	fa01 f202 	lsl.w	r2, r1, r2
 8001242:	43d2      	mvns	r2, r2
 8001244:	401a      	ands	r2, r3
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	609a      	str	r2, [r3, #8]
                p_gpiox->OSPEEDR |= (ospeed << (pinpos * 2));   /* �����µ��ٶ�ֵ */
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	689a      	ldr	r2, [r3, #8]
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001254:	fa01 f303 	lsl.w	r3, r1, r3
 8001258:	431a      	orrs	r2, r3
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	609a      	str	r2, [r3, #8]
                p_gpiox->OTYPER &= ~(1 << pinpos) ;             /* ���ԭ�������� */
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	2101      	movs	r1, #1
 8001264:	69fa      	ldr	r2, [r7, #28]
 8001266:	fa01 f202 	lsl.w	r2, r1, r2
 800126a:	43d2      	mvns	r2, r2
 800126c:	401a      	ands	r2, r3
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	605a      	str	r2, [r3, #4]
                p_gpiox->OTYPER |= otype << pinpos;             /* �����µ����ģʽ */
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	685a      	ldr	r2, [r3, #4]
 8001276:	6839      	ldr	r1, [r7, #0]
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	fa01 f303 	lsl.w	r3, r1, r3
 800127e:	431a      	orrs	r2, r3
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	605a      	str	r2, [r3, #4]
            }

            p_gpiox->PUPDR &= ~(3 << (pinpos * 2)); /* �����ԭ�������� */
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	69fa      	ldr	r2, [r7, #28]
 800128a:	0052      	lsls	r2, r2, #1
 800128c:	2103      	movs	r1, #3
 800128e:	fa01 f202 	lsl.w	r2, r1, r2
 8001292:	43d2      	mvns	r2, r2
 8001294:	401a      	ands	r2, r3
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	60da      	str	r2, [r3, #12]
            p_gpiox->PUPDR |= pupd << (pinpos * 2); /* �����µ������� */
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	68da      	ldr	r2, [r3, #12]
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80012a4:	fa01 f303 	lsl.w	r3, r1, r3
 80012a8:	431a      	orrs	r2, r3
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	60da      	str	r2, [r3, #12]
    for (pinpos = 0; pinpos < 16; pinpos++)
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	3301      	adds	r3, #1
 80012b2:	61fb      	str	r3, [r7, #28]
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	2b0f      	cmp	r3, #15
 80012b8:	d994      	bls.n	80011e4 <sys_gpio_set+0x22>
        }
    }
}
 80012ba:	bf00      	nop
 80012bc:	bf00      	nop
 80012be:	3724      	adds	r7, #36	@ 0x24
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b086      	sub	sp, #24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]
 80012d8:	e00a      	b.n	80012f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012da:	f3af 8000 	nop.w
 80012de:	4601      	mov	r1, r0
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	1c5a      	adds	r2, r3, #1
 80012e4:	60ba      	str	r2, [r7, #8]
 80012e6:	b2ca      	uxtb	r2, r1
 80012e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	3301      	adds	r3, #1
 80012ee:	617b      	str	r3, [r7, #20]
 80012f0:	697a      	ldr	r2, [r7, #20]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	dbf0      	blt.n	80012da <_read+0x12>
  }

  return len;
 80012f8:	687b      	ldr	r3, [r7, #4]
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3718      	adds	r7, #24
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	b086      	sub	sp, #24
 8001306:	af00      	add	r7, sp, #0
 8001308:	60f8      	str	r0, [r7, #12]
 800130a:	60b9      	str	r1, [r7, #8]
 800130c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800130e:	2300      	movs	r3, #0
 8001310:	617b      	str	r3, [r7, #20]
 8001312:	e009      	b.n	8001328 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	1c5a      	adds	r2, r3, #1
 8001318:	60ba      	str	r2, [r7, #8]
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	4618      	mov	r0, r3
 800131e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	3301      	adds	r3, #1
 8001326:	617b      	str	r3, [r7, #20]
 8001328:	697a      	ldr	r2, [r7, #20]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	429a      	cmp	r2, r3
 800132e:	dbf1      	blt.n	8001314 <_write+0x12>
  }
  return len;
 8001330:	687b      	ldr	r3, [r7, #4]
}
 8001332:	4618      	mov	r0, r3
 8001334:	3718      	adds	r7, #24
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <_close>:

int _close(int file)
{
 800133a:	b480      	push	{r7}
 800133c:	b083      	sub	sp, #12
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001342:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001346:	4618      	mov	r0, r3
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr

08001352 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001352:	b480      	push	{r7}
 8001354:	b083      	sub	sp, #12
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
 800135a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001362:	605a      	str	r2, [r3, #4]
  return 0;
 8001364:	2300      	movs	r3, #0
}
 8001366:	4618      	mov	r0, r3
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr

08001372 <_isatty>:

int _isatty(int file)
{
 8001372:	b480      	push	{r7}
 8001374:	b083      	sub	sp, #12
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800137a:	2301      	movs	r3, #1
}
 800137c:	4618      	mov	r0, r3
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001394:	2300      	movs	r3, #0
}
 8001396:	4618      	mov	r0, r3
 8001398:	3714      	adds	r7, #20
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
	...

080013a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013ac:	4a14      	ldr	r2, [pc, #80]	@ (8001400 <_sbrk+0x5c>)
 80013ae:	4b15      	ldr	r3, [pc, #84]	@ (8001404 <_sbrk+0x60>)
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013b8:	4b13      	ldr	r3, [pc, #76]	@ (8001408 <_sbrk+0x64>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d102      	bne.n	80013c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013c0:	4b11      	ldr	r3, [pc, #68]	@ (8001408 <_sbrk+0x64>)
 80013c2:	4a12      	ldr	r2, [pc, #72]	@ (800140c <_sbrk+0x68>)
 80013c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013c6:	4b10      	ldr	r3, [pc, #64]	@ (8001408 <_sbrk+0x64>)
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4413      	add	r3, r2
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d207      	bcs.n	80013e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013d4:	f009 fcfa 	bl	800adcc <__errno>
 80013d8:	4603      	mov	r3, r0
 80013da:	220c      	movs	r2, #12
 80013dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013de:	f04f 33ff 	mov.w	r3, #4294967295
 80013e2:	e009      	b.n	80013f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013e4:	4b08      	ldr	r3, [pc, #32]	@ (8001408 <_sbrk+0x64>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013ea:	4b07      	ldr	r3, [pc, #28]	@ (8001408 <_sbrk+0x64>)
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4413      	add	r3, r2
 80013f2:	4a05      	ldr	r2, [pc, #20]	@ (8001408 <_sbrk+0x64>)
 80013f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013f6:	68fb      	ldr	r3, [r7, #12]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3718      	adds	r7, #24
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	24080000 	.word	0x24080000
 8001404:	00000400 	.word	0x00000400
 8001408:	24002490 	.word	0x24002490
 800140c:	24008db8 	.word	0x24008db8

08001410 <udp_callback>:

struct udp_pcb *udpecho_pcb = NULL;
ip_addr_t dst_ip_addr;

static void udp_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8001410:	b480      	push	{r7}
 8001412:	b087      	sub	sp, #28
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	607a      	str	r2, [r7, #4]
 800141c:	603b      	str	r3, [r7, #0]
  unsigned short cmd_code = 0;
 800141e:	2300      	movs	r3, #0
 8001420:	82fb      	strh	r3, [r7, #22]


}
 8001422:	bf00      	nop
 8001424:	371c      	adds	r7, #28
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
	...

08001430 <init_udp_pcb>:


void init_udp_pcb(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0

  udpecho_pcb = udp_new();
 8001434:	f007 f866 	bl	8008504 <udp_new>
 8001438:	4603      	mov	r3, r0
 800143a:	4a0b      	ldr	r2, [pc, #44]	@ (8001468 <init_udp_pcb+0x38>)
 800143c:	6013      	str	r3, [r2, #0]

  udp_bind(udpecho_pcb, &ipaddr, LOCAL_PORT);
 800143e:	4b0a      	ldr	r3, [pc, #40]	@ (8001468 <init_udp_pcb+0x38>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f241 32c4 	movw	r2, #5060	@ 0x13c4
 8001446:	4909      	ldr	r1, [pc, #36]	@ (800146c <init_udp_pcb+0x3c>)
 8001448:	4618      	mov	r0, r3
 800144a:	f006 ffcb 	bl	80083e4 <udp_bind>

  udp_recv(udpecho_pcb, udp_callback, NULL);
 800144e:	4b06      	ldr	r3, [pc, #24]	@ (8001468 <init_udp_pcb+0x38>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2200      	movs	r2, #0
 8001454:	4906      	ldr	r1, [pc, #24]	@ (8001470 <init_udp_pcb+0x40>)
 8001456:	4618      	mov	r0, r3
 8001458:	f007 f840 	bl	80084dc <udp_recv>

  IP4_ADDR(&dst_ip_addr, DST_IP_ADDR0, DST_IP_ADDR1, DST_IP_ADDR2, DST_IP_ADDR3);
 800145c:	4b05      	ldr	r3, [pc, #20]	@ (8001474 <init_udp_pcb+0x44>)
 800145e:	4a06      	ldr	r2, [pc, #24]	@ (8001478 <init_udp_pcb+0x48>)
 8001460:	601a      	str	r2, [r3, #0]

}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	24002494 	.word	0x24002494
 800146c:	240024d0 	.word	0x240024d0
 8001470:	08001411 	.word	0x08001411
 8001474:	24002498 	.word	0x24002498
 8001478:	c902a8c0 	.word	0xc902a8c0

0800147c <test_udp_send>:

}


void test_udp_send(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
	char data[] = {0xaa , 0x55};
 8001482:	f245 53aa 	movw	r3, #21930	@ 0x55aa
 8001486:	803b      	strh	r3, [r7, #0]
	  struct pbuf *q = pbuf_alloc(PBUF_TRANSPORT, sizeof(data), PBUF_POOL);
 8001488:	f44f 72c1 	mov.w	r2, #386	@ 0x182
 800148c:	2102      	movs	r1, #2
 800148e:	2036      	movs	r0, #54	@ 0x36
 8001490:	f001 fb26 	bl	8002ae0 <pbuf_alloc>
 8001494:	6078      	str	r0, [r7, #4]

	  memcpy(q->payload, data, sizeof(data));
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	883a      	ldrh	r2, [r7, #0]
 800149c:	801a      	strh	r2, [r3, #0]
	  udp_sendto(udpecho_pcb, q, &dst_ip_addr, DST_PORT);
 800149e:	4b07      	ldr	r3, [pc, #28]	@ (80014bc <test_udp_send+0x40>)
 80014a0:	6818      	ldr	r0, [r3, #0]
 80014a2:	f241 33c4 	movw	r3, #5060	@ 0x13c4
 80014a6:	4a06      	ldr	r2, [pc, #24]	@ (80014c0 <test_udp_send+0x44>)
 80014a8:	6879      	ldr	r1, [r7, #4]
 80014aa:	f006 fe49 	bl	8008140 <udp_sendto>

	  pbuf_free(q);
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f001 fdbc 	bl	800302c <pbuf_free>
}
 80014b4:	bf00      	nop
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	24002494 	.word	0x24002494
 80014c0:	24002498 	.word	0x24002498

080014c4 <init_usart1_clk>:
#include "stm32h7xx.h"



void init_usart1_clk(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
	RCC->AHB4ENR |= (1<<0);
 80014c8:	4b0a      	ldr	r3, [pc, #40]	@ (80014f4 <init_usart1_clk+0x30>)
 80014ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014ce:	4a09      	ldr	r2, [pc, #36]	@ (80014f4 <init_usart1_clk+0x30>)
 80014d0:	f043 0301 	orr.w	r3, r3, #1
 80014d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
	RCC->APB2ENR |= (1<<4);
 80014d8:	4b06      	ldr	r3, [pc, #24]	@ (80014f4 <init_usart1_clk+0x30>)
 80014da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80014de:	4a05      	ldr	r2, [pc, #20]	@ (80014f4 <init_usart1_clk+0x30>)
 80014e0:	f043 0310 	orr.w	r3, r3, #16
 80014e4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
	//rcc_pclk2作为usart1的时钟

}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	58024400 	.word	0x58024400

080014f8 <init_usart1_pin>:

void init_usart1_pin(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
	GPIOA->MODER &= ~(0xf<<18);
 80014fc:	4b14      	ldr	r3, [pc, #80]	@ (8001550 <init_usart1_pin+0x58>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a13      	ldr	r2, [pc, #76]	@ (8001550 <init_usart1_pin+0x58>)
 8001502:	f423 1370 	bic.w	r3, r3, #3932160	@ 0x3c0000
 8001506:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (2<<20)|(2<<18);
 8001508:	4b11      	ldr	r3, [pc, #68]	@ (8001550 <init_usart1_pin+0x58>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a10      	ldr	r2, [pc, #64]	@ (8001550 <init_usart1_pin+0x58>)
 800150e:	f443 1320 	orr.w	r3, r3, #2621440	@ 0x280000
 8001512:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[1] &= ~(0xf<<4);
 8001514:	4b0e      	ldr	r3, [pc, #56]	@ (8001550 <init_usart1_pin+0x58>)
 8001516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001518:	4a0d      	ldr	r2, [pc, #52]	@ (8001550 <init_usart1_pin+0x58>)
 800151a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800151e:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA->AFR[1] |= (7<<4);
 8001520:	4b0b      	ldr	r3, [pc, #44]	@ (8001550 <init_usart1_pin+0x58>)
 8001522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001524:	4a0a      	ldr	r2, [pc, #40]	@ (8001550 <init_usart1_pin+0x58>)
 8001526:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 800152a:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA->AFR[1] &= ~(0xf<<8);
 800152c:	4b08      	ldr	r3, [pc, #32]	@ (8001550 <init_usart1_pin+0x58>)
 800152e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001530:	4a07      	ldr	r2, [pc, #28]	@ (8001550 <init_usart1_pin+0x58>)
 8001532:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001536:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA->AFR[1] |= (7<<8);
 8001538:	4b05      	ldr	r3, [pc, #20]	@ (8001550 <init_usart1_pin+0x58>)
 800153a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800153c:	4a04      	ldr	r2, [pc, #16]	@ (8001550 <init_usart1_pin+0x58>)
 800153e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001542:	6253      	str	r3, [r2, #36]	@ 0x24
}
 8001544:	bf00      	nop
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	58020000 	.word	0x58020000

08001554 <init_usart>:

void init_usart(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
	init_usart1_clk();
 8001558:	f7ff ffb4 	bl	80014c4 <init_usart1_clk>
	init_usart1_pin();
 800155c:	f7ff ffcc 	bl	80014f8 <init_usart1_pin>
	USART1->BRR = 0x364;
 8001560:	4b07      	ldr	r3, [pc, #28]	@ (8001580 <init_usart+0x2c>)
 8001562:	f44f 7259 	mov.w	r2, #868	@ 0x364
 8001566:	60da      	str	r2, [r3, #12]
	USART1->PRESC = 0;
 8001568:	4b05      	ldr	r3, [pc, #20]	@ (8001580 <init_usart+0x2c>)
 800156a:	2200      	movs	r2, #0
 800156c:	62da      	str	r2, [r3, #44]	@ 0x2c
	USART1->CR1 |= (1<<3)|(1<<2)|(1<<0);
 800156e:	4b04      	ldr	r3, [pc, #16]	@ (8001580 <init_usart+0x2c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a03      	ldr	r2, [pc, #12]	@ (8001580 <init_usart+0x2c>)
 8001574:	f043 030d 	orr.w	r3, r3, #13
 8001578:	6013      	str	r3, [r2, #0]

}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40011000 	.word	0x40011000

08001584 <Reset_Handler>:
	 #LDR.W     R0, =0xE000ED88    ;
	 #LDR     R1,[R0]
	 #ORR     R1,R1,#(0xF << 20)
	 #STR     R1,[R0]

  ldr   r0, =_estack
 8001584:	480d      	ldr	r0, [pc, #52]	@ (80015bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001586:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001588:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800158c:	480c      	ldr	r0, [pc, #48]	@ (80015c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800158e:	490d      	ldr	r1, [pc, #52]	@ (80015c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001590:	4a0d      	ldr	r2, [pc, #52]	@ (80015c8 <LoopForever+0xe>)
  movs r3, #0
 8001592:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001594:	e002      	b.n	800159c <LoopCopyDataInit>

08001596 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001596:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001598:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800159a:	3304      	adds	r3, #4

0800159c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800159c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800159e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015a0:	d3f9      	bcc.n	8001596 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015a2:	4a0a      	ldr	r2, [pc, #40]	@ (80015cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80015a4:	4c0a      	ldr	r4, [pc, #40]	@ (80015d0 <LoopForever+0x16>)
  movs r3, #0
 80015a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015a8:	e001      	b.n	80015ae <LoopFillZerobss>

080015aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015ac:	3204      	adds	r2, #4

080015ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015b0:	d3fb      	bcc.n	80015aa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80015b2:	f009 fc11 	bl	800add8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015b6:	f7ff fbbd 	bl	8000d34 <main>

080015ba <LoopForever>:

LoopForever:
  b LoopForever
 80015ba:	e7fe      	b.n	80015ba <LoopForever>
  ldr   r0, =_estack
 80015bc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80015c0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80015c4:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 80015c8:	0800d70c 	.word	0x0800d70c
  ldr r2, =_sbss
 80015cc:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 80015d0:	24008db4 	.word	0x24008db4

080015d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015d4:	e7fe      	b.n	80015d4 <ADC1_2_IRQHandler>
	...

080015d8 <low_level_init>:




static void low_level_init(struct netif *netif)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  init_mac();
 80015e0:	f7ff fa88 	bl	8000af4 <init_mac>
  netif->flags |= NETIF_FLAG_LINK_UP;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80015ea:	f043 0304 	orr.w	r3, r3, #4
 80015ee:	b2da      	uxtb	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2206      	movs	r2, #6
 80015fa:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  mac_hw_addr[0];
 80015fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001668 <low_level_init+0x90>)
 8001600:	781a      	ldrb	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  mac_hw_addr[1];
 8001608:	4b17      	ldr	r3, [pc, #92]	@ (8001668 <low_level_init+0x90>)
 800160a:	785a      	ldrb	r2, [r3, #1]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  mac_hw_addr[2];
 8001612:	4b15      	ldr	r3, [pc, #84]	@ (8001668 <low_level_init+0x90>)
 8001614:	789a      	ldrb	r2, [r3, #2]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  mac_hw_addr[3];
 800161c:	4b12      	ldr	r3, [pc, #72]	@ (8001668 <low_level_init+0x90>)
 800161e:	78da      	ldrb	r2, [r3, #3]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  mac_hw_addr[4];
 8001626:	4b10      	ldr	r3, [pc, #64]	@ (8001668 <low_level_init+0x90>)
 8001628:	791a      	ldrb	r2, [r3, #4]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  mac_hw_addr[5];
 8001630:	4b0d      	ldr	r3, [pc, #52]	@ (8001668 <low_level_init+0x90>)
 8001632:	795a      	ldrb	r2, [r3, #5]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = NETIF_MTU;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001640:	849a      	strh	r2, [r3, #36]	@ 0x24

  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001648:	f043 030a 	orr.w	r3, r3, #10
 800164c:	b2da      	uxtb	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

#endif /* LWIP_ARP || LWIP_ETHERNET */

    netif_set_up(netif);
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f001 f945 	bl	80028e4 <netif_set_up>
        netif_set_link_up(netif);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f001 f9bc 	bl	80029d8 <netif_set_link_up>
  //init_dma_desc();
  //enable_mac();

}
 8001660:	bf00      	nop
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	24000000 	.word	0x24000000

0800166c <low_level_output>:




static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	6039      	str	r1, [r7, #0]
  err_t errval = ERR_OK;
 8001676:	2300      	movs	r3, #0
 8001678:	75fb      	strb	r3, [r7, #23]
  struct pbuf *q;
  unsigned int total_len = 0;
 800167a:	2300      	movs	r3, #0
 800167c:	60fb      	str	r3, [r7, #12]
  unsigned char* tx_buf = 0;
 800167e:	2300      	movs	r3, #0
 8001680:	60bb      	str	r3, [r7, #8]
  /* copy frame from pbufs to driver buffers */

  if(0 == tx_desc[curr_tx_desc].tdes3.bit.own)
 8001682:	4b44      	ldr	r3, [pc, #272]	@ (8001794 <low_level_output+0x128>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a44      	ldr	r2, [pc, #272]	@ (8001798 <low_level_output+0x12c>)
 8001688:	011b      	lsls	r3, r3, #4
 800168a:	4413      	add	r3, r2
 800168c:	3308      	adds	r3, #8
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f3c3 73c0 	ubfx	r3, r3, #31, #1
 8001694:	b2db      	uxtb	r3, r3
 8001696:	2b00      	cmp	r3, #0
 8001698:	d163      	bne.n	8001762 <low_level_output+0xf6>
  {
    tx_buf = (unsigned char*)(tx_desc[curr_tx_desc].tdes0.all);
 800169a:	4b3e      	ldr	r3, [pc, #248]	@ (8001794 <low_level_output+0x128>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a3e      	ldr	r2, [pc, #248]	@ (8001798 <low_level_output+0x12c>)
 80016a0:	011b      	lsls	r3, r3, #4
 80016a2:	4413      	add	r3, r2
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	60bb      	str	r3, [r7, #8]

    for(q = p; q != NULL; q = q->next)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	613b      	str	r3, [r7, #16]
 80016ac:	e01b      	b.n	80016e6 <low_level_output+0x7a>
    {
      if(total_len + q->len <= TX_DMA_BUF_LEN)
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	895b      	ldrh	r3, [r3, #10]
 80016b2:	461a      	mov	r2, r3
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	4413      	add	r3, r2
 80016b8:	f5b3 6fbe 	cmp.w	r3, #1520	@ 0x5f0
 80016bc:	d80e      	bhi.n	80016dc <low_level_output+0x70>
      {
        memcpy(tx_buf , q->payload , q->len);
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	6859      	ldr	r1, [r3, #4]
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	895b      	ldrh	r3, [r3, #10]
 80016c6:	461a      	mov	r2, r3
 80016c8:	68b8      	ldr	r0, [r7, #8]
 80016ca:	f009 fbac 	bl	800ae26 <memcpy>
        total_len += q->len;
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	895b      	ldrh	r3, [r3, #10]
 80016d2:	461a      	mov	r2, r3
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	4413      	add	r3, r2
 80016d8:	60fb      	str	r3, [r7, #12]
 80016da:	e001      	b.n	80016e0 <low_level_output+0x74>
      }
      else
      {
        errval = ERR_MEM;
 80016dc:	23ff      	movs	r3, #255	@ 0xff
 80016de:	75fb      	strb	r3, [r7, #23]
    for(q = p; q != NULL; q = q->next)
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	613b      	str	r3, [r7, #16]
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d1e0      	bne.n	80016ae <low_level_output+0x42>
        //return errval;
      }
    }

    tx_desc[curr_tx_desc].tdes2.bit.b1l = total_len;
 80016ec:	4b29      	ldr	r3, [pc, #164]	@ (8001794 <low_level_output+0x128>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	68fa      	ldr	r2, [r7, #12]
 80016f2:	f3c2 020d 	ubfx	r2, r2, #0, #14
 80016f6:	b291      	uxth	r1, r2
 80016f8:	4a27      	ldr	r2, [pc, #156]	@ (8001798 <low_level_output+0x12c>)
 80016fa:	011b      	lsls	r3, r3, #4
 80016fc:	4413      	add	r3, r2
 80016fe:	f103 0208 	add.w	r2, r3, #8
 8001702:	6813      	ldr	r3, [r2, #0]
 8001704:	f361 030d 	bfi	r3, r1, #0, #14
 8001708:	6013      	str	r3, [r2, #0]
    tx_desc[curr_tx_desc].tdes3.bit.fl = 0;
 800170a:	4b22      	ldr	r3, [pc, #136]	@ (8001794 <low_level_output+0x128>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a22      	ldr	r2, [pc, #136]	@ (8001798 <low_level_output+0x12c>)
 8001710:	011b      	lsls	r3, r3, #4
 8001712:	4413      	add	r3, r2
 8001714:	f103 0208 	add.w	r2, r3, #8
 8001718:	6853      	ldr	r3, [r2, #4]
 800171a:	f36f 030e 	bfc	r3, #0, #15
 800171e:	6053      	str	r3, [r2, #4]
    tx_desc[curr_tx_desc].tdes3.bit.fd = 1;
 8001720:	4b1c      	ldr	r3, [pc, #112]	@ (8001794 <low_level_output+0x128>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a1c      	ldr	r2, [pc, #112]	@ (8001798 <low_level_output+0x12c>)
 8001726:	011b      	lsls	r3, r3, #4
 8001728:	4413      	add	r3, r2
 800172a:	f103 0208 	add.w	r2, r3, #8
 800172e:	6853      	ldr	r3, [r2, #4]
 8001730:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001734:	6053      	str	r3, [r2, #4]
    tx_desc[curr_tx_desc].tdes3.bit.ld = 1;
 8001736:	4b17      	ldr	r3, [pc, #92]	@ (8001794 <low_level_output+0x128>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a17      	ldr	r2, [pc, #92]	@ (8001798 <low_level_output+0x12c>)
 800173c:	011b      	lsls	r3, r3, #4
 800173e:	4413      	add	r3, r2
 8001740:	f103 0208 	add.w	r2, r3, #8
 8001744:	6853      	ldr	r3, [r2, #4]
 8001746:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800174a:	6053      	str	r3, [r2, #4]
    tx_desc[curr_tx_desc].tdes3.bit.own = 1;
 800174c:	4b11      	ldr	r3, [pc, #68]	@ (8001794 <low_level_output+0x128>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a11      	ldr	r2, [pc, #68]	@ (8001798 <low_level_output+0x12c>)
 8001752:	011b      	lsls	r3, r3, #4
 8001754:	4413      	add	r3, r2
 8001756:	f103 0208 	add.w	r2, r3, #8
 800175a:	6853      	ldr	r3, [r2, #4]
 800175c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001760:	6053      	str	r3, [r2, #4]

  }

  ETH->DMACTDTPR = (unsigned int)&tx_desc[ETH_TX_DESC_NUM-1];
 8001762:	4a0e      	ldr	r2, [pc, #56]	@ (800179c <low_level_output+0x130>)
 8001764:	4b0e      	ldr	r3, [pc, #56]	@ (80017a0 <low_level_output+0x134>)
 8001766:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800176a:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120

  curr_tx_desc++;
 800176e:	4b09      	ldr	r3, [pc, #36]	@ (8001794 <low_level_output+0x128>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	3301      	adds	r3, #1
 8001774:	4a07      	ldr	r2, [pc, #28]	@ (8001794 <low_level_output+0x128>)
 8001776:	6013      	str	r3, [r2, #0]
  if(curr_tx_desc >= ETH_TX_DESC_NUM)
 8001778:	4b06      	ldr	r3, [pc, #24]	@ (8001794 <low_level_output+0x128>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2b02      	cmp	r3, #2
 800177e:	d902      	bls.n	8001786 <low_level_output+0x11a>
  {
    curr_tx_desc = 0;
 8001780:	4b04      	ldr	r3, [pc, #16]	@ (8001794 <low_level_output+0x128>)
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]
  }

  return errval;
 8001786:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800178a:	4618      	mov	r0, r3
 800178c:	3718      	adds	r7, #24
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	24002428 	.word	0x24002428
 8001798:	24002430 	.word	0x24002430
 800179c:	40028000 	.word	0x40028000
 80017a0:	24002450 	.word	0x24002450

080017a4 <low_level_input>:



static struct pbuf * low_level_input(struct netif *netif)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  struct pbuf *p = 0;
 80017ac:	2300      	movs	r3, #0
 80017ae:	60fb      	str	r3, [r7, #12]
  unsigned int dma_rx_len = 0;
 80017b0:	2300      	movs	r3, #0
 80017b2:	60bb      	str	r3, [r7, #8]
  if(0 == rx_desc[curr_rx_desc].rdes3.read_bit.own)
 80017b4:	4b4f      	ldr	r3, [pc, #316]	@ (80018f4 <low_level_input+0x150>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a4f      	ldr	r2, [pc, #316]	@ (80018f8 <low_level_input+0x154>)
 80017ba:	011b      	lsls	r3, r3, #4
 80017bc:	4413      	add	r3, r2
 80017be:	3308      	adds	r3, #8
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f3c3 73c0 	ubfx	r3, r3, #31, #1
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	f040 8088 	bne.w	80018de <low_level_input+0x13a>
  {
    if((1 == rx_desc[curr_rx_desc].rdes3.write_back_bit.ld))
 80017ce:	4b49      	ldr	r3, [pc, #292]	@ (80018f4 <low_level_input+0x150>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a49      	ldr	r2, [pc, #292]	@ (80018f8 <low_level_input+0x154>)
 80017d4:	011b      	lsls	r3, r3, #4
 80017d6:	4413      	add	r3, r2
 80017d8:	3308      	adds	r3, #8
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f3c3 7300 	ubfx	r3, r3, #28, #1
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d12d      	bne.n	8001842 <low_level_input+0x9e>
    {
      dma_rx_len = rx_desc[curr_rx_desc].rdes3.write_back_bit.pl;
 80017e6:	4b43      	ldr	r3, [pc, #268]	@ (80018f4 <low_level_input+0x150>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a43      	ldr	r2, [pc, #268]	@ (80018f8 <low_level_input+0x154>)
 80017ec:	011b      	lsls	r3, r3, #4
 80017ee:	4413      	add	r3, r2
 80017f0:	3308      	adds	r3, #8
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	60bb      	str	r3, [r7, #8]
      p = pbuf_alloc(PBUF_RAW, dma_rx_len, PBUF_POOL);
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	b29b      	uxth	r3, r3
 8001800:	f44f 72c1 	mov.w	r2, #386	@ 0x182
 8001804:	4619      	mov	r1, r3
 8001806:	2000      	movs	r0, #0
 8001808:	f001 f96a 	bl	8002ae0 <pbuf_alloc>
 800180c:	60f8      	str	r0, [r7, #12]
      if(p->len >= dma_rx_len)
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	895b      	ldrh	r3, [r3, #10]
 8001812:	461a      	mov	r2, r3
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	4293      	cmp	r3, r2
 8001818:	d80e      	bhi.n	8001838 <low_level_input+0x94>
      {
        memcpy(p->payload , (void*)(&dma_rx_buf[curr_rx_desc]) , dma_rx_len);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	6858      	ldr	r0, [r3, #4]
 800181e:	4b35      	ldr	r3, [pc, #212]	@ (80018f4 <low_level_input+0x150>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f44f 62be 	mov.w	r2, #1520	@ 0x5f0
 8001826:	fb02 f303 	mul.w	r3, r2, r3
 800182a:	4a34      	ldr	r2, [pc, #208]	@ (80018fc <low_level_input+0x158>)
 800182c:	4413      	add	r3, r2
 800182e:	68ba      	ldr	r2, [r7, #8]
 8001830:	4619      	mov	r1, r3
 8001832:	f009 faf8 	bl	800ae26 <memcpy>
 8001836:	e004      	b.n	8001842 <low_level_input+0x9e>
      }
      else
      {
        pbuf_free(p);
 8001838:	68f8      	ldr	r0, [r7, #12]
 800183a:	f001 fbf7 	bl	800302c <pbuf_free>
        p = NULL;
 800183e:	2300      	movs	r3, #0
 8001840:	60fb      	str	r3, [r7, #12]
      }

    }

    memset(&rx_desc[curr_rx_desc] , 0 , sizeof(rx_desc[curr_rx_desc]));
 8001842:	4b2c      	ldr	r3, [pc, #176]	@ (80018f4 <low_level_input+0x150>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	011b      	lsls	r3, r3, #4
 8001848:	4a2b      	ldr	r2, [pc, #172]	@ (80018f8 <low_level_input+0x154>)
 800184a:	4413      	add	r3, r2
 800184c:	2210      	movs	r2, #16
 800184e:	2100      	movs	r1, #0
 8001850:	4618      	mov	r0, r3
 8001852:	f009 fa6c 	bl	800ad2e <memset>
	rx_desc[curr_rx_desc].rdes0.read_bit.buf1ap = (unsigned int)(&dma_rx_buf[curr_rx_desc]);
 8001856:	4b27      	ldr	r3, [pc, #156]	@ (80018f4 <low_level_input+0x150>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f44f 62be 	mov.w	r2, #1520	@ 0x5f0
 800185e:	fb02 f303 	mul.w	r3, r2, r3
 8001862:	4a26      	ldr	r2, [pc, #152]	@ (80018fc <low_level_input+0x158>)
 8001864:	441a      	add	r2, r3
 8001866:	4b23      	ldr	r3, [pc, #140]	@ (80018f4 <low_level_input+0x150>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4611      	mov	r1, r2
 800186c:	4a22      	ldr	r2, [pc, #136]	@ (80018f8 <low_level_input+0x154>)
 800186e:	011b      	lsls	r3, r3, #4
 8001870:	4413      	add	r3, r2
 8001872:	6019      	str	r1, [r3, #0]
	rx_desc[curr_rx_desc].rdes2.read_bit.buf2ap = 0;
 8001874:	4b1f      	ldr	r3, [pc, #124]	@ (80018f4 <low_level_input+0x150>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a1f      	ldr	r2, [pc, #124]	@ (80018f8 <low_level_input+0x154>)
 800187a:	011b      	lsls	r3, r3, #4
 800187c:	4413      	add	r3, r2
 800187e:	3308      	adds	r3, #8
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
	rx_desc[curr_rx_desc].rdes3.read_bit.buf1v = 1;
 8001884:	4b1b      	ldr	r3, [pc, #108]	@ (80018f4 <low_level_input+0x150>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a1b      	ldr	r2, [pc, #108]	@ (80018f8 <low_level_input+0x154>)
 800188a:	011b      	lsls	r3, r3, #4
 800188c:	4413      	add	r3, r2
 800188e:	f103 0208 	add.w	r2, r3, #8
 8001892:	6853      	ldr	r3, [r2, #4]
 8001894:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001898:	6053      	str	r3, [r2, #4]
	rx_desc[curr_rx_desc].rdes3.read_bit.buf2v = 0;
 800189a:	4b16      	ldr	r3, [pc, #88]	@ (80018f4 <low_level_input+0x150>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a16      	ldr	r2, [pc, #88]	@ (80018f8 <low_level_input+0x154>)
 80018a0:	011b      	lsls	r3, r3, #4
 80018a2:	4413      	add	r3, r2
 80018a4:	f103 0208 	add.w	r2, r3, #8
 80018a8:	6853      	ldr	r3, [r2, #4]
 80018aa:	f36f 6359 	bfc	r3, #25, #1
 80018ae:	6053      	str	r3, [r2, #4]
	rx_desc[curr_rx_desc].rdes3.read_bit.own = 1;
 80018b0:	4b10      	ldr	r3, [pc, #64]	@ (80018f4 <low_level_input+0x150>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a10      	ldr	r2, [pc, #64]	@ (80018f8 <low_level_input+0x154>)
 80018b6:	011b      	lsls	r3, r3, #4
 80018b8:	4413      	add	r3, r2
 80018ba:	f103 0208 	add.w	r2, r3, #8
 80018be:	6853      	ldr	r3, [r2, #4]
 80018c0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80018c4:	6053      	str	r3, [r2, #4]

    curr_rx_desc++;
 80018c6:	4b0b      	ldr	r3, [pc, #44]	@ (80018f4 <low_level_input+0x150>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	3301      	adds	r3, #1
 80018cc:	4a09      	ldr	r2, [pc, #36]	@ (80018f4 <low_level_input+0x150>)
 80018ce:	6013      	str	r3, [r2, #0]
    if(curr_rx_desc >= ETH_RX_DESC_NUM)
 80018d0:	4b08      	ldr	r3, [pc, #32]	@ (80018f4 <low_level_input+0x150>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d902      	bls.n	80018de <low_level_input+0x13a>
      curr_rx_desc = 0;
 80018d8:	4b06      	ldr	r3, [pc, #24]	@ (80018f4 <low_level_input+0x150>)
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
  }

  ETH->DMACRDTPR = (unsigned int)&rx_desc[ETH_TX_DESC_NUM-1];
 80018de:	4a08      	ldr	r2, [pc, #32]	@ (8001900 <low_level_input+0x15c>)
 80018e0:	4b08      	ldr	r3, [pc, #32]	@ (8001904 <low_level_input+0x160>)
 80018e2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80018e6:	f8c2 3128 	str.w	r3, [r2, #296]	@ 0x128

  return p;
 80018ea:	68fb      	ldr	r3, [r7, #12]

}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3710      	adds	r7, #16
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	2400242c 	.word	0x2400242c
 80018f8:	24002460 	.word	0x24002460
 80018fc:	24001258 	.word	0x24001258
 8001900:	40028000 	.word	0x40028000
 8001904:	24002480 	.word	0x24002480

08001908 <ethernetif_input>:



void ethernetif_input(struct netif *netif)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  volatile err_t err;
  struct pbuf *p = NULL;
 8001910:	2300      	movs	r3, #0
 8001912:	60fb      	str	r3, [r7, #12]

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f7ff ff45 	bl	80017a4 <low_level_input>
 800191a:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL)
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d00d      	beq.n	800193e <ethernetif_input+0x36>
    return;

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	691b      	ldr	r3, [r3, #16]
 8001926:	6879      	ldr	r1, [r7, #4]
 8001928:	68f8      	ldr	r0, [r7, #12]
 800192a:	4798      	blx	r3
 800192c:	4603      	mov	r3, r0
 800192e:	72fb      	strb	r3, [r7, #11]

  if(NULL != p)
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d004      	beq.n	8001940 <ethernetif_input+0x38>
    pbuf_free(p);
 8001936:	68f8      	ldr	r0, [r7, #12]
 8001938:	f001 fb78 	bl	800302c <pbuf_free>
 800193c:	e000      	b.n	8001940 <ethernetif_input+0x38>
    return;
 800193e:	bf00      	nop
}
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
	...

08001948 <ethernetif_init>:




err_t ethernetif_init(struct netif *netif)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = 's';
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2273      	movs	r2, #115	@ 0x73
 8001954:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = 'b';
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2262      	movs	r2, #98	@ 0x62
 800195c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

  netif->output = etharp_output;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	4a06      	ldr	r2, [pc, #24]	@ (800197c <ethernetif_init+0x34>)
 8001964:	615a      	str	r2, [r3, #20]
  netif->linkoutput = low_level_output;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a05      	ldr	r2, [pc, #20]	@ (8001980 <ethernetif_init+0x38>)
 800196a:	619a      	str	r2, [r3, #24]

  low_level_init(netif);
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f7ff fe33 	bl	80015d8 <low_level_init>

  return ERR_OK;
 8001972:	2300      	movs	r3, #0

}
 8001974:	4618      	mov	r0, r3
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	08008ddd 	.word	0x08008ddd
 8001980:	0800166d 	.word	0x0800166d

08001984 <port_init_lwip>:




void port_init_lwip(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  /* USER CODE BEGIN 0 */
  IP4_ADDR(&ipaddr,IP_ADDR0,IP_ADDR1,IP_ADDR2,IP_ADDR3);
 800198a:	4b17      	ldr	r3, [pc, #92]	@ (80019e8 <port_init_lwip+0x64>)
 800198c:	4a17      	ldr	r2, [pc, #92]	@ (80019ec <port_init_lwip+0x68>)
 800198e:	601a      	str	r2, [r3, #0]
  IP4_ADDR(&netmask,NETMASK_ADDR0,NETMASK_ADDR1,NETMASK_ADDR2,NETMASK_ADDR3);
 8001990:	4b17      	ldr	r3, [pc, #92]	@ (80019f0 <port_init_lwip+0x6c>)
 8001992:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8001996:	601a      	str	r2, [r3, #0]
  IP4_ADDR(&gw,GW_ADDR0,GW_ADDR1,GW_ADDR2,GW_ADDR3);
 8001998:	4b16      	ldr	r3, [pc, #88]	@ (80019f4 <port_init_lwip+0x70>)
 800199a:	4a17      	ldr	r2, [pc, #92]	@ (80019f8 <port_init_lwip+0x74>)
 800199c:	601a      	str	r2, [r3, #0]

  /* USER CODE END 0 */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800199e:	f000 f9e2 	bl	8001d66 <lwip_init>

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80019a2:	4b16      	ldr	r3, [pc, #88]	@ (80019fc <port_init_lwip+0x78>)
 80019a4:	9302      	str	r3, [sp, #8]
 80019a6:	4b16      	ldr	r3, [pc, #88]	@ (8001a00 <port_init_lwip+0x7c>)
 80019a8:	9301      	str	r3, [sp, #4]
 80019aa:	2300      	movs	r3, #0
 80019ac:	9300      	str	r3, [sp, #0]
 80019ae:	4b11      	ldr	r3, [pc, #68]	@ (80019f4 <port_init_lwip+0x70>)
 80019b0:	4a0f      	ldr	r2, [pc, #60]	@ (80019f0 <port_init_lwip+0x6c>)
 80019b2:	490d      	ldr	r1, [pc, #52]	@ (80019e8 <port_init_lwip+0x64>)
 80019b4:	4813      	ldr	r0, [pc, #76]	@ (8001a04 <port_init_lwip+0x80>)
 80019b6:	f000 fdfd 	bl	80025b4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80019ba:	4812      	ldr	r0, [pc, #72]	@ (8001a04 <port_init_lwip+0x80>)
 80019bc:	f000 ff82 	bl	80028c4 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80019c0:	4b10      	ldr	r3, [pc, #64]	@ (8001a04 <port_init_lwip+0x80>)
 80019c2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80019c6:	089b      	lsrs	r3, r3, #2
 80019c8:	f003 0301 	and.w	r3, r3, #1
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d003      	beq.n	80019da <port_init_lwip+0x56>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80019d2:	480c      	ldr	r0, [pc, #48]	@ (8001a04 <port_init_lwip+0x80>)
 80019d4:	f000 ff86 	bl	80028e4 <netif_set_up>
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
  }


}
 80019d8:	e002      	b.n	80019e0 <port_init_lwip+0x5c>
    netif_set_down(&gnetif);
 80019da:	480a      	ldr	r0, [pc, #40]	@ (8001a04 <port_init_lwip+0x80>)
 80019dc:	f000 ffd8 	bl	8002990 <netif_set_down>
}
 80019e0:	bf00      	nop
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	240024d0 	.word	0x240024d0
 80019ec:	1e02a8c0 	.word	0x1e02a8c0
 80019f0:	240024d4 	.word	0x240024d4
 80019f4:	240024d8 	.word	0x240024d8
 80019f8:	0102a8c0 	.word	0x0102a8c0
 80019fc:	0800a945 	.word	0x0800a945
 8001a00:	08001949 	.word	0x08001949
 8001a04:	2400249c 	.word	0x2400249c

08001a08 <sys_now>:


u32_t sys_now(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  return 0;
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	4603      	mov	r3, r0
 8001a20:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8001a22:	88fb      	ldrh	r3, [r7, #6]
 8001a24:	021b      	lsls	r3, r3, #8
 8001a26:	b21a      	sxth	r2, r3
 8001a28:	88fb      	ldrh	r3, [r7, #6]
 8001a2a:	0a1b      	lsrs	r3, r3, #8
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	b21b      	sxth	r3, r3
 8001a30:	4313      	orrs	r3, r2
 8001a32:	b21b      	sxth	r3, r3
 8001a34:	b29b      	uxth	r3, r3
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr

08001a42 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8001a42:	b480      	push	{r7}
 8001a44:	b083      	sub	sp, #12
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	061a      	lsls	r2, r3, #24
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	021b      	lsls	r3, r3, #8
 8001a52:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8001a56:	431a      	orrs	r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	0a1b      	lsrs	r3, r3, #8
 8001a5c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8001a60:	431a      	orrs	r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	0e1b      	lsrs	r3, r3, #24
 8001a66:	4313      	orrs	r3, r2
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b089      	sub	sp, #36	@ 0x24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 8001a82:	2300      	movs	r3, #0
 8001a84:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 8001a86:	2300      	movs	r3, #0
 8001a88:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	f003 0301 	and.w	r3, r3, #1
 8001a90:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d00d      	beq.n	8001ab4 <lwip_standard_chksum+0x40>
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	dd0a      	ble.n	8001ab4 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 8001a9e:	69fa      	ldr	r2, [r7, #28]
 8001aa0:	1c53      	adds	r3, r2, #1
 8001aa2:	61fb      	str	r3, [r7, #28]
 8001aa4:	f107 030e 	add.w	r3, r7, #14
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	7812      	ldrb	r2, [r2, #0]
 8001aac:	701a      	strb	r2, [r3, #0]
    len--;
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	3b01      	subs	r3, #1
 8001ab2:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8001ab8:	e00a      	b.n	8001ad0 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	1c9a      	adds	r2, r3, #2
 8001abe:	61ba      	str	r2, [r7, #24]
 8001ac0:	881b      	ldrh	r3, [r3, #0]
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	617b      	str	r3, [r7, #20]
    len -= 2;
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	3b02      	subs	r3, #2
 8001ace:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	dcf1      	bgt.n	8001aba <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	dd04      	ble.n	8001ae6 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8001adc:	f107 030e 	add.w	r3, r7, #14
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	7812      	ldrb	r2, [r2, #0]
 8001ae4:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 8001ae6:	89fb      	ldrh	r3, [r7, #14]
 8001ae8:	461a      	mov	r2, r3
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	4413      	add	r3, r2
 8001aee:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	0c1a      	lsrs	r2, r3, #16
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	4413      	add	r3, r2
 8001afa:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	0c1a      	lsrs	r2, r3, #16
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	4413      	add	r3, r2
 8001b06:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d007      	beq.n	8001b1e <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	021b      	lsls	r3, r3, #8
 8001b12:	b29a      	uxth	r2, r3
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	0a1b      	lsrs	r3, r3, #8
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	b29b      	uxth	r3, r3
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3724      	adds	r7, #36	@ 0x24
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr

08001b2e <inet_cksum_pseudo_base>:
#endif

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_base(struct pbuf *p, u8_t proto, u16_t proto_len, u32_t acc)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b086      	sub	sp, #24
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	60f8      	str	r0, [r7, #12]
 8001b36:	607b      	str	r3, [r7, #4]
 8001b38:	460b      	mov	r3, r1
 8001b3a:	72fb      	strb	r3, [r7, #11]
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	813b      	strh	r3, [r7, #8]
  struct pbuf *q;
  int swapped = 0;
 8001b40:	2300      	movs	r3, #0
 8001b42:	613b      	str	r3, [r7, #16]

  /* iterate through all pbuf in chain */
  for (q = p; q != NULL; q = q->next) {
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	617b      	str	r3, [r7, #20]
 8001b48:	e02b      	b.n	8001ba2 <inet_cksum_pseudo_base+0x74>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
                             (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	685a      	ldr	r2, [r3, #4]
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	895b      	ldrh	r3, [r3, #10]
 8001b52:	4619      	mov	r1, r3
 8001b54:	4610      	mov	r0, r2
 8001b56:	f7ff ff8d 	bl	8001a74 <lwip_standard_chksum>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4413      	add	r3, r2
 8001b62:	607b      	str	r3, [r7, #4]
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	0c1a      	lsrs	r2, r3, #16
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	4413      	add	r3, r2
 8001b6e:	607b      	str	r3, [r7, #4]
    if (q->len % 2 != 0) {
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	895b      	ldrh	r3, [r3, #10]
 8001b74:	f003 0301 	and.w	r3, r3, #1
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d00e      	beq.n	8001b9c <inet_cksum_pseudo_base+0x6e>
      swapped = !swapped;
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	bf0c      	ite	eq
 8001b84:	2301      	moveq	r3, #1
 8001b86:	2300      	movne	r3, #0
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	613b      	str	r3, [r7, #16]
      acc = SWAP_BYTES_IN_WORD(acc);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	021b      	lsls	r3, r3, #8
 8001b90:	b29a      	uxth	r2, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	0a1b      	lsrs	r3, r3, #8
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	607b      	str	r3, [r7, #4]
  for (q = p; q != NULL; q = q->next) {
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	617b      	str	r3, [r7, #20]
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d1d0      	bne.n	8001b4a <inet_cksum_pseudo_base+0x1c>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d007      	beq.n	8001bbe <inet_cksum_pseudo_base+0x90>
    acc = SWAP_BYTES_IN_WORD(acc);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	021b      	lsls	r3, r3, #8
 8001bb2:	b29a      	uxth	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	0a1b      	lsrs	r3, r3, #8
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	607b      	str	r3, [r7, #4]
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
 8001bbe:	7afb      	ldrb	r3, [r7, #11]
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7ff ff28 	bl	8001a18 <lwip_htons>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	461a      	mov	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4413      	add	r3, r2
 8001bd0:	607b      	str	r3, [r7, #4]
  acc += (u32_t)lwip_htons(proto_len);
 8001bd2:	893b      	ldrh	r3, [r7, #8]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff ff1f 	bl	8001a18 <lwip_htons>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	461a      	mov	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4413      	add	r3, r2
 8001be2:	607b      	str	r3, [r7, #4]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	0c1a      	lsrs	r2, r3, #16
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	4413      	add	r3, r2
 8001bee:	607b      	str	r3, [r7, #4]
  acc = FOLD_U32T(acc);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	0c1a      	lsrs	r2, r3, #16
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	4413      	add	r3, r2
 8001bfa:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	43db      	mvns	r3, r3
 8001c02:	b29b      	uxth	r3, r3
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3718      	adds	r7, #24
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <inet_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                   const ip4_addr_t *src, const ip4_addr_t *dest)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b086      	sub	sp, #24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	607b      	str	r3, [r7, #4]
 8001c16:	460b      	mov	r3, r1
 8001c18:	72fb      	strb	r3, [r7, #11]
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	813b      	strh	r3, [r7, #8]
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	617b      	str	r3, [r7, #20]
  acc = (addr & 0xffffUL);
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	0c1b      	lsrs	r3, r3, #16
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	4413      	add	r3, r2
 8001c32:	613b      	str	r3, [r7, #16]
  addr = ip4_addr_get_u32(dest);
 8001c34:	6a3b      	ldr	r3, [r7, #32]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	617b      	str	r3, [r7, #20]
  acc = (u32_t)(acc + (addr & 0xffffUL));
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	4413      	add	r3, r2
 8001c42:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	0c1b      	lsrs	r3, r3, #16
 8001c48:	693a      	ldr	r2, [r7, #16]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	613b      	str	r3, [r7, #16]
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	0c1a      	lsrs	r2, r3, #16
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	4413      	add	r3, r2
 8001c58:	613b      	str	r3, [r7, #16]
  acc = FOLD_U32T(acc);
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	0c1a      	lsrs	r2, r3, #16
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	4413      	add	r3, r2
 8001c64:	613b      	str	r3, [r7, #16]

  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 8001c66:	893a      	ldrh	r2, [r7, #8]
 8001c68:	7af9      	ldrb	r1, [r7, #11]
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	68f8      	ldr	r0, [r7, #12]
 8001c6e:	f7ff ff5e 	bl	8001b2e <inet_cksum_pseudo_base>
 8001c72:	4603      	mov	r3, r0
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3718      	adds	r7, #24
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <ip_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                 const ip_addr_t *src, const ip_addr_t *dest)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af02      	add	r7, sp, #8
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	607b      	str	r3, [r7, #4]
 8001c86:	460b      	mov	r3, r1
 8001c88:	72fb      	strb	r3, [r7, #11]
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	813b      	strh	r3, [r7, #8]
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
 8001c8e:	893a      	ldrh	r2, [r7, #8]
 8001c90:	7af9      	ldrb	r1, [r7, #11]
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	9300      	str	r3, [sp, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	68f8      	ldr	r0, [r7, #12]
 8001c9a:	f7ff ffb7 	bl	8001c0c <inet_chksum_pseudo>
 8001c9e:	4603      	mov	r3, r0
  }
#endif /* LWIP_IPV4 */
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3710      	adds	r7, #16
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8001cb4:	887b      	ldrh	r3, [r7, #2]
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f7ff fedb 	bl	8001a74 <lwip_standard_chksum>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	b29b      	uxth	r3, r3
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3708      	adds	r7, #8
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b086      	sub	sp, #24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	60fb      	str	r3, [r7, #12]

  acc = 0;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	613b      	str	r3, [r7, #16]
 8001ce0:	e02b      	b.n	8001d3a <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	685a      	ldr	r2, [r3, #4]
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	895b      	ldrh	r3, [r3, #10]
 8001cea:	4619      	mov	r1, r3
 8001cec:	4610      	mov	r0, r2
 8001cee:	f7ff fec1 	bl	8001a74 <lwip_standard_chksum>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	0c1a      	lsrs	r2, r3, #16
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	4413      	add	r3, r2
 8001d06:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	895b      	ldrh	r3, [r3, #10]
 8001d0c:	f003 0301 	and.w	r3, r3, #1
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d00e      	beq.n	8001d34 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	bf0c      	ite	eq
 8001d1c:	2301      	moveq	r3, #1
 8001d1e:	2300      	movne	r3, #0
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	021b      	lsls	r3, r3, #8
 8001d28:	b29a      	uxth	r2, r3
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	0a1b      	lsrs	r3, r3, #8
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	4313      	orrs	r3, r2
 8001d32:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	613b      	str	r3, [r7, #16]
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d1d0      	bne.n	8001ce2 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d007      	beq.n	8001d56 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	021b      	lsls	r3, r3, #8
 8001d4a:	b29a      	uxth	r2, r3
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	0a1b      	lsrs	r3, r3, #8
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	4313      	orrs	r3, r2
 8001d54:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	43db      	mvns	r3, r3
 8001d5c:	b29b      	uxth	r3, r3
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3718      	adds	r7, #24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b082      	sub	sp, #8
 8001d6a:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8001d70:	f000 f8c0 	bl	8001ef4 <mem_init>
  memp_init();
 8001d74:	f000 fb86 	bl	8002484 <memp_init>
  pbuf_init();
  netif_init();
 8001d78:	f000 fc14 	bl	80025a4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8001d7c:	f006 f828 	bl	8007dd0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8001d80:	f001 fbb0 	bl	80034e4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8001d84:	f005 ffaa 	bl	8007cdc <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8001d88:	bf00      	nop
 8001d8a:	3708      	adds	r7, #8
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8001d9a:	4b05      	ldr	r3, [pc, #20]	@ (8001db0 <ptr_to_mem+0x20>)
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	88fb      	ldrh	r3, [r7, #6]
 8001da0:	4413      	add	r3, r2
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	24004d08 	.word	0x24004d08

08001db4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8001dbc:	4b05      	ldr	r3, [pc, #20]	@ (8001dd4 <mem_to_ptr+0x20>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	b29b      	uxth	r3, r3
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	24004d08 	.word	0x24004d08

08001dd8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8001dd8:	b590      	push	{r4, r7, lr}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8001de0:	4b3d      	ldr	r3, [pc, #244]	@ (8001ed8 <plug_holes+0x100>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d202      	bcs.n	8001df0 <plug_holes+0x18>
 8001dea:	483c      	ldr	r0, [pc, #240]	@ (8001edc <plug_holes+0x104>)
 8001dec:	f008 ff3a 	bl	800ac64 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8001df0:	4b3b      	ldr	r3, [pc, #236]	@ (8001ee0 <plug_holes+0x108>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d302      	bcc.n	8001e00 <plug_holes+0x28>
 8001dfa:	483a      	ldr	r0, [pc, #232]	@ (8001ee4 <plug_holes+0x10c>)
 8001dfc:	f008 ff32 	bl	800ac64 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	791b      	ldrb	r3, [r3, #4]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d002      	beq.n	8001e0e <plug_holes+0x36>
 8001e08:	4837      	ldr	r0, [pc, #220]	@ (8001ee8 <plug_holes+0x110>)
 8001e0a:	f008 ff2b 	bl	800ac64 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	881b      	ldrh	r3, [r3, #0]
 8001e12:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8001e16:	d902      	bls.n	8001e1e <plug_holes+0x46>
 8001e18:	4834      	ldr	r0, [pc, #208]	@ (8001eec <plug_holes+0x114>)
 8001e1a:	f008 ff23 	bl	800ac64 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	881b      	ldrh	r3, [r3, #0]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7ff ffb4 	bl	8001d90 <ptr_to_mem>
 8001e28:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d024      	beq.n	8001e7c <plug_holes+0xa4>
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	791b      	ldrb	r3, [r3, #4]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d120      	bne.n	8001e7c <plug_holes+0xa4>
 8001e3a:	4b29      	ldr	r3, [pc, #164]	@ (8001ee0 <plug_holes+0x108>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d01b      	beq.n	8001e7c <plug_holes+0xa4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8001e44:	4b2a      	ldr	r3, [pc, #168]	@ (8001ef0 <plug_holes+0x118>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	68fa      	ldr	r2, [r7, #12]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d102      	bne.n	8001e54 <plug_holes+0x7c>
      lfree = mem;
 8001e4e:	4a28      	ldr	r2, [pc, #160]	@ (8001ef0 <plug_holes+0x118>)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	881a      	ldrh	r2, [r3, #0]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	881b      	ldrh	r3, [r3, #0]
 8001e60:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8001e64:	d00a      	beq.n	8001e7c <plug_holes+0xa4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	881b      	ldrh	r3, [r3, #0]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff ff90 	bl	8001d90 <ptr_to_mem>
 8001e70:	4604      	mov	r4, r0
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f7ff ff9e 	bl	8001db4 <mem_to_ptr>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	885b      	ldrh	r3, [r3, #2]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7ff ff85 	bl	8001d90 <ptr_to_mem>
 8001e86:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8001e88:	68ba      	ldr	r2, [r7, #8]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d01f      	beq.n	8001ed0 <plug_holes+0xf8>
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	791b      	ldrb	r3, [r3, #4]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d11b      	bne.n	8001ed0 <plug_holes+0xf8>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8001e98:	4b15      	ldr	r3, [pc, #84]	@ (8001ef0 <plug_holes+0x118>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d102      	bne.n	8001ea8 <plug_holes+0xd0>
      lfree = pmem;
 8001ea2:	4a13      	ldr	r2, [pc, #76]	@ (8001ef0 <plug_holes+0x118>)
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	881a      	ldrh	r2, [r3, #0]
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	881b      	ldrh	r3, [r3, #0]
 8001eb4:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8001eb8:	d00a      	beq.n	8001ed0 <plug_holes+0xf8>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	881b      	ldrh	r3, [r3, #0]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7ff ff66 	bl	8001d90 <ptr_to_mem>
 8001ec4:	4604      	mov	r4, r0
 8001ec6:	68b8      	ldr	r0, [r7, #8]
 8001ec8:	f7ff ff74 	bl	8001db4 <mem_to_ptr>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8001ed0:	bf00      	nop
 8001ed2:	3714      	adds	r7, #20
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd90      	pop	{r4, r7, pc}
 8001ed8:	24004d08 	.word	0x24004d08
 8001edc:	0800b994 	.word	0x0800b994
 8001ee0:	24004d0c 	.word	0x24004d0c
 8001ee4:	0800b9ac 	.word	0x0800b9ac
 8001ee8:	0800b9c8 	.word	0x0800b9c8
 8001eec:	0800b9e4 	.word	0x0800b9e4
 8001ef0:	24004d10 	.word	0x24004d10

08001ef4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8001efa:	4b18      	ldr	r3, [pc, #96]	@ (8001f5c <mem_init+0x68>)
 8001efc:	3303      	adds	r3, #3
 8001efe:	f023 0303 	bic.w	r3, r3, #3
 8001f02:	461a      	mov	r2, r3
 8001f04:	4b16      	ldr	r3, [pc, #88]	@ (8001f60 <mem_init+0x6c>)
 8001f06:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8001f08:	4b15      	ldr	r3, [pc, #84]	@ (8001f60 <mem_init+0x6c>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8001f14:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8001f22:	f44f 5020 	mov.w	r0, #10240	@ 0x2800
 8001f26:	f7ff ff33 	bl	8001d90 <ptr_to_mem>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	4a0d      	ldr	r2, [pc, #52]	@ (8001f64 <mem_init+0x70>)
 8001f2e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8001f30:	4b0c      	ldr	r3, [pc, #48]	@ (8001f64 <mem_init+0x70>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2201      	movs	r2, #1
 8001f36:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8001f38:	4b0a      	ldr	r3, [pc, #40]	@ (8001f64 <mem_init+0x70>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8001f40:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8001f42:	4b08      	ldr	r3, [pc, #32]	@ (8001f64 <mem_init+0x70>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8001f4a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8001f4c:	4b04      	ldr	r3, [pc, #16]	@ (8001f60 <mem_init+0x6c>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a05      	ldr	r2, [pc, #20]	@ (8001f68 <mem_init+0x74>)
 8001f52:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8001f54:	bf00      	nop
 8001f56:	3708      	adds	r7, #8
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	240024f4 	.word	0x240024f4
 8001f60:	24004d08 	.word	0x24004d08
 8001f64:	24004d0c 	.word	0x24004d0c
 8001f68:	24004d10 	.word	0x24004d10

08001f6c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f7ff ff1d 	bl	8001db4 <mem_to_ptr>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	881b      	ldrh	r3, [r3, #0]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7ff ff04 	bl	8001d90 <ptr_to_mem>
 8001f88:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	885b      	ldrh	r3, [r3, #2]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7ff fefe 	bl	8001d90 <ptr_to_mem>
 8001f94:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	881b      	ldrh	r3, [r3, #0]
 8001f9a:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8001f9e:	d818      	bhi.n	8001fd2 <mem_link_valid+0x66>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	885b      	ldrh	r3, [r3, #2]
 8001fa4:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8001fa8:	d813      	bhi.n	8001fd2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8001fae:	8afa      	ldrh	r2, [r7, #22]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d004      	beq.n	8001fbe <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	881b      	ldrh	r3, [r3, #0]
 8001fb8:	8afa      	ldrh	r2, [r7, #22]
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d109      	bne.n	8001fd2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8001fbe:	4b08      	ldr	r3, [pc, #32]	@ (8001fe0 <mem_link_valid+0x74>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d006      	beq.n	8001fd6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	885b      	ldrh	r3, [r3, #2]
 8001fcc:	8afa      	ldrh	r2, [r7, #22]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d001      	beq.n	8001fd6 <mem_link_valid+0x6a>
    return 0;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	e000      	b.n	8001fd8 <mem_link_valid+0x6c>
  }
  return 1;
 8001fd6:	2301      	movs	r3, #1
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3718      	adds	r7, #24
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	24004d0c 	.word	0x24004d0c

08001fe4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d03c      	beq.n	800206c <mem_free+0x88>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f003 0303 	and.w	r3, r3, #3
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d003      	beq.n	8002004 <mem_free+0x20>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8001ffc:	481d      	ldr	r0, [pc, #116]	@ (8002074 <mem_free+0x90>)
 8001ffe:	f008 fe31 	bl	800ac64 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8002002:	e034      	b.n	800206e <mem_free+0x8a>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	3b08      	subs	r3, #8
 8002008:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800200a:	4b1b      	ldr	r3, [pc, #108]	@ (8002078 <mem_free+0x94>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	68fa      	ldr	r2, [r7, #12]
 8002010:	429a      	cmp	r2, r3
 8002012:	d306      	bcc.n	8002022 <mem_free+0x3e>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f103 020c 	add.w	r2, r3, #12
 800201a:	4b18      	ldr	r3, [pc, #96]	@ (800207c <mem_free+0x98>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	429a      	cmp	r2, r3
 8002020:	d903      	bls.n	800202a <mem_free+0x46>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8002022:	4817      	ldr	r0, [pc, #92]	@ (8002080 <mem_free+0x9c>)
 8002024:	f008 fe1e 	bl	800ac64 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8002028:	e021      	b.n	800206e <mem_free+0x8a>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	791b      	ldrb	r3, [r3, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d103      	bne.n	800203a <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8002032:	4814      	ldr	r0, [pc, #80]	@ (8002084 <mem_free+0xa0>)
 8002034:	f008 fe16 	bl	800ac64 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8002038:	e019      	b.n	800206e <mem_free+0x8a>
  }

  if (!mem_link_valid(mem)) {
 800203a:	68f8      	ldr	r0, [r7, #12]
 800203c:	f7ff ff96 	bl	8001f6c <mem_link_valid>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d103      	bne.n	800204e <mem_free+0x6a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8002046:	4810      	ldr	r0, [pc, #64]	@ (8002088 <mem_free+0xa4>)
 8002048:	f008 fe0c 	bl	800ac64 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800204c:	e00f      	b.n	800206e <mem_free+0x8a>
  }

  /* mem is now unused. */
  mem->used = 0;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2200      	movs	r2, #0
 8002052:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8002054:	4b0d      	ldr	r3, [pc, #52]	@ (800208c <mem_free+0xa8>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	68fa      	ldr	r2, [r7, #12]
 800205a:	429a      	cmp	r2, r3
 800205c:	d202      	bcs.n	8002064 <mem_free+0x80>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800205e:	4a0b      	ldr	r2, [pc, #44]	@ (800208c <mem_free+0xa8>)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8002064:	68f8      	ldr	r0, [r7, #12]
 8002066:	f7ff feb7 	bl	8001dd8 <plug_holes>
 800206a:	e000      	b.n	800206e <mem_free+0x8a>
    return;
 800206c:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800206e:	3710      	adds	r7, #16
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	0800ba10 	.word	0x0800ba10
 8002078:	24004d08 	.word	0x24004d08
 800207c:	24004d0c 	.word	0x24004d0c
 8002080:	0800ba34 	.word	0x0800ba34
 8002084:	0800ba50 	.word	0x0800ba50
 8002088:	0800ba78 	.word	0x0800ba78
 800208c:	24004d10 	.word	0x24004d10

08002090 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b088      	sub	sp, #32
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	460b      	mov	r3, r1
 800209a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800209c:	887b      	ldrh	r3, [r7, #2]
 800209e:	3303      	adds	r3, #3
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	f023 0303 	bic.w	r3, r3, #3
 80020a6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80020a8:	8bfb      	ldrh	r3, [r7, #30]
 80020aa:	2b0b      	cmp	r3, #11
 80020ac:	d801      	bhi.n	80020b2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80020ae:	230c      	movs	r3, #12
 80020b0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80020b2:	8bfb      	ldrh	r3, [r7, #30]
 80020b4:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80020b8:	d803      	bhi.n	80020c2 <mem_trim+0x32>
 80020ba:	8bfa      	ldrh	r2, [r7, #30]
 80020bc:	887b      	ldrh	r3, [r7, #2]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d201      	bcs.n	80020c6 <mem_trim+0x36>
    return NULL;
 80020c2:	2300      	movs	r3, #0
 80020c4:	e0bc      	b.n	8002240 <mem_trim+0x1b0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80020c6:	4b60      	ldr	r3, [pc, #384]	@ (8002248 <mem_trim+0x1b8>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d304      	bcc.n	80020da <mem_trim+0x4a>
 80020d0:	4b5e      	ldr	r3, [pc, #376]	@ (800224c <mem_trim+0x1bc>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d302      	bcc.n	80020e0 <mem_trim+0x50>
 80020da:	485d      	ldr	r0, [pc, #372]	@ (8002250 <mem_trim+0x1c0>)
 80020dc:	f008 fdc2 	bl	800ac64 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80020e0:	4b59      	ldr	r3, [pc, #356]	@ (8002248 <mem_trim+0x1b8>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d304      	bcc.n	80020f4 <mem_trim+0x64>
 80020ea:	4b58      	ldr	r3, [pc, #352]	@ (800224c <mem_trim+0x1bc>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d301      	bcc.n	80020f8 <mem_trim+0x68>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	e0a3      	b.n	8002240 <mem_trim+0x1b0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	3b08      	subs	r3, #8
 80020fc:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80020fe:	69b8      	ldr	r0, [r7, #24]
 8002100:	f7ff fe58 	bl	8001db4 <mem_to_ptr>
 8002104:	4603      	mov	r3, r0
 8002106:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	881a      	ldrh	r2, [r3, #0]
 800210c:	8afb      	ldrh	r3, [r7, #22]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	b29b      	uxth	r3, r3
 8002112:	3b08      	subs	r3, #8
 8002114:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8002116:	8bfa      	ldrh	r2, [r7, #30]
 8002118:	8abb      	ldrh	r3, [r7, #20]
 800211a:	429a      	cmp	r2, r3
 800211c:	d902      	bls.n	8002124 <mem_trim+0x94>
 800211e:	484d      	ldr	r0, [pc, #308]	@ (8002254 <mem_trim+0x1c4>)
 8002120:	f008 fda0 	bl	800ac64 <iprintf>
  if (newsize > size) {
 8002124:	8bfa      	ldrh	r2, [r7, #30]
 8002126:	8abb      	ldrh	r3, [r7, #20]
 8002128:	429a      	cmp	r2, r3
 800212a:	d901      	bls.n	8002130 <mem_trim+0xa0>
    /* not supported */
    return NULL;
 800212c:	2300      	movs	r3, #0
 800212e:	e087      	b.n	8002240 <mem_trim+0x1b0>
  }
  if (newsize == size) {
 8002130:	8bfa      	ldrh	r2, [r7, #30]
 8002132:	8abb      	ldrh	r3, [r7, #20]
 8002134:	429a      	cmp	r2, r3
 8002136:	d101      	bne.n	800213c <mem_trim+0xac>
    /* No change in size, simply return */
    return rmem;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	e081      	b.n	8002240 <mem_trim+0x1b0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	881b      	ldrh	r3, [r3, #0]
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff fe25 	bl	8001d90 <ptr_to_mem>
 8002146:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	791b      	ldrb	r3, [r3, #4]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d13b      	bne.n	80021c8 <mem_trim+0x138>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	881b      	ldrh	r3, [r3, #0]
 8002154:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8002158:	d102      	bne.n	8002160 <mem_trim+0xd0>
 800215a:	483f      	ldr	r0, [pc, #252]	@ (8002258 <mem_trim+0x1c8>)
 800215c:	f008 fd82 	bl	800ac64 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	881b      	ldrh	r3, [r3, #0]
 8002164:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrunk mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8002166:	8afa      	ldrh	r2, [r7, #22]
 8002168:	8bfb      	ldrh	r3, [r7, #30]
 800216a:	4413      	add	r3, r2
 800216c:	b29b      	uxth	r3, r3
 800216e:	3308      	adds	r3, #8
 8002170:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8002172:	4b3a      	ldr	r3, [pc, #232]	@ (800225c <mem_trim+0x1cc>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	429a      	cmp	r2, r3
 800217a:	d106      	bne.n	800218a <mem_trim+0xfa>
      lfree = ptr_to_mem(ptr2);
 800217c:	89fb      	ldrh	r3, [r7, #14]
 800217e:	4618      	mov	r0, r3
 8002180:	f7ff fe06 	bl	8001d90 <ptr_to_mem>
 8002184:	4603      	mov	r3, r0
 8002186:	4a35      	ldr	r2, [pc, #212]	@ (800225c <mem_trim+0x1cc>)
 8002188:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800218a:	89fb      	ldrh	r3, [r7, #14]
 800218c:	4618      	mov	r0, r3
 800218e:	f7ff fdff 	bl	8001d90 <ptr_to_mem>
 8002192:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	2200      	movs	r2, #0
 8002198:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	89ba      	ldrh	r2, [r7, #12]
 800219e:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	8afa      	ldrh	r2, [r7, #22]
 80021a4:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	89fa      	ldrh	r2, [r7, #14]
 80021aa:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	881b      	ldrh	r3, [r3, #0]
 80021b0:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80021b4:	d043      	beq.n	800223e <mem_trim+0x1ae>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	881b      	ldrh	r3, [r3, #0]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7ff fde8 	bl	8001d90 <ptr_to_mem>
 80021c0:	4602      	mov	r2, r0
 80021c2:	89fb      	ldrh	r3, [r7, #14]
 80021c4:	8053      	strh	r3, [r2, #2]
 80021c6:	e03a      	b.n	800223e <mem_trim+0x1ae>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80021c8:	8bfb      	ldrh	r3, [r7, #30]
 80021ca:	f103 0214 	add.w	r2, r3, #20
 80021ce:	8abb      	ldrh	r3, [r7, #20]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d834      	bhi.n	800223e <mem_trim+0x1ae>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80021d4:	8afa      	ldrh	r2, [r7, #22]
 80021d6:	8bfb      	ldrh	r3, [r7, #30]
 80021d8:	4413      	add	r3, r2
 80021da:	b29b      	uxth	r3, r3
 80021dc:	3308      	adds	r3, #8
 80021de:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	881b      	ldrh	r3, [r3, #0]
 80021e4:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80021e8:	d102      	bne.n	80021f0 <mem_trim+0x160>
 80021ea:	481b      	ldr	r0, [pc, #108]	@ (8002258 <mem_trim+0x1c8>)
 80021ec:	f008 fd3a 	bl	800ac64 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80021f0:	89fb      	ldrh	r3, [r7, #14]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7ff fdcc 	bl	8001d90 <ptr_to_mem>
 80021f8:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80021fa:	4b18      	ldr	r3, [pc, #96]	@ (800225c <mem_trim+0x1cc>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	693a      	ldr	r2, [r7, #16]
 8002200:	429a      	cmp	r2, r3
 8002202:	d202      	bcs.n	800220a <mem_trim+0x17a>
      lfree = mem2;
 8002204:	4a15      	ldr	r2, [pc, #84]	@ (800225c <mem_trim+0x1cc>)
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	2200      	movs	r2, #0
 800220e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	881a      	ldrh	r2, [r3, #0]
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	8afa      	ldrh	r2, [r7, #22]
 800221c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	89fa      	ldrh	r2, [r7, #14]
 8002222:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	881b      	ldrh	r3, [r3, #0]
 8002228:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800222c:	d007      	beq.n	800223e <mem_trim+0x1ae>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	881b      	ldrh	r3, [r3, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	f7ff fdac 	bl	8001d90 <ptr_to_mem>
 8002238:	4602      	mov	r2, r0
 800223a:	89fb      	ldrh	r3, [r7, #14]
 800223c:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800223e:	687b      	ldr	r3, [r7, #4]
}
 8002240:	4618      	mov	r0, r3
 8002242:	3720      	adds	r7, #32
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	24004d08 	.word	0x24004d08
 800224c:	24004d0c 	.word	0x24004d0c
 8002250:	0800baac 	.word	0x0800baac
 8002254:	0800bac4 	.word	0x0800bac4
 8002258:	0800bae4 	.word	0x0800bae4
 800225c:	24004d10 	.word	0x24004d10

08002260 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b088      	sub	sp, #32
 8002264:	af00      	add	r7, sp, #0
 8002266:	4603      	mov	r3, r0
 8002268:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800226a:	88fb      	ldrh	r3, [r7, #6]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d101      	bne.n	8002274 <mem_malloc+0x14>
    return NULL;
 8002270:	2300      	movs	r3, #0
 8002272:	e0c5      	b.n	8002400 <mem_malloc+0x1a0>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8002274:	88fb      	ldrh	r3, [r7, #6]
 8002276:	3303      	adds	r3, #3
 8002278:	b29b      	uxth	r3, r3
 800227a:	f023 0303 	bic.w	r3, r3, #3
 800227e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8002280:	8bbb      	ldrh	r3, [r7, #28]
 8002282:	2b0b      	cmp	r3, #11
 8002284:	d801      	bhi.n	800228a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8002286:	230c      	movs	r3, #12
 8002288:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800228a:	8bbb      	ldrh	r3, [r7, #28]
 800228c:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8002290:	d803      	bhi.n	800229a <mem_malloc+0x3a>
 8002292:	8bba      	ldrh	r2, [r7, #28]
 8002294:	88fb      	ldrh	r3, [r7, #6]
 8002296:	429a      	cmp	r2, r3
 8002298:	d201      	bcs.n	800229e <mem_malloc+0x3e>
    return NULL;
 800229a:	2300      	movs	r3, #0
 800229c:	e0b0      	b.n	8002400 <mem_malloc+0x1a0>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800229e:	4b5a      	ldr	r3, [pc, #360]	@ (8002408 <mem_malloc+0x1a8>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7ff fd86 	bl	8001db4 <mem_to_ptr>
 80022a8:	4603      	mov	r3, r0
 80022aa:	83fb      	strh	r3, [r7, #30]
 80022ac:	e0a0      	b.n	80023f0 <mem_malloc+0x190>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80022ae:	8bfb      	ldrh	r3, [r7, #30]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff fd6d 	bl	8001d90 <ptr_to_mem>
 80022b6:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	791b      	ldrb	r3, [r3, #4]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	f040 8090 	bne.w	80023e2 <mem_malloc+0x182>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	881b      	ldrh	r3, [r3, #0]
 80022c6:	461a      	mov	r2, r3
 80022c8:	8bfb      	ldrh	r3, [r7, #30]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	f1a3 0208 	sub.w	r2, r3, #8
 80022d0:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80022d2:	429a      	cmp	r2, r3
 80022d4:	f0c0 8085 	bcc.w	80023e2 <mem_malloc+0x182>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	881b      	ldrh	r3, [r3, #0]
 80022dc:	461a      	mov	r2, r3
 80022de:	8bfb      	ldrh	r3, [r7, #30]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	f1a3 0208 	sub.w	r2, r3, #8
 80022e6:	8bbb      	ldrh	r3, [r7, #28]
 80022e8:	3314      	adds	r3, #20
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d32f      	bcc.n	800234e <mem_malloc+0xee>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80022ee:	8bfa      	ldrh	r2, [r7, #30]
 80022f0:	8bbb      	ldrh	r3, [r7, #28]
 80022f2:	4413      	add	r3, r2
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	3308      	adds	r3, #8
 80022f8:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80022fa:	8a7b      	ldrh	r3, [r7, #18]
 80022fc:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8002300:	d102      	bne.n	8002308 <mem_malloc+0xa8>
 8002302:	4842      	ldr	r0, [pc, #264]	@ (800240c <mem_malloc+0x1ac>)
 8002304:	f008 fcae 	bl	800ac64 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8002308:	8a7b      	ldrh	r3, [r7, #18]
 800230a:	4618      	mov	r0, r3
 800230c:	f7ff fd40 	bl	8001d90 <ptr_to_mem>
 8002310:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2200      	movs	r2, #0
 8002316:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	881a      	ldrh	r2, [r3, #0]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	8bfa      	ldrh	r2, [r7, #30]
 8002324:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	8a7a      	ldrh	r2, [r7, #18]
 800232a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	2201      	movs	r2, #1
 8002330:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	881b      	ldrh	r3, [r3, #0]
 8002336:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800233a:	d00b      	beq.n	8002354 <mem_malloc+0xf4>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	881b      	ldrh	r3, [r3, #0]
 8002340:	4618      	mov	r0, r3
 8002342:	f7ff fd25 	bl	8001d90 <ptr_to_mem>
 8002346:	4602      	mov	r2, r0
 8002348:	8a7b      	ldrh	r3, [r7, #18]
 800234a:	8053      	strh	r3, [r2, #2]
 800234c:	e002      	b.n	8002354 <mem_malloc+0xf4>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	2201      	movs	r2, #1
 8002352:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8002354:	4b2c      	ldr	r3, [pc, #176]	@ (8002408 <mem_malloc+0x1a8>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	697a      	ldr	r2, [r7, #20]
 800235a:	429a      	cmp	r2, r3
 800235c:	d123      	bne.n	80023a6 <mem_malloc+0x146>
          struct mem *cur = lfree;
 800235e:	4b2a      	ldr	r3, [pc, #168]	@ (8002408 <mem_malloc+0x1a8>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8002364:	e005      	b.n	8002372 <mem_malloc+0x112>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	881b      	ldrh	r3, [r3, #0]
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff fd10 	bl	8001d90 <ptr_to_mem>
 8002370:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	791b      	ldrb	r3, [r3, #4]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d004      	beq.n	8002384 <mem_malloc+0x124>
 800237a:	4b25      	ldr	r3, [pc, #148]	@ (8002410 <mem_malloc+0x1b0>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	429a      	cmp	r2, r3
 8002382:	d1f0      	bne.n	8002366 <mem_malloc+0x106>
          }
          lfree = cur;
 8002384:	4a20      	ldr	r2, [pc, #128]	@ (8002408 <mem_malloc+0x1a8>)
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800238a:	4b1f      	ldr	r3, [pc, #124]	@ (8002408 <mem_malloc+0x1a8>)
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	4b20      	ldr	r3, [pc, #128]	@ (8002410 <mem_malloc+0x1b0>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	429a      	cmp	r2, r3
 8002394:	d007      	beq.n	80023a6 <mem_malloc+0x146>
 8002396:	4b1c      	ldr	r3, [pc, #112]	@ (8002408 <mem_malloc+0x1a8>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	791b      	ldrb	r3, [r3, #4]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d002      	beq.n	80023a6 <mem_malloc+0x146>
 80023a0:	481c      	ldr	r0, [pc, #112]	@ (8002414 <mem_malloc+0x1b4>)
 80023a2:	f008 fc5f 	bl	800ac64 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80023a6:	8bba      	ldrh	r2, [r7, #28]
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	4413      	add	r3, r2
 80023ac:	3308      	adds	r3, #8
 80023ae:	4a18      	ldr	r2, [pc, #96]	@ (8002410 <mem_malloc+0x1b0>)
 80023b0:	6812      	ldr	r2, [r2, #0]
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d902      	bls.n	80023bc <mem_malloc+0x15c>
 80023b6:	4818      	ldr	r0, [pc, #96]	@ (8002418 <mem_malloc+0x1b8>)
 80023b8:	f008 fc54 	bl	800ac64 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	f003 0303 	and.w	r3, r3, #3
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d002      	beq.n	80023cc <mem_malloc+0x16c>
 80023c6:	4815      	ldr	r0, [pc, #84]	@ (800241c <mem_malloc+0x1bc>)
 80023c8:	f008 fc4c 	bl	800ac64 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	f003 0303 	and.w	r3, r3, #3
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d002      	beq.n	80023dc <mem_malloc+0x17c>
 80023d6:	4812      	ldr	r0, [pc, #72]	@ (8002420 <mem_malloc+0x1c0>)
 80023d8:	f008 fc44 	bl	800ac64 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	3308      	adds	r3, #8
 80023e0:	e00e      	b.n	8002400 <mem_malloc+0x1a0>
         ptr = ptr_to_mem(ptr)->next) {
 80023e2:	8bfb      	ldrh	r3, [r7, #30]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff fcd3 	bl	8001d90 <ptr_to_mem>
 80023ea:	4603      	mov	r3, r0
 80023ec:	881b      	ldrh	r3, [r3, #0]
 80023ee:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80023f0:	8bfa      	ldrh	r2, [r7, #30]
 80023f2:	8bbb      	ldrh	r3, [r7, #28]
 80023f4:	f5c3 5320 	rsb	r3, r3, #10240	@ 0x2800
 80023f8:	429a      	cmp	r2, r3
 80023fa:	f4ff af58 	bcc.w	80022ae <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80023fe:	2300      	movs	r3, #0
}
 8002400:	4618      	mov	r0, r3
 8002402:	3720      	adds	r7, #32
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	24004d10 	.word	0x24004d10
 800240c:	0800bae4 	.word	0x0800bae4
 8002410:	24004d0c 	.word	0x24004d0c
 8002414:	0800baf8 	.word	0x0800baf8
 8002418:	0800bb14 	.word	0x0800bb14
 800241c:	0800bb44 	.word	0x0800bb44
 8002420:	0800bb74 	.word	0x0800bb74

08002424 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8002424:	b480      	push	{r7}
 8002426:	b085      	sub	sp, #20
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	2200      	movs	r2, #0
 8002432:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	3303      	adds	r3, #3
 800243a:	f023 0303 	bic.w	r3, r3, #3
 800243e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8002440:	2300      	movs	r3, #0
 8002442:	60fb      	str	r3, [r7, #12]
 8002444:	e011      	b.n	800246a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	68ba      	ldr	r2, [r7, #8]
 8002456:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	881b      	ldrh	r3, [r3, #0]
 800245c:	461a      	mov	r2, r3
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	4413      	add	r3, r2
 8002462:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	3301      	adds	r3, #1
 8002468:	60fb      	str	r3, [r7, #12]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	885b      	ldrh	r3, [r3, #2]
 800246e:	461a      	mov	r2, r3
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	4293      	cmp	r3, r2
 8002474:	dbe7      	blt.n	8002446 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8002476:	bf00      	nop
 8002478:	bf00      	nop
 800247a:	3714      	adds	r7, #20
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800248a:	2300      	movs	r3, #0
 800248c:	80fb      	strh	r3, [r7, #6]
 800248e:	e009      	b.n	80024a4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8002490:	88fb      	ldrh	r3, [r7, #6]
 8002492:	4a08      	ldr	r2, [pc, #32]	@ (80024b4 <memp_init+0x30>)
 8002494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002498:	4618      	mov	r0, r3
 800249a:	f7ff ffc3 	bl	8002424 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800249e:	88fb      	ldrh	r3, [r7, #6]
 80024a0:	3301      	adds	r3, #1
 80024a2:	80fb      	strh	r3, [r7, #6]
 80024a4:	88fb      	ldrh	r3, [r7, #6]
 80024a6:	2b08      	cmp	r3, #8
 80024a8:	d9f2      	bls.n	8002490 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80024aa:	bf00      	nop
 80024ac:	bf00      	nop
 80024ae:	3708      	adds	r7, #8
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	0800d650 	.word	0x0800d650

080024b8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00e      	beq.n	80024ec <do_memp_malloc_pool+0x34>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	68fa      	ldr	r2, [r7, #12]
 80024d4:	6812      	ldr	r2, [r2, #0]
 80024d6:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f003 0303 	and.w	r3, r3, #3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d002      	beq.n	80024e8 <do_memp_malloc_pool+0x30>
 80024e2:	4805      	ldr	r0, [pc, #20]	@ (80024f8 <do_memp_malloc_pool+0x40>)
 80024e4:	f008 fbbe 	bl	800ac64 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	e000      	b.n	80024ee <do_memp_malloc_pool+0x36>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3710      	adds	r7, #16
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	0800bb98 	.word	0x0800bb98

080024fc <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	4603      	mov	r3, r0
 8002504:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8002506:	79fb      	ldrb	r3, [r7, #7]
 8002508:	2b08      	cmp	r3, #8
 800250a:	d901      	bls.n	8002510 <memp_malloc+0x14>
 800250c:	2300      	movs	r3, #0
 800250e:	e008      	b.n	8002522 <memp_malloc+0x26>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8002510:	79fb      	ldrb	r3, [r7, #7]
 8002512:	4a06      	ldr	r2, [pc, #24]	@ (800252c <memp_malloc+0x30>)
 8002514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002518:	4618      	mov	r0, r3
 800251a:	f7ff ffcd 	bl	80024b8 <do_memp_malloc_pool>
 800251e:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8002520:	68fb      	ldr	r3, [r7, #12]
}
 8002522:	4618      	mov	r0, r3
 8002524:	3710      	adds	r7, #16
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	0800d650 	.word	0x0800d650

08002530 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	f003 0303 	and.w	r3, r3, #3
 8002540:	2b00      	cmp	r3, #0
 8002542:	d002      	beq.n	800254a <do_memp_free_pool+0x1a>
 8002544:	4808      	ldr	r0, [pc, #32]	@ (8002568 <do_memp_free_pool+0x38>)
 8002546:	f008 fb8d 	bl	800ac64 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	68fa      	ldr	r2, [r7, #12]
 800255e:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8002560:	bf00      	nop
 8002562:	3710      	adds	r7, #16
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	0800bbd0 	.word	0x0800bbd0

0800256c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	4603      	mov	r3, r0
 8002574:	6039      	str	r1, [r7, #0]
 8002576:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8002578:	79fb      	ldrb	r3, [r7, #7]
 800257a:	2b08      	cmp	r3, #8
 800257c:	d80c      	bhi.n	8002598 <memp_free+0x2c>

  if (mem == NULL) {
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d008      	beq.n	8002596 <memp_free+0x2a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8002584:	79fb      	ldrb	r3, [r7, #7]
 8002586:	4a06      	ldr	r2, [pc, #24]	@ (80025a0 <memp_free+0x34>)
 8002588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800258c:	6839      	ldr	r1, [r7, #0]
 800258e:	4618      	mov	r0, r3
 8002590:	f7ff ffce 	bl	8002530 <do_memp_free_pool>
 8002594:	e000      	b.n	8002598 <memp_free+0x2c>
    return;
 8002596:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	0800d650 	.word	0x0800d650

080025a4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80025a8:	bf00      	nop
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
	...

080025b4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b086      	sub	sp, #24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
 80025c0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d101      	bne.n	80025cc <netif_add+0x18>
 80025c8:	2300      	movs	r3, #0
 80025ca:	e093      	b.n	80026f4 <netif_add+0x140>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80025cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d101      	bne.n	80025d6 <netif_add+0x22>
 80025d2:	2300      	movs	r3, #0
 80025d4:	e08e      	b.n	80026f4 <netif_add+0x140>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d101      	bne.n	80025e0 <netif_add+0x2c>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80025dc:	4b47      	ldr	r3, [pc, #284]	@ (80026fc <netif_add+0x148>)
 80025de:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <netif_add+0x36>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80025e6:	4b45      	ldr	r3, [pc, #276]	@ (80026fc <netif_add+0x148>)
 80025e8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d101      	bne.n	80025f4 <netif_add+0x40>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80025f0:	4b42      	ldr	r3, [pc, #264]	@ (80026fc <netif_add+0x148>)
 80025f2:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2200      	movs	r2, #0
 80025f8:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2200      	movs	r2, #0
 80025fe:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2200      	movs	r2, #0
 8002604:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	4a3d      	ldr	r2, [pc, #244]	@ (8002700 <netif_add+0x14c>)
 800260a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2200      	movs	r2, #0
 8002610:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2200      	movs	r2, #0
 800261e:	61da      	str	r2, [r3, #28]
#if LWIP_IPV6 && LWIP_IPV6_MLD
  netif->mld_mac_filter = NULL;
#endif /* LWIP_IPV6 && LWIP_IPV6_MLD */

  /* remember netif specific state information data */
  netif->state = state;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6a3a      	ldr	r2, [r7, #32]
 8002624:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8002626:	4b37      	ldr	r3, [pc, #220]	@ (8002704 <netif_add+0x150>)
 8002628:	781a      	ldrb	r2, [r3, #0]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002634:	611a      	str	r2, [r3, #16]
  netif->reschedule_poll = 0;
#endif /* LWIP_NETIF_LOOPBACK_MULTITHREADING */
#endif /* ENABLE_LOOPBACK */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	68b9      	ldr	r1, [r7, #8]
 800263c:	68f8      	ldr	r0, [r7, #12]
 800263e:	f000 f8f7 	bl	8002830 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8002642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002644:	68f8      	ldr	r0, [r7, #12]
 8002646:	4798      	blx	r3
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <netif_add+0x9e>
    return NULL;
 800264e:	2300      	movs	r3, #0
 8002650:	e050      	b.n	80026f4 <netif_add+0x140>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002658:	2bff      	cmp	r3, #255	@ 0xff
 800265a:	d103      	bne.n	8002664 <netif_add+0xb0>
        netif->num = 0;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2200      	movs	r2, #0
 8002660:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 8002664:	2300      	movs	r3, #0
 8002666:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8002668:	4b27      	ldr	r3, [pc, #156]	@ (8002708 <netif_add+0x154>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	617b      	str	r3, [r7, #20]
 800266e:	e023      	b.n	80026b8 <netif_add+0x104>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8002670:	697a      	ldr	r2, [r7, #20]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	429a      	cmp	r2, r3
 8002676:	d102      	bne.n	800267e <netif_add+0xca>
 8002678:	4824      	ldr	r0, [pc, #144]	@ (800270c <netif_add+0x158>)
 800267a:	f008 faf3 	bl	800ac64 <iprintf>
        num_netifs++;
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	3301      	adds	r3, #1
 8002682:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	2bff      	cmp	r3, #255	@ 0xff
 8002688:	dd02      	ble.n	8002690 <netif_add+0xdc>
 800268a:	4821      	ldr	r0, [pc, #132]	@ (8002710 <netif_add+0x15c>)
 800268c:	f008 faea 	bl	800ac64 <iprintf>
        if (netif2->num == netif->num) {
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800269c:	429a      	cmp	r2, r3
 800269e:	d108      	bne.n	80026b2 <netif_add+0xfe>
          netif->num++;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80026a6:	3301      	adds	r3, #1
 80026a8:	b2da      	uxtb	r2, r3
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 80026b0:	e005      	b.n	80026be <netif_add+0x10a>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	617b      	str	r3, [r7, #20]
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d1d8      	bne.n	8002670 <netif_add+0xbc>
        }
      }
    } while (netif2 != NULL);
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d1c6      	bne.n	8002652 <netif_add+0x9e>
  }
  if (netif->num == 254) {
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80026ca:	2bfe      	cmp	r3, #254	@ 0xfe
 80026cc:	d103      	bne.n	80026d6 <netif_add+0x122>
    netif_num = 0;
 80026ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002704 <netif_add+0x150>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	701a      	strb	r2, [r3, #0]
 80026d4:	e006      	b.n	80026e4 <netif_add+0x130>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80026dc:	3301      	adds	r3, #1
 80026de:	b2da      	uxtb	r2, r3
 80026e0:	4b08      	ldr	r3, [pc, #32]	@ (8002704 <netif_add+0x150>)
 80026e2:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80026e4:	4b08      	ldr	r3, [pc, #32]	@ (8002708 <netif_add+0x154>)
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80026ec:	4a06      	ldr	r2, [pc, #24]	@ (8002708 <netif_add+0x154>)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80026f2:	68fb      	ldr	r3, [r7, #12]
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3718      	adds	r7, #24
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	0800d6b4 	.word	0x0800d6b4
 8002700:	08002a25 	.word	0x08002a25
 8002704:	24008b08 	.word	0x24008b08
 8002708:	24008b00 	.word	0x24008b00
 800270c:	0800bc28 	.word	0x0800bc28
 8002710:	0800bc3c 	.word	0x0800bc3c

08002714 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800271e:	6839      	ldr	r1, [r7, #0]
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f002 f8c3 	bl	80048ac <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8002726:	6839      	ldr	r1, [r7, #0]
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f005 ff03 	bl	8008534 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800272e:	bf00      	nop
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
	...

08002738 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b086      	sub	sp, #24
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d102      	bne.n	8002750 <netif_do_set_ipaddr+0x18>
 800274a:	4819      	ldr	r0, [pc, #100]	@ (80027b0 <netif_do_set_ipaddr+0x78>)
 800274c:	f008 fa8a 	bl	800ac64 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d102      	bne.n	800275c <netif_do_set_ipaddr+0x24>
 8002756:	4816      	ldr	r0, [pc, #88]	@ (80027b0 <netif_do_set_ipaddr+0x78>)
 8002758:	f008 fa84 	bl	800ac64 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_eq(ipaddr, netif_ip4_addr(netif)) == 0) {
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	3304      	adds	r3, #4
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	429a      	cmp	r2, r3
 8002768:	d01c      	beq.n	80027a4 <netif_do_set_ipaddr+0x6c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	3304      	adds	r3, #4
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800277a:	f107 0314 	add.w	r3, r7, #20
 800277e:	4619      	mov	r1, r3
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f7ff ffc7 	bl	8002714 <netif_do_ip_addr_changed>
#endif /* LWIP_ACD */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d002      	beq.n	8002792 <netif_do_set_ipaddr+0x5a>
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	e000      	b.n	8002794 <netif_do_set_ipaddr+0x5c>
 8002792:	2300      	movs	r3, #0
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8002798:	2101      	movs	r1, #1
 800279a:	68f8      	ldr	r0, [r7, #12]
 800279c:	f000 f8c0 	bl	8002920 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80027a0:	2301      	movs	r3, #1
 80027a2:	e000      	b.n	80027a6 <netif_do_set_ipaddr+0x6e>
  }
  return 0; /* address unchanged */
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3718      	adds	r7, #24
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	0800bc6c 	.word	0x0800bc6c

080027b4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_eq(netmask, netif_ip4_netmask(netif)) == 0) {
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	3308      	adds	r3, #8
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d00a      	beq.n	80027e4 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d002      	beq.n	80027da <netif_do_set_netmask+0x26>
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	e000      	b.n	80027dc <netif_do_set_netmask+0x28>
 80027da:	2300      	movs	r3, #0
 80027dc:	68fa      	ldr	r2, [r7, #12]
 80027de:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80027e0:	2301      	movs	r3, #1
 80027e2:	e000      	b.n	80027e6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3714      	adds	r7, #20
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr

080027f2 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80027f2:	b480      	push	{r7}
 80027f4:	b085      	sub	sp, #20
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	60f8      	str	r0, [r7, #12]
 80027fa:	60b9      	str	r1, [r7, #8]
 80027fc:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_eq(gw, netif_ip4_gw(netif)) == 0) {
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	330c      	adds	r3, #12
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	429a      	cmp	r2, r3
 800280a:	d00a      	beq.n	8002822 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d002      	beq.n	8002818 <netif_do_set_gw+0x26>
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	e000      	b.n	800281a <netif_do_set_gw+0x28>
 8002818:	2300      	movs	r3, #0
 800281a:	68fa      	ldr	r2, [r7, #12]
 800281c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800281e:	2301      	movs	r3, #1
 8002820:	e000      	b.n	8002824 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8002822:	2300      	movs	r3, #0
}
 8002824:	4618      	mov	r0, r3
 8002826:	3714      	adds	r7, #20
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b088      	sub	sp, #32
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	607a      	str	r2, [r7, #4]
 800283c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800283e:	2300      	movs	r3, #0
 8002840:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8002842:	2300      	movs	r3, #0
 8002844:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d101      	bne.n	8002850 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800284c:	4b1c      	ldr	r3, [pc, #112]	@ (80028c0 <netif_set_addr+0x90>)
 800284e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d101      	bne.n	800285a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8002856:	4b1a      	ldr	r3, [pc, #104]	@ (80028c0 <netif_set_addr+0x90>)
 8002858:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d101      	bne.n	8002864 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8002860:	4b17      	ldr	r3, [pc, #92]	@ (80028c0 <netif_set_addr+0x90>)
 8002862:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d003      	beq.n	8002872 <netif_set_addr+0x42>
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d101      	bne.n	8002876 <netif_set_addr+0x46>
 8002872:	2301      	movs	r3, #1
 8002874:	e000      	b.n	8002878 <netif_set_addr+0x48>
 8002876:	2300      	movs	r3, #0
 8002878:	617b      	str	r3, [r7, #20]
  if (remove) {
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d006      	beq.n	800288e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8002880:	f107 0310 	add.w	r3, r7, #16
 8002884:	461a      	mov	r2, r3
 8002886:	68b9      	ldr	r1, [r7, #8]
 8002888:	68f8      	ldr	r0, [r7, #12]
 800288a:	f7ff ff55 	bl	8002738 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800288e:	69fa      	ldr	r2, [r7, #28]
 8002890:	6879      	ldr	r1, [r7, #4]
 8002892:	68f8      	ldr	r0, [r7, #12]
 8002894:	f7ff ff8e 	bl	80027b4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	6839      	ldr	r1, [r7, #0]
 800289c:	68f8      	ldr	r0, [r7, #12]
 800289e:	f7ff ffa8 	bl	80027f2 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d106      	bne.n	80028b6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80028a8:	f107 0310 	add.w	r3, r7, #16
 80028ac:	461a      	mov	r2, r3
 80028ae:	68b9      	ldr	r1, [r7, #8]
 80028b0:	68f8      	ldr	r0, [r7, #12]
 80028b2:	f7ff ff41 	bl	8002738 <netif_do_set_ipaddr>
  }
  if (change_reason != LWIP_NSC_NONE) {
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80028b6:	bf00      	nop
 80028b8:	3720      	adds	r7, #32
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	0800d6b4 	.word	0x0800d6b4

080028c4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80028cc:	4a04      	ldr	r2, [pc, #16]	@ (80028e0 <netif_set_default+0x1c>)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80028d2:	bf00      	nop
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	24008b04 	.word	0x24008b04

080028e4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d013      	beq.n	800291a <netif_set_up+0x36>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80028f8:	f003 0301 	and.w	r3, r3, #1
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d10c      	bne.n	800291a <netif_set_up+0x36>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8002906:	f043 0301 	orr.w	r3, r3, #1
 800290a:	b2da      	uxtb	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8002912:	2103      	movs	r1, #3
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f000 f803 	bl	8002920 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800291a:	3708      	adds	r7, #8
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	460b      	mov	r3, r1
 800292a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d102      	bne.n	8002938 <netif_issue_reports+0x18>
 8002932:	4816      	ldr	r0, [pc, #88]	@ (800298c <netif_issue_reports+0x6c>)
 8002934:	f008 f996 	bl	800ac64 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800293e:	f003 0304 	and.w	r3, r3, #4
 8002942:	2b00      	cmp	r3, #0
 8002944:	d01e      	beq.n	8002984 <netif_issue_reports+0x64>
      !(netif->flags & NETIF_FLAG_UP)) {
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800294c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8002950:	2b00      	cmp	r3, #0
 8002952:	d017      	beq.n	8002984 <netif_issue_reports+0x64>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8002954:	78fb      	ldrb	r3, [r7, #3]
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	2b00      	cmp	r3, #0
 800295c:	d013      	beq.n	8002986 <netif_issue_reports+0x66>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	3304      	adds	r3, #4
 8002962:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8002964:	2b00      	cmp	r3, #0
 8002966:	d00e      	beq.n	8002986 <netif_issue_reports+0x66>
#if LWIP_ARP && !LWIP_ACD
    /* For Ethernet network interfaces:
     * we would like to send a "gratuitous ARP".
     * Only needs to be done here if ACD isn't configured.
     */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800296e:	f003 0308 	and.w	r3, r3, #8
 8002972:	2b00      	cmp	r3, #0
 8002974:	d007      	beq.n	8002986 <netif_issue_reports+0x66>
      etharp_gratuitous(netif);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	3304      	adds	r3, #4
 800297a:	4619      	mov	r1, r3
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f006 fd03 	bl	8009388 <etharp_request>
 8002982:	e000      	b.n	8002986 <netif_issue_reports+0x66>
    return;
 8002984:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8002986:	3708      	adds	r7, #8
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	0800bc7c 	.word	0x0800bc7c

08002990 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d019      	beq.n	80029d2 <netif_set_down+0x42>

  if (netif->flags & NETIF_FLAG_UP) {
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d012      	beq.n	80029d2 <netif_set_down+0x42>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80029b2:	f023 0301 	bic.w	r3, r3, #1
 80029b6:	b2da      	uxtb	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80029c4:	f003 0308 	and.w	r3, r3, #8
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d002      	beq.n	80029d2 <netif_set_down+0x42>
      etharp_cleanup_netif(netif);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f006 f8b9 	bl	8008b44 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80029d2:	3708      	adds	r7, #8
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d01b      	beq.n	8002a1e <netif_set_link_up+0x46>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80029ec:	f003 0304 	and.w	r3, r3, #4
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d114      	bne.n	8002a1e <netif_set_link_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80029fa:	f043 0304 	orr.w	r3, r3, #4
 80029fe:	b2da      	uxtb	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed_link_up(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8002a06:	2103      	movs	r1, #3
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f7ff ff89 	bl	8002920 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	69db      	ldr	r3, [r3, #28]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d003      	beq.n	8002a1e <netif_set_link_up+0x46>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	69db      	ldr	r3, [r3, #28]
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8002a1e:	3708      	adds	r7, #8
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b085      	sub	sp, #20
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8002a30:	f06f 030b 	mvn.w	r3, #11
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3714      	adds	r7, #20
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b085      	sub	sp, #20
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	4603      	mov	r3, r0
 8002a48:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8002a4a:	79fb      	ldrb	r3, [r7, #7]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d013      	beq.n	8002a78 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8002a50:	4b0d      	ldr	r3, [pc, #52]	@ (8002a88 <netif_get_by_index+0x48>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	60fb      	str	r3, [r7, #12]
 8002a56:	e00c      	b.n	8002a72 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002a5e:	3301      	adds	r3, #1
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	79fa      	ldrb	r2, [r7, #7]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d101      	bne.n	8002a6c <netif_get_by_index+0x2c>
        return netif; /* found! */
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	e006      	b.n	8002a7a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	60fb      	str	r3, [r7, #12]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d1ef      	bne.n	8002a58 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3714      	adds	r7, #20
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	24008b00 	.word	0x24008b00

08002a8c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	4611      	mov	r1, r2
 8002a98:	461a      	mov	r2, r3
 8002a9a:	460b      	mov	r3, r1
 8002a9c:	80fb      	strh	r3, [r7, #6]
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	68ba      	ldr	r2, [r7, #8]
 8002aac:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	88fa      	ldrh	r2, [r7, #6]
 8002ab2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	88ba      	ldrh	r2, [r7, #4]
 8002ab8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8002aba:	8b3b      	ldrh	r3, [r7, #24]
 8002abc:	b2da      	uxtb	r2, r3
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	7f3a      	ldrb	r2, [r7, #28]
 8002ac6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2201      	movs	r2, #1
 8002acc:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	73da      	strb	r2, [r3, #15]
}
 8002ad4:	bf00      	nop
 8002ad6:	3714      	adds	r7, #20
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b08c      	sub	sp, #48	@ 0x30
 8002ae4:	af02      	add	r7, sp, #8
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	71fb      	strb	r3, [r7, #7]
 8002aea:	460b      	mov	r3, r1
 8002aec:	80bb      	strh	r3, [r7, #4]
 8002aee:	4613      	mov	r3, r2
 8002af0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8002af2:	79fb      	ldrb	r3, [r7, #7]
 8002af4:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8002af6:	887b      	ldrh	r3, [r7, #2]
 8002af8:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8002afc:	d077      	beq.n	8002bee <pbuf_alloc+0x10e>
 8002afe:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8002b02:	f300 80bc 	bgt.w	8002c7e <pbuf_alloc+0x19e>
 8002b06:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8002b0a:	d010      	beq.n	8002b2e <pbuf_alloc+0x4e>
 8002b0c:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8002b10:	f300 80b5 	bgt.w	8002c7e <pbuf_alloc+0x19e>
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d002      	beq.n	8002b1e <pbuf_alloc+0x3e>
 8002b18:	2b41      	cmp	r3, #65	@ 0x41
 8002b1a:	f040 80b0 	bne.w	8002c7e <pbuf_alloc+0x19e>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8002b1e:	887a      	ldrh	r2, [r7, #2]
 8002b20:	88bb      	ldrh	r3, [r7, #4]
 8002b22:	4619      	mov	r1, r3
 8002b24:	2000      	movs	r0, #0
 8002b26:	f000 f8bd 	bl	8002ca4 <pbuf_alloc_reference>
 8002b2a:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8002b2c:	e0ad      	b.n	8002c8a <pbuf_alloc+0x1aa>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8002b32:	2300      	movs	r3, #0
 8002b34:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8002b36:	88bb      	ldrh	r3, [r7, #4]
 8002b38:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8002b3a:	2008      	movs	r0, #8
 8002b3c:	f7ff fcde 	bl	80024fc <memp_malloc>
 8002b40:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d107      	bne.n	8002b58 <pbuf_alloc+0x78>
          PBUF_POOL_IS_EMPTY();
          /* free chain so far allocated */
          if (p) {
 8002b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d002      	beq.n	8002b54 <pbuf_alloc+0x74>
            pbuf_free(p);
 8002b4e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002b50:	f000 fa6c 	bl	800302c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8002b54:	2300      	movs	r3, #0
 8002b56:	e099      	b.n	8002c8c <pbuf_alloc+0x1ac>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8002b58:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002b5a:	3303      	adds	r3, #3
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	f023 0303 	bic.w	r3, r3, #3
 8002b62:	b29a      	uxth	r2, r3
 8002b64:	f240 53f4 	movw	r3, #1524	@ 0x5f4
 8002b68:	1a9b      	subs	r3, r3, r2
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	8b7a      	ldrh	r2, [r7, #26]
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	bf28      	it	cs
 8002b72:	4613      	movcs	r3, r2
 8002b74:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8002b76:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002b78:	3310      	adds	r3, #16
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	3303      	adds	r3, #3
 8002b80:	f023 0303 	bic.w	r3, r3, #3
 8002b84:	4618      	mov	r0, r3
 8002b86:	89f9      	ldrh	r1, [r7, #14]
 8002b88:	8b7a      	ldrh	r2, [r7, #26]
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	9301      	str	r3, [sp, #4]
 8002b8e:	887b      	ldrh	r3, [r7, #2]
 8002b90:	9300      	str	r3, [sp, #0]
 8002b92:	460b      	mov	r3, r1
 8002b94:	4601      	mov	r1, r0
 8002b96:	6938      	ldr	r0, [r7, #16]
 8002b98:	f7ff ff78 	bl	8002a8c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f003 0303 	and.w	r3, r3, #3
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d002      	beq.n	8002bae <pbuf_alloc+0xce>
 8002ba8:	483a      	ldr	r0, [pc, #232]	@ (8002c94 <pbuf_alloc+0x1b4>)
 8002baa:	f008 f85b 	bl	800ac64 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8002bae:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002bb0:	3303      	adds	r3, #3
 8002bb2:	f023 0303 	bic.w	r3, r3, #3
 8002bb6:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d102      	bne.n	8002bc4 <pbuf_alloc+0xe4>
 8002bbe:	4836      	ldr	r0, [pc, #216]	@ (8002c98 <pbuf_alloc+0x1b8>)
 8002bc0:	f008 f850 	bl	800ac64 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8002bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d102      	bne.n	8002bd0 <pbuf_alloc+0xf0>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bce:	e002      	b.n	8002bd6 <pbuf_alloc+0xf6>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	693a      	ldr	r2, [r7, #16]
 8002bd4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8002bda:	8b7a      	ldrh	r2, [r7, #26]
 8002bdc:	89fb      	ldrh	r3, [r7, #14]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8002be2:	2300      	movs	r3, #0
 8002be4:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8002be6:	8b7b      	ldrh	r3, [r7, #26]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d1a6      	bne.n	8002b3a <pbuf_alloc+0x5a>
      break;
 8002bec:	e04d      	b.n	8002c8a <pbuf_alloc+0x1aa>
    }
    case PBUF_RAM: {
      mem_size_t payload_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8002bee:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002bf0:	3303      	adds	r3, #3
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	f023 0303 	bic.w	r3, r3, #3
 8002bf8:	b29a      	uxth	r2, r3
 8002bfa:	88bb      	ldrh	r3, [r7, #4]
 8002bfc:	3303      	adds	r3, #3
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	f023 0303 	bic.w	r3, r3, #3
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	4413      	add	r3, r2
 8002c08:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8002c0a:	8b3b      	ldrh	r3, [r7, #24]
 8002c0c:	3310      	adds	r3, #16
 8002c0e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8002c10:	8b3a      	ldrh	r2, [r7, #24]
 8002c12:	88bb      	ldrh	r3, [r7, #4]
 8002c14:	3303      	adds	r3, #3
 8002c16:	f023 0303 	bic.w	r3, r3, #3
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d306      	bcc.n	8002c2c <pbuf_alloc+0x14c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8002c1e:	8afa      	ldrh	r2, [r7, #22]
 8002c20:	88bb      	ldrh	r3, [r7, #4]
 8002c22:	3303      	adds	r3, #3
 8002c24:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d201      	bcs.n	8002c30 <pbuf_alloc+0x150>
        return NULL;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	e02d      	b.n	8002c8c <pbuf_alloc+0x1ac>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8002c30:	8afb      	ldrh	r3, [r7, #22]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7ff fb14 	bl	8002260 <mem_malloc>
 8002c38:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d101      	bne.n	8002c44 <pbuf_alloc+0x164>
        return NULL;
 8002c40:	2300      	movs	r3, #0
 8002c42:	e023      	b.n	8002c8c <pbuf_alloc+0x1ac>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8002c44:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002c46:	3310      	adds	r3, #16
 8002c48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c4a:	4413      	add	r3, r2
 8002c4c:	3303      	adds	r3, #3
 8002c4e:	f023 0303 	bic.w	r3, r3, #3
 8002c52:	4618      	mov	r0, r3
 8002c54:	88b9      	ldrh	r1, [r7, #4]
 8002c56:	88ba      	ldrh	r2, [r7, #4]
 8002c58:	2300      	movs	r3, #0
 8002c5a:	9301      	str	r3, [sp, #4]
 8002c5c:	887b      	ldrh	r3, [r7, #2]
 8002c5e:	9300      	str	r3, [sp, #0]
 8002c60:	460b      	mov	r3, r1
 8002c62:	4601      	mov	r1, r0
 8002c64:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002c66:	f7ff ff11 	bl	8002a8c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f003 0303 	and.w	r3, r3, #3
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d008      	beq.n	8002c88 <pbuf_alloc+0x1a8>
 8002c76:	4809      	ldr	r0, [pc, #36]	@ (8002c9c <pbuf_alloc+0x1bc>)
 8002c78:	f007 fff4 	bl	800ac64 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8002c7c:	e004      	b.n	8002c88 <pbuf_alloc+0x1a8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8002c7e:	4808      	ldr	r0, [pc, #32]	@ (8002ca0 <pbuf_alloc+0x1c0>)
 8002c80:	f007 fff0 	bl	800ac64 <iprintf>
      return NULL;
 8002c84:	2300      	movs	r3, #0
 8002c86:	e001      	b.n	8002c8c <pbuf_alloc+0x1ac>
      break;
 8002c88:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8002c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3728      	adds	r7, #40	@ 0x28
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	0800bca0 	.word	0x0800bca0
 8002c98:	0800bcd0 	.word	0x0800bcd0
 8002c9c:	0800bd04 	.word	0x0800bd04
 8002ca0:	0800bd30 	.word	0x0800bd30

08002ca4 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b086      	sub	sp, #24
 8002ca8:	af02      	add	r7, sp, #8
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	460b      	mov	r3, r1
 8002cae:	807b      	strh	r3, [r7, #2]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8002cb4:	883b      	ldrh	r3, [r7, #0]
 8002cb6:	2b41      	cmp	r3, #65	@ 0x41
 8002cb8:	d005      	beq.n	8002cc6 <pbuf_alloc_reference+0x22>
 8002cba:	883b      	ldrh	r3, [r7, #0]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d002      	beq.n	8002cc6 <pbuf_alloc_reference+0x22>
 8002cc0:	480d      	ldr	r0, [pc, #52]	@ (8002cf8 <pbuf_alloc_reference+0x54>)
 8002cc2:	f007 ffcf 	bl	800ac64 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8002cc6:	2007      	movs	r0, #7
 8002cc8:	f7ff fc18 	bl	80024fc <memp_malloc>
 8002ccc:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d101      	bne.n	8002cd8 <pbuf_alloc_reference+0x34>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	e00b      	b.n	8002cf0 <pbuf_alloc_reference+0x4c>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8002cd8:	8879      	ldrh	r1, [r7, #2]
 8002cda:	887a      	ldrh	r2, [r7, #2]
 8002cdc:	2300      	movs	r3, #0
 8002cde:	9301      	str	r3, [sp, #4]
 8002ce0:	883b      	ldrh	r3, [r7, #0]
 8002ce2:	9300      	str	r3, [sp, #0]
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	6879      	ldr	r1, [r7, #4]
 8002ce8:	68f8      	ldr	r0, [r7, #12]
 8002cea:	f7ff fecf 	bl	8002a8c <pbuf_init_alloced_pbuf>
  return p;
 8002cee:	68fb      	ldr	r3, [r7, #12]
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3710      	adds	r7, #16
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	0800bd4c 	.word	0x0800bd4c

08002cfc <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b088      	sub	sp, #32
 8002d00:	af02      	add	r7, sp, #8
 8002d02:	607b      	str	r3, [r7, #4]
 8002d04:	4603      	mov	r3, r0
 8002d06:	73fb      	strb	r3, [r7, #15]
 8002d08:	460b      	mov	r3, r1
 8002d0a:	81bb      	strh	r3, [r7, #12]
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8002d10:	7bfb      	ldrb	r3, [r7, #15]
 8002d12:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8002d14:	8a7b      	ldrh	r3, [r7, #18]
 8002d16:	3303      	adds	r3, #3
 8002d18:	f023 0203 	bic.w	r2, r3, #3
 8002d1c:	89bb      	ldrh	r3, [r7, #12]
 8002d1e:	441a      	add	r2, r3
 8002d20:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d901      	bls.n	8002d2a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8002d26:	2300      	movs	r3, #0
 8002d28:	e018      	b.n	8002d5c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8002d2a:	6a3b      	ldr	r3, [r7, #32]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d007      	beq.n	8002d40 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8002d30:	8a7b      	ldrh	r3, [r7, #18]
 8002d32:	3303      	adds	r3, #3
 8002d34:	f023 0303 	bic.w	r3, r3, #3
 8002d38:	6a3a      	ldr	r2, [r7, #32]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	617b      	str	r3, [r7, #20]
 8002d3e:	e001      	b.n	8002d44 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8002d40:	2300      	movs	r3, #0
 8002d42:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	89b9      	ldrh	r1, [r7, #12]
 8002d48:	89ba      	ldrh	r2, [r7, #12]
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	9301      	str	r3, [sp, #4]
 8002d4e:	897b      	ldrh	r3, [r7, #10]
 8002d50:	9300      	str	r3, [sp, #0]
 8002d52:	460b      	mov	r3, r1
 8002d54:	6979      	ldr	r1, [r7, #20]
 8002d56:	f7ff fe99 	bl	8002a8c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8002d5a:	687b      	ldr	r3, [r7, #4]
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3718      	adds	r7, #24
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b086      	sub	sp, #24
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d102      	bne.n	8002d7c <pbuf_realloc+0x18>
 8002d76:	4837      	ldr	r0, [pc, #220]	@ (8002e54 <pbuf_realloc+0xf0>)
 8002d78:	f007 ff74 	bl	800ac64 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	891b      	ldrh	r3, [r3, #8]
 8002d80:	887a      	ldrh	r2, [r7, #2]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d262      	bcs.n	8002e4c <pbuf_realloc+0xe8>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	891a      	ldrh	r2, [r3, #8]
 8002d8a:	887b      	ldrh	r3, [r7, #2]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	823b      	strh	r3, [r7, #16]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8002d90:	887b      	ldrh	r3, [r7, #2]
 8002d92:	827b      	strh	r3, [r7, #18]
  q = p;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8002d98:	e014      	b.n	8002dc4 <pbuf_realloc+0x60>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	895b      	ldrh	r3, [r3, #10]
 8002d9e:	8a7a      	ldrh	r2, [r7, #18]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	891a      	ldrh	r2, [r3, #8]
 8002da8:	8a3b      	ldrh	r3, [r7, #16]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	b29a      	uxth	r2, r3
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d102      	bne.n	8002dc4 <pbuf_realloc+0x60>
 8002dbe:	4826      	ldr	r0, [pc, #152]	@ (8002e58 <pbuf_realloc+0xf4>)
 8002dc0:	f007 ff50 	bl	800ac64 <iprintf>
  while (rem_len > q->len) {
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	895b      	ldrh	r3, [r3, #10]
 8002dc8:	8a7a      	ldrh	r2, [r7, #18]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d8e5      	bhi.n	8002d9a <pbuf_realloc+0x36>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	7b1b      	ldrb	r3, [r3, #12]
 8002dd2:	f003 030f 	and.w	r3, r3, #15
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d124      	bne.n	8002e24 <pbuf_realloc+0xc0>
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	895b      	ldrh	r3, [r3, #10]
 8002dde:	8a7a      	ldrh	r2, [r7, #18]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d01f      	beq.n	8002e24 <pbuf_realloc+0xc0>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	7b5b      	ldrb	r3, [r3, #13]
 8002de8:	f003 0302 	and.w	r3, r3, #2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d119      	bne.n	8002e24 <pbuf_realloc+0xc0>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    struct pbuf *r = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	685a      	ldr	r2, [r3, #4]
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	b29a      	uxth	r2, r3
 8002dfa:	8a7b      	ldrh	r3, [r7, #18]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	4619      	mov	r1, r3
 8002e02:	6978      	ldr	r0, [r7, #20]
 8002e04:	f7ff f944 	bl	8002090 <mem_trim>
 8002e08:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned r == NULL", r != NULL);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d102      	bne.n	8002e16 <pbuf_realloc+0xb2>
 8002e10:	4812      	ldr	r0, [pc, #72]	@ (8002e5c <pbuf_realloc+0xf8>)
 8002e12:	f007 ff27 	bl	800ac64 <iprintf>
    /* help to detect faulty overridden implementation of mem_trim */
    LWIP_ASSERT("mem_trim returned r != q", r == q);
 8002e16:	68fa      	ldr	r2, [r7, #12]
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d002      	beq.n	8002e24 <pbuf_realloc+0xc0>
 8002e1e:	4810      	ldr	r0, [pc, #64]	@ (8002e60 <pbuf_realloc+0xfc>)
 8002e20:	f007 ff20 	bl	800ac64 <iprintf>
    LWIP_UNUSED_ARG(r);
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	8a7a      	ldrh	r2, [r7, #18]
 8002e28:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	895a      	ldrh	r2, [r3, #10]
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d004      	beq.n	8002e44 <pbuf_realloc+0xe0>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f000 f8f4 	bl	800302c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	2200      	movs	r2, #0
 8002e48:	601a      	str	r2, [r3, #0]
 8002e4a:	e000      	b.n	8002e4e <pbuf_realloc+0xea>
    return;
 8002e4c:	bf00      	nop

}
 8002e4e:	3718      	adds	r7, #24
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	0800bd60 	.word	0x0800bd60
 8002e58:	0800bd78 	.word	0x0800bd78
 8002e5c:	0800bd90 	.word	0x0800bd90
 8002e60:	0800bdac 	.word	0x0800bdac

08002e64 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b086      	sub	sp, #24
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d102      	bne.n	8002e7e <pbuf_add_header_impl+0x1a>
 8002e78:	4829      	ldr	r0, [pc, #164]	@ (8002f20 <pbuf_add_header_impl+0xbc>)
 8002e7a:	f007 fef3 	bl	800ac64 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d003      	beq.n	8002e8c <pbuf_add_header_impl+0x28>
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e8a:	d301      	bcc.n	8002e90 <pbuf_add_header_impl+0x2c>
    return 1;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e043      	b.n	8002f18 <pbuf_add_header_impl+0xb4>
  }
  if (header_size_increment == 0) {
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d101      	bne.n	8002e9a <pbuf_add_header_impl+0x36>
    return 0;
 8002e96:	2300      	movs	r3, #0
 8002e98:	e03e      	b.n	8002f18 <pbuf_add_header_impl+0xb4>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	891a      	ldrh	r2, [r3, #8]
 8002ea2:	8a7b      	ldrh	r3, [r7, #18]
 8002ea4:	4413      	add	r3, r2
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	8a7a      	ldrh	r2, [r7, #18]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d901      	bls.n	8002eb2 <pbuf_add_header_impl+0x4e>
    return 1;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e032      	b.n	8002f18 <pbuf_add_header_impl+0xb4>
  }

  type_internal = p->type_internal;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	7b1b      	ldrb	r3, [r3, #12]
 8002eb6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8002eb8:	8a3b      	ldrh	r3, [r7, #16]
 8002eba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00c      	beq.n	8002edc <pbuf_add_header_impl+0x78>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	685a      	ldr	r2, [r3, #4]
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	425b      	negs	r3, r3
 8002eca:	4413      	add	r3, r2
 8002ecc:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	3310      	adds	r3, #16
 8002ed2:	697a      	ldr	r2, [r7, #20]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d20d      	bcs.n	8002ef4 <pbuf_add_header_impl+0x90>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e01d      	b.n	8002f18 <pbuf_add_header_impl+0xb4>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8002edc:	79fb      	ldrb	r3, [r7, #7]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d006      	beq.n	8002ef0 <pbuf_add_header_impl+0x8c>
      payload = (u8_t *)p->payload - header_size_increment;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	685a      	ldr	r2, [r3, #4]
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	425b      	negs	r3, r3
 8002eea:	4413      	add	r3, r2
 8002eec:	617b      	str	r3, [r7, #20]
 8002eee:	e001      	b.n	8002ef4 <pbuf_add_header_impl+0x90>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e011      	b.n	8002f18 <pbuf_add_header_impl+0xb4>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	697a      	ldr	r2, [r7, #20]
 8002ef8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	895a      	ldrh	r2, [r3, #10]
 8002efe:	8a7b      	ldrh	r3, [r7, #18]
 8002f00:	4413      	add	r3, r2
 8002f02:	b29a      	uxth	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	891a      	ldrh	r2, [r3, #8]
 8002f0c:	8a7b      	ldrh	r3, [r7, #18]
 8002f0e:	4413      	add	r3, r2
 8002f10:	b29a      	uxth	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	811a      	strh	r2, [r3, #8]


  return 0;
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3718      	adds	r7, #24
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	0800bdc8 	.word	0x0800bdc8

08002f24 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8002f2e:	2200      	movs	r2, #0
 8002f30:	6839      	ldr	r1, [r7, #0]
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f7ff ff96 	bl	8002e64 <pbuf_add_header_impl>
 8002f38:	4603      	mov	r3, r0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
	...

08002f44 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d102      	bne.n	8002f5a <pbuf_remove_header+0x16>
 8002f54:	481a      	ldr	r0, [pc, #104]	@ (8002fc0 <pbuf_remove_header+0x7c>)
 8002f56:	f007 fe85 	bl	800ac64 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d003      	beq.n	8002f68 <pbuf_remove_header+0x24>
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f66:	d301      	bcc.n	8002f6c <pbuf_remove_header+0x28>
    return 1;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e025      	b.n	8002fb8 <pbuf_remove_header+0x74>
  }
  if (header_size_decrement == 0) {
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d101      	bne.n	8002f76 <pbuf_remove_header+0x32>
    return 0;
 8002f72:	2300      	movs	r3, #0
 8002f74:	e020      	b.n	8002fb8 <pbuf_remove_header+0x74>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	895b      	ldrh	r3, [r3, #10]
 8002f7e:	89fa      	ldrh	r2, [r7, #14]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d901      	bls.n	8002f88 <pbuf_remove_header+0x44>
 8002f84:	2301      	movs	r3, #1
 8002f86:	e017      	b.n	8002fb8 <pbuf_remove_header+0x74>

  /* remember current payload pointer */
  payload = p->payload;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685a      	ldr	r2, [r3, #4]
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	441a      	add	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	895a      	ldrh	r2, [r3, #10]
 8002f9e:	89fb      	ldrh	r3, [r7, #14]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	891a      	ldrh	r2, [r3, #8]
 8002fac:	89fb      	ldrh	r3, [r7, #14]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	b29a      	uxth	r2, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3710      	adds	r7, #16
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	0800bdc8 	.word	0x0800bdc8

08002fc4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	460b      	mov	r3, r1
 8002fce:	807b      	strh	r3, [r7, #2]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8002fd4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	da08      	bge.n	8002fee <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8002fdc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002fe0:	425b      	negs	r3, r3
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f7ff ffad 	bl	8002f44 <pbuf_remove_header>
 8002fea:	4603      	mov	r3, r0
 8002fec:	e007      	b.n	8002ffe <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8002fee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002ff2:	787a      	ldrb	r2, [r7, #1]
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f7ff ff34 	bl	8002e64 <pbuf_add_header_impl>
 8002ffc:	4603      	mov	r3, r0
  }
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3708      	adds	r7, #8
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8003006:	b580      	push	{r7, lr}
 8003008:	b082      	sub	sp, #8
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
 800300e:	460b      	mov	r3, r1
 8003010:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8003012:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003016:	2201      	movs	r2, #1
 8003018:	4619      	mov	r1, r3
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f7ff ffd2 	bl	8002fc4 <pbuf_header_impl>
 8003020:	4603      	mov	r3, r0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3708      	adds	r7, #8
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
	...

0800302c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b086      	sub	sp, #24
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d107      	bne.n	800304a <pbuf_free+0x1e>
    LWIP_ASSERT("p != NULL", p != NULL);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d102      	bne.n	8003046 <pbuf_free+0x1a>
 8003040:	4830      	ldr	r0, [pc, #192]	@ (8003104 <pbuf_free+0xd8>)
 8003042:	f007 fe0f 	bl	800ac64 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8003046:	2300      	movs	r3, #0
 8003048:	e057      	b.n	80030fa <pbuf_free+0xce>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800304a:	2300      	movs	r3, #0
 800304c:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800304e:	e050      	b.n	80030f2 <pbuf_free+0xc6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	7b9b      	ldrb	r3, [r3, #14]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d102      	bne.n	800305e <pbuf_free+0x32>
 8003058:	482b      	ldr	r0, [pc, #172]	@ (8003108 <pbuf_free+0xdc>)
 800305a:	f007 fe03 	bl	800ac64 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	7b9b      	ldrb	r3, [r3, #14]
 8003062:	3b01      	subs	r3, #1
 8003064:	b2da      	uxtb	r2, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	739a      	strb	r2, [r3, #14]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	7b9b      	ldrb	r3, [r3, #14]
 800306e:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8003070:	7dbb      	ldrb	r3, [r7, #22]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d13b      	bne.n	80030ee <pbuf_free+0xc2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	7b1b      	ldrb	r3, [r3, #12]
 8003080:	f003 030f 	and.w	r3, r3, #15
 8003084:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	7b5b      	ldrb	r3, [r3, #13]
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d00d      	beq.n	80030ae <pbuf_free+0x82>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d102      	bne.n	80030a4 <pbuf_free+0x78>
 800309e:	481b      	ldr	r0, [pc, #108]	@ (800310c <pbuf_free+0xe0>)
 80030a0:	f007 fde0 	bl	800ac64 <iprintf>
        pc->custom_free_function(p);
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	691b      	ldr	r3, [r3, #16]
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	4798      	blx	r3
 80030ac:	e019      	b.n	80030e2 <pbuf_free+0xb6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80030ae:	7bfb      	ldrb	r3, [r7, #15]
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d104      	bne.n	80030be <pbuf_free+0x92>
          memp_free(MEMP_PBUF_POOL, p);
 80030b4:	6879      	ldr	r1, [r7, #4]
 80030b6:	2008      	movs	r0, #8
 80030b8:	f7ff fa58 	bl	800256c <memp_free>
 80030bc:	e011      	b.n	80030e2 <pbuf_free+0xb6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80030be:	7bfb      	ldrb	r3, [r7, #15]
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d104      	bne.n	80030ce <pbuf_free+0xa2>
          memp_free(MEMP_PBUF, p);
 80030c4:	6879      	ldr	r1, [r7, #4]
 80030c6:	2007      	movs	r0, #7
 80030c8:	f7ff fa50 	bl	800256c <memp_free>
 80030cc:	e009      	b.n	80030e2 <pbuf_free+0xb6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80030ce:	7bfb      	ldrb	r3, [r7, #15]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d103      	bne.n	80030dc <pbuf_free+0xb0>
          mem_free(p);
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f7fe ff85 	bl	8001fe4 <mem_free>
 80030da:	e002      	b.n	80030e2 <pbuf_free+0xb6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80030dc:	480c      	ldr	r0, [pc, #48]	@ (8003110 <pbuf_free+0xe4>)
 80030de:	f007 fdc1 	bl	800ac64 <iprintf>
        }
      }
      count++;
 80030e2:	7dfb      	ldrb	r3, [r7, #23]
 80030e4:	3301      	adds	r3, #1
 80030e6:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	607b      	str	r3, [r7, #4]
 80030ec:	e001      	b.n	80030f2 <pbuf_free+0xc6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80030ee:	2300      	movs	r3, #0
 80030f0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d1ab      	bne.n	8003050 <pbuf_free+0x24>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80030f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3718      	adds	r7, #24
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	0800bdc8 	.word	0x0800bdc8
 8003108:	0800bdd4 	.word	0x0800bdd4
 800310c:	0800bdec 	.word	0x0800bdec
 8003110:	0800be10 	.word	0x0800be10

08003114 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8003114:	b480      	push	{r7}
 8003116:	b085      	sub	sp, #20
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800311c:	2300      	movs	r3, #0
 800311e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8003120:	e005      	b.n	800312e <pbuf_clen+0x1a>
    ++len;
 8003122:	89fb      	ldrh	r3, [r7, #14]
 8003124:	3301      	adds	r3, #1
 8003126:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d1f6      	bne.n	8003122 <pbuf_clen+0xe>
  }
  return len;
 8003134:	89fb      	ldrh	r3, [r7, #14]
}
 8003136:	4618      	mov	r0, r3
 8003138:	3714      	adds	r7, #20
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
	...

08003144 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00c      	beq.n	800316c <pbuf_ref+0x28>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	7b9b      	ldrb	r3, [r3, #14]
 8003156:	3301      	adds	r3, #1
 8003158:	b2da      	uxtb	r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	7b9b      	ldrb	r3, [r3, #14]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d102      	bne.n	800316c <pbuf_ref+0x28>
 8003166:	4803      	ldr	r0, [pc, #12]	@ (8003174 <pbuf_ref+0x30>)
 8003168:	f007 fd7c 	bl	800ac64 <iprintf>
  }
}
 800316c:	bf00      	nop
 800316e:	3708      	adds	r7, #8
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	0800be24 	.word	0x0800be24

08003178 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d02f      	beq.n	80031e8 <pbuf_cat+0x70>
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d02c      	beq.n	80031e8 <pbuf_cat+0x70>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	60fb      	str	r3, [r7, #12]
 8003192:	e00a      	b.n	80031aa <pbuf_cat+0x32>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	891a      	ldrh	r2, [r3, #8]
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	891b      	ldrh	r3, [r3, #8]
 800319c:	4413      	add	r3, r2
 800319e:	b29a      	uxth	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	60fb      	str	r3, [r7, #12]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d1f0      	bne.n	8003194 <pbuf_cat+0x1c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	891a      	ldrh	r2, [r3, #8]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	895b      	ldrh	r3, [r3, #10]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d002      	beq.n	80031c4 <pbuf_cat+0x4c>
 80031be:	480c      	ldr	r0, [pc, #48]	@ (80031f0 <pbuf_cat+0x78>)
 80031c0:	f007 fd50 	bl	800ac64 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d002      	beq.n	80031d2 <pbuf_cat+0x5a>
 80031cc:	4809      	ldr	r0, [pc, #36]	@ (80031f4 <pbuf_cat+0x7c>)
 80031ce:	f007 fd49 	bl	800ac64 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	891a      	ldrh	r2, [r3, #8]
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	891b      	ldrh	r3, [r3, #8]
 80031da:	4413      	add	r3, r2
 80031dc:	b29a      	uxth	r2, r3
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	683a      	ldr	r2, [r7, #0]
 80031e6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80031e8:	3710      	adds	r7, #16
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	0800be38 	.word	0x0800be38
 80031f4:	0800be68 	.word	0x0800be68

080031f8 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8003202:	6839      	ldr	r1, [r7, #0]
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f7ff ffb7 	bl	8003178 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800320a:	6838      	ldr	r0, [r7, #0]
 800320c:	f7ff ff9a 	bl	8003144 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8003210:	bf00      	nop
 8003212:	3708      	adds	r7, #8
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <pbuf_copy>:
 *                 enough to hold p_from
 *         ERR_VAL if any of the pbufs are part of a queue
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  LWIP_ERROR("pbuf_copy: invalid source", p_from != NULL, return ERR_ARG;);
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d102      	bne.n	800322e <pbuf_copy+0x16>
 8003228:	f06f 030f 	mvn.w	r3, #15
 800322c:	e007      	b.n	800323e <pbuf_copy+0x26>
  return pbuf_copy_partial_pbuf(p_to, p_from, p_from->tot_len, 0);
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	891a      	ldrh	r2, [r3, #8]
 8003232:	2300      	movs	r3, #0
 8003234:	6839      	ldr	r1, [r7, #0]
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 f806 	bl	8003248 <pbuf_copy_partial_pbuf>
 800323c:	4603      	mov	r3, r0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3708      	adds	r7, #8
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
	...

08003248 <pbuf_copy_partial_pbuf>:
 *                 or p_to is not big enough to hold copy_len at offset
 *         ERR_VAL if any of the pbufs are part of a queue
 */
err_t
pbuf_copy_partial_pbuf(struct pbuf *p_to, const struct pbuf *p_from, u16_t copy_len, u16_t offset)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b088      	sub	sp, #32
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	4611      	mov	r1, r2
 8003254:	461a      	mov	r2, r3
 8003256:	460b      	mov	r3, r1
 8003258:	80fb      	strh	r3, [r7, #6]
 800325a:	4613      	mov	r3, r2
 800325c:	80bb      	strh	r3, [r7, #4]
  size_t offset_to = offset, offset_from = 0, len;
 800325e:	88bb      	ldrh	r3, [r7, #4]
 8003260:	61fb      	str	r3, [r7, #28]
 8003262:	2300      	movs	r3, #0
 8003264:	61bb      	str	r3, [r7, #24]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy_partial_pbuf(%p, %p, %"U16_F", %"U16_F")\n",
              (const void *)p_to, (const void *)p_from, copy_len, offset));

  /* is the copy_len in range? */
  LWIP_ERROR("pbuf_copy_partial_pbuf: copy_len bigger than source", ((p_from != NULL) &&
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d004      	beq.n	8003276 <pbuf_copy_partial_pbuf+0x2e>
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	891b      	ldrh	r3, [r3, #8]
 8003270:	88fa      	ldrh	r2, [r7, #6]
 8003272:	429a      	cmp	r2, r3
 8003274:	d902      	bls.n	800327c <pbuf_copy_partial_pbuf+0x34>
 8003276:	f06f 030f 	mvn.w	r3, #15
 800327a:	e0a4      	b.n	80033c6 <pbuf_copy_partial_pbuf+0x17e>
             (p_from->tot_len >= copy_len)), return ERR_ARG;);
  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy_partial_pbuf: target not big enough", ((p_to != NULL) &&
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d007      	beq.n	8003292 <pbuf_copy_partial_pbuf+0x4a>
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	891b      	ldrh	r3, [r3, #8]
 8003286:	4619      	mov	r1, r3
 8003288:	88ba      	ldrh	r2, [r7, #4]
 800328a:	88fb      	ldrh	r3, [r7, #6]
 800328c:	4413      	add	r3, r2
 800328e:	4299      	cmp	r1, r3
 8003290:	da02      	bge.n	8003298 <pbuf_copy_partial_pbuf+0x50>
 8003292:	f06f 030f 	mvn.w	r3, #15
 8003296:	e096      	b.n	80033c6 <pbuf_copy_partial_pbuf+0x17e>
             (p_to->tot_len >= (offset + copy_len))), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	895b      	ldrh	r3, [r3, #10]
 800329c:	461a      	mov	r2, r3
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	1ad2      	subs	r2, r2, r3
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	895b      	ldrh	r3, [r3, #10]
 80032a6:	4619      	mov	r1, r3
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	1acb      	subs	r3, r1, r3
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d306      	bcc.n	80032be <pbuf_copy_partial_pbuf+0x76>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	895b      	ldrh	r3, [r3, #10]
 80032b4:	461a      	mov	r2, r3
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	617b      	str	r3, [r7, #20]
 80032bc:	e005      	b.n	80032ca <pbuf_copy_partial_pbuf+0x82>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	895b      	ldrh	r3, [r3, #10]
 80032c2:	461a      	mov	r2, r3
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	617b      	str	r3, [r7, #20]
    }
    len = LWIP_MIN(copy_len, len);
 80032ca:	88fb      	ldrh	r3, [r7, #6]
 80032cc:	697a      	ldr	r2, [r7, #20]
 80032ce:	4293      	cmp	r3, r2
 80032d0:	bf28      	it	cs
 80032d2:	4613      	movcs	r3, r2
 80032d4:	617b      	str	r3, [r7, #20]
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	685a      	ldr	r2, [r3, #4]
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	18d0      	adds	r0, r2, r3
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	685a      	ldr	r2, [r3, #4]
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	4413      	add	r3, r2
 80032e6:	697a      	ldr	r2, [r7, #20]
 80032e8:	4619      	mov	r1, r3
 80032ea:	f007 fd9c 	bl	800ae26 <memcpy>
    offset_to += len;
 80032ee:	69fa      	ldr	r2, [r7, #28]
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	4413      	add	r3, r2
 80032f4:	61fb      	str	r3, [r7, #28]
    offset_from += len;
 80032f6:	69ba      	ldr	r2, [r7, #24]
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	4413      	add	r3, r2
 80032fc:	61bb      	str	r3, [r7, #24]
    copy_len = (u16_t)(copy_len - len);
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	b29b      	uxth	r3, r3
 8003302:	88fa      	ldrh	r2, [r7, #6]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	80fb      	strh	r3, [r7, #6]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	895b      	ldrh	r3, [r3, #10]
 800330c:	461a      	mov	r2, r3
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	4293      	cmp	r3, r2
 8003312:	d902      	bls.n	800331a <pbuf_copy_partial_pbuf+0xd2>
 8003314:	482e      	ldr	r0, [pc, #184]	@ (80033d0 <pbuf_copy_partial_pbuf+0x188>)
 8003316:	f007 fca5 	bl	800ac64 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	895b      	ldrh	r3, [r3, #10]
 800331e:	461a      	mov	r2, r3
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	4293      	cmp	r3, r2
 8003324:	d902      	bls.n	800332c <pbuf_copy_partial_pbuf+0xe4>
 8003326:	482b      	ldr	r0, [pc, #172]	@ (80033d4 <pbuf_copy_partial_pbuf+0x18c>)
 8003328:	f007 fc9c 	bl	800ac64 <iprintf>
    if (offset_from >= p_from->len) {
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	895b      	ldrh	r3, [r3, #10]
 8003330:	461a      	mov	r2, r3
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	4293      	cmp	r3, r2
 8003336:	d30d      	bcc.n	8003354 <pbuf_copy_partial_pbuf+0x10c>
      /* on to next p_from (if any) */
      offset_from = 0;
 8003338:	2300      	movs	r3, #0
 800333a:	61bb      	str	r3, [r7, #24]
      p_from = p_from->next;
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	60bb      	str	r3, [r7, #8]
      LWIP_ERROR("p_from != NULL", (p_from != NULL) || (copy_len == 0), return ERR_ARG;);
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d105      	bne.n	8003354 <pbuf_copy_partial_pbuf+0x10c>
 8003348:	88fb      	ldrh	r3, [r7, #6]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d002      	beq.n	8003354 <pbuf_copy_partial_pbuf+0x10c>
 800334e:	f06f 030f 	mvn.w	r3, #15
 8003352:	e038      	b.n	80033c6 <pbuf_copy_partial_pbuf+0x17e>
    }
    if (offset_to == p_to->len) {
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	895b      	ldrh	r3, [r3, #10]
 8003358:	461a      	mov	r2, r3
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	4293      	cmp	r3, r2
 800335e:	d10d      	bne.n	800337c <pbuf_copy_partial_pbuf+0x134>
      /* on to next p_to (if any) */
      offset_to = 0;
 8003360:	2300      	movs	r3, #0
 8003362:	61fb      	str	r3, [r7, #28]
      p_to = p_to->next;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	60fb      	str	r3, [r7, #12]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (copy_len == 0), return ERR_ARG;);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d105      	bne.n	800337c <pbuf_copy_partial_pbuf+0x134>
 8003370:	88fb      	ldrh	r3, [r7, #6]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d002      	beq.n	800337c <pbuf_copy_partial_pbuf+0x134>
 8003376:	f06f 030f 	mvn.w	r3, #15
 800337a:	e024      	b.n	80033c6 <pbuf_copy_partial_pbuf+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d00c      	beq.n	800339c <pbuf_copy_partial_pbuf+0x154>
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	895a      	ldrh	r2, [r3, #10]
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	891b      	ldrh	r3, [r3, #8]
 800338a:	429a      	cmp	r2, r3
 800338c:	d106      	bne.n	800339c <pbuf_copy_partial_pbuf+0x154>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy_partial_pbuf() does not allow packet queues!",
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d002      	beq.n	800339c <pbuf_copy_partial_pbuf+0x154>
 8003396:	f06f 0305 	mvn.w	r3, #5
 800339a:	e014      	b.n	80033c6 <pbuf_copy_partial_pbuf+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00c      	beq.n	80033bc <pbuf_copy_partial_pbuf+0x174>
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	895a      	ldrh	r2, [r3, #10]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	891b      	ldrh	r3, [r3, #8]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d106      	bne.n	80033bc <pbuf_copy_partial_pbuf+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy_partial_pbuf() does not allow packet queues!",
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d002      	beq.n	80033bc <pbuf_copy_partial_pbuf+0x174>
 80033b6:	f06f 0305 	mvn.w	r3, #5
 80033ba:	e004      	b.n	80033c6 <pbuf_copy_partial_pbuf+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (copy_len);
 80033bc:	88fb      	ldrh	r3, [r7, #6]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	f47f af6a 	bne.w	8003298 <pbuf_copy_partial_pbuf+0x50>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy_partial_pbuf: copy complete.\n"));
  return ERR_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3720      	adds	r7, #32
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	0800beb4 	.word	0x0800beb4
 80033d4:	0800becc 	.word	0x0800becc

080033d8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b088      	sub	sp, #32
 80033dc:	af00      	add	r7, sp, #0
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	4611      	mov	r1, r2
 80033e4:	461a      	mov	r2, r3
 80033e6:	460b      	mov	r3, r1
 80033e8:	80fb      	strh	r3, [r7, #6]
 80033ea:	4613      	mov	r3, r2
 80033ec:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80033ee:	2300      	movs	r3, #0
 80033f0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80033f2:	2300      	movs	r3, #0
 80033f4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d101      	bne.n	8003400 <pbuf_copy_partial+0x28>
 80033fc:	2300      	movs	r3, #0
 80033fe:	e043      	b.n	8003488 <pbuf_copy_partial+0xb0>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <pbuf_copy_partial+0x32>
 8003406:	2300      	movs	r3, #0
 8003408:	e03e      	b.n	8003488 <pbuf_copy_partial+0xb0>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	61fb      	str	r3, [r7, #28]
 800340e:	e034      	b.n	800347a <pbuf_copy_partial+0xa2>
    if ((offset != 0) && (offset >= p->len)) {
 8003410:	88bb      	ldrh	r3, [r7, #4]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00a      	beq.n	800342c <pbuf_copy_partial+0x54>
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	895b      	ldrh	r3, [r3, #10]
 800341a:	88ba      	ldrh	r2, [r7, #4]
 800341c:	429a      	cmp	r2, r3
 800341e:	d305      	bcc.n	800342c <pbuf_copy_partial+0x54>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	895b      	ldrh	r3, [r3, #10]
 8003424:	88ba      	ldrh	r2, [r7, #4]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	80bb      	strh	r3, [r7, #4]
 800342a:	e023      	b.n	8003474 <pbuf_copy_partial+0x9c>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	895a      	ldrh	r2, [r3, #10]
 8003430:	88bb      	ldrh	r3, [r7, #4]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8003436:	8b3a      	ldrh	r2, [r7, #24]
 8003438:	88fb      	ldrh	r3, [r7, #6]
 800343a:	429a      	cmp	r2, r3
 800343c:	d901      	bls.n	8003442 <pbuf_copy_partial+0x6a>
        buf_copy_len = len;
 800343e:	88fb      	ldrh	r3, [r7, #6]
 8003440:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8003442:	8b7b      	ldrh	r3, [r7, #26]
 8003444:	68ba      	ldr	r2, [r7, #8]
 8003446:	18d0      	adds	r0, r2, r3
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	685a      	ldr	r2, [r3, #4]
 800344c:	88bb      	ldrh	r3, [r7, #4]
 800344e:	4413      	add	r3, r2
 8003450:	8b3a      	ldrh	r2, [r7, #24]
 8003452:	4619      	mov	r1, r3
 8003454:	f007 fce7 	bl	800ae26 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8003458:	8afa      	ldrh	r2, [r7, #22]
 800345a:	8b3b      	ldrh	r3, [r7, #24]
 800345c:	4413      	add	r3, r2
 800345e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8003460:	8b7a      	ldrh	r2, [r7, #26]
 8003462:	8b3b      	ldrh	r3, [r7, #24]
 8003464:	4413      	add	r3, r2
 8003466:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8003468:	88fa      	ldrh	r2, [r7, #6]
 800346a:	8b3b      	ldrh	r3, [r7, #24]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8003470:	2300      	movs	r3, #0
 8003472:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	61fb      	str	r3, [r7, #28]
 800347a:	88fb      	ldrh	r3, [r7, #6]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d002      	beq.n	8003486 <pbuf_copy_partial+0xae>
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d1c4      	bne.n	8003410 <pbuf_copy_partial+0x38>
    }
  }
  return copied_total;
 8003486:	8afb      	ldrh	r3, [r7, #22]
}
 8003488:	4618      	mov	r0, r3
 800348a:	3720      	adds	r7, #32
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	4603      	mov	r3, r0
 8003498:	603a      	str	r2, [r7, #0]
 800349a:	71fb      	strb	r3, [r7, #7]
 800349c:	460b      	mov	r3, r1
 800349e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	8919      	ldrh	r1, [r3, #8]
 80034a4:	88ba      	ldrh	r2, [r7, #4]
 80034a6:	79fb      	ldrb	r3, [r7, #7]
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7ff fb19 	bl	8002ae0 <pbuf_alloc>
 80034ae:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d101      	bne.n	80034ba <pbuf_clone+0x2a>
    return NULL;
 80034b6:	2300      	movs	r3, #0
 80034b8:	e00d      	b.n	80034d6 <pbuf_clone+0x46>
  }
  err = pbuf_copy(q, p);
 80034ba:	6839      	ldr	r1, [r7, #0]
 80034bc:	68f8      	ldr	r0, [r7, #12]
 80034be:	f7ff feab 	bl	8003218 <pbuf_copy>
 80034c2:	4603      	mov	r3, r0
 80034c4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80034c6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d002      	beq.n	80034d4 <pbuf_clone+0x44>
 80034ce:	4804      	ldr	r0, [pc, #16]	@ (80034e0 <pbuf_clone+0x50>)
 80034d0:	f007 fbc8 	bl	800ac64 <iprintf>
  return q;
 80034d4:	68fb      	ldr	r3, [r7, #12]
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3710      	adds	r7, #16
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	0800bf30 	.word	0x0800bf30

080034e4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80034e4:	b480      	push	{r7}
 80034e6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RAND */
}
 80034e8:	bf00      	nop
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
	...

080034f4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	7d1b      	ldrb	r3, [r3, #20]
 8003500:	2b01      	cmp	r3, #1
 8003502:	d102      	bne.n	800350a <tcp_free+0x16>
 8003504:	4805      	ldr	r0, [pc, #20]	@ (800351c <tcp_free+0x28>)
 8003506:	f007 fbad 	bl	800ac64 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800350a:	6879      	ldr	r1, [r7, #4]
 800350c:	2001      	movs	r0, #1
 800350e:	f7ff f82d 	bl	800256c <memp_free>
}
 8003512:	bf00      	nop
 8003514:	3708      	adds	r7, #8
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	0800bfbc 	.word	0x0800bfbc

08003520 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	7d1b      	ldrb	r3, [r3, #20]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d102      	bne.n	8003536 <tcp_free_listen+0x16>
 8003530:	4805      	ldr	r0, [pc, #20]	@ (8003548 <tcp_free_listen+0x28>)
 8003532:	f007 fb97 	bl	800ac64 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8003536:	6879      	ldr	r1, [r7, #4]
 8003538:	2002      	movs	r0, #2
 800353a:	f7ff f817 	bl	800256c <memp_free>
}
 800353e:	bf00      	nop
 8003540:	3708      	adds	r7, #8
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	0800bfd0 	.word	0x0800bfd0

0800354c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8003550:	f000 fdf0 	bl	8004134 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8003554:	4b07      	ldr	r3, [pc, #28]	@ (8003574 <tcp_tmr+0x28>)
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	3301      	adds	r3, #1
 800355a:	b2da      	uxtb	r2, r3
 800355c:	4b05      	ldr	r3, [pc, #20]	@ (8003574 <tcp_tmr+0x28>)
 800355e:	701a      	strb	r2, [r3, #0]
 8003560:	4b04      	ldr	r3, [pc, #16]	@ (8003574 <tcp_tmr+0x28>)
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	f003 0301 	and.w	r3, r3, #1
 8003568:	2b00      	cmp	r3, #0
 800356a:	d001      	beq.n	8003570 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800356c:	f000 faea 	bl	8003b44 <tcp_slowtmr>
  }
}
 8003570:	bf00      	nop
 8003572:	bd80      	pop	{r7, pc}
 8003574:	24008b21 	.word	0x24008b21

08003578 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d102      	bne.n	800358e <tcp_remove_listener+0x16>
 8003588:	480c      	ldr	r0, [pc, #48]	@ (80035bc <tcp_remove_listener+0x44>)
 800358a:	f007 fb6b 	bl	800ac64 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	60fb      	str	r3, [r7, #12]
 8003592:	e00a      	b.n	80035aa <tcp_remove_listener+0x32>
    if (pcb->listener == lpcb) {
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003598:	683a      	ldr	r2, [r7, #0]
 800359a:	429a      	cmp	r2, r3
 800359c:	d102      	bne.n	80035a4 <tcp_remove_listener+0x2c>
      pcb->listener = NULL;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2200      	movs	r2, #0
 80035a2:	679a      	str	r2, [r3, #120]	@ 0x78
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	60fb      	str	r3, [r7, #12]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d1f1      	bne.n	8003594 <tcp_remove_listener+0x1c>
    }
  }
}
 80035b0:	bf00      	nop
 80035b2:	bf00      	nop
 80035b4:	3710      	adds	r7, #16
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	0800bfec 	.word	0x0800bfec

080035c0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d102      	bne.n	80035d4 <tcp_listen_closed+0x14>
 80035ce:	4810      	ldr	r0, [pc, #64]	@ (8003610 <tcp_listen_closed+0x50>)
 80035d0:	f007 fb48 	bl	800ac64 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	7d1b      	ldrb	r3, [r3, #20]
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d002      	beq.n	80035e2 <tcp_listen_closed+0x22>
 80035dc:	480d      	ldr	r0, [pc, #52]	@ (8003614 <tcp_listen_closed+0x54>)
 80035de:	f007 fb41 	bl	800ac64 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80035e2:	2301      	movs	r3, #1
 80035e4:	60fb      	str	r3, [r7, #12]
 80035e6:	e00b      	b.n	8003600 <tcp_listen_closed+0x40>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80035e8:	4a0b      	ldr	r2, [pc, #44]	@ (8003618 <tcp_listen_closed+0x58>)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	6879      	ldr	r1, [r7, #4]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7ff ffbf 	bl	8003578 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	3301      	adds	r3, #1
 80035fe:	60fb      	str	r3, [r7, #12]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2b03      	cmp	r3, #3
 8003604:	d9f0      	bls.n	80035e8 <tcp_listen_closed+0x28>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8003606:	bf00      	nop
 8003608:	bf00      	nop
 800360a:	3710      	adds	r7, #16
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	0800c014 	.word	0x0800c014
 8003614:	0800c020 	.word	0x0800c020
 8003618:	0800d68c 	.word	0x0800d68c

0800361c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800361c:	b5b0      	push	{r4, r5, r7, lr}
 800361e:	b088      	sub	sp, #32
 8003620:	af04      	add	r7, sp, #16
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	460b      	mov	r3, r1
 8003626:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d102      	bne.n	8003634 <tcp_close_shutdown+0x18>
 800362e:	485f      	ldr	r0, [pc, #380]	@ (80037ac <tcp_close_shutdown+0x190>)
 8003630:	f007 fb18 	bl	800ac64 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8003634:	78fb      	ldrb	r3, [r7, #3]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d063      	beq.n	8003702 <tcp_close_shutdown+0xe6>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	7d1b      	ldrb	r3, [r3, #20]
 800363e:	2b04      	cmp	r3, #4
 8003640:	d003      	beq.n	800364a <tcp_close_shutdown+0x2e>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	7d1b      	ldrb	r3, [r3, #20]
 8003646:	2b07      	cmp	r3, #7
 8003648:	d15b      	bne.n	8003702 <tcp_close_shutdown+0xe6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800364e:	2b00      	cmp	r3, #0
 8003650:	d105      	bne.n	800365e <tcp_close_shutdown+0x42>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003656:	f640 3268 	movw	r2, #2920	@ 0xb68
 800365a:	4293      	cmp	r3, r2
 800365c:	d051      	beq.n	8003702 <tcp_close_shutdown+0xe6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	8b5b      	ldrh	r3, [r3, #26]
 8003662:	f003 0310 	and.w	r3, r3, #16
 8003666:	2b00      	cmp	r3, #0
 8003668:	d102      	bne.n	8003670 <tcp_close_shutdown+0x54>
 800366a:	4851      	ldr	r0, [pc, #324]	@ (80037b0 <tcp_close_shutdown+0x194>)
 800366c:	f007 fafa 	bl	800ac64 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8003678:	687d      	ldr	r5, [r7, #4]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	3304      	adds	r3, #4
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	8ad2      	ldrh	r2, [r2, #22]
 8003682:	6879      	ldr	r1, [r7, #4]
 8003684:	8b09      	ldrh	r1, [r1, #24]
 8003686:	9102      	str	r1, [sp, #8]
 8003688:	9201      	str	r2, [sp, #4]
 800368a:	9300      	str	r3, [sp, #0]
 800368c:	462b      	mov	r3, r5
 800368e:	4622      	mov	r2, r4
 8003690:	4601      	mov	r1, r0
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f004 f8c8 	bl	8007828 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f000 ffdf 	bl	800465c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800369e:	4b45      	ldr	r3, [pc, #276]	@ (80037b4 <tcp_close_shutdown+0x198>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d105      	bne.n	80036b4 <tcp_close_shutdown+0x98>
 80036a8:	4b42      	ldr	r3, [pc, #264]	@ (80037b4 <tcp_close_shutdown+0x198>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	4a41      	ldr	r2, [pc, #260]	@ (80037b4 <tcp_close_shutdown+0x198>)
 80036b0:	6013      	str	r3, [r2, #0]
 80036b2:	e013      	b.n	80036dc <tcp_close_shutdown+0xc0>
 80036b4:	4b3f      	ldr	r3, [pc, #252]	@ (80037b4 <tcp_close_shutdown+0x198>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	60fb      	str	r3, [r7, #12]
 80036ba:	e00c      	b.n	80036d6 <tcp_close_shutdown+0xba>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d104      	bne.n	80036d0 <tcp_close_shutdown+0xb4>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	68da      	ldr	r2, [r3, #12]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	60da      	str	r2, [r3, #12]
 80036ce:	e005      	b.n	80036dc <tcp_close_shutdown+0xc0>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	60fb      	str	r3, [r7, #12]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d1ef      	bne.n	80036bc <tcp_close_shutdown+0xa0>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	60da      	str	r2, [r3, #12]
 80036e2:	4b35      	ldr	r3, [pc, #212]	@ (80037b8 <tcp_close_shutdown+0x19c>)
 80036e4:	2201      	movs	r2, #1
 80036e6:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80036e8:	4b34      	ldr	r3, [pc, #208]	@ (80037bc <tcp_close_shutdown+0x1a0>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d102      	bne.n	80036f8 <tcp_close_shutdown+0xdc>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80036f2:	f002 ffd1 	bl	8006698 <tcp_trigger_input_pcb_close>
 80036f6:	e002      	b.n	80036fe <tcp_close_shutdown+0xe2>
      } else {
        tcp_free(pcb);
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f7ff fefb 	bl	80034f4 <tcp_free>
      }
      return ERR_OK;
 80036fe:	2300      	movs	r3, #0
 8003700:	e050      	b.n	80037a4 <tcp_close_shutdown+0x188>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	7d1b      	ldrb	r3, [r3, #20]
 8003706:	2b02      	cmp	r3, #2
 8003708:	d03b      	beq.n	8003782 <tcp_close_shutdown+0x166>
 800370a:	2b02      	cmp	r3, #2
 800370c:	dc44      	bgt.n	8003798 <tcp_close_shutdown+0x17c>
 800370e:	2b00      	cmp	r3, #0
 8003710:	d002      	beq.n	8003718 <tcp_close_shutdown+0xfc>
 8003712:	2b01      	cmp	r3, #1
 8003714:	d02a      	beq.n	800376c <tcp_close_shutdown+0x150>
 8003716:	e03f      	b.n	8003798 <tcp_close_shutdown+0x17c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	8adb      	ldrh	r3, [r3, #22]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d021      	beq.n	8003764 <tcp_close_shutdown+0x148>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8003720:	4b27      	ldr	r3, [pc, #156]	@ (80037c0 <tcp_close_shutdown+0x1a4>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	429a      	cmp	r2, r3
 8003728:	d105      	bne.n	8003736 <tcp_close_shutdown+0x11a>
 800372a:	4b25      	ldr	r3, [pc, #148]	@ (80037c0 <tcp_close_shutdown+0x1a4>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	4a23      	ldr	r2, [pc, #140]	@ (80037c0 <tcp_close_shutdown+0x1a4>)
 8003732:	6013      	str	r3, [r2, #0]
 8003734:	e013      	b.n	800375e <tcp_close_shutdown+0x142>
 8003736:	4b22      	ldr	r3, [pc, #136]	@ (80037c0 <tcp_close_shutdown+0x1a4>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	60bb      	str	r3, [r7, #8]
 800373c:	e00c      	b.n	8003758 <tcp_close_shutdown+0x13c>
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	429a      	cmp	r2, r3
 8003746:	d104      	bne.n	8003752 <tcp_close_shutdown+0x136>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	68da      	ldr	r2, [r3, #12]
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	60da      	str	r2, [r3, #12]
 8003750:	e005      	b.n	800375e <tcp_close_shutdown+0x142>
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	60bb      	str	r3, [r7, #8]
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d1ef      	bne.n	800373e <tcp_close_shutdown+0x122>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f7ff fec5 	bl	80034f4 <tcp_free>
      break;
 800376a:	e01a      	b.n	80037a2 <tcp_close_shutdown+0x186>
    case LISTEN:
      tcp_listen_closed(pcb);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f7ff ff27 	bl	80035c0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8003772:	6879      	ldr	r1, [r7, #4]
 8003774:	4813      	ldr	r0, [pc, #76]	@ (80037c4 <tcp_close_shutdown+0x1a8>)
 8003776:	f000 ffad 	bl	80046d4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f7ff fed0 	bl	8003520 <tcp_free_listen>
      break;
 8003780:	e00f      	b.n	80037a2 <tcp_close_shutdown+0x186>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8003782:	6879      	ldr	r1, [r7, #4]
 8003784:	480b      	ldr	r0, [pc, #44]	@ (80037b4 <tcp_close_shutdown+0x198>)
 8003786:	f000 ffa5 	bl	80046d4 <tcp_pcb_remove>
 800378a:	4b0b      	ldr	r3, [pc, #44]	@ (80037b8 <tcp_close_shutdown+0x19c>)
 800378c:	2201      	movs	r2, #1
 800378e:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f7ff feaf 	bl	80034f4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8003796:	e004      	b.n	80037a2 <tcp_close_shutdown+0x186>
    default:
      return tcp_close_shutdown_fin(pcb);
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f000 f815 	bl	80037c8 <tcp_close_shutdown_fin>
 800379e:	4603      	mov	r3, r0
 80037a0:	e000      	b.n	80037a4 <tcp_close_shutdown+0x188>
  }
  return ERR_OK;
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3710      	adds	r7, #16
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bdb0      	pop	{r4, r5, r7, pc}
 80037ac:	0800c038 	.word	0x0800c038
 80037b0:	0800c058 	.word	0x0800c058
 80037b4:	24008b18 	.word	0x24008b18
 80037b8:	24008b20 	.word	0x24008b20
 80037bc:	24008b58 	.word	0x24008b58
 80037c0:	24008b10 	.word	0x24008b10
 80037c4:	24008b14 	.word	0x24008b14

080037c8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d102      	bne.n	80037dc <tcp_close_shutdown_fin+0x14>
 80037d6:	482c      	ldr	r0, [pc, #176]	@ (8003888 <tcp_close_shutdown_fin+0xc0>)
 80037d8:	f007 fa44 	bl	800ac64 <iprintf>

  switch (pcb->state) {
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	7d1b      	ldrb	r3, [r3, #20]
 80037e0:	2b07      	cmp	r3, #7
 80037e2:	d020      	beq.n	8003826 <tcp_close_shutdown_fin+0x5e>
 80037e4:	2b07      	cmp	r3, #7
 80037e6:	dc2b      	bgt.n	8003840 <tcp_close_shutdown_fin+0x78>
 80037e8:	2b03      	cmp	r3, #3
 80037ea:	d002      	beq.n	80037f2 <tcp_close_shutdown_fin+0x2a>
 80037ec:	2b04      	cmp	r3, #4
 80037ee:	d00d      	beq.n	800380c <tcp_close_shutdown_fin+0x44>
 80037f0:	e026      	b.n	8003840 <tcp_close_shutdown_fin+0x78>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f003 f93e 	bl	8006a74 <tcp_send_fin>
 80037f8:	4603      	mov	r3, r0
 80037fa:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80037fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d11f      	bne.n	8003844 <tcp_close_shutdown_fin+0x7c>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2205      	movs	r2, #5
 8003808:	751a      	strb	r2, [r3, #20]
      }
      break;
 800380a:	e01b      	b.n	8003844 <tcp_close_shutdown_fin+0x7c>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f003 f931 	bl	8006a74 <tcp_send_fin>
 8003812:	4603      	mov	r3, r0
 8003814:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8003816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d114      	bne.n	8003848 <tcp_close_shutdown_fin+0x80>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2205      	movs	r2, #5
 8003822:	751a      	strb	r2, [r3, #20]
      }
      break;
 8003824:	e010      	b.n	8003848 <tcp_close_shutdown_fin+0x80>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f003 f924 	bl	8006a74 <tcp_send_fin>
 800382c:	4603      	mov	r3, r0
 800382e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8003830:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d109      	bne.n	800384c <tcp_close_shutdown_fin+0x84>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2209      	movs	r2, #9
 800383c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800383e:	e005      	b.n	800384c <tcp_close_shutdown_fin+0x84>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8003840:	2300      	movs	r3, #0
 8003842:	e01c      	b.n	800387e <tcp_close_shutdown_fin+0xb6>
      break;
 8003844:	bf00      	nop
 8003846:	e002      	b.n	800384e <tcp_close_shutdown_fin+0x86>
      break;
 8003848:	bf00      	nop
 800384a:	e000      	b.n	800384e <tcp_close_shutdown_fin+0x86>
      break;
 800384c:	bf00      	nop
  }

  if (err == ERR_OK) {
 800384e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d103      	bne.n	800385e <tcp_close_shutdown_fin+0x96>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f003 fa26 	bl	8006ca8 <tcp_output>
 800385c:	e00d      	b.n	800387a <tcp_close_shutdown_fin+0xb2>
  } else if (err == ERR_MEM) {
 800385e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003866:	d108      	bne.n	800387a <tcp_close_shutdown_fin+0xb2>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	8b5b      	ldrh	r3, [r3, #26]
 800386c:	f043 0308 	orr.w	r3, r3, #8
 8003870:	b29a      	uxth	r2, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8003876:	2300      	movs	r3, #0
 8003878:	e001      	b.n	800387e <tcp_close_shutdown_fin+0xb6>
  }
  return err;
 800387a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800387e:	4618      	mov	r0, r3
 8003880:	3710      	adds	r7, #16
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	0800c014 	.word	0x0800c014

0800388c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d102      	bne.n	80038a0 <tcp_close+0x14>
 800389a:	f06f 030f 	mvn.w	r3, #15
 800389e:	e00f      	b.n	80038c0 <tcp_close+0x34>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	7d1b      	ldrb	r3, [r3, #20]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d006      	beq.n	80038b6 <tcp_close+0x2a>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	8b5b      	ldrh	r3, [r3, #26]
 80038ac:	f043 0310 	orr.w	r3, r3, #16
 80038b0:	b29a      	uxth	r2, r3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80038b6:	2101      	movs	r1, #1
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f7ff feaf 	bl	800361c <tcp_close_shutdown>
 80038be:	4603      	mov	r3, r0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3708      	adds	r7, #8
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b08e      	sub	sp, #56	@ 0x38
 80038cc:	af04      	add	r7, sp, #16
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f000 808d 	beq.w	80039f4 <tcp_abandon+0x12c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	7d1b      	ldrb	r3, [r3, #20]
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d102      	bne.n	80038e8 <tcp_abandon+0x20>
 80038e2:	4846      	ldr	r0, [pc, #280]	@ (80039fc <tcp_abandon+0x134>)
 80038e4:	f007 f9be 	bl	800ac64 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	7d1b      	ldrb	r3, [r3, #20]
 80038ec:	2b0a      	cmp	r3, #10
 80038ee:	d107      	bne.n	8003900 <tcp_abandon+0x38>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80038f0:	6879      	ldr	r1, [r7, #4]
 80038f2:	4843      	ldr	r0, [pc, #268]	@ (8003a00 <tcp_abandon+0x138>)
 80038f4:	f000 feee 	bl	80046d4 <tcp_pcb_remove>
    tcp_free(pcb);
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f7ff fdfb 	bl	80034f4 <tcp_free>
 80038fe:	e079      	b.n	80039f4 <tcp_abandon+0x12c>
  } else {
    int send_rst = 0;
 8003900:	2300      	movs	r3, #0
 8003902:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8003904:	2300      	movs	r3, #0
 8003906:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800390c:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003912:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800391a:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	691b      	ldr	r3, [r3, #16]
 8003920:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	7d1b      	ldrb	r3, [r3, #20]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d126      	bne.n	8003978 <tcp_abandon+0xb0>
      if (pcb->local_port != 0) {
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	8adb      	ldrh	r3, [r3, #22]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d02e      	beq.n	8003990 <tcp_abandon+0xc8>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8003932:	4b34      	ldr	r3, [pc, #208]	@ (8003a04 <tcp_abandon+0x13c>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	429a      	cmp	r2, r3
 800393a:	d105      	bne.n	8003948 <tcp_abandon+0x80>
 800393c:	4b31      	ldr	r3, [pc, #196]	@ (8003a04 <tcp_abandon+0x13c>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	4a30      	ldr	r2, [pc, #192]	@ (8003a04 <tcp_abandon+0x13c>)
 8003944:	6013      	str	r3, [r2, #0]
 8003946:	e013      	b.n	8003970 <tcp_abandon+0xa8>
 8003948:	4b2e      	ldr	r3, [pc, #184]	@ (8003a04 <tcp_abandon+0x13c>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	61fb      	str	r3, [r7, #28]
 800394e:	e00c      	b.n	800396a <tcp_abandon+0xa2>
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	429a      	cmp	r2, r3
 8003958:	d104      	bne.n	8003964 <tcp_abandon+0x9c>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	68da      	ldr	r2, [r3, #12]
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	60da      	str	r2, [r3, #12]
 8003962:	e005      	b.n	8003970 <tcp_abandon+0xa8>
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	61fb      	str	r3, [r7, #28]
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d1ef      	bne.n	8003950 <tcp_abandon+0x88>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	60da      	str	r2, [r3, #12]
 8003976:	e00b      	b.n	8003990 <tcp_abandon+0xc8>
      }
    } else {
      send_rst = reset;
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	8adb      	ldrh	r3, [r3, #22]
 8003980:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8003982:	6879      	ldr	r1, [r7, #4]
 8003984:	4820      	ldr	r0, [pc, #128]	@ (8003a08 <tcp_abandon+0x140>)
 8003986:	f000 fea5 	bl	80046d4 <tcp_pcb_remove>
 800398a:	4b20      	ldr	r3, [pc, #128]	@ (8003a0c <tcp_abandon+0x144>)
 800398c:	2201      	movs	r2, #1
 800398e:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003994:	2b00      	cmp	r3, #0
 8003996:	d004      	beq.n	80039a2 <tcp_abandon+0xda>
      tcp_segs_free(pcb->unacked);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800399c:	4618      	mov	r0, r3
 800399e:	f000 fc9d 	bl	80042dc <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d004      	beq.n	80039b4 <tcp_abandon+0xec>
      tcp_segs_free(pcb->unsent);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039ae:	4618      	mov	r0, r3
 80039b0:	f000 fc94 	bl	80042dc <tcp_segs_free>
    if (pcb->ooseq != NULL) {
      tcp_segs_free(pcb->ooseq);
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80039b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00e      	beq.n	80039d8 <tcp_abandon+0x110>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80039ba:	6879      	ldr	r1, [r7, #4]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	3304      	adds	r3, #4
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	8b12      	ldrh	r2, [r2, #24]
 80039c4:	9202      	str	r2, [sp, #8]
 80039c6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80039c8:	9201      	str	r2, [sp, #4]
 80039ca:	9300      	str	r3, [sp, #0]
 80039cc:	460b      	mov	r3, r1
 80039ce:	697a      	ldr	r2, [r7, #20]
 80039d0:	69b9      	ldr	r1, [r7, #24]
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f003 ff28 	bl	8007828 <tcp_rst>
    }
    last_state = pcb->state;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	7d1b      	ldrb	r3, [r3, #20]
 80039dc:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f7ff fd88 	bl	80034f4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d004      	beq.n	80039f4 <tcp_abandon+0x12c>
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	f06f 010c 	mvn.w	r1, #12
 80039f0:	68f8      	ldr	r0, [r7, #12]
 80039f2:	4798      	blx	r3
  }
}
 80039f4:	3728      	adds	r7, #40	@ 0x28
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	0800c074 	.word	0x0800c074
 8003a00:	24008b1c 	.word	0x24008b1c
 8003a04:	24008b10 	.word	0x24008b10
 8003a08:	24008b18 	.word	0x24008b18
 8003a0c:	24008b20 	.word	0x24008b20

08003a10 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8003a18:	2101      	movs	r1, #1
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f7ff ff54 	bl	80038c8 <tcp_abandon>
}
 8003a20:	bf00      	nop
 8003a22:	3708      	adds	r7, #8
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d102      	bne.n	8003a3c <tcp_update_rcv_ann_wnd+0x14>
 8003a36:	4821      	ldr	r0, [pc, #132]	@ (8003abc <tcp_update_rcv_ann_wnd+0x94>)
 8003a38:	f007 f914 	bl	800ac64 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8003a44:	4413      	add	r3, r2
 8003a46:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8003a50:	f240 51b4 	movw	r1, #1460	@ 0x5b4
 8003a54:	428a      	cmp	r2, r1
 8003a56:	bf28      	it	cs
 8003a58:	460a      	movcs	r2, r1
 8003a5a:	b292      	uxth	r2, r2
 8003a5c:	4413      	add	r3, r2
 8003a5e:	68fa      	ldr	r2, [r7, #12]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	db08      	blt.n	8003a78 <tcp_update_rcv_ann_wnd+0x50>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	e01c      	b.n	8003ab2 <tcp_update_rcv_ann_wnd+0x8a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	da03      	bge.n	8003a8e <tcp_update_rcv_ann_wnd+0x66>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003a8c:	e010      	b.n	8003ab0 <tcp_update_rcv_ann_wnd+0x88>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003aa0:	d302      	bcc.n	8003aa8 <tcp_update_rcv_ann_wnd+0x80>
 8003aa2:	4807      	ldr	r0, [pc, #28]	@ (8003ac0 <tcp_update_rcv_ann_wnd+0x98>)
 8003aa4:	f007 f8de 	bl	800ac64 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	b29a      	uxth	r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8003ab0:	2300      	movs	r3, #0
  }
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3710      	adds	r7, #16
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	0800c0c8 	.word	0x0800c0c8
 8003ac0:	0800c0ec 	.word	0x0800c0ec

08003ac4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	460b      	mov	r3, r1
 8003ace:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d030      	beq.n	8003b38 <tcp_recved+0x74>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	7d1b      	ldrb	r3, [r3, #20]
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d102      	bne.n	8003ae4 <tcp_recved+0x20>
 8003ade:	4818      	ldr	r0, [pc, #96]	@ (8003b40 <tcp_recved+0x7c>)
 8003ae0:	f007 f8c0 	bl	800ac64 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8003ae8:	887b      	ldrh	r3, [r7, #2]
 8003aea:	4413      	add	r3, r2
 8003aec:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8003aee:	89fb      	ldrh	r3, [r7, #14]
 8003af0:	f640 3268 	movw	r2, #2920	@ 0xb68
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d804      	bhi.n	8003b02 <tcp_recved+0x3e>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003afc:	89fa      	ldrh	r2, [r7, #14]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d204      	bcs.n	8003b0c <tcp_recved+0x48>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f640 3268 	movw	r2, #2920	@ 0xb68
 8003b08:	851a      	strh	r2, [r3, #40]	@ 0x28
 8003b0a:	e002      	b.n	8003b12 <tcp_recved+0x4e>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	89fa      	ldrh	r2, [r7, #14]
 8003b10:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f7ff ff88 	bl	8003a28 <tcp_update_rcv_ann_wnd>
 8003b18:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	f240 22d9 	movw	r2, #729	@ 0x2d9
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d909      	bls.n	8003b38 <tcp_recved+0x74>
    tcp_ack_now(pcb);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	8b5b      	ldrh	r3, [r3, #26]
 8003b28:	f043 0302 	orr.w	r3, r3, #2
 8003b2c:	b29a      	uxth	r2, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f003 f8b8 	bl	8006ca8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8003b38:	3710      	adds	r7, #16
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	0800c108 	.word	0x0800c108

08003b44 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8003b44:	b5b0      	push	{r4, r5, r7, lr}
 8003b46:	b090      	sub	sp, #64	@ 0x40
 8003b48:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8003b50:	4b8b      	ldr	r3, [pc, #556]	@ (8003d80 <tcp_slowtmr+0x23c>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	3301      	adds	r3, #1
 8003b56:	4a8a      	ldr	r2, [pc, #552]	@ (8003d80 <tcp_slowtmr+0x23c>)
 8003b58:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8003b5a:	4b8a      	ldr	r3, [pc, #552]	@ (8003d84 <tcp_slowtmr+0x240>)
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	3301      	adds	r3, #1
 8003b60:	b2da      	uxtb	r2, r3
 8003b62:	4b88      	ldr	r3, [pc, #544]	@ (8003d84 <tcp_slowtmr+0x240>)
 8003b64:	701a      	strb	r2, [r3, #0]
 8003b66:	e000      	b.n	8003b6a <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8003b68:	bf00      	nop
  prev = NULL;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 8003b6e:	4b86      	ldr	r3, [pc, #536]	@ (8003d88 <tcp_slowtmr+0x244>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8003b74:	e267      	b.n	8004046 <tcp_slowtmr+0x502>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED", pcb->state != CLOSED);
 8003b76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b78:	7d1b      	ldrb	r3, [r3, #20]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d102      	bne.n	8003b84 <tcp_slowtmr+0x40>
 8003b7e:	4883      	ldr	r0, [pc, #524]	@ (8003d8c <tcp_slowtmr+0x248>)
 8003b80:	f007 f870 	bl	800ac64 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN", pcb->state != LISTEN);
 8003b84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b86:	7d1b      	ldrb	r3, [r3, #20]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d102      	bne.n	8003b92 <tcp_slowtmr+0x4e>
 8003b8c:	4880      	ldr	r0, [pc, #512]	@ (8003d90 <tcp_slowtmr+0x24c>)
 8003b8e:	f007 f869 	bl	800ac64 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8003b92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b94:	7d1b      	ldrb	r3, [r3, #20]
 8003b96:	2b0a      	cmp	r3, #10
 8003b98:	d102      	bne.n	8003ba0 <tcp_slowtmr+0x5c>
 8003b9a:	487e      	ldr	r0, [pc, #504]	@ (8003d94 <tcp_slowtmr+0x250>)
 8003b9c:	f007 f862 	bl	800ac64 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8003ba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ba2:	7f9a      	ldrb	r2, [r3, #30]
 8003ba4:	4b77      	ldr	r3, [pc, #476]	@ (8003d84 <tcp_slowtmr+0x240>)
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d105      	bne.n	8003bb8 <tcp_slowtmr+0x74>
      prev = pcb;
 8003bac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bae:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8003bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 8003bb6:	e246      	b.n	8004046 <tcp_slowtmr+0x502>
    pcb->last_timer = tcp_timer_ctr;
 8003bb8:	4b72      	ldr	r3, [pc, #456]	@ (8003d84 <tcp_slowtmr+0x240>)
 8003bba:	781a      	ldrb	r2, [r3, #0]
 8003bbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bbe:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8003bcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bce:	7d1b      	ldrb	r3, [r3, #20]
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d10a      	bne.n	8003bea <tcp_slowtmr+0xa6>
 8003bd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bd6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003bda:	2b05      	cmp	r3, #5
 8003bdc:	d905      	bls.n	8003bea <tcp_slowtmr+0xa6>
      ++pcb_remove;
 8003bde:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003be2:	3301      	adds	r3, #1
 8003be4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003be8:	e112      	b.n	8003e10 <tcp_slowtmr+0x2cc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8003bea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003bf0:	2b0b      	cmp	r3, #11
 8003bf2:	d905      	bls.n	8003c00 <tcp_slowtmr+0xbc>
      ++pcb_remove;
 8003bf4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003bfe:	e107      	b.n	8003e10 <tcp_slowtmr+0x2cc>
      if (pcb->persist_backoff > 0) {
 8003c00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c02:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d06d      	beq.n	8003ce6 <tcp_slowtmr+0x1a2>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8003c0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d002      	beq.n	8003c18 <tcp_slowtmr+0xd4>
 8003c12:	4861      	ldr	r0, [pc, #388]	@ (8003d98 <tcp_slowtmr+0x254>)
 8003c14:	f007 f826 	bl	800ac64 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8003c18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d102      	bne.n	8003c26 <tcp_slowtmr+0xe2>
 8003c20:	485e      	ldr	r0, [pc, #376]	@ (8003d9c <tcp_slowtmr+0x258>)
 8003c22:	f007 f81f 	bl	800ac64 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8003c26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c28:	f893 3096 	ldrb.w	r3, [r3, #150]	@ 0x96
 8003c2c:	2b0b      	cmp	r3, #11
 8003c2e:	d905      	bls.n	8003c3c <tcp_slowtmr+0xf8>
          ++pcb_remove; /* max probes reached */
 8003c30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003c34:	3301      	adds	r3, #1
 8003c36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003c3a:	e0e9      	b.n	8003e10 <tcp_slowtmr+0x2cc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8003c3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c3e:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8003c42:	3b01      	subs	r3, #1
 8003c44:	4a56      	ldr	r2, [pc, #344]	@ (8003da0 <tcp_slowtmr+0x25c>)
 8003c46:	5cd3      	ldrb	r3, [r2, r3]
 8003c48:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8003c4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c4c:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 8003c50:	7c7a      	ldrb	r2, [r7, #17]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d907      	bls.n	8003c66 <tcp_slowtmr+0x122>
            pcb->persist_cnt++;
 8003c56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c58:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	b2da      	uxtb	r2, r3
 8003c60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c62:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
          if (pcb->persist_cnt >= backoff_cnt) {
 8003c66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c68:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 8003c6c:	7c7a      	ldrb	r2, [r7, #17]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	f200 80ce 	bhi.w	8003e10 <tcp_slowtmr+0x2cc>
            int next_slot = 1; /* increment timer to next slot */
 8003c74:	2301      	movs	r3, #1
 8003c76:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8003c78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c7a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d108      	bne.n	8003c94 <tcp_slowtmr+0x150>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8003c82:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003c84:	f003 feaa 	bl	80079dc <tcp_zero_window_probe>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d014      	beq.n	8003cb8 <tcp_slowtmr+0x174>
                next_slot = 0; /* try probe again with current slot */
 8003c8e:	2300      	movs	r3, #0
 8003c90:	623b      	str	r3, [r7, #32]
 8003c92:	e011      	b.n	8003cb8 <tcp_slowtmr+0x174>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8003c94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c96:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003c9e:	f002 fdb7 	bl	8006810 <tcp_split_unsent_seg>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d107      	bne.n	8003cb8 <tcp_slowtmr+0x174>
                if (tcp_output(pcb) == ERR_OK) {
 8003ca8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003caa:	f002 fffd 	bl	8006ca8 <tcp_output>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d101      	bne.n	8003cb8 <tcp_slowtmr+0x174>
                  next_slot = 0;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8003cb8:	6a3b      	ldr	r3, [r7, #32]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	f000 80a8 	beq.w	8003e10 <tcp_slowtmr+0x2cc>
              pcb->persist_cnt = 0;
 8003cc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8003cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cca:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8003cce:	2b06      	cmp	r3, #6
 8003cd0:	f200 809e 	bhi.w	8003e10 <tcp_slowtmr+0x2cc>
                pcb->persist_backoff++;
 8003cd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cd6:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8003cda:	3301      	adds	r3, #1
 8003cdc:	b2da      	uxtb	r2, r3
 8003cde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ce0:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
 8003ce4:	e094      	b.n	8003e10 <tcp_slowtmr+0x2cc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8003ce6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ce8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	db0f      	blt.n	8003d10 <tcp_slowtmr+0x1cc>
 8003cf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cf2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8003cf6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d008      	beq.n	8003d10 <tcp_slowtmr+0x1cc>
          ++pcb->rtime;
 8003cfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d00:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	3301      	adds	r3, #1
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	b21a      	sxth	r2, r3
 8003d0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d0e:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8003d10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d12:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 8003d16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d18:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	db77      	blt.n	8003e10 <tcp_slowtmr+0x2cc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8003d20:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003d22:	f003 fa9b 	bl	800725c <tcp_rexmit_rto_prepare>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d007      	beq.n	8003d3c <tcp_slowtmr+0x1f8>
 8003d2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d16d      	bne.n	8003e10 <tcp_slowtmr+0x2cc>
 8003d34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d069      	beq.n	8003e10 <tcp_slowtmr+0x2cc>
            if (pcb->state != SYN_SENT) {
 8003d3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d3e:	7d1b      	ldrb	r3, [r3, #20]
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d036      	beq.n	8003db2 <tcp_slowtmr+0x26e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8003d44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d46:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d4a:	2b0c      	cmp	r3, #12
 8003d4c:	bf28      	it	cs
 8003d4e:	230c      	movcs	r3, #12
 8003d50:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8003d52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d54:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8003d58:	10db      	asrs	r3, r3, #3
 8003d5a:	b21b      	sxth	r3, r3
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d60:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8003d64:	4413      	add	r3, r2
 8003d66:	7efa      	ldrb	r2, [r7, #27]
 8003d68:	490e      	ldr	r1, [pc, #56]	@ (8003da4 <tcp_slowtmr+0x260>)
 8003d6a:	5c8a      	ldrb	r2, [r1, r2]
 8003d6c:	4093      	lsls	r3, r2
 8003d6e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8003d76:	4293      	cmp	r3, r2
 8003d78:	dc16      	bgt.n	8003da8 <tcp_slowtmr+0x264>
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	b21a      	sxth	r2, r3
 8003d7e:	e015      	b.n	8003dac <tcp_slowtmr+0x268>
 8003d80:	24008b0c 	.word	0x24008b0c
 8003d84:	24008b22 	.word	0x24008b22
 8003d88:	24008b18 	.word	0x24008b18
 8003d8c:	0800c130 	.word	0x0800c130
 8003d90:	0800c15c 	.word	0x0800c15c
 8003d94:	0800c188 	.word	0x0800c188
 8003d98:	0800c1b4 	.word	0x0800c1b4
 8003d9c:	0800c1e8 	.word	0x0800c1e8
 8003da0:	0800d684 	.word	0x0800d684
 8003da4:	0800d674 	.word	0x0800d674
 8003da8:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8003dac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dae:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 8003db2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003db4:	2200      	movs	r2, #0
 8003db6:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8003db8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dba:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8003dbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dc0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	bf28      	it	cs
 8003dc8:	4613      	movcs	r3, r2
 8003dca:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8003dcc:	8a7b      	ldrh	r3, [r7, #18]
 8003dce:	085b      	lsrs	r3, r3, #1
 8003dd0:	b29a      	uxth	r2, r3
 8003dd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dd4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8003dd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dda:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8003dde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003de0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003de2:	005b      	lsls	r3, r3, #1
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d206      	bcs.n	8003df8 <tcp_slowtmr+0x2b4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8003dea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003dee:	005b      	lsls	r3, r3, #1
 8003df0:	b29a      	uxth	r2, r3
 8003df2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003df4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8003df8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dfa:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8003dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dfe:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 8003e02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e04:	2200      	movs	r2, #0
 8003e06:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 8003e0a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003e0c:	f003 fa8e 	bl	800732c <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8003e10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e12:	7d1b      	ldrb	r3, [r3, #20]
 8003e14:	2b06      	cmp	r3, #6
 8003e16:	d111      	bne.n	8003e3c <tcp_slowtmr+0x2f8>
      if (pcb->flags & TF_RXCLOSED) {
 8003e18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e1a:	8b5b      	ldrh	r3, [r3, #26]
 8003e1c:	f003 0310 	and.w	r3, r3, #16
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d00b      	beq.n	8003e3c <tcp_slowtmr+0x2f8>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8003e24:	4b8d      	ldr	r3, [pc, #564]	@ (800405c <tcp_slowtmr+0x518>)
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e2a:	6a1b      	ldr	r3, [r3, #32]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	2b28      	cmp	r3, #40	@ 0x28
 8003e30:	d904      	bls.n	8003e3c <tcp_slowtmr+0x2f8>
          ++pcb_remove;
 8003e32:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003e36:	3301      	adds	r3, #1
 8003e38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8003e3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e3e:	7a5b      	ldrb	r3, [r3, #9]
 8003e40:	f003 0308 	and.w	r3, r3, #8
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d04a      	beq.n	8003ede <tcp_slowtmr+0x39a>
        ((pcb->state == ESTABLISHED) ||
 8003e48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e4a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8003e4c:	2b04      	cmp	r3, #4
 8003e4e:	d003      	beq.n	8003e58 <tcp_slowtmr+0x314>
         (pcb->state == CLOSE_WAIT))) {
 8003e50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e52:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8003e54:	2b07      	cmp	r3, #7
 8003e56:	d142      	bne.n	8003ede <tcp_slowtmr+0x39a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8003e58:	4b80      	ldr	r3, [pc, #512]	@ (800405c <tcp_slowtmr+0x518>)
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e5e:	6a1b      	ldr	r3, [r3, #32]
 8003e60:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8003e62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e64:	f8d3 1090 	ldr.w	r1, [r3, #144]	@ 0x90
 8003e68:	4b7d      	ldr	r3, [pc, #500]	@ (8004060 <tcp_slowtmr+0x51c>)
 8003e6a:	440b      	add	r3, r1
 8003e6c:	497d      	ldr	r1, [pc, #500]	@ (8004064 <tcp_slowtmr+0x520>)
 8003e6e:	fba1 1303 	umull	r1, r3, r1, r3
 8003e72:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d90a      	bls.n	8003e8e <tcp_slowtmr+0x34a>
        ++pcb_remove;
 8003e78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8003e82:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003e86:	3301      	adds	r3, #1
 8003e88:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8003e8c:	e027      	b.n	8003ede <tcp_slowtmr+0x39a>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8003e8e:	4b73      	ldr	r3, [pc, #460]	@ (800405c <tcp_slowtmr+0x518>)
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e94:	6a1b      	ldr	r3, [r3, #32]
 8003e96:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8003e98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e9a:	f8d3 1090 	ldr.w	r1, [r3, #144]	@ 0x90
 8003e9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ea0:	f893 3097 	ldrb.w	r3, [r3, #151]	@ 0x97
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	4b70      	ldr	r3, [pc, #448]	@ (8004068 <tcp_slowtmr+0x524>)
 8003ea8:	fb00 f303 	mul.w	r3, r0, r3
 8003eac:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8003eae:	496d      	ldr	r1, [pc, #436]	@ (8004064 <tcp_slowtmr+0x520>)
 8003eb0:	fba1 1303 	umull	r1, r3, r1, r3
 8003eb4:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d911      	bls.n	8003ede <tcp_slowtmr+0x39a>
        err = tcp_keepalive(pcb);
 8003eba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003ebc:	f003 fd56 	bl	800796c <tcp_keepalive>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8003ec6:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d107      	bne.n	8003ede <tcp_slowtmr+0x39a>
          pcb->keep_cnt_sent++;
 8003ece:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ed0:	f893 3097 	ldrb.w	r3, [r3, #151]	@ 0x97
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	b2da      	uxtb	r2, r3
 8003ed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eda:	f883 2097 	strb.w	r2, [r3, #151]	@ 0x97
    if (pcb->state == SYN_RCVD) {
 8003ede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ee0:	7d1b      	ldrb	r3, [r3, #20]
 8003ee2:	2b03      	cmp	r3, #3
 8003ee4:	d10b      	bne.n	8003efe <tcp_slowtmr+0x3ba>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8003ee6:	4b5d      	ldr	r3, [pc, #372]	@ (800405c <tcp_slowtmr+0x518>)
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eec:	6a1b      	ldr	r3, [r3, #32]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	2b28      	cmp	r3, #40	@ 0x28
 8003ef2:	d904      	bls.n	8003efe <tcp_slowtmr+0x3ba>
        ++pcb_remove;
 8003ef4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003ef8:	3301      	adds	r3, #1
 8003efa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8003efe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f00:	7d1b      	ldrb	r3, [r3, #20]
 8003f02:	2b09      	cmp	r3, #9
 8003f04:	d10b      	bne.n	8003f1e <tcp_slowtmr+0x3da>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8003f06:	4b55      	ldr	r3, [pc, #340]	@ (800405c <tcp_slowtmr+0x518>)
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f0c:	6a1b      	ldr	r3, [r3, #32]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	2bf0      	cmp	r3, #240	@ 0xf0
 8003f12:	d904      	bls.n	8003f1e <tcp_slowtmr+0x3da>
        ++pcb_remove;
 8003f14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003f18:	3301      	adds	r3, #1
 8003f1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 8003f1e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d058      	beq.n	8003fd8 <tcp_slowtmr+0x494>
      tcp_err_fn err_fn = pcb->errf;
 8003f26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f2c:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8003f2e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003f30:	f000 fb94 	bl	800465c <tcp_pcb_purge>
      if (prev != NULL) {
 8003f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00c      	beq.n	8003f54 <tcp_slowtmr+0x410>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8003f3a:	4b4c      	ldr	r3, [pc, #304]	@ (800406c <tcp_slowtmr+0x528>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d102      	bne.n	8003f4a <tcp_slowtmr+0x406>
 8003f44:	484a      	ldr	r0, [pc, #296]	@ (8004070 <tcp_slowtmr+0x52c>)
 8003f46:	f006 fe8d 	bl	800ac64 <iprintf>
        prev->next = pcb->next;
 8003f4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f4c:	68da      	ldr	r2, [r3, #12]
 8003f4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f50:	60da      	str	r2, [r3, #12]
 8003f52:	e00b      	b.n	8003f6c <tcp_slowtmr+0x428>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8003f54:	4b45      	ldr	r3, [pc, #276]	@ (800406c <tcp_slowtmr+0x528>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d002      	beq.n	8003f64 <tcp_slowtmr+0x420>
 8003f5e:	4845      	ldr	r0, [pc, #276]	@ (8004074 <tcp_slowtmr+0x530>)
 8003f60:	f006 fe80 	bl	800ac64 <iprintf>
        tcp_active_pcbs = pcb->next;
 8003f64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	4a40      	ldr	r2, [pc, #256]	@ (800406c <tcp_slowtmr+0x528>)
 8003f6a:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8003f6c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d013      	beq.n	8003f9c <tcp_slowtmr+0x458>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8003f74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f76:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8003f78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f7a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8003f7c:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8003f7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f80:	3304      	adds	r3, #4
 8003f82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f84:	8ad2      	ldrh	r2, [r2, #22]
 8003f86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f88:	8b09      	ldrh	r1, [r1, #24]
 8003f8a:	9102      	str	r1, [sp, #8]
 8003f8c:	9201      	str	r2, [sp, #4]
 8003f8e:	9300      	str	r3, [sp, #0]
 8003f90:	462b      	mov	r3, r5
 8003f92:	4622      	mov	r2, r4
 8003f94:	4601      	mov	r1, r0
 8003f96:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003f98:	f003 fc46 	bl	8007828 <tcp_rst>
      err_arg = pcb->callback_arg;
 8003f9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f9e:	691b      	ldr	r3, [r3, #16]
 8003fa0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8003fa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fa4:	7d1b      	ldrb	r3, [r3, #20]
 8003fa6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8003fa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003faa:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8003fac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8003fb2:	6838      	ldr	r0, [r7, #0]
 8003fb4:	f7ff fa9e 	bl	80034f4 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8003fb8:	4b2f      	ldr	r3, [pc, #188]	@ (8004078 <tcp_slowtmr+0x534>)
 8003fba:	2200      	movs	r2, #0
 8003fbc:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d004      	beq.n	8003fce <tcp_slowtmr+0x48a>
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f06f 010c 	mvn.w	r1, #12
 8003fca:	68b8      	ldr	r0, [r7, #8]
 8003fcc:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8003fce:	4b2a      	ldr	r3, [pc, #168]	@ (8004078 <tcp_slowtmr+0x534>)
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d037      	beq.n	8004046 <tcp_slowtmr+0x502>
        goto tcp_slowtmr_start;
 8003fd6:	e5c8      	b.n	8003b6a <tcp_slowtmr+0x26>
      prev = pcb;
 8003fd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fda:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8003fdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 8003fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fe4:	7f1b      	ldrb	r3, [r3, #28]
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	b2da      	uxtb	r2, r3
 8003fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fec:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8003fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ff0:	7f1a      	ldrb	r2, [r3, #28]
 8003ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ff4:	7f5b      	ldrb	r3, [r3, #29]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d325      	bcc.n	8004046 <tcp_slowtmr+0x502>
        prev->polltmr = 0;
 8003ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8004000:	4b1d      	ldr	r3, [pc, #116]	@ (8004078 <tcp_slowtmr+0x534>)
 8004002:	2200      	movs	r2, #0
 8004004:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8004006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004008:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800400c:	2b00      	cmp	r3, #0
 800400e:	d00b      	beq.n	8004028 <tcp_slowtmr+0x4e4>
 8004010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004012:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004016:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004018:	6912      	ldr	r2, [r2, #16]
 800401a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800401c:	4610      	mov	r0, r2
 800401e:	4798      	blx	r3
 8004020:	4603      	mov	r3, r0
 8004022:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8004026:	e002      	b.n	800402e <tcp_slowtmr+0x4ea>
 8004028:	2300      	movs	r3, #0
 800402a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800402e:	4b12      	ldr	r3, [pc, #72]	@ (8004078 <tcp_slowtmr+0x534>)
 8004030:	781b      	ldrb	r3, [r3, #0]
 8004032:	2b00      	cmp	r3, #0
 8004034:	f47f ad98 	bne.w	8003b68 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8004038:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800403c:	2b00      	cmp	r3, #0
 800403e:	d102      	bne.n	8004046 <tcp_slowtmr+0x502>
          tcp_output(prev);
 8004040:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004042:	f002 fe31 	bl	8006ca8 <tcp_output>
  while (pcb != NULL) {
 8004046:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004048:	2b00      	cmp	r3, #0
 800404a:	f47f ad94 	bne.w	8003b76 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800404e:	2300      	movs	r3, #0
 8004050:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 8004052:	4b0a      	ldr	r3, [pc, #40]	@ (800407c <tcp_slowtmr+0x538>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8004058:	e059      	b.n	800410e <tcp_slowtmr+0x5ca>
 800405a:	bf00      	nop
 800405c:	24008b0c 	.word	0x24008b0c
 8004060:	000a4cb8 	.word	0x000a4cb8
 8004064:	10624dd3 	.word	0x10624dd3
 8004068:	000124f8 	.word	0x000124f8
 800406c:	24008b18 	.word	0x24008b18
 8004070:	0800c220 	.word	0x0800c220
 8004074:	0800c24c 	.word	0x0800c24c
 8004078:	24008b20 	.word	0x24008b20
 800407c:	24008b1c 	.word	0x24008b1c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8004080:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004082:	7d1b      	ldrb	r3, [r3, #20]
 8004084:	2b0a      	cmp	r3, #10
 8004086:	d002      	beq.n	800408e <tcp_slowtmr+0x54a>
 8004088:	4825      	ldr	r0, [pc, #148]	@ (8004120 <tcp_slowtmr+0x5dc>)
 800408a:	f006 fdeb 	bl	800ac64 <iprintf>
    pcb_remove = 0;
 800408e:	2300      	movs	r3, #0
 8004090:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8004094:	4b23      	ldr	r3, [pc, #140]	@ (8004124 <tcp_slowtmr+0x5e0>)
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800409a:	6a1b      	ldr	r3, [r3, #32]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2bf0      	cmp	r3, #240	@ 0xf0
 80040a0:	d904      	bls.n	80040ac <tcp_slowtmr+0x568>
      ++pcb_remove;
 80040a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80040a6:	3301      	adds	r3, #1
 80040a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80040ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d027      	beq.n	8004104 <tcp_slowtmr+0x5c0>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80040b4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80040b6:	f000 fad1 	bl	800465c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80040ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d00c      	beq.n	80040da <tcp_slowtmr+0x596>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80040c0:	4b19      	ldr	r3, [pc, #100]	@ (8004128 <tcp_slowtmr+0x5e4>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d102      	bne.n	80040d0 <tcp_slowtmr+0x58c>
 80040ca:	4818      	ldr	r0, [pc, #96]	@ (800412c <tcp_slowtmr+0x5e8>)
 80040cc:	f006 fdca 	bl	800ac64 <iprintf>
        prev->next = pcb->next;
 80040d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040d2:	68da      	ldr	r2, [r3, #12]
 80040d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040d6:	60da      	str	r2, [r3, #12]
 80040d8:	e00b      	b.n	80040f2 <tcp_slowtmr+0x5ae>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80040da:	4b13      	ldr	r3, [pc, #76]	@ (8004128 <tcp_slowtmr+0x5e4>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d002      	beq.n	80040ea <tcp_slowtmr+0x5a6>
 80040e4:	4812      	ldr	r0, [pc, #72]	@ (8004130 <tcp_slowtmr+0x5ec>)
 80040e6:	f006 fdbd 	bl	800ac64 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80040ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	4a0e      	ldr	r2, [pc, #56]	@ (8004128 <tcp_slowtmr+0x5e4>)
 80040f0:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80040f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040f4:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80040f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 80040fc:	69f8      	ldr	r0, [r7, #28]
 80040fe:	f7ff f9f9 	bl	80034f4 <tcp_free>
 8004102:	e004      	b.n	800410e <tcp_slowtmr+0x5ca>
    } else {
      prev = pcb;
 8004104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004106:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8004108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800410e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004110:	2b00      	cmp	r3, #0
 8004112:	d1b5      	bne.n	8004080 <tcp_slowtmr+0x53c>
    }
  }
}
 8004114:	bf00      	nop
 8004116:	bf00      	nop
 8004118:	3730      	adds	r7, #48	@ 0x30
 800411a:	46bd      	mov	sp, r7
 800411c:	bdb0      	pop	{r4, r5, r7, pc}
 800411e:	bf00      	nop
 8004120:	0800c278 	.word	0x0800c278
 8004124:	24008b0c 	.word	0x24008b0c
 8004128:	24008b1c 	.word	0x24008b1c
 800412c:	0800c2a8 	.word	0x0800c2a8
 8004130:	0800c2d0 	.word	0x0800c2d0

08004134 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b082      	sub	sp, #8
 8004138:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800413a:	4b2d      	ldr	r3, [pc, #180]	@ (80041f0 <tcp_fasttmr+0xbc>)
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	3301      	adds	r3, #1
 8004140:	b2da      	uxtb	r2, r3
 8004142:	4b2b      	ldr	r3, [pc, #172]	@ (80041f0 <tcp_fasttmr+0xbc>)
 8004144:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8004146:	4b2b      	ldr	r3, [pc, #172]	@ (80041f4 <tcp_fasttmr+0xc0>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800414c:	e048      	b.n	80041e0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	7f9a      	ldrb	r2, [r3, #30]
 8004152:	4b27      	ldr	r3, [pc, #156]	@ (80041f0 <tcp_fasttmr+0xbc>)
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	429a      	cmp	r2, r3
 8004158:	d03f      	beq.n	80041da <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800415a:	4b25      	ldr	r3, [pc, #148]	@ (80041f0 <tcp_fasttmr+0xbc>)
 800415c:	781a      	ldrb	r2, [r3, #0]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	8b5b      	ldrh	r3, [r3, #26]
 8004166:	f003 0301 	and.w	r3, r3, #1
 800416a:	2b00      	cmp	r3, #0
 800416c:	d010      	beq.n	8004190 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	8b5b      	ldrh	r3, [r3, #26]
 8004172:	f043 0302 	orr.w	r3, r3, #2
 8004176:	b29a      	uxth	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f002 fd93 	bl	8006ca8 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	8b5b      	ldrh	r3, [r3, #26]
 8004186:	f023 0303 	bic.w	r3, r3, #3
 800418a:	b29a      	uxth	r2, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	8b5b      	ldrh	r3, [r3, #26]
 8004194:	f003 0308 	and.w	r3, r3, #8
 8004198:	2b00      	cmp	r3, #0
 800419a:	d009      	beq.n	80041b0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	8b5b      	ldrh	r3, [r3, #26]
 80041a0:	f023 0308 	bic.w	r3, r3, #8
 80041a4:	b29a      	uxth	r2, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f7ff fb0c 	bl	80037c8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00a      	beq.n	80041d4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80041be:	4b0e      	ldr	r3, [pc, #56]	@ (80041f8 <tcp_fasttmr+0xc4>)
 80041c0:	2200      	movs	r2, #0
 80041c2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f000 f819 	bl	80041fc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80041ca:	4b0b      	ldr	r3, [pc, #44]	@ (80041f8 <tcp_fasttmr+0xc4>)
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d000      	beq.n	80041d4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80041d2:	e7b8      	b.n	8004146 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	607b      	str	r3, [r7, #4]
 80041d8:	e002      	b.n	80041e0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1b3      	bne.n	800414e <tcp_fasttmr+0x1a>
    }
  }
}
 80041e6:	bf00      	nop
 80041e8:	bf00      	nop
 80041ea:	3708      	adds	r7, #8
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	24008b22 	.word	0x24008b22
 80041f4:	24008b18 	.word	0x24008b18
 80041f8:	24008b20 	.word	0x24008b20

080041fc <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80041fc:	b590      	push	{r4, r7, lr}
 80041fe:	b085      	sub	sp, #20
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d102      	bne.n	8004210 <tcp_process_refused_data+0x14>
 800420a:	f06f 030f 	mvn.w	r3, #15
 800420e:	e061      	b.n	80042d4 <tcp_process_refused_data+0xd8>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004214:	7b5b      	ldrb	r3, [r3, #13]
 8004216:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800421c:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	675a      	str	r2, [r3, #116]	@ 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00b      	beq.n	8004246 <tcp_process_refused_data+0x4a>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6918      	ldr	r0, [r3, #16]
 8004238:	2300      	movs	r3, #0
 800423a:	68ba      	ldr	r2, [r7, #8]
 800423c:	6879      	ldr	r1, [r7, #4]
 800423e:	47a0      	blx	r4
 8004240:	4603      	mov	r3, r0
 8004242:	73fb      	strb	r3, [r7, #15]
 8004244:	e007      	b.n	8004256 <tcp_process_refused_data+0x5a>
 8004246:	2300      	movs	r3, #0
 8004248:	68ba      	ldr	r2, [r7, #8]
 800424a:	6879      	ldr	r1, [r7, #4]
 800424c:	2000      	movs	r0, #0
 800424e:	f000 f872 	bl	8004336 <tcp_recv_null>
 8004252:	4603      	mov	r3, r0
 8004254:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8004256:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d12b      	bne.n	80042b6 <tcp_process_refused_data+0xba>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800425e:	7bbb      	ldrb	r3, [r7, #14]
 8004260:	f003 0320 	and.w	r3, r3, #32
 8004264:	2b00      	cmp	r3, #0
 8004266:	d034      	beq.n	80042d2 <tcp_process_refused_data+0xd6>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800426c:	f640 3268 	movw	r2, #2920	@ 0xb68
 8004270:	4293      	cmp	r3, r2
 8004272:	d005      	beq.n	8004280 <tcp_process_refused_data+0x84>
          pcb->rcv_wnd++;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004278:	3301      	adds	r3, #1
 800427a:	b29a      	uxth	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00b      	beq.n	80042a2 <tcp_process_refused_data+0xa6>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6918      	ldr	r0, [r3, #16]
 8004294:	2300      	movs	r3, #0
 8004296:	2200      	movs	r2, #0
 8004298:	6879      	ldr	r1, [r7, #4]
 800429a:	47a0      	blx	r4
 800429c:	4603      	mov	r3, r0
 800429e:	73fb      	strb	r3, [r7, #15]
 80042a0:	e001      	b.n	80042a6 <tcp_process_refused_data+0xaa>
 80042a2:	2300      	movs	r3, #0
 80042a4:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80042a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042aa:	f113 0f0d 	cmn.w	r3, #13
 80042ae:	d110      	bne.n	80042d2 <tcp_process_refused_data+0xd6>
          return ERR_ABRT;
 80042b0:	f06f 030c 	mvn.w	r3, #12
 80042b4:	e00e      	b.n	80042d4 <tcp_process_refused_data+0xd8>
        }
      }
    } else if (err == ERR_ABRT) {
 80042b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042ba:	f113 0f0d 	cmn.w	r3, #13
 80042be:	d102      	bne.n	80042c6 <tcp_process_refused_data+0xca>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80042c0:	f06f 030c 	mvn.w	r3, #12
 80042c4:	e006      	b.n	80042d4 <tcp_process_refused_data+0xd8>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	68ba      	ldr	r2, [r7, #8]
 80042ca:	675a      	str	r2, [r3, #116]	@ 0x74
      return ERR_INPROGRESS;
 80042cc:	f06f 0304 	mvn.w	r3, #4
 80042d0:	e000      	b.n	80042d4 <tcp_process_refused_data+0xd8>
    }
  }
  return ERR_OK;
 80042d2:	2300      	movs	r3, #0
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3714      	adds	r7, #20
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd90      	pop	{r4, r7, pc}

080042dc <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80042e4:	e007      	b.n	80042f6 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f000 f80a 	bl	8004306 <tcp_seg_free>
    seg = next;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1f4      	bne.n	80042e6 <tcp_segs_free+0xa>
  }
}
 80042fc:	bf00      	nop
 80042fe:	bf00      	nop
 8004300:	3710      	adds	r7, #16
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}

08004306 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8004306:	b580      	push	{r7, lr}
 8004308:	b082      	sub	sp, #8
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d00c      	beq.n	800432e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d004      	beq.n	8004326 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	4618      	mov	r0, r3
 8004322:	f7fe fe83 	bl	800302c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8004326:	6879      	ldr	r1, [r7, #4]
 8004328:	2003      	movs	r0, #3
 800432a:	f7fe f91f 	bl	800256c <memp_free>
  }
}
 800432e:	bf00      	nop
 8004330:	3708      	adds	r7, #8
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}

08004336 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8004336:	b580      	push	{r7, lr}
 8004338:	b084      	sub	sp, #16
 800433a:	af00      	add	r7, sp, #0
 800433c:	60f8      	str	r0, [r7, #12]
 800433e:	60b9      	str	r1, [r7, #8]
 8004340:	607a      	str	r2, [r7, #4]
 8004342:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d102      	bne.n	8004350 <tcp_recv_null+0x1a>
 800434a:	f06f 030f 	mvn.w	r3, #15
 800434e:	e016      	b.n	800437e <tcp_recv_null+0x48>

  if (p != NULL) {
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d009      	beq.n	800436a <tcp_recv_null+0x34>
    tcp_recved(pcb, p->tot_len);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	891b      	ldrh	r3, [r3, #8]
 800435a:	4619      	mov	r1, r3
 800435c:	68b8      	ldr	r0, [r7, #8]
 800435e:	f7ff fbb1 	bl	8003ac4 <tcp_recved>
    pbuf_free(p);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f7fe fe62 	bl	800302c <pbuf_free>
 8004368:	e008      	b.n	800437c <tcp_recv_null+0x46>
  } else if (err == ERR_OK) {
 800436a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d104      	bne.n	800437c <tcp_recv_null+0x46>
    return tcp_close(pcb);
 8004372:	68b8      	ldr	r0, [r7, #8]
 8004374:	f7ff fa8a 	bl	800388c <tcp_close>
 8004378:	4603      	mov	r3, r0
 800437a:	e000      	b.n	800437e <tcp_recv_null+0x48>
  }
  return ERR_OK;
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	3710      	adds	r7, #16
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
	...

08004388 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b086      	sub	sp, #24
 800438c:	af00      	add	r7, sp, #0
 800438e:	4603      	mov	r3, r0
 8004390:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8004392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004396:	2b00      	cmp	r3, #0
 8004398:	db01      	blt.n	800439e <tcp_kill_prio+0x16>
 800439a:	79fb      	ldrb	r3, [r7, #7]
 800439c:	e000      	b.n	80043a0 <tcp_kill_prio+0x18>
 800439e:	237f      	movs	r3, #127	@ 0x7f
 80043a0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80043a2:	7afb      	ldrb	r3, [r7, #11]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d034      	beq.n	8004412 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80043a8:	7afb      	ldrb	r3, [r7, #11]
 80043aa:	3b01      	subs	r3, #1
 80043ac:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80043ae:	2300      	movs	r3, #0
 80043b0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80043b2:	2300      	movs	r3, #0
 80043b4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80043b6:	4b19      	ldr	r3, [pc, #100]	@ (800441c <tcp_kill_prio+0x94>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	617b      	str	r3, [r7, #20]
 80043bc:	e01f      	b.n	80043fe <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	7d5b      	ldrb	r3, [r3, #21]
 80043c2:	7afa      	ldrb	r2, [r7, #11]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d80c      	bhi.n	80043e2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80043cc:	7afa      	ldrb	r2, [r7, #11]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d112      	bne.n	80043f8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80043d2:	4b13      	ldr	r3, [pc, #76]	@ (8004420 <tcp_kill_prio+0x98>)
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	6a1b      	ldr	r3, [r3, #32]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	68fa      	ldr	r2, [r7, #12]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d80a      	bhi.n	80043f8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80043e2:	4b0f      	ldr	r3, [pc, #60]	@ (8004420 <tcp_kill_prio+0x98>)
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	6a1b      	ldr	r3, [r3, #32]
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	7d5b      	ldrb	r3, [r3, #21]
 80043f6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	617b      	str	r3, [r7, #20]
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d1dc      	bne.n	80043be <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d004      	beq.n	8004414 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800440a:	6938      	ldr	r0, [r7, #16]
 800440c:	f7ff fb00 	bl	8003a10 <tcp_abort>
 8004410:	e000      	b.n	8004414 <tcp_kill_prio+0x8c>
    return;
 8004412:	bf00      	nop
  }
}
 8004414:	3718      	adds	r7, #24
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	24008b18 	.word	0x24008b18
 8004420:	24008b0c 	.word	0x24008b0c

08004424 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b086      	sub	sp, #24
 8004428:	af00      	add	r7, sp, #0
 800442a:	4603      	mov	r3, r0
 800442c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800442e:	79fb      	ldrb	r3, [r7, #7]
 8004430:	2b08      	cmp	r3, #8
 8004432:	d005      	beq.n	8004440 <tcp_kill_state+0x1c>
 8004434:	79fb      	ldrb	r3, [r7, #7]
 8004436:	2b09      	cmp	r3, #9
 8004438:	d002      	beq.n	8004440 <tcp_kill_state+0x1c>
 800443a:	4818      	ldr	r0, [pc, #96]	@ (800449c <tcp_kill_state+0x78>)
 800443c:	f006 fc12 	bl	800ac64 <iprintf>

  inactivity = 0;
 8004440:	2300      	movs	r3, #0
 8004442:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8004444:	2300      	movs	r3, #0
 8004446:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8004448:	4b15      	ldr	r3, [pc, #84]	@ (80044a0 <tcp_kill_state+0x7c>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	617b      	str	r3, [r7, #20]
 800444e:	e017      	b.n	8004480 <tcp_kill_state+0x5c>
    if (pcb->state == state) {
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	7d1b      	ldrb	r3, [r3, #20]
 8004454:	79fa      	ldrb	r2, [r7, #7]
 8004456:	429a      	cmp	r2, r3
 8004458:	d10f      	bne.n	800447a <tcp_kill_state+0x56>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800445a:	4b12      	ldr	r3, [pc, #72]	@ (80044a4 <tcp_kill_state+0x80>)
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	6a1b      	ldr	r3, [r3, #32]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	68fa      	ldr	r2, [r7, #12]
 8004466:	429a      	cmp	r2, r3
 8004468:	d807      	bhi.n	800447a <tcp_kill_state+0x56>
        inactivity = tcp_ticks - pcb->tmr;
 800446a:	4b0e      	ldr	r3, [pc, #56]	@ (80044a4 <tcp_kill_state+0x80>)
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	6a1b      	ldr	r3, [r3, #32]
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	617b      	str	r3, [r7, #20]
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d1e4      	bne.n	8004450 <tcp_kill_state+0x2c>
      }
    }
  }
  if (inactive != NULL) {
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d003      	beq.n	8004494 <tcp_kill_state+0x70>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800448c:	2100      	movs	r1, #0
 800448e:	6938      	ldr	r0, [r7, #16]
 8004490:	f7ff fa1a 	bl	80038c8 <tcp_abandon>
  }
}
 8004494:	bf00      	nop
 8004496:	3718      	adds	r7, #24
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	0800c2f8 	.word	0x0800c2f8
 80044a0:	24008b18 	.word	0x24008b18
 80044a4:	24008b0c 	.word	0x24008b0c

080044a8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80044ae:	2300      	movs	r3, #0
 80044b0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80044b2:	2300      	movs	r3, #0
 80044b4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80044b6:	4b12      	ldr	r3, [pc, #72]	@ (8004500 <tcp_kill_timewait+0x58>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	60fb      	str	r3, [r7, #12]
 80044bc:	e012      	b.n	80044e4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80044be:	4b11      	ldr	r3, [pc, #68]	@ (8004504 <tcp_kill_timewait+0x5c>)
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6a1b      	ldr	r3, [r3, #32]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d807      	bhi.n	80044de <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80044ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004504 <tcp_kill_timewait+0x5c>)
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6a1b      	ldr	r3, [r3, #32]
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	60fb      	str	r3, [r7, #12]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1e9      	bne.n	80044be <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d002      	beq.n	80044f6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80044f0:	68b8      	ldr	r0, [r7, #8]
 80044f2:	f7ff fa8d 	bl	8003a10 <tcp_abort>
  }
}
 80044f6:	bf00      	nop
 80044f8:	3710      	adds	r7, #16
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	24008b1c 	.word	0x24008b1c
 8004504:	24008b0c 	.word	0x24008b0c

08004508 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800450e:	4b10      	ldr	r3, [pc, #64]	@ (8004550 <tcp_handle_closepend+0x48>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8004514:	e014      	b.n	8004540 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	8b5b      	ldrh	r3, [r3, #26]
 8004520:	f003 0308 	and.w	r3, r3, #8
 8004524:	2b00      	cmp	r3, #0
 8004526:	d009      	beq.n	800453c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	8b5b      	ldrh	r3, [r3, #26]
 800452c:	f023 0308 	bic.w	r3, r3, #8
 8004530:	b29a      	uxth	r2, r3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f7ff f946 	bl	80037c8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1e7      	bne.n	8004516 <tcp_handle_closepend+0xe>
  }
}
 8004546:	bf00      	nop
 8004548:	bf00      	nop
 800454a:	3708      	adds	r7, #8
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}
 8004550:	24008b18 	.word	0x24008b18

08004554 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	4603      	mov	r3, r0
 800455c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800455e:	2001      	movs	r0, #1
 8004560:	f7fd ffcc 	bl	80024fc <memp_malloc>
 8004564:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d126      	bne.n	80045ba <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800456c:	f7ff ffcc 	bl	8004508 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8004570:	f7ff ff9a 	bl	80044a8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8004574:	2001      	movs	r0, #1
 8004576:	f7fd ffc1 	bl	80024fc <memp_malloc>
 800457a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d11b      	bne.n	80045ba <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8004582:	2009      	movs	r0, #9
 8004584:	f7ff ff4e 	bl	8004424 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8004588:	2001      	movs	r0, #1
 800458a:	f7fd ffb7 	bl	80024fc <memp_malloc>
 800458e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d111      	bne.n	80045ba <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8004596:	2008      	movs	r0, #8
 8004598:	f7ff ff44 	bl	8004424 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800459c:	2001      	movs	r0, #1
 800459e:	f7fd ffad 	bl	80024fc <memp_malloc>
 80045a2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d107      	bne.n	80045ba <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80045aa:	79fb      	ldrb	r3, [r7, #7]
 80045ac:	4618      	mov	r0, r3
 80045ae:	f7ff feeb 	bl	8004388 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80045b2:	2001      	movs	r0, #1
 80045b4:	f7fd ffa2 	bl	80024fc <memp_malloc>
 80045b8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d03f      	beq.n	8004640 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80045c0:	2298      	movs	r2, #152	@ 0x98
 80045c2:	2100      	movs	r1, #0
 80045c4:	68f8      	ldr	r0, [r7, #12]
 80045c6:	f006 fbb2 	bl	800ad2e <memset>
    pcb->prio = prio;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	79fa      	ldrb	r2, [r7, #7]
 80045ce:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 80045d6:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	f640 3268 	movw	r2, #2920	@ 0xb68
 80045e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	22ff      	movs	r2, #255	@ 0xff
 80045ee:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80045f6:	865a      	strh	r2, [r3, #50]	@ 0x32
    /* Set initial TCP's retransmission timeout to 3000 ms by default.
       This value could be configured in lwipopts */
    pcb->rto = LWIP_TCP_RTO_TIME / TCP_SLOW_INTERVAL;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2206      	movs	r2, #6
 80045fc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = LWIP_TCP_RTO_TIME / TCP_SLOW_INTERVAL;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2206      	movs	r2, #6
 8004604:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800460c:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2201      	movs	r2, #1
 8004612:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8004616:	4b0d      	ldr	r3, [pc, #52]	@ (800464c <tcp_alloc+0xf8>)
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800461e:	4b0c      	ldr	r3, [pc, #48]	@ (8004650 <tcp_alloc+0xfc>)
 8004620:	781a      	ldrb	r2, [r3, #0]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800462c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	4a08      	ldr	r2, [pc, #32]	@ (8004654 <tcp_alloc+0x100>)
 8004634:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	4a07      	ldr	r2, [pc, #28]	@ (8004658 <tcp_alloc+0x104>)
 800463c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
    pcb_tci_init(pcb);
  }
  return pcb;
 8004640:	68fb      	ldr	r3, [r7, #12]
}
 8004642:	4618      	mov	r0, r3
 8004644:	3710      	adds	r7, #16
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	24008b0c 	.word	0x24008b0c
 8004650:	24008b22 	.word	0x24008b22
 8004654:	08004337 	.word	0x08004337
 8004658:	006ddd00 	.word	0x006ddd00

0800465c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d030      	beq.n	80046cc <tcp_pcb_purge+0x70>

  if (pcb->state != CLOSED &&
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	7d1b      	ldrb	r3, [r3, #20]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d02c      	beq.n	80046cc <tcp_pcb_purge+0x70>
      pcb->state != TIME_WAIT &&
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8004676:	2b0a      	cmp	r3, #10
 8004678:	d028      	beq.n	80046cc <tcp_pcb_purge+0x70>
      pcb->state != LISTEN) {
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800467e:	2b01      	cmp	r3, #1
 8004680:	d024      	beq.n	80046cc <tcp_pcb_purge+0x70>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004686:	2b00      	cmp	r3, #0
 8004688:	d007      	beq.n	800469a <tcp_pcb_purge+0x3e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800468e:	4618      	mov	r0, r3
 8004690:	f7fe fccc 	bl	800302c <pbuf_free>
      pcb->refused_data = NULL;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	675a      	str	r2, [r3, #116]	@ 0x74
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80046a0:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046a6:	4618      	mov	r0, r3
 80046a8:	f7ff fe18 	bl	80042dc <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046b0:	4618      	mov	r0, r3
 80046b2:	f7ff fe13 	bl	80042dc <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	66da      	str	r2, [r3, #108]	@ 0x6c
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80046cc:	3708      	adds	r7, #8
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
	...

080046d4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d102      	bne.n	80046ea <tcp_pcb_remove+0x16>
 80046e4:	4830      	ldr	r0, [pc, #192]	@ (80047a8 <tcp_pcb_remove+0xd4>)
 80046e6:	f006 fabd 	bl	800ac64 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d102      	bne.n	80046f6 <tcp_pcb_remove+0x22>
 80046f0:	482e      	ldr	r0, [pc, #184]	@ (80047ac <tcp_pcb_remove+0xd8>)
 80046f2:	f006 fab7 	bl	800ac64 <iprintf>

  TCP_RMV(pcblist, pcb);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	683a      	ldr	r2, [r7, #0]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d105      	bne.n	800470c <tcp_pcb_remove+0x38>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68da      	ldr	r2, [r3, #12]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	601a      	str	r2, [r3, #0]
 800470a:	e013      	b.n	8004734 <tcp_pcb_remove+0x60>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	60fb      	str	r3, [r7, #12]
 8004712:	e00c      	b.n	800472e <tcp_pcb_remove+0x5a>
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	683a      	ldr	r2, [r7, #0]
 800471a:	429a      	cmp	r2, r3
 800471c:	d104      	bne.n	8004728 <tcp_pcb_remove+0x54>
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	68da      	ldr	r2, [r3, #12]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	60da      	str	r2, [r3, #12]
 8004726:	e005      	b.n	8004734 <tcp_pcb_remove+0x60>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	60fb      	str	r3, [r7, #12]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d1ef      	bne.n	8004714 <tcp_pcb_remove+0x40>
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	2200      	movs	r2, #0
 8004738:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800473a:	6838      	ldr	r0, [r7, #0]
 800473c:	f7ff ff8e 	bl	800465c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	7d1b      	ldrb	r3, [r3, #20]
 8004744:	2b0a      	cmp	r3, #10
 8004746:	d013      	beq.n	8004770 <tcp_pcb_remove+0x9c>
      (pcb->state != LISTEN) &&
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800474c:	2b01      	cmp	r3, #1
 800474e:	d00f      	beq.n	8004770 <tcp_pcb_remove+0x9c>
      (pcb->flags & TF_ACK_DELAY)) {
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	8b5b      	ldrh	r3, [r3, #26]
 8004754:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8004758:	2b00      	cmp	r3, #0
 800475a:	d009      	beq.n	8004770 <tcp_pcb_remove+0x9c>
    tcp_ack_now(pcb);
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	8b5b      	ldrh	r3, [r3, #26]
 8004760:	f043 0302 	orr.w	r3, r3, #2
 8004764:	b29a      	uxth	r2, r3
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800476a:	6838      	ldr	r0, [r7, #0]
 800476c:	f002 fa9c 	bl	8006ca8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	7d1b      	ldrb	r3, [r3, #20]
 8004774:	2b01      	cmp	r3, #1
 8004776:	d00d      	beq.n	8004794 <tcp_pcb_remove+0xc0>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800477c:	2b00      	cmp	r3, #0
 800477e:	d002      	beq.n	8004786 <tcp_pcb_remove+0xb2>
 8004780:	480b      	ldr	r0, [pc, #44]	@ (80047b0 <tcp_pcb_remove+0xdc>)
 8004782:	f006 fa6f 	bl	800ac64 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800478a:	2b00      	cmp	r3, #0
 800478c:	d002      	beq.n	8004794 <tcp_pcb_remove+0xc0>
 800478e:	4809      	ldr	r0, [pc, #36]	@ (80047b4 <tcp_pcb_remove+0xe0>)
 8004790:	f006 fa68 	bl	800ac64 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	2200      	movs	r2, #0
 8004798:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	2200      	movs	r2, #0
 800479e:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80047a0:	bf00      	nop
 80047a2:	3710      	adds	r7, #16
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	0800c3a0 	.word	0x0800c3a0
 80047ac:	0800c3bc 	.word	0x0800c3bc
 80047b0:	0800c3dc 	.word	0x0800c3dc
 80047b4:	0800c3f4 	.word	0x0800c3f4

080047b8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b082      	sub	sp, #8
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d102      	bne.n	80047cc <tcp_next_iss+0x14>
 80047c6:	4808      	ldr	r0, [pc, #32]	@ (80047e8 <tcp_next_iss+0x30>)
 80047c8:	f006 fa4c 	bl	800ac64 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80047cc:	4b07      	ldr	r3, [pc, #28]	@ (80047ec <tcp_next_iss+0x34>)
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	4b07      	ldr	r3, [pc, #28]	@ (80047f0 <tcp_next_iss+0x38>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4413      	add	r3, r2
 80047d6:	4a05      	ldr	r2, [pc, #20]	@ (80047ec <tcp_next_iss+0x34>)
 80047d8:	6013      	str	r3, [r2, #0]
  return iss;
 80047da:	4b04      	ldr	r3, [pc, #16]	@ (80047ec <tcp_next_iss+0x34>)
 80047dc:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3708      	adds	r7, #8
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	0800c410 	.word	0x0800c410
 80047ec:	24000008 	.word	0x24000008
 80047f0:	24008b0c 	.word	0x24008b0c

080047f4 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b086      	sub	sp, #24
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	4603      	mov	r3, r0
 80047fc:	60b9      	str	r1, [r7, #8]
 80047fe:	607a      	str	r2, [r7, #4]
 8004800:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d102      	bne.n	800480e <tcp_eff_send_mss_netif+0x1a>
 8004808:	4812      	ldr	r0, [pc, #72]	@ (8004854 <tcp_eff_send_mss_netif+0x60>)
 800480a:	f006 fa2b 	bl	800ac64 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d101      	bne.n	8004818 <tcp_eff_send_mss_netif+0x24>
      return sendmss;
 8004814:	89fb      	ldrh	r3, [r7, #14]
 8004816:	e019      	b.n	800484c <tcp_eff_send_mss_netif+0x58>
    }
    mtu = outif->mtu;
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800481c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800481e:	8afb      	ldrh	r3, [r7, #22]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d012      	beq.n	800484a <tcp_eff_send_mss_netif+0x56>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8004824:	2328      	movs	r3, #40	@ 0x28
 8004826:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8004828:	8afa      	ldrh	r2, [r7, #22]
 800482a:	8abb      	ldrh	r3, [r7, #20]
 800482c:	429a      	cmp	r2, r3
 800482e:	d904      	bls.n	800483a <tcp_eff_send_mss_netif+0x46>
 8004830:	8afa      	ldrh	r2, [r7, #22]
 8004832:	8abb      	ldrh	r3, [r7, #20]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	b29b      	uxth	r3, r3
 8004838:	e000      	b.n	800483c <tcp_eff_send_mss_netif+0x48>
 800483a:	2300      	movs	r3, #0
 800483c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800483e:	8a7a      	ldrh	r2, [r7, #18]
 8004840:	89fb      	ldrh	r3, [r7, #14]
 8004842:	4293      	cmp	r3, r2
 8004844:	bf28      	it	cs
 8004846:	4613      	movcs	r3, r2
 8004848:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800484a:	89fb      	ldrh	r3, [r7, #14]
}
 800484c:	4618      	mov	r0, r3
 800484e:	3718      	adds	r7, #24
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}
 8004854:	0800c42c 	.word	0x0800c42c

08004858 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d115      	bne.n	8004898 <tcp_netif_ip_addr_changed_pcblist+0x40>
 800486c:	480e      	ldr	r0, [pc, #56]	@ (80048a8 <tcp_netif_ip_addr_changed_pcblist+0x50>)
 800486e:	f006 f9f9 	bl	800ac64 <iprintf>

  while (pcb != NULL) {
 8004872:	e011      	b.n	8004898 <tcp_netif_ip_addr_changed_pcblist+0x40>
    /* PCB bound to current local interface address? */
    if (ip_addr_eq(&pcb->local_ip, old_addr)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	429a      	cmp	r2, r3
 800487e:	d108      	bne.n	8004892 <tcp_netif_ip_addr_changed_pcblist+0x3a>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8004886:	68f8      	ldr	r0, [r7, #12]
 8004888:	f7ff f8c2 	bl	8003a10 <tcp_abort>
      pcb = next;
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	60fb      	str	r3, [r7, #12]
 8004890:	e002      	b.n	8004898 <tcp_netif_ip_addr_changed_pcblist+0x40>
    } else {
      pcb = pcb->next;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d1ea      	bne.n	8004874 <tcp_netif_ip_addr_changed_pcblist+0x1c>
    }
  }
}
 800489e:	bf00      	nop
 80048a0:	bf00      	nop
 80048a2:	3710      	adds	r7, #16
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	0800c454 	.word	0x0800c454

080048ac <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d02a      	beq.n	8004912 <tcp_netif_ip_addr_changed+0x66>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d026      	beq.n	8004912 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80048c4:	4b15      	ldr	r3, [pc, #84]	@ (800491c <tcp_netif_ip_addr_changed+0x70>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4619      	mov	r1, r3
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f7ff ffc4 	bl	8004858 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80048d0:	4b13      	ldr	r3, [pc, #76]	@ (8004920 <tcp_netif_ip_addr_changed+0x74>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4619      	mov	r1, r3
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f7ff ffbe 	bl	8004858 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d017      	beq.n	8004912 <tcp_netif_ip_addr_changed+0x66>
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d013      	beq.n	8004912 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80048ea:	4b0e      	ldr	r3, [pc, #56]	@ (8004924 <tcp_netif_ip_addr_changed+0x78>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	60fb      	str	r3, [r7, #12]
 80048f0:	e00c      	b.n	800490c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_eq(&lpcb->local_ip, old_addr)) {
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d103      	bne.n	8004906 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	60fb      	str	r3, [r7, #12]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1ef      	bne.n	80048f2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8004912:	bf00      	nop
 8004914:	3710      	adds	r7, #16
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	24008b18 	.word	0x24008b18
 8004920:	24008b10 	.word	0x24008b10
 8004924:	24008b14 	.word	0x24008b14

08004928 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8004928:	b590      	push	{r4, r7, lr}
 800492a:	b08d      	sub	sp, #52	@ 0x34
 800492c:	af04      	add	r7, sp, #16
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d102      	bne.n	800493e <tcp_input+0x16>
 8004938:	4898      	ldr	r0, [pc, #608]	@ (8004b9c <tcp_input+0x274>)
 800493a:	f006 f993 	bl	800ac64 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	4a97      	ldr	r2, [pc, #604]	@ (8004ba0 <tcp_input+0x278>)
 8004944:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	895b      	ldrh	r3, [r3, #10]
 800494a:	2b13      	cmp	r3, #19
 800494c:	f240 83b5 	bls.w	80050ba <tcp_input+0x792>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8004950:	4b94      	ldr	r3, [pc, #592]	@ (8004ba4 <tcp_input+0x27c>)
 8004952:	695b      	ldr	r3, [r3, #20]
 8004954:	4a93      	ldr	r2, [pc, #588]	@ (8004ba4 <tcp_input+0x27c>)
 8004956:	6812      	ldr	r2, [r2, #0]
 8004958:	4611      	mov	r1, r2
 800495a:	4618      	mov	r0, r3
 800495c:	f005 f9d6 	bl	8009d0c <ip4_addr_isbroadcast_u32>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	f040 83ab 	bne.w	80050be <tcp_input+0x796>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8004968:	4b8e      	ldr	r3, [pc, #568]	@ (8004ba4 <tcp_input+0x27c>)
 800496a:	695b      	ldr	r3, [r3, #20]
 800496c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8004970:	2be0      	cmp	r3, #224	@ 0xe0
 8004972:	f000 83a4 	beq.w	80050be <tcp_input+0x796>
  }

#if CHECKSUM_CHECK_TCP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_TCP) {
    /* Verify TCP checksum. */
    u16_t chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	891a      	ldrh	r2, [r3, #8]
 800497a:	4b8b      	ldr	r3, [pc, #556]	@ (8004ba8 <tcp_input+0x280>)
 800497c:	9300      	str	r3, [sp, #0]
 800497e:	4b8b      	ldr	r3, [pc, #556]	@ (8004bac <tcp_input+0x284>)
 8004980:	2106      	movs	r1, #6
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f7fd f97a 	bl	8001c7c <ip_chksum_pseudo>
 8004988:	4603      	mov	r3, r0
 800498a:	823b      	strh	r3, [r7, #16]
                                    ip_current_src_addr(), ip_current_dest_addr());
    if (chksum != 0) {
 800498c:	8a3b      	ldrh	r3, [r7, #16]
 800498e:	2b00      	cmp	r3, #0
 8004990:	f040 8397 	bne.w	80050c2 <tcp_input+0x79a>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8004994:	4b82      	ldr	r3, [pc, #520]	@ (8004ba0 <tcp_input+0x278>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	899b      	ldrh	r3, [r3, #12]
 800499a:	b29b      	uxth	r3, r3
 800499c:	4618      	mov	r0, r3
 800499e:	f7fd f83b 	bl	8001a18 <lwip_htons>
 80049a2:	4603      	mov	r3, r0
 80049a4:	0b1b      	lsrs	r3, r3, #12
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	73fb      	strb	r3, [r7, #15]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80049ae:	7bfb      	ldrb	r3, [r7, #15]
 80049b0:	2b13      	cmp	r3, #19
 80049b2:	f240 8388 	bls.w	80050c6 <tcp_input+0x79e>
 80049b6:	7bfb      	ldrb	r3, [r7, #15]
 80049b8:	b29a      	uxth	r2, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	891b      	ldrh	r3, [r3, #8]
 80049be:	429a      	cmp	r2, r3
 80049c0:	f200 8381 	bhi.w	80050c6 <tcp_input+0x79e>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80049c4:	7bfb      	ldrb	r3, [r7, #15]
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	3b14      	subs	r3, #20
 80049ca:	b29a      	uxth	r2, r3
 80049cc:	4b78      	ldr	r3, [pc, #480]	@ (8004bb0 <tcp_input+0x288>)
 80049ce:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80049d0:	4b78      	ldr	r3, [pc, #480]	@ (8004bb4 <tcp_input+0x28c>)
 80049d2:	2200      	movs	r2, #0
 80049d4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	895a      	ldrh	r2, [r3, #10]
 80049da:	7bfb      	ldrb	r3, [r7, #15]
 80049dc:	b29b      	uxth	r3, r3
 80049de:	429a      	cmp	r2, r3
 80049e0:	d309      	bcc.n	80049f6 <tcp_input+0xce>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80049e2:	4b73      	ldr	r3, [pc, #460]	@ (8004bb0 <tcp_input+0x288>)
 80049e4:	881a      	ldrh	r2, [r3, #0]
 80049e6:	4b74      	ldr	r3, [pc, #464]	@ (8004bb8 <tcp_input+0x290>)
 80049e8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80049ea:	7bfb      	ldrb	r3, [r7, #15]
 80049ec:	4619      	mov	r1, r3
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f7fe faa8 	bl	8002f44 <pbuf_remove_header>
 80049f4:	e045      	b.n	8004a82 <tcp_input+0x15a>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d102      	bne.n	8004a04 <tcp_input+0xdc>
 80049fe:	486f      	ldr	r0, [pc, #444]	@ (8004bbc <tcp_input+0x294>)
 8004a00:	f006 f930 	bl	800ac64 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8004a04:	2114      	movs	r1, #20
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f7fe fa9c 	bl	8002f44 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	895a      	ldrh	r2, [r3, #10]
 8004a10:	4b69      	ldr	r3, [pc, #420]	@ (8004bb8 <tcp_input+0x290>)
 8004a12:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8004a14:	4b66      	ldr	r3, [pc, #408]	@ (8004bb0 <tcp_input+0x288>)
 8004a16:	881a      	ldrh	r2, [r3, #0]
 8004a18:	4b67      	ldr	r3, [pc, #412]	@ (8004bb8 <tcp_input+0x290>)
 8004a1a:	881b      	ldrh	r3, [r3, #0]
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	81bb      	strh	r3, [r7, #12]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8004a20:	4b65      	ldr	r3, [pc, #404]	@ (8004bb8 <tcp_input+0x290>)
 8004a22:	881b      	ldrh	r3, [r3, #0]
 8004a24:	4619      	mov	r1, r3
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f7fe fa8c 	bl	8002f44 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	895b      	ldrh	r3, [r3, #10]
 8004a32:	89ba      	ldrh	r2, [r7, #12]
 8004a34:	429a      	cmp	r2, r3
 8004a36:	f200 8348 	bhi.w	80050ca <tcp_input+0x7a2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	4a5c      	ldr	r2, [pc, #368]	@ (8004bb4 <tcp_input+0x28c>)
 8004a42:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	89ba      	ldrh	r2, [r7, #12]
 8004a4a:	4611      	mov	r1, r2
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f7fe fa79 	bl	8002f44 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	891a      	ldrh	r2, [r3, #8]
 8004a56:	89bb      	ldrh	r3, [r7, #12]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	b29a      	uxth	r2, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	895b      	ldrh	r3, [r3, #10]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d002      	beq.n	8004a6e <tcp_input+0x146>
 8004a68:	4855      	ldr	r0, [pc, #340]	@ (8004bc0 <tcp_input+0x298>)
 8004a6a:	f006 f8fb 	bl	800ac64 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	891a      	ldrh	r2, [r3, #8]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	891b      	ldrh	r3, [r3, #8]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d002      	beq.n	8004a82 <tcp_input+0x15a>
 8004a7c:	4851      	ldr	r0, [pc, #324]	@ (8004bc4 <tcp_input+0x29c>)
 8004a7e:	f006 f8f1 	bl	800ac64 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8004a82:	4b47      	ldr	r3, [pc, #284]	@ (8004ba0 <tcp_input+0x278>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	881b      	ldrh	r3, [r3, #0]
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	4a45      	ldr	r2, [pc, #276]	@ (8004ba0 <tcp_input+0x278>)
 8004a8c:	6814      	ldr	r4, [r2, #0]
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f7fc ffc2 	bl	8001a18 <lwip_htons>
 8004a94:	4603      	mov	r3, r0
 8004a96:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8004a98:	4b41      	ldr	r3, [pc, #260]	@ (8004ba0 <tcp_input+0x278>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	885b      	ldrh	r3, [r3, #2]
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	4a3f      	ldr	r2, [pc, #252]	@ (8004ba0 <tcp_input+0x278>)
 8004aa2:	6814      	ldr	r4, [r2, #0]
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f7fc ffb7 	bl	8001a18 <lwip_htons>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8004aae:	4b3c      	ldr	r3, [pc, #240]	@ (8004ba0 <tcp_input+0x278>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	4a3a      	ldr	r2, [pc, #232]	@ (8004ba0 <tcp_input+0x278>)
 8004ab6:	6814      	ldr	r4, [r2, #0]
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f7fc ffc2 	bl	8001a42 <lwip_htonl>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	6063      	str	r3, [r4, #4]
 8004ac2:	6863      	ldr	r3, [r4, #4]
 8004ac4:	4a40      	ldr	r2, [pc, #256]	@ (8004bc8 <tcp_input+0x2a0>)
 8004ac6:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8004ac8:	4b35      	ldr	r3, [pc, #212]	@ (8004ba0 <tcp_input+0x278>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	4a34      	ldr	r2, [pc, #208]	@ (8004ba0 <tcp_input+0x278>)
 8004ad0:	6814      	ldr	r4, [r2, #0]
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f7fc ffb5 	bl	8001a42 <lwip_htonl>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	60a3      	str	r3, [r4, #8]
 8004adc:	68a3      	ldr	r3, [r4, #8]
 8004ade:	4a3b      	ldr	r2, [pc, #236]	@ (8004bcc <tcp_input+0x2a4>)
 8004ae0:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8004ae2:	4b2f      	ldr	r3, [pc, #188]	@ (8004ba0 <tcp_input+0x278>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	89db      	ldrh	r3, [r3, #14]
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	4a2d      	ldr	r2, [pc, #180]	@ (8004ba0 <tcp_input+0x278>)
 8004aec:	6814      	ldr	r4, [r2, #0]
 8004aee:	4618      	mov	r0, r3
 8004af0:	f7fc ff92 	bl	8001a18 <lwip_htons>
 8004af4:	4603      	mov	r3, r0
 8004af6:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8004af8:	4b29      	ldr	r3, [pc, #164]	@ (8004ba0 <tcp_input+0x278>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	899b      	ldrh	r3, [r3, #12]
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	4618      	mov	r0, r3
 8004b02:	f7fc ff89 	bl	8001a18 <lwip_htons>
 8004b06:	4603      	mov	r3, r0
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b0e:	b2da      	uxtb	r2, r3
 8004b10:	4b2f      	ldr	r3, [pc, #188]	@ (8004bd0 <tcp_input+0x2a8>)
 8004b12:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	891a      	ldrh	r2, [r3, #8]
 8004b18:	4b2e      	ldr	r3, [pc, #184]	@ (8004bd4 <tcp_input+0x2ac>)
 8004b1a:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8004b1c:	4b2c      	ldr	r3, [pc, #176]	@ (8004bd0 <tcp_input+0x2a8>)
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	f003 0303 	and.w	r3, r3, #3
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d00c      	beq.n	8004b42 <tcp_input+0x21a>
    tcplen++;
 8004b28:	4b2a      	ldr	r3, [pc, #168]	@ (8004bd4 <tcp_input+0x2ac>)
 8004b2a:	881b      	ldrh	r3, [r3, #0]
 8004b2c:	3301      	adds	r3, #1
 8004b2e:	b29a      	uxth	r2, r3
 8004b30:	4b28      	ldr	r3, [pc, #160]	@ (8004bd4 <tcp_input+0x2ac>)
 8004b32:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	891a      	ldrh	r2, [r3, #8]
 8004b38:	4b26      	ldr	r3, [pc, #152]	@ (8004bd4 <tcp_input+0x2ac>)
 8004b3a:	881b      	ldrh	r3, [r3, #0]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	f200 82c6 	bhi.w	80050ce <tcp_input+0x7a6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8004b42:	2300      	movs	r3, #0
 8004b44:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8004b46:	4b24      	ldr	r3, [pc, #144]	@ (8004bd8 <tcp_input+0x2b0>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	61fb      	str	r3, [r7, #28]
 8004b4c:	e08c      	b.n	8004c68 <tcp_input+0x340>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	7d1b      	ldrb	r3, [r3, #20]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d102      	bne.n	8004b5c <tcp_input+0x234>
 8004b56:	4821      	ldr	r0, [pc, #132]	@ (8004bdc <tcp_input+0x2b4>)
 8004b58:	f006 f884 	bl	800ac64 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	7d1b      	ldrb	r3, [r3, #20]
 8004b60:	2b0a      	cmp	r3, #10
 8004b62:	d102      	bne.n	8004b6a <tcp_input+0x242>
 8004b64:	481e      	ldr	r0, [pc, #120]	@ (8004be0 <tcp_input+0x2b8>)
 8004b66:	f006 f87d 	bl	800ac64 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8004b6a:	69fb      	ldr	r3, [r7, #28]
 8004b6c:	7d1b      	ldrb	r3, [r3, #20]
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d102      	bne.n	8004b78 <tcp_input+0x250>
 8004b72:	481c      	ldr	r0, [pc, #112]	@ (8004be4 <tcp_input+0x2bc>)
 8004b74:	f006 f876 	bl	800ac64 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8004b78:	69fb      	ldr	r3, [r7, #28]
 8004b7a:	7a1b      	ldrb	r3, [r3, #8]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d033      	beq.n	8004be8 <tcp_input+0x2c0>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	7a1a      	ldrb	r2, [r3, #8]
 8004b84:	4b07      	ldr	r3, [pc, #28]	@ (8004ba4 <tcp_input+0x27c>)
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004b8c:	3301      	adds	r3, #1
 8004b8e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d029      	beq.n	8004be8 <tcp_input+0x2c0>
      prev = pcb;
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	61bb      	str	r3, [r7, #24]
      continue;
 8004b98:	e063      	b.n	8004c62 <tcp_input+0x33a>
 8004b9a:	bf00      	nop
 8004b9c:	0800c488 	.word	0x0800c488
 8004ba0:	24008b34 	.word	0x24008b34
 8004ba4:	240024dc 	.word	0x240024dc
 8004ba8:	240024f0 	.word	0x240024f0
 8004bac:	240024ec 	.word	0x240024ec
 8004bb0:	24008b38 	.word	0x24008b38
 8004bb4:	24008b3c 	.word	0x24008b3c
 8004bb8:	24008b3a 	.word	0x24008b3a
 8004bbc:	0800c4a0 	.word	0x0800c4a0
 8004bc0:	0800c4b0 	.word	0x0800c4b0
 8004bc4:	0800c4bc 	.word	0x0800c4bc
 8004bc8:	24008b44 	.word	0x24008b44
 8004bcc:	24008b48 	.word	0x24008b48
 8004bd0:	24008b50 	.word	0x24008b50
 8004bd4:	24008b4e 	.word	0x24008b4e
 8004bd8:	24008b18 	.word	0x24008b18
 8004bdc:	0800c4dc 	.word	0x0800c4dc
 8004be0:	0800c504 	.word	0x0800c504
 8004be4:	0800c530 	.word	0x0800c530
    }

    if (pcb->remote_port == tcphdr->src &&
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	8b1a      	ldrh	r2, [r3, #24]
 8004bec:	4b6c      	ldr	r3, [pc, #432]	@ (8004da0 <tcp_input+0x478>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	881b      	ldrh	r3, [r3, #0]
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d132      	bne.n	8004c5e <tcp_input+0x336>
        pcb->local_port == tcphdr->dest &&
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	8ada      	ldrh	r2, [r3, #22]
 8004bfc:	4b68      	ldr	r3, [pc, #416]	@ (8004da0 <tcp_input+0x478>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	885b      	ldrh	r3, [r3, #2]
 8004c02:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d12a      	bne.n	8004c5e <tcp_input+0x336>
        ip_addr_eq(&pcb->remote_ip, ip_current_src_addr()) &&
 8004c08:	69fb      	ldr	r3, [r7, #28]
 8004c0a:	685a      	ldr	r2, [r3, #4]
 8004c0c:	4b65      	ldr	r3, [pc, #404]	@ (8004da4 <tcp_input+0x47c>)
 8004c0e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d124      	bne.n	8004c5e <tcp_input+0x336>
        ip_addr_eq(&pcb->local_ip, ip_current_dest_addr())) {
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	4b62      	ldr	r3, [pc, #392]	@ (8004da4 <tcp_input+0x47c>)
 8004c1a:	695b      	ldr	r3, [r3, #20]
        ip_addr_eq(&pcb->remote_ip, ip_current_src_addr()) &&
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d11e      	bne.n	8004c5e <tcp_input+0x336>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	69fa      	ldr	r2, [r7, #28]
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d102      	bne.n	8004c30 <tcp_input+0x308>
 8004c2a:	485f      	ldr	r0, [pc, #380]	@ (8004da8 <tcp_input+0x480>)
 8004c2c:	f006 f81a 	bl	800ac64 <iprintf>
      if (prev != NULL) {
 8004c30:	69bb      	ldr	r3, [r7, #24]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d00a      	beq.n	8004c4c <tcp_input+0x324>
        prev->next = pcb->next;
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	68da      	ldr	r2, [r3, #12]
 8004c3a:	69bb      	ldr	r3, [r7, #24]
 8004c3c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8004c3e:	4b5b      	ldr	r3, [pc, #364]	@ (8004dac <tcp_input+0x484>)
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8004c46:	4a59      	ldr	r2, [pc, #356]	@ (8004dac <tcp_input+0x484>)
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	69fa      	ldr	r2, [r7, #28]
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d10d      	bne.n	8004c72 <tcp_input+0x34a>
 8004c56:	4856      	ldr	r0, [pc, #344]	@ (8004db0 <tcp_input+0x488>)
 8004c58:	f006 f804 	bl	800ac64 <iprintf>
      break;
 8004c5c:	e009      	b.n	8004c72 <tcp_input+0x34a>
    }
    prev = pcb;
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	61fb      	str	r3, [r7, #28]
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	f47f af6f 	bne.w	8004b4e <tcp_input+0x226>
 8004c70:	e000      	b.n	8004c74 <tcp_input+0x34c>
      break;
 8004c72:	bf00      	nop
  }

  if (pcb == NULL) {
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	f040 80a2 	bne.w	8004dc0 <tcp_input+0x498>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8004c7c:	4b4d      	ldr	r3, [pc, #308]	@ (8004db4 <tcp_input+0x48c>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	61fb      	str	r3, [r7, #28]
 8004c82:	e03b      	b.n	8004cfc <tcp_input+0x3d4>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8004c84:	69fb      	ldr	r3, [r7, #28]
 8004c86:	7d1b      	ldrb	r3, [r3, #20]
 8004c88:	2b0a      	cmp	r3, #10
 8004c8a:	d002      	beq.n	8004c92 <tcp_input+0x36a>
 8004c8c:	484a      	ldr	r0, [pc, #296]	@ (8004db8 <tcp_input+0x490>)
 8004c8e:	f005 ffe9 	bl	800ac64 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	7a1b      	ldrb	r3, [r3, #8]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d009      	beq.n	8004cae <tcp_input+0x386>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	7a1a      	ldrb	r2, [r3, #8]
 8004c9e:	4b41      	ldr	r3, [pc, #260]	@ (8004da4 <tcp_input+0x47c>)
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d122      	bne.n	8004cf4 <tcp_input+0x3cc>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	8b1a      	ldrh	r2, [r3, #24]
 8004cb2:	4b3b      	ldr	r3, [pc, #236]	@ (8004da0 <tcp_input+0x478>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	881b      	ldrh	r3, [r3, #0]
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d11b      	bne.n	8004cf6 <tcp_input+0x3ce>
          pcb->local_port == tcphdr->dest &&
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	8ada      	ldrh	r2, [r3, #22]
 8004cc2:	4b37      	ldr	r3, [pc, #220]	@ (8004da0 <tcp_input+0x478>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	885b      	ldrh	r3, [r3, #2]
 8004cc8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d113      	bne.n	8004cf6 <tcp_input+0x3ce>
          ip_addr_eq(&pcb->remote_ip, ip_current_src_addr()) &&
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	685a      	ldr	r2, [r3, #4]
 8004cd2:	4b34      	ldr	r3, [pc, #208]	@ (8004da4 <tcp_input+0x47c>)
 8004cd4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d10d      	bne.n	8004cf6 <tcp_input+0x3ce>
          ip_addr_eq(&pcb->local_ip, ip_current_dest_addr())) {
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	4b31      	ldr	r3, [pc, #196]	@ (8004da4 <tcp_input+0x47c>)
 8004ce0:	695b      	ldr	r3, [r3, #20]
          ip_addr_eq(&pcb->remote_ip, ip_current_src_addr()) &&
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d107      	bne.n	8004cf6 <tcp_input+0x3ce>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8004ce6:	69f8      	ldr	r0, [r7, #28]
 8004ce8:	f000 fb36 	bl	8005358 <tcp_timewait_input>
        }
        pbuf_free(p);
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f7fe f99d 	bl	800302c <pbuf_free>
        return;
 8004cf2:	e1f2      	b.n	80050da <tcp_input+0x7b2>
        continue;
 8004cf4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	61fb      	str	r3, [r7, #28]
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d1c0      	bne.n	8004c84 <tcp_input+0x35c>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8004d02:	2300      	movs	r3, #0
 8004d04:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8004d06:	4b2d      	ldr	r3, [pc, #180]	@ (8004dbc <tcp_input+0x494>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	617b      	str	r3, [r7, #20]
 8004d0c:	e02a      	b.n	8004d64 <tcp_input+0x43c>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	7a1b      	ldrb	r3, [r3, #8]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d00c      	beq.n	8004d30 <tcp_input+0x408>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	7a1a      	ldrb	r2, [r3, #8]
 8004d1a:	4b22      	ldr	r3, [pc, #136]	@ (8004da4 <tcp_input+0x47c>)
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004d22:	3301      	adds	r3, #1
 8004d24:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d002      	beq.n	8004d30 <tcp_input+0x408>
        prev = (struct tcp_pcb *)lpcb;
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	61bb      	str	r3, [r7, #24]
        continue;
 8004d2e:	e016      	b.n	8004d5e <tcp_input+0x436>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	8ada      	ldrh	r2, [r3, #22]
 8004d34:	4b1a      	ldr	r3, [pc, #104]	@ (8004da0 <tcp_input+0x478>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	885b      	ldrh	r3, [r3, #2]
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d10c      	bne.n	8004d5a <tcp_input+0x432>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_eq(&lpcb->local_ip, ip_current_dest_addr())) {
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	4b17      	ldr	r3, [pc, #92]	@ (8004da4 <tcp_input+0x47c>)
 8004d46:	695b      	ldr	r3, [r3, #20]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d00f      	beq.n	8004d6c <tcp_input+0x444>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00d      	beq.n	8004d6e <tcp_input+0x446>
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d009      	beq.n	8004d6e <tcp_input+0x446>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	617b      	str	r3, [r7, #20]
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1d1      	bne.n	8004d0e <tcp_input+0x3e6>
 8004d6a:	e000      	b.n	8004d6e <tcp_input+0x446>
            break;
 8004d6c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d025      	beq.n	8004dc0 <tcp_input+0x498>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8004d74:	69bb      	ldr	r3, [r7, #24]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d00a      	beq.n	8004d90 <tcp_input+0x468>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	68da      	ldr	r2, [r3, #12]
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8004d82:	4b0e      	ldr	r3, [pc, #56]	@ (8004dbc <tcp_input+0x494>)
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8004d8a:	4a0c      	ldr	r2, [pc, #48]	@ (8004dbc <tcp_input+0x494>)
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8004d90:	6978      	ldr	r0, [r7, #20]
 8004d92:	f000 f9eb 	bl	800516c <tcp_listen_input>
      }
      pbuf_free(p);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f7fe f948 	bl	800302c <pbuf_free>
      return;
 8004d9c:	e19d      	b.n	80050da <tcp_input+0x7b2>
 8004d9e:	bf00      	nop
 8004da0:	24008b34 	.word	0x24008b34
 8004da4:	240024dc 	.word	0x240024dc
 8004da8:	0800c558 	.word	0x0800c558
 8004dac:	24008b18 	.word	0x24008b18
 8004db0:	0800c584 	.word	0x0800c584
 8004db4:	24008b1c 	.word	0x24008b1c
 8004db8:	0800c5b0 	.word	0x0800c5b0
 8004dbc:	24008b14 	.word	0x24008b14
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	f000 814e 	beq.w	8005064 <tcp_input+0x73c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8004dc8:	4b9c      	ldr	r3, [pc, #624]	@ (800503c <tcp_input+0x714>)
 8004dca:	2200      	movs	r2, #0
 8004dcc:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	891a      	ldrh	r2, [r3, #8]
 8004dd2:	4b9a      	ldr	r3, [pc, #616]	@ (800503c <tcp_input+0x714>)
 8004dd4:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8004dd6:	4a99      	ldr	r2, [pc, #612]	@ (800503c <tcp_input+0x714>)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8004ddc:	4b98      	ldr	r3, [pc, #608]	@ (8005040 <tcp_input+0x718>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a96      	ldr	r2, [pc, #600]	@ (800503c <tcp_input+0x714>)
 8004de2:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8004de4:	4b97      	ldr	r3, [pc, #604]	@ (8005044 <tcp_input+0x71c>)
 8004de6:	2200      	movs	r2, #0
 8004de8:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8004dea:	4b97      	ldr	r3, [pc, #604]	@ (8005048 <tcp_input+0x720>)
 8004dec:	2200      	movs	r2, #0
 8004dee:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8004df0:	4b96      	ldr	r3, [pc, #600]	@ (800504c <tcp_input+0x724>)
 8004df2:	2200      	movs	r2, #0
 8004df4:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8004df6:	4b96      	ldr	r3, [pc, #600]	@ (8005050 <tcp_input+0x728>)
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	f003 0308 	and.w	r3, r3, #8
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d006      	beq.n	8004e10 <tcp_input+0x4e8>
      p->flags |= PBUF_FLAG_PUSH;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	7b5b      	ldrb	r3, [r3, #13]
 8004e06:	f043 0301 	orr.w	r3, r3, #1
 8004e0a:	b2da      	uxtb	r2, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8004e10:	69fb      	ldr	r3, [r7, #28]
 8004e12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d017      	beq.n	8004e48 <tcp_input+0x520>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8004e18:	69f8      	ldr	r0, [r7, #28]
 8004e1a:	f7ff f9ef 	bl	80041fc <tcp_process_refused_data>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	f113 0f0d 	cmn.w	r3, #13
 8004e24:	d007      	beq.n	8004e36 <tcp_input+0x50e>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00c      	beq.n	8004e48 <tcp_input+0x520>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8004e2e:	4b89      	ldr	r3, [pc, #548]	@ (8005054 <tcp_input+0x72c>)
 8004e30:	881b      	ldrh	r3, [r3, #0]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d008      	beq.n	8004e48 <tcp_input+0x520>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	f040 80de 	bne.w	8004ffc <tcp_input+0x6d4>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8004e40:	69f8      	ldr	r0, [r7, #28]
 8004e42:	f002 fd39 	bl	80078b8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8004e46:	e0d9      	b.n	8004ffc <tcp_input+0x6d4>
      }
    }
    tcp_input_pcb = pcb;
 8004e48:	4a83      	ldr	r2, [pc, #524]	@ (8005058 <tcp_input+0x730>)
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8004e4e:	69f8      	ldr	r0, [r7, #28]
 8004e50:	f000 faf4 	bl	800543c <tcp_process>
 8004e54:	4603      	mov	r3, r0
 8004e56:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8004e58:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004e5c:	f113 0f0d 	cmn.w	r3, #13
 8004e60:	f000 80ce 	beq.w	8005000 <tcp_input+0x6d8>
      if (recv_flags & TF_RESET) {
 8004e64:	4b78      	ldr	r3, [pc, #480]	@ (8005048 <tcp_input+0x720>)
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	f003 0308 	and.w	r3, r3, #8
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d015      	beq.n	8004e9c <tcp_input+0x574>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d008      	beq.n	8004e8c <tcp_input+0x564>
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e80:	69fa      	ldr	r2, [r7, #28]
 8004e82:	6912      	ldr	r2, [r2, #16]
 8004e84:	f06f 010d 	mvn.w	r1, #13
 8004e88:	4610      	mov	r0, r2
 8004e8a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8004e8c:	69f9      	ldr	r1, [r7, #28]
 8004e8e:	4873      	ldr	r0, [pc, #460]	@ (800505c <tcp_input+0x734>)
 8004e90:	f7ff fc20 	bl	80046d4 <tcp_pcb_remove>
        tcp_free(pcb);
 8004e94:	69f8      	ldr	r0, [r7, #28]
 8004e96:	f7fe fb2d 	bl	80034f4 <tcp_free>
 8004e9a:	e0bc      	b.n	8005016 <tcp_input+0x6ee>
      } else {
        err = ERR_OK;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8004ea0:	4b6a      	ldr	r3, [pc, #424]	@ (800504c <tcp_input+0x724>)
 8004ea2:	881b      	ldrh	r3, [r3, #0]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d01b      	beq.n	8004ee0 <tcp_input+0x5b8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8004ea8:	4b68      	ldr	r3, [pc, #416]	@ (800504c <tcp_input+0x724>)
 8004eaa:	881b      	ldrh	r3, [r3, #0]
 8004eac:	817b      	strh	r3, [r7, #10]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d009      	beq.n	8004eca <tcp_input+0x5a2>
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004eba:	69fa      	ldr	r2, [r7, #28]
 8004ebc:	6910      	ldr	r0, [r2, #16]
 8004ebe:	897a      	ldrh	r2, [r7, #10]
 8004ec0:	69f9      	ldr	r1, [r7, #28]
 8004ec2:	4798      	blx	r3
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	74fb      	strb	r3, [r7, #19]
 8004ec8:	e001      	b.n	8004ece <tcp_input+0x5a6>
 8004eca:	2300      	movs	r3, #0
 8004ecc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8004ece:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004ed2:	f113 0f0d 	cmn.w	r3, #13
 8004ed6:	f000 8095 	beq.w	8005004 <tcp_input+0x6dc>
              goto aborted;
            }
          }
          recv_acked = 0;
 8004eda:	4b5c      	ldr	r3, [pc, #368]	@ (800504c <tcp_input+0x724>)
 8004edc:	2200      	movs	r2, #0
 8004ede:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8004ee0:	69f8      	ldr	r0, [r7, #28]
 8004ee2:	f000 f90b 	bl	80050fc <tcp_input_delayed_close>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	f040 808d 	bne.w	8005008 <tcp_input+0x6e0>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8004eee:	4b55      	ldr	r3, [pc, #340]	@ (8005044 <tcp_input+0x71c>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d03d      	beq.n	8004f72 <tcp_input+0x64a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d002      	beq.n	8004f04 <tcp_input+0x5dc>
 8004efe:	4858      	ldr	r0, [pc, #352]	@ (8005060 <tcp_input+0x738>)
 8004f00:	f005 feb0 	bl	800ac64 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	8b5b      	ldrh	r3, [r3, #26]
 8004f08:	f003 0310 	and.w	r3, r3, #16
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d008      	beq.n	8004f22 <tcp_input+0x5fa>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8004f10:	4b4c      	ldr	r3, [pc, #304]	@ (8005044 <tcp_input+0x71c>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4618      	mov	r0, r3
 8004f16:	f7fe f889 	bl	800302c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8004f1a:	69f8      	ldr	r0, [r7, #28]
 8004f1c:	f7fe fd78 	bl	8003a10 <tcp_abort>
            goto aborted;
 8004f20:	e079      	b.n	8005016 <tcp_input+0x6ee>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d00c      	beq.n	8004f46 <tcp_input+0x61e>
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	6918      	ldr	r0, [r3, #16]
 8004f36:	4b43      	ldr	r3, [pc, #268]	@ (8005044 <tcp_input+0x71c>)
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	69f9      	ldr	r1, [r7, #28]
 8004f3e:	47a0      	blx	r4
 8004f40:	4603      	mov	r3, r0
 8004f42:	74fb      	strb	r3, [r7, #19]
 8004f44:	e008      	b.n	8004f58 <tcp_input+0x630>
 8004f46:	4b3f      	ldr	r3, [pc, #252]	@ (8005044 <tcp_input+0x71c>)
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	69f9      	ldr	r1, [r7, #28]
 8004f4e:	2000      	movs	r0, #0
 8004f50:	f7ff f9f1 	bl	8004336 <tcp_recv_null>
 8004f54:	4603      	mov	r3, r0
 8004f56:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8004f58:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004f5c:	f113 0f0d 	cmn.w	r3, #13
 8004f60:	d054      	beq.n	800500c <tcp_input+0x6e4>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8004f62:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d003      	beq.n	8004f72 <tcp_input+0x64a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8004f6a:	4b36      	ldr	r3, [pc, #216]	@ (8005044 <tcp_input+0x71c>)
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8004f72:	4b35      	ldr	r3, [pc, #212]	@ (8005048 <tcp_input+0x720>)
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	f003 0320 	and.w	r3, r3, #32
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d031      	beq.n	8004fe2 <tcp_input+0x6ba>
          if (pcb->refused_data != NULL) {
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d009      	beq.n	8004f9a <tcp_input+0x672>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f8a:	7b5a      	ldrb	r2, [r3, #13]
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f90:	f042 0220 	orr.w	r2, r2, #32
 8004f94:	b2d2      	uxtb	r2, r2
 8004f96:	735a      	strb	r2, [r3, #13]
 8004f98:	e023      	b.n	8004fe2 <tcp_input+0x6ba>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8004f9a:	69fb      	ldr	r3, [r7, #28]
 8004f9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f9e:	f640 3268 	movw	r2, #2920	@ 0xb68
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d005      	beq.n	8004fb2 <tcp_input+0x68a>
              pcb->rcv_wnd++;
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004faa:	3301      	adds	r3, #1
 8004fac:	b29a      	uxth	r2, r3
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8004fb2:	69fb      	ldr	r3, [r7, #28]
 8004fb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d00b      	beq.n	8004fd4 <tcp_input+0x6ac>
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	6918      	ldr	r0, [r3, #16]
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	2200      	movs	r2, #0
 8004fca:	69f9      	ldr	r1, [r7, #28]
 8004fcc:	47a0      	blx	r4
 8004fce:	4603      	mov	r3, r0
 8004fd0:	74fb      	strb	r3, [r7, #19]
 8004fd2:	e001      	b.n	8004fd8 <tcp_input+0x6b0>
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8004fd8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004fdc:	f113 0f0d 	cmn.w	r3, #13
 8004fe0:	d016      	beq.n	8005010 <tcp_input+0x6e8>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8004fe2:	4b1d      	ldr	r3, [pc, #116]	@ (8005058 <tcp_input+0x730>)
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8004fe8:	69f8      	ldr	r0, [r7, #28]
 8004fea:	f000 f887 	bl	80050fc <tcp_input_delayed_close>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d10f      	bne.n	8005014 <tcp_input+0x6ec>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8004ff4:	69f8      	ldr	r0, [r7, #28]
 8004ff6:	f001 fe57 	bl	8006ca8 <tcp_output>
 8004ffa:	e00c      	b.n	8005016 <tcp_input+0x6ee>
        goto aborted;
 8004ffc:	bf00      	nop
 8004ffe:	e00a      	b.n	8005016 <tcp_input+0x6ee>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8005000:	bf00      	nop
 8005002:	e008      	b.n	8005016 <tcp_input+0x6ee>
              goto aborted;
 8005004:	bf00      	nop
 8005006:	e006      	b.n	8005016 <tcp_input+0x6ee>
          goto aborted;
 8005008:	bf00      	nop
 800500a:	e004      	b.n	8005016 <tcp_input+0x6ee>
            goto aborted;
 800500c:	bf00      	nop
 800500e:	e002      	b.n	8005016 <tcp_input+0x6ee>
              goto aborted;
 8005010:	bf00      	nop
 8005012:	e000      	b.n	8005016 <tcp_input+0x6ee>
          goto aborted;
 8005014:	bf00      	nop
    tcp_input_pcb = NULL;
 8005016:	4b10      	ldr	r3, [pc, #64]	@ (8005058 <tcp_input+0x730>)
 8005018:	2200      	movs	r2, #0
 800501a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800501c:	4b09      	ldr	r3, [pc, #36]	@ (8005044 <tcp_input+0x71c>)
 800501e:	2200      	movs	r2, #0
 8005020:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8005022:	4b06      	ldr	r3, [pc, #24]	@ (800503c <tcp_input+0x714>)
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d056      	beq.n	80050d8 <tcp_input+0x7b0>
      pbuf_free(inseg.p);
 800502a:	4b04      	ldr	r3, [pc, #16]	@ (800503c <tcp_input+0x714>)
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	4618      	mov	r0, r3
 8005030:	f7fd fffc 	bl	800302c <pbuf_free>
      inseg.p = NULL;
 8005034:	4b01      	ldr	r3, [pc, #4]	@ (800503c <tcp_input+0x714>)
 8005036:	2200      	movs	r2, #0
 8005038:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800503a:	e04d      	b.n	80050d8 <tcp_input+0x7b0>
 800503c:	24008b24 	.word	0x24008b24
 8005040:	24008b34 	.word	0x24008b34
 8005044:	24008b54 	.word	0x24008b54
 8005048:	24008b51 	.word	0x24008b51
 800504c:	24008b4c 	.word	0x24008b4c
 8005050:	24008b50 	.word	0x24008b50
 8005054:	24008b4e 	.word	0x24008b4e
 8005058:	24008b58 	.word	0x24008b58
 800505c:	24008b18 	.word	0x24008b18
 8005060:	0800c5e0 	.word	0x0800c5e0
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8005064:	4b1e      	ldr	r3, [pc, #120]	@ (80050e0 <tcp_input+0x7b8>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	899b      	ldrh	r3, [r3, #12]
 800506a:	b29b      	uxth	r3, r3
 800506c:	4618      	mov	r0, r3
 800506e:	f7fc fcd3 	bl	8001a18 <lwip_htons>
 8005072:	4603      	mov	r3, r0
 8005074:	b2db      	uxtb	r3, r3
 8005076:	f003 0304 	and.w	r3, r3, #4
 800507a:	2b00      	cmp	r3, #0
 800507c:	d119      	bne.n	80050b2 <tcp_input+0x78a>
      tcp_rst_netif(ip_data.current_input_netif, ackno, seqno + tcplen, ip_current_dest_addr(),
 800507e:	4b19      	ldr	r3, [pc, #100]	@ (80050e4 <tcp_input+0x7bc>)
 8005080:	6858      	ldr	r0, [r3, #4]
 8005082:	4b19      	ldr	r3, [pc, #100]	@ (80050e8 <tcp_input+0x7c0>)
 8005084:	6819      	ldr	r1, [r3, #0]
 8005086:	4b19      	ldr	r3, [pc, #100]	@ (80050ec <tcp_input+0x7c4>)
 8005088:	881b      	ldrh	r3, [r3, #0]
 800508a:	461a      	mov	r2, r3
 800508c:	4b18      	ldr	r3, [pc, #96]	@ (80050f0 <tcp_input+0x7c8>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	18d4      	adds	r4, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8005092:	4b13      	ldr	r3, [pc, #76]	@ (80050e0 <tcp_input+0x7b8>)
 8005094:	681b      	ldr	r3, [r3, #0]
      tcp_rst_netif(ip_data.current_input_netif, ackno, seqno + tcplen, ip_current_dest_addr(),
 8005096:	885b      	ldrh	r3, [r3, #2]
 8005098:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800509a:	4a11      	ldr	r2, [pc, #68]	@ (80050e0 <tcp_input+0x7b8>)
 800509c:	6812      	ldr	r2, [r2, #0]
      tcp_rst_netif(ip_data.current_input_netif, ackno, seqno + tcplen, ip_current_dest_addr(),
 800509e:	8812      	ldrh	r2, [r2, #0]
 80050a0:	b292      	uxth	r2, r2
 80050a2:	9202      	str	r2, [sp, #8]
 80050a4:	9301      	str	r3, [sp, #4]
 80050a6:	4b13      	ldr	r3, [pc, #76]	@ (80050f4 <tcp_input+0x7cc>)
 80050a8:	9300      	str	r3, [sp, #0]
 80050aa:	4b13      	ldr	r3, [pc, #76]	@ (80050f8 <tcp_input+0x7d0>)
 80050ac:	4622      	mov	r2, r4
 80050ae:	f002 fbdc 	bl	800786a <tcp_rst_netif>
    pbuf_free(p);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f7fd ffba 	bl	800302c <pbuf_free>
  return;
 80050b8:	e00e      	b.n	80050d8 <tcp_input+0x7b0>
    goto dropped;
 80050ba:	bf00      	nop
 80050bc:	e008      	b.n	80050d0 <tcp_input+0x7a8>
    goto dropped;
 80050be:	bf00      	nop
 80050c0:	e006      	b.n	80050d0 <tcp_input+0x7a8>
      goto dropped;
 80050c2:	bf00      	nop
 80050c4:	e004      	b.n	80050d0 <tcp_input+0x7a8>
    goto dropped;
 80050c6:	bf00      	nop
 80050c8:	e002      	b.n	80050d0 <tcp_input+0x7a8>
      goto dropped;
 80050ca:	bf00      	nop
 80050cc:	e000      	b.n	80050d0 <tcp_input+0x7a8>
      goto dropped;
 80050ce:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f7fd ffab 	bl	800302c <pbuf_free>
 80050d6:	e000      	b.n	80050da <tcp_input+0x7b2>
  return;
 80050d8:	bf00      	nop
}
 80050da:	3724      	adds	r7, #36	@ 0x24
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd90      	pop	{r4, r7, pc}
 80050e0:	24008b34 	.word	0x24008b34
 80050e4:	240024dc 	.word	0x240024dc
 80050e8:	24008b48 	.word	0x24008b48
 80050ec:	24008b4e 	.word	0x24008b4e
 80050f0:	24008b44 	.word	0x24008b44
 80050f4:	240024ec 	.word	0x240024ec
 80050f8:	240024f0 	.word	0x240024f0

080050fc <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b082      	sub	sp, #8
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d102      	bne.n	8005110 <tcp_input_delayed_close+0x14>
 800510a:	4815      	ldr	r0, [pc, #84]	@ (8005160 <tcp_input_delayed_close+0x64>)
 800510c:	f005 fdaa 	bl	800ac64 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8005110:	4b14      	ldr	r3, [pc, #80]	@ (8005164 <tcp_input_delayed_close+0x68>)
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	f003 0310 	and.w	r3, r3, #16
 8005118:	2b00      	cmp	r3, #0
 800511a:	d01c      	beq.n	8005156 <tcp_input_delayed_close+0x5a>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	8b5b      	ldrh	r3, [r3, #26]
 8005120:	f003 0310 	and.w	r3, r3, #16
 8005124:	2b00      	cmp	r3, #0
 8005126:	d10d      	bne.n	8005144 <tcp_input_delayed_close+0x48>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800512e:	2b00      	cmp	r3, #0
 8005130:	d008      	beq.n	8005144 <tcp_input_delayed_close+0x48>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	6912      	ldr	r2, [r2, #16]
 800513c:	f06f 010e 	mvn.w	r1, #14
 8005140:	4610      	mov	r0, r2
 8005142:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8005144:	6879      	ldr	r1, [r7, #4]
 8005146:	4808      	ldr	r0, [pc, #32]	@ (8005168 <tcp_input_delayed_close+0x6c>)
 8005148:	f7ff fac4 	bl	80046d4 <tcp_pcb_remove>
    tcp_free(pcb);
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f7fe f9d1 	bl	80034f4 <tcp_free>
    return 1;
 8005152:	2301      	movs	r3, #1
 8005154:	e000      	b.n	8005158 <tcp_input_delayed_close+0x5c>
  }
  return 0;
 8005156:	2300      	movs	r3, #0
}
 8005158:	4618      	mov	r0, r3
 800515a:	3708      	adds	r7, #8
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}
 8005160:	0800c5fc 	.word	0x0800c5fc
 8005164:	24008b51 	.word	0x24008b51
 8005168:	24008b18 	.word	0x24008b18

0800516c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800516c:	b590      	push	{r4, r7, lr}
 800516e:	b08b      	sub	sp, #44	@ 0x2c
 8005170:	af04      	add	r7, sp, #16
 8005172:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8005174:	4b6d      	ldr	r3, [pc, #436]	@ (800532c <tcp_listen_input+0x1c0>)
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	f003 0304 	and.w	r3, r3, #4
 800517c:	2b00      	cmp	r3, #0
 800517e:	f040 80cf 	bne.w	8005320 <tcp_listen_input+0x1b4>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d102      	bne.n	800518e <tcp_listen_input+0x22>
 8005188:	4869      	ldr	r0, [pc, #420]	@ (8005330 <tcp_listen_input+0x1c4>)
 800518a:	f005 fd6b 	bl	800ac64 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800518e:	4b67      	ldr	r3, [pc, #412]	@ (800532c <tcp_listen_input+0x1c0>)
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	f003 0310 	and.w	r3, r3, #16
 8005196:	2b00      	cmp	r3, #0
 8005198:	d01a      	beq.n	80051d0 <tcp_listen_input+0x64>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst_netif(ip_data.current_input_netif, ackno, seqno + tcplen, ip_current_dest_addr(),
 800519a:	4b66      	ldr	r3, [pc, #408]	@ (8005334 <tcp_listen_input+0x1c8>)
 800519c:	6858      	ldr	r0, [r3, #4]
 800519e:	4b66      	ldr	r3, [pc, #408]	@ (8005338 <tcp_listen_input+0x1cc>)
 80051a0:	6819      	ldr	r1, [r3, #0]
 80051a2:	4b66      	ldr	r3, [pc, #408]	@ (800533c <tcp_listen_input+0x1d0>)
 80051a4:	881b      	ldrh	r3, [r3, #0]
 80051a6:	461a      	mov	r2, r3
 80051a8:	4b65      	ldr	r3, [pc, #404]	@ (8005340 <tcp_listen_input+0x1d4>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	18d4      	adds	r4, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80051ae:	4b65      	ldr	r3, [pc, #404]	@ (8005344 <tcp_listen_input+0x1d8>)
 80051b0:	681b      	ldr	r3, [r3, #0]
    tcp_rst_netif(ip_data.current_input_netif, ackno, seqno + tcplen, ip_current_dest_addr(),
 80051b2:	885b      	ldrh	r3, [r3, #2]
 80051b4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80051b6:	4a63      	ldr	r2, [pc, #396]	@ (8005344 <tcp_listen_input+0x1d8>)
 80051b8:	6812      	ldr	r2, [r2, #0]
    tcp_rst_netif(ip_data.current_input_netif, ackno, seqno + tcplen, ip_current_dest_addr(),
 80051ba:	8812      	ldrh	r2, [r2, #0]
 80051bc:	b292      	uxth	r2, r2
 80051be:	9202      	str	r2, [sp, #8]
 80051c0:	9301      	str	r3, [sp, #4]
 80051c2:	4b61      	ldr	r3, [pc, #388]	@ (8005348 <tcp_listen_input+0x1dc>)
 80051c4:	9300      	str	r3, [sp, #0]
 80051c6:	4b61      	ldr	r3, [pc, #388]	@ (800534c <tcp_listen_input+0x1e0>)
 80051c8:	4622      	mov	r2, r4
 80051ca:	f002 fb4e 	bl	800786a <tcp_rst_netif>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80051ce:	e0a9      	b.n	8005324 <tcp_listen_input+0x1b8>
  } else if (flags & TCP_SYN) {
 80051d0:	4b56      	ldr	r3, [pc, #344]	@ (800532c <tcp_listen_input+0x1c0>)
 80051d2:	781b      	ldrb	r3, [r3, #0]
 80051d4:	f003 0302 	and.w	r3, r3, #2
 80051d8:	2b00      	cmp	r3, #0
 80051da:	f000 80a3 	beq.w	8005324 <tcp_listen_input+0x1b8>
    npcb = tcp_alloc(pcb->prio);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	7d5b      	ldrb	r3, [r3, #21]
 80051e2:	4618      	mov	r0, r3
 80051e4:	f7ff f9b6 	bl	8004554 <tcp_alloc>
 80051e8:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d111      	bne.n	8005214 <tcp_listen_input+0xa8>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	699b      	ldr	r3, [r3, #24]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d00a      	beq.n	800520e <tcp_listen_input+0xa2>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	699b      	ldr	r3, [r3, #24]
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	6910      	ldr	r0, [r2, #16]
 8005200:	f04f 32ff 	mov.w	r2, #4294967295
 8005204:	2100      	movs	r1, #0
 8005206:	4798      	blx	r3
 8005208:	4603      	mov	r3, r0
 800520a:	73bb      	strb	r3, [r7, #14]
      return;
 800520c:	e08b      	b.n	8005326 <tcp_listen_input+0x1ba>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800520e:	23f0      	movs	r3, #240	@ 0xf0
 8005210:	73bb      	strb	r3, [r7, #14]
      return;
 8005212:	e088      	b.n	8005326 <tcp_listen_input+0x1ba>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8005214:	4b47      	ldr	r3, [pc, #284]	@ (8005334 <tcp_listen_input+0x1c8>)
 8005216:	695a      	ldr	r2, [r3, #20]
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800521c:	4b45      	ldr	r3, [pc, #276]	@ (8005334 <tcp_listen_input+0x1c8>)
 800521e:	691a      	ldr	r2, [r3, #16]
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	8ada      	ldrh	r2, [r3, #22]
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800522c:	4b45      	ldr	r3, [pc, #276]	@ (8005344 <tcp_listen_input+0x1d8>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	881b      	ldrh	r3, [r3, #0]
 8005232:	b29a      	uxth	r2, r3
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	2203      	movs	r2, #3
 800523c:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800523e:	4b40      	ldr	r3, [pc, #256]	@ (8005340 <tcp_listen_input+0x1d4>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	1c5a      	adds	r2, r3, #1
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8005250:	6978      	ldr	r0, [r7, #20]
 8005252:	f7ff fab1 	bl	80047b8 <tcp_next_iss>
 8005256:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	693a      	ldr	r2, [r7, #16]
 800525c:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	693a      	ldr	r2, [r7, #16]
 8005262:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	693a      	ldr	r2, [r7, #16]
 8005268:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	693a      	ldr	r2, [r7, #16]
 800526e:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8005270:	4b33      	ldr	r3, [pc, #204]	@ (8005340 <tcp_listen_input+0x1d4>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	1e5a      	subs	r2, r3, #1
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	691a      	ldr	r2, [r3, #16]
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	679a      	str	r2, [r3, #120]	@ 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	7a5b      	ldrb	r3, [r3, #9]
 800528c:	f003 030c 	and.w	r3, r3, #12
 8005290:	b2da      	uxtb	r2, r3
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	7a1a      	ldrb	r2, [r3, #8]
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800529e:	4b2c      	ldr	r3, [pc, #176]	@ (8005350 <tcp_listen_input+0x1e4>)
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	60da      	str	r2, [r3, #12]
 80052a6:	4a2a      	ldr	r2, [pc, #168]	@ (8005350 <tcp_listen_input+0x1e4>)
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	6013      	str	r3, [r2, #0]
 80052ac:	f002 fc5c 	bl	8007b68 <tcp_timer_needed>
 80052b0:	4b28      	ldr	r3, [pc, #160]	@ (8005354 <tcp_listen_input+0x1e8>)
 80052b2:	2201      	movs	r2, #1
 80052b4:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80052b6:	6978      	ldr	r0, [r7, #20]
 80052b8:	f001 f97e 	bl	80065b8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80052bc:	4b21      	ldr	r3, [pc, #132]	@ (8005344 <tcp_listen_input+0x1d8>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	89db      	ldrh	r3, [r3, #14]
 80052c2:	b29a      	uxth	r2, r3
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	3304      	adds	r3, #4
 80052de:	4618      	mov	r0, r3
 80052e0:	f004 fa18 	bl	8009714 <ip4_route>
 80052e4:	4601      	mov	r1, r0
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	3304      	adds	r3, #4
 80052ea:	461a      	mov	r2, r3
 80052ec:	4620      	mov	r0, r4
 80052ee:	f7ff fa81 	bl	80047f4 <tcp_eff_send_mss_netif>
 80052f2:	4603      	mov	r3, r0
 80052f4:	461a      	mov	r2, r3
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80052fa:	2112      	movs	r1, #18
 80052fc:	6978      	ldr	r0, [r7, #20]
 80052fe:	f001 fc01 	bl	8006b04 <tcp_enqueue_flags>
 8005302:	4603      	mov	r3, r0
 8005304:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8005306:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d004      	beq.n	8005318 <tcp_listen_input+0x1ac>
      tcp_abandon(npcb, 0);
 800530e:	2100      	movs	r1, #0
 8005310:	6978      	ldr	r0, [r7, #20]
 8005312:	f7fe fad9 	bl	80038c8 <tcp_abandon>
      return;
 8005316:	e006      	b.n	8005326 <tcp_listen_input+0x1ba>
    tcp_output(npcb);
 8005318:	6978      	ldr	r0, [r7, #20]
 800531a:	f001 fcc5 	bl	8006ca8 <tcp_output>
  return;
 800531e:	e001      	b.n	8005324 <tcp_listen_input+0x1b8>
    return;
 8005320:	bf00      	nop
 8005322:	e000      	b.n	8005326 <tcp_listen_input+0x1ba>
  return;
 8005324:	bf00      	nop
}
 8005326:	371c      	adds	r7, #28
 8005328:	46bd      	mov	sp, r7
 800532a:	bd90      	pop	{r4, r7, pc}
 800532c:	24008b50 	.word	0x24008b50
 8005330:	0800c624 	.word	0x0800c624
 8005334:	240024dc 	.word	0x240024dc
 8005338:	24008b48 	.word	0x24008b48
 800533c:	24008b4e 	.word	0x24008b4e
 8005340:	24008b44 	.word	0x24008b44
 8005344:	24008b34 	.word	0x24008b34
 8005348:	240024ec 	.word	0x240024ec
 800534c:	240024f0 	.word	0x240024f0
 8005350:	24008b18 	.word	0x24008b18
 8005354:	24008b20 	.word	0x24008b20

08005358 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b086      	sub	sp, #24
 800535c:	af04      	add	r7, sp, #16
 800535e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8005360:	4b2d      	ldr	r3, [pc, #180]	@ (8005418 <tcp_timewait_input+0xc0>)
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	f003 0304 	and.w	r3, r3, #4
 8005368:	2b00      	cmp	r3, #0
 800536a:	d14f      	bne.n	800540c <tcp_timewait_input+0xb4>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d102      	bne.n	8005378 <tcp_timewait_input+0x20>
 8005372:	482a      	ldr	r0, [pc, #168]	@ (800541c <tcp_timewait_input+0xc4>)
 8005374:	f005 fc76 	bl	800ac64 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8005378:	4b27      	ldr	r3, [pc, #156]	@ (8005418 <tcp_timewait_input+0xc0>)
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	f003 0302 	and.w	r3, r3, #2
 8005380:	2b00      	cmp	r3, #0
 8005382:	d02a      	beq.n	80053da <tcp_timewait_input+0x82>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8005384:	4b26      	ldr	r3, [pc, #152]	@ (8005420 <tcp_timewait_input+0xc8>)
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	2b00      	cmp	r3, #0
 8005390:	db2d      	blt.n	80053ee <tcp_timewait_input+0x96>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800539a:	441a      	add	r2, r3
 800539c:	4b20      	ldr	r3, [pc, #128]	@ (8005420 <tcp_timewait_input+0xc8>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	db23      	blt.n	80053ee <tcp_timewait_input+0x96>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80053a6:	4b1f      	ldr	r3, [pc, #124]	@ (8005424 <tcp_timewait_input+0xcc>)
 80053a8:	6819      	ldr	r1, [r3, #0]
 80053aa:	4b1f      	ldr	r3, [pc, #124]	@ (8005428 <tcp_timewait_input+0xd0>)
 80053ac:	881b      	ldrh	r3, [r3, #0]
 80053ae:	461a      	mov	r2, r3
 80053b0:	4b1b      	ldr	r3, [pc, #108]	@ (8005420 <tcp_timewait_input+0xc8>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80053b6:	4b1d      	ldr	r3, [pc, #116]	@ (800542c <tcp_timewait_input+0xd4>)
 80053b8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80053ba:	885b      	ldrh	r3, [r3, #2]
 80053bc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80053be:	4a1b      	ldr	r2, [pc, #108]	@ (800542c <tcp_timewait_input+0xd4>)
 80053c0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80053c2:	8812      	ldrh	r2, [r2, #0]
 80053c4:	b292      	uxth	r2, r2
 80053c6:	9202      	str	r2, [sp, #8]
 80053c8:	9301      	str	r3, [sp, #4]
 80053ca:	4b19      	ldr	r3, [pc, #100]	@ (8005430 <tcp_timewait_input+0xd8>)
 80053cc:	9300      	str	r3, [sp, #0]
 80053ce:	4b19      	ldr	r3, [pc, #100]	@ (8005434 <tcp_timewait_input+0xdc>)
 80053d0:	4602      	mov	r2, r0
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f002 fa28 	bl	8007828 <tcp_rst>
      return;
 80053d8:	e01b      	b.n	8005412 <tcp_timewait_input+0xba>
    }
  } else if (flags & TCP_FIN) {
 80053da:	4b0f      	ldr	r3, [pc, #60]	@ (8005418 <tcp_timewait_input+0xc0>)
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	f003 0301 	and.w	r3, r3, #1
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d003      	beq.n	80053ee <tcp_timewait_input+0x96>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80053e6:	4b14      	ldr	r3, [pc, #80]	@ (8005438 <tcp_timewait_input+0xe0>)
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80053ee:	4b0e      	ldr	r3, [pc, #56]	@ (8005428 <tcp_timewait_input+0xd0>)
 80053f0:	881b      	ldrh	r3, [r3, #0]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d00c      	beq.n	8005410 <tcp_timewait_input+0xb8>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	8b5b      	ldrh	r3, [r3, #26]
 80053fa:	f043 0302 	orr.w	r3, r3, #2
 80053fe:	b29a      	uxth	r2, r3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f001 fc4f 	bl	8006ca8 <tcp_output>
  }
  return;
 800540a:	e001      	b.n	8005410 <tcp_timewait_input+0xb8>
    return;
 800540c:	bf00      	nop
 800540e:	e000      	b.n	8005412 <tcp_timewait_input+0xba>
  return;
 8005410:	bf00      	nop
}
 8005412:	3708      	adds	r7, #8
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}
 8005418:	24008b50 	.word	0x24008b50
 800541c:	0800c644 	.word	0x0800c644
 8005420:	24008b44 	.word	0x24008b44
 8005424:	24008b48 	.word	0x24008b48
 8005428:	24008b4e 	.word	0x24008b4e
 800542c:	24008b34 	.word	0x24008b34
 8005430:	240024ec 	.word	0x240024ec
 8005434:	240024f0 	.word	0x240024f0
 8005438:	24008b0c 	.word	0x24008b0c

0800543c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800543c:	b590      	push	{r4, r7, lr}
 800543e:	b08d      	sub	sp, #52	@ 0x34
 8005440:	af04      	add	r7, sp, #16
 8005442:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8005444:	2300      	movs	r3, #0
 8005446:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8005448:	2300      	movs	r3, #0
 800544a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d102      	bne.n	8005458 <tcp_process+0x1c>
 8005452:	489d      	ldr	r0, [pc, #628]	@ (80056c8 <tcp_process+0x28c>)
 8005454:	f005 fc06 	bl	800ac64 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8005458:	4b9c      	ldr	r3, [pc, #624]	@ (80056cc <tcp_process+0x290>)
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	f003 0304 	and.w	r3, r3, #4
 8005460:	2b00      	cmp	r3, #0
 8005462:	d04a      	beq.n	80054fa <tcp_process+0xbe>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	7d1b      	ldrb	r3, [r3, #20]
 8005468:	2b02      	cmp	r3, #2
 800546a:	d108      	bne.n	800547e <tcp_process+0x42>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005470:	4b97      	ldr	r3, [pc, #604]	@ (80056d0 <tcp_process+0x294>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	429a      	cmp	r2, r3
 8005476:	d123      	bne.n	80054c0 <tcp_process+0x84>
        acceptable = 1;
 8005478:	2301      	movs	r3, #1
 800547a:	76fb      	strb	r3, [r7, #27]
 800547c:	e020      	b.n	80054c0 <tcp_process+0x84>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005482:	4b94      	ldr	r3, [pc, #592]	@ (80056d4 <tcp_process+0x298>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	429a      	cmp	r2, r3
 8005488:	d102      	bne.n	8005490 <tcp_process+0x54>
        acceptable = 1;
 800548a:	2301      	movs	r3, #1
 800548c:	76fb      	strb	r3, [r7, #27]
 800548e:	e017      	b.n	80054c0 <tcp_process+0x84>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8005490:	4b90      	ldr	r3, [pc, #576]	@ (80056d4 <tcp_process+0x298>)
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005498:	1ad3      	subs	r3, r2, r3
 800549a:	2b00      	cmp	r3, #0
 800549c:	db10      	blt.n	80054c0 <tcp_process+0x84>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80054a6:	441a      	add	r2, r3
 80054a8:	4b8a      	ldr	r3, [pc, #552]	@ (80056d4 <tcp_process+0x298>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	1ad3      	subs	r3, r2, r3
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	db06      	blt.n	80054c0 <tcp_process+0x84>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	8b5b      	ldrh	r3, [r3, #26]
 80054b6:	f043 0302 	orr.w	r3, r3, #2
 80054ba:	b29a      	uxth	r2, r3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80054c0:	7efb      	ldrb	r3, [r7, #27]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d017      	beq.n	80054f6 <tcp_process+0xba>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	7d1b      	ldrb	r3, [r3, #20]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d102      	bne.n	80054d4 <tcp_process+0x98>
 80054ce:	4882      	ldr	r0, [pc, #520]	@ (80056d8 <tcp_process+0x29c>)
 80054d0:	f005 fbc8 	bl	800ac64 <iprintf>
      recv_flags |= TF_RESET;
 80054d4:	4b81      	ldr	r3, [pc, #516]	@ (80056dc <tcp_process+0x2a0>)
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	f043 0308 	orr.w	r3, r3, #8
 80054dc:	b2da      	uxtb	r2, r3
 80054de:	4b7f      	ldr	r3, [pc, #508]	@ (80056dc <tcp_process+0x2a0>)
 80054e0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	8b5b      	ldrh	r3, [r3, #26]
 80054e6:	f023 0301 	bic.w	r3, r3, #1
 80054ea:	b29a      	uxth	r2, r3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80054f0:	f06f 030d 	mvn.w	r3, #13
 80054f4:	e374      	b.n	8005be0 <tcp_process+0x7a4>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80054f6:	2300      	movs	r3, #0
 80054f8:	e372      	b.n	8005be0 <tcp_process+0x7a4>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80054fa:	4b74      	ldr	r3, [pc, #464]	@ (80056cc <tcp_process+0x290>)
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	f003 0302 	and.w	r3, r3, #2
 8005502:	2b00      	cmp	r3, #0
 8005504:	d010      	beq.n	8005528 <tcp_process+0xec>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	7d1b      	ldrb	r3, [r3, #20]
 800550a:	2b02      	cmp	r3, #2
 800550c:	d00c      	beq.n	8005528 <tcp_process+0xec>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	7d1b      	ldrb	r3, [r3, #20]
 8005512:	2b03      	cmp	r3, #3
 8005514:	d008      	beq.n	8005528 <tcp_process+0xec>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	8b5b      	ldrh	r3, [r3, #26]
 800551a:	f043 0302 	orr.w	r3, r3, #2
 800551e:	b29a      	uxth	r2, r3
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8005524:	2300      	movs	r3, #0
 8005526:	e35b      	b.n	8005be0 <tcp_process+0x7a4>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	8b5b      	ldrh	r3, [r3, #26]
 800552c:	f003 0310 	and.w	r3, r3, #16
 8005530:	2b00      	cmp	r3, #0
 8005532:	d103      	bne.n	800553c <tcp_process+0x100>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8005534:	4b6a      	ldr	r3, [pc, #424]	@ (80056e0 <tcp_process+0x2a4>)
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	f883 2097 	strb.w	r2, [r3, #151]	@ 0x97
  pcb->persist_probe = 0;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96

  tcp_parseopt(pcb);
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f001 f833 	bl	80065b8 <tcp_parseopt>

  if (flags & TCP_SYN) {
 8005552:	4b5e      	ldr	r3, [pc, #376]	@ (80056cc <tcp_process+0x290>)
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	f003 0302 	and.w	r3, r3, #2
 800555a:	2b00      	cmp	r3, #0
 800555c:	d009      	beq.n	8005572 <tcp_process+0x136>
    /* accept SYN only in 2 states: */
    if ((pcb->state != SYN_SENT) && (pcb->state != SYN_RCVD)) {
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	7d1b      	ldrb	r3, [r3, #20]
 8005562:	2b02      	cmp	r3, #2
 8005564:	d005      	beq.n	8005572 <tcp_process+0x136>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	7d1b      	ldrb	r3, [r3, #20]
 800556a:	2b03      	cmp	r3, #3
 800556c:	d001      	beq.n	8005572 <tcp_process+0x136>
      return ERR_OK;
 800556e:	2300      	movs	r3, #0
 8005570:	e336      	b.n	8005be0 <tcp_process+0x7a4>
    }
  }

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	7d1b      	ldrb	r3, [r3, #20]
 8005576:	3b02      	subs	r3, #2
 8005578:	2b07      	cmp	r3, #7
 800557a:	f200 8321 	bhi.w	8005bc0 <tcp_process+0x784>
 800557e:	a201      	add	r2, pc, #4	@ (adr r2, 8005584 <tcp_process+0x148>)
 8005580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005584:	080055a5 	.word	0x080055a5
 8005588:	080057bd 	.word	0x080057bd
 800558c:	0800592b 	.word	0x0800592b
 8005590:	08005955 	.word	0x08005955
 8005594:	08005a6f 	.word	0x08005a6f
 8005598:	0800592b 	.word	0x0800592b
 800559c:	08005afb 	.word	0x08005afb
 80055a0:	08005b8b 	.word	0x08005b8b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %s %"U32_F"\n",
                                    ackno, pcb->snd_nxt, pcb->unacked ? "" : " empty:",
                                    pcb->unacked ? lwip_ntohl(pcb->unacked->tcphdr->seqno) : 0));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80055a4:	4b49      	ldr	r3, [pc, #292]	@ (80056cc <tcp_process+0x290>)
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	f003 0310 	and.w	r3, r3, #16
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	f000 80d8 	beq.w	8005762 <tcp_process+0x326>
 80055b2:	4b46      	ldr	r3, [pc, #280]	@ (80056cc <tcp_process+0x290>)
 80055b4:	781b      	ldrb	r3, [r3, #0]
 80055b6:	f003 0302 	and.w	r3, r3, #2
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	f000 80d1 	beq.w	8005762 <tcp_process+0x326>
          && (ackno == pcb->lastack + 1)) {
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055c4:	1c5a      	adds	r2, r3, #1
 80055c6:	4b42      	ldr	r3, [pc, #264]	@ (80056d0 <tcp_process+0x294>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	429a      	cmp	r2, r3
 80055cc:	f040 80c9 	bne.w	8005762 <tcp_process+0x326>
        pcb->rcv_nxt = seqno + 1;
 80055d0:	4b40      	ldr	r3, [pc, #256]	@ (80056d4 <tcp_process+0x298>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	1c5a      	adds	r2, r3, #1
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 80055e2:	4b3b      	ldr	r3, [pc, #236]	@ (80056d0 <tcp_process+0x294>)
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80055ea:	4b3e      	ldr	r3, [pc, #248]	@ (80056e4 <tcp_process+0x2a8>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	89db      	ldrh	r3, [r3, #14]
 80055f0:	b29a      	uxth	r2, r3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8005604:	4b33      	ldr	r3, [pc, #204]	@ (80056d4 <tcp_process+0x298>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	1e5a      	subs	r2, r3, #1
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2204      	movs	r2, #4
 8005612:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	3304      	adds	r3, #4
 800561c:	4618      	mov	r0, r3
 800561e:	f004 f879 	bl	8009714 <ip4_route>
 8005622:	4601      	mov	r1, r0
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	3304      	adds	r3, #4
 8005628:	461a      	mov	r2, r3
 800562a:	4620      	mov	r0, r4
 800562c:	f7ff f8e2 	bl	80047f4 <tcp_eff_send_mss_netif>
 8005630:	4603      	mov	r3, r0
 8005632:	461a      	mov	r2, r3
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800563c:	009a      	lsls	r2, r3, #2
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005642:	005b      	lsls	r3, r3, #1
 8005644:	f241 111c 	movw	r1, #4380	@ 0x111c
 8005648:	428b      	cmp	r3, r1
 800564a:	bf38      	it	cc
 800564c:	460b      	movcc	r3, r1
 800564e:	429a      	cmp	r2, r3
 8005650:	d204      	bcs.n	800565c <tcp_process+0x220>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	b29b      	uxth	r3, r3
 800565a:	e00d      	b.n	8005678 <tcp_process+0x23c>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005660:	005b      	lsls	r3, r3, #1
 8005662:	f241 121c 	movw	r2, #4380	@ 0x111c
 8005666:	4293      	cmp	r3, r2
 8005668:	d904      	bls.n	8005674 <tcp_process+0x238>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800566e:	005b      	lsls	r3, r3, #1
 8005670:	b29b      	uxth	r3, r3
 8005672:	e001      	b.n	8005678 <tcp_process+0x23c>
 8005674:	f241 131c 	movw	r3, #4380	@ 0x111c
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8005684:	2b00      	cmp	r3, #0
 8005686:	d102      	bne.n	800568e <tcp_process+0x252>
 8005688:	4817      	ldr	r0, [pc, #92]	@ (80056e8 <tcp_process+0x2ac>)
 800568a:	f005 faeb 	bl	800ac64 <iprintf>
        --pcb->snd_queuelen;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8005694:	3b01      	subs	r3, #1
 8005696:	b29a      	uxth	r2, r3
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056a2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d122      	bne.n	80056f0 <tcp_process+0x2b4>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056ae:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d102      	bne.n	80056bc <tcp_process+0x280>
 80056b6:	480d      	ldr	r0, [pc, #52]	@ (80056ec <tcp_process+0x2b0>)
 80056b8:	f005 fad4 	bl	800ac64 <iprintf>
          pcb->unsent = rseg->next;
 80056bc:	69fb      	ldr	r3, [r7, #28]
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	66da      	str	r2, [r3, #108]	@ 0x6c
 80056c4:	e018      	b.n	80056f8 <tcp_process+0x2bc>
 80056c6:	bf00      	nop
 80056c8:	0800c664 	.word	0x0800c664
 80056cc:	24008b50 	.word	0x24008b50
 80056d0:	24008b48 	.word	0x24008b48
 80056d4:	24008b44 	.word	0x24008b44
 80056d8:	0800c680 	.word	0x0800c680
 80056dc:	24008b51 	.word	0x24008b51
 80056e0:	24008b0c 	.word	0x24008b0c
 80056e4:	24008b34 	.word	0x24008b34
 80056e8:	0800c6a0 	.word	0x0800c6a0
 80056ec:	0800c6b8 	.word	0x0800c6b8
        } else {
          pcb->unacked = rseg->next;
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 80056f8:	69f8      	ldr	r0, [r7, #28]
 80056fa:	f7fe fe04 	bl	8004306 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005702:	2b00      	cmp	r3, #0
 8005704:	d104      	bne.n	8005710 <tcp_process+0x2d4>
          pcb->rtime = -1;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800570c:	861a      	strh	r2, [r3, #48]	@ 0x30
 800570e:	e006      	b.n	800571e <tcp_process+0x2e2>
        } else {
          pcb->rtime = 0;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2200      	movs	r2, #0
 8005714:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005724:	2b00      	cmp	r3, #0
 8005726:	d00a      	beq.n	800573e <tcp_process+0x302>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	6910      	ldr	r0, [r2, #16]
 8005732:	2200      	movs	r2, #0
 8005734:	6879      	ldr	r1, [r7, #4]
 8005736:	4798      	blx	r3
 8005738:	4603      	mov	r3, r0
 800573a:	76bb      	strb	r3, [r7, #26]
 800573c:	e001      	b.n	8005742 <tcp_process+0x306>
 800573e:	2300      	movs	r3, #0
 8005740:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8005742:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8005746:	f113 0f0d 	cmn.w	r3, #13
 800574a:	d102      	bne.n	8005752 <tcp_process+0x316>
          return ERR_ABRT;
 800574c:	f06f 030c 	mvn.w	r3, #12
 8005750:	e246      	b.n	8005be0 <tcp_process+0x7a4>
        }
        tcp_ack_now(pcb);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	8b5b      	ldrh	r3, [r3, #26]
 8005756:	f043 0302 	orr.w	r3, r3, #2
 800575a:	b29a      	uxth	r2, r3
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8005760:	e230      	b.n	8005bc4 <tcp_process+0x788>
      else if (flags & TCP_ACK) {
 8005762:	4b95      	ldr	r3, [pc, #596]	@ (80059b8 <tcp_process+0x57c>)
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	f003 0310 	and.w	r3, r3, #16
 800576a:	2b00      	cmp	r3, #0
 800576c:	f000 822a 	beq.w	8005bc4 <tcp_process+0x788>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8005770:	4b92      	ldr	r3, [pc, #584]	@ (80059bc <tcp_process+0x580>)
 8005772:	6819      	ldr	r1, [r3, #0]
 8005774:	4b92      	ldr	r3, [pc, #584]	@ (80059c0 <tcp_process+0x584>)
 8005776:	881b      	ldrh	r3, [r3, #0]
 8005778:	461a      	mov	r2, r3
 800577a:	4b92      	ldr	r3, [pc, #584]	@ (80059c4 <tcp_process+0x588>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8005780:	4b91      	ldr	r3, [pc, #580]	@ (80059c8 <tcp_process+0x58c>)
 8005782:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8005784:	885b      	ldrh	r3, [r3, #2]
 8005786:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8005788:	4a8f      	ldr	r2, [pc, #572]	@ (80059c8 <tcp_process+0x58c>)
 800578a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800578c:	8812      	ldrh	r2, [r2, #0]
 800578e:	b292      	uxth	r2, r2
 8005790:	9202      	str	r2, [sp, #8]
 8005792:	9301      	str	r3, [sp, #4]
 8005794:	4b8d      	ldr	r3, [pc, #564]	@ (80059cc <tcp_process+0x590>)
 8005796:	9300      	str	r3, [sp, #0]
 8005798:	4b8d      	ldr	r3, [pc, #564]	@ (80059d0 <tcp_process+0x594>)
 800579a:	4602      	mov	r2, r0
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f002 f843 	bl	8007828 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80057a8:	2b05      	cmp	r3, #5
 80057aa:	f200 820b 	bhi.w	8005bc4 <tcp_process+0x788>
          pcb->rtime = 0;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f001 fdd9 	bl	800736c <tcp_rexmit_rto>
      break;
 80057ba:	e203      	b.n	8005bc4 <tcp_process+0x788>
    case SYN_RCVD:
      if (flags & TCP_SYN) {
 80057bc:	4b7e      	ldr	r3, [pc, #504]	@ (80059b8 <tcp_process+0x57c>)
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	f003 0302 	and.w	r3, r3, #2
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d00b      	beq.n	80057e0 <tcp_process+0x3a4>
        if (seqno == pcb->rcv_nxt - 1) {
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057cc:	1e5a      	subs	r2, r3, #1
 80057ce:	4b7d      	ldr	r3, [pc, #500]	@ (80059c4 <tcp_process+0x588>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	429a      	cmp	r2, r3
 80057d4:	f040 81f8 	bne.w	8005bc8 <tcp_process+0x78c>
          /* Looks like another copy of the SYN - retransmit our SYN-ACK */
          tcp_rexmit(pcb);
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f001 fde1 	bl	80073a0 <tcp_rexmit>
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
        }
      }
      break;
 80057de:	e1f3      	b.n	8005bc8 <tcp_process+0x78c>
      } else if (flags & TCP_ACK) {
 80057e0:	4b75      	ldr	r3, [pc, #468]	@ (80059b8 <tcp_process+0x57c>)
 80057e2:	781b      	ldrb	r3, [r3, #0]
 80057e4:	f003 0310 	and.w	r3, r3, #16
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	f000 81ed 	beq.w	8005bc8 <tcp_process+0x78c>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80057ee:	4b73      	ldr	r3, [pc, #460]	@ (80059bc <tcp_process+0x580>)
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057f6:	1ad3      	subs	r3, r2, r3
 80057f8:	3b01      	subs	r3, #1
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	db7a      	blt.n	80058f4 <tcp_process+0x4b8>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005802:	4b6e      	ldr	r3, [pc, #440]	@ (80059bc <tcp_process+0x580>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	1ad3      	subs	r3, r2, r3
 8005808:	2b00      	cmp	r3, #0
 800580a:	db73      	blt.n	80058f4 <tcp_process+0x4b8>
          pcb->state = ESTABLISHED;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2204      	movs	r2, #4
 8005810:	751a      	strb	r2, [r3, #20]
          if (pcb->listener == NULL) {
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005816:	2b00      	cmp	r3, #0
 8005818:	d102      	bne.n	8005820 <tcp_process+0x3e4>
            err = ERR_VAL;
 800581a:	23fa      	movs	r3, #250	@ 0xfa
 800581c:	76bb      	strb	r3, [r7, #26]
 800581e:	e019      	b.n	8005854 <tcp_process+0x418>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005824:	699b      	ldr	r3, [r3, #24]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d102      	bne.n	8005830 <tcp_process+0x3f4>
 800582a:	486a      	ldr	r0, [pc, #424]	@ (80059d4 <tcp_process+0x598>)
 800582c:	f005 fa1a 	bl	800ac64 <iprintf>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005834:	699b      	ldr	r3, [r3, #24]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d00a      	beq.n	8005850 <tcp_process+0x414>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800583e:	699b      	ldr	r3, [r3, #24]
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	6910      	ldr	r0, [r2, #16]
 8005844:	2200      	movs	r2, #0
 8005846:	6879      	ldr	r1, [r7, #4]
 8005848:	4798      	blx	r3
 800584a:	4603      	mov	r3, r0
 800584c:	76bb      	strb	r3, [r7, #26]
 800584e:	e001      	b.n	8005854 <tcp_process+0x418>
 8005850:	23f0      	movs	r3, #240	@ 0xf0
 8005852:	76bb      	strb	r3, [r7, #26]
          if (err != ERR_OK) {
 8005854:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d00a      	beq.n	8005872 <tcp_process+0x436>
            if (err != ERR_ABRT) {
 800585c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8005860:	f113 0f0d 	cmn.w	r3, #13
 8005864:	d002      	beq.n	800586c <tcp_process+0x430>
              tcp_abort(pcb);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f7fe f8d2 	bl	8003a10 <tcp_abort>
            return ERR_ABRT;
 800586c:	f06f 030c 	mvn.w	r3, #12
 8005870:	e1b6      	b.n	8005be0 <tcp_process+0x7a4>
          tcp_receive(pcb);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 fa34 	bl	8005ce0 <tcp_receive>
          if (recv_acked != 0) {
 8005878:	4b57      	ldr	r3, [pc, #348]	@ (80059d8 <tcp_process+0x59c>)
 800587a:	881b      	ldrh	r3, [r3, #0]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d005      	beq.n	800588c <tcp_process+0x450>
            recv_acked--;
 8005880:	4b55      	ldr	r3, [pc, #340]	@ (80059d8 <tcp_process+0x59c>)
 8005882:	881b      	ldrh	r3, [r3, #0]
 8005884:	3b01      	subs	r3, #1
 8005886:	b29a      	uxth	r2, r3
 8005888:	4b53      	ldr	r3, [pc, #332]	@ (80059d8 <tcp_process+0x59c>)
 800588a:	801a      	strh	r2, [r3, #0]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005890:	009a      	lsls	r2, r3, #2
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005896:	005b      	lsls	r3, r3, #1
 8005898:	f241 111c 	movw	r1, #4380	@ 0x111c
 800589c:	428b      	cmp	r3, r1
 800589e:	bf38      	it	cc
 80058a0:	460b      	movcc	r3, r1
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d204      	bcs.n	80058b0 <tcp_process+0x474>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	e00d      	b.n	80058cc <tcp_process+0x490>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80058b4:	005b      	lsls	r3, r3, #1
 80058b6:	f241 121c 	movw	r2, #4380	@ 0x111c
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d904      	bls.n	80058c8 <tcp_process+0x48c>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80058c2:	005b      	lsls	r3, r3, #1
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	e001      	b.n	80058cc <tcp_process+0x490>
 80058c8:	f241 131c 	movw	r3, #4380	@ 0x111c
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          if (recv_flags & TF_GOT_FIN) {
 80058d2:	4b42      	ldr	r3, [pc, #264]	@ (80059dc <tcp_process+0x5a0>)
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	f003 0320 	and.w	r3, r3, #32
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d024      	beq.n	8005928 <tcp_process+0x4ec>
            tcp_ack_now(pcb);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	8b5b      	ldrh	r3, [r3, #26]
 80058e2:	f043 0302 	orr.w	r3, r3, #2
 80058e6:	b29a      	uxth	r2, r3
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2207      	movs	r2, #7
 80058f0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80058f2:	e019      	b.n	8005928 <tcp_process+0x4ec>
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80058f4:	4b31      	ldr	r3, [pc, #196]	@ (80059bc <tcp_process+0x580>)
 80058f6:	6819      	ldr	r1, [r3, #0]
 80058f8:	4b31      	ldr	r3, [pc, #196]	@ (80059c0 <tcp_process+0x584>)
 80058fa:	881b      	ldrh	r3, [r3, #0]
 80058fc:	461a      	mov	r2, r3
 80058fe:	4b31      	ldr	r3, [pc, #196]	@ (80059c4 <tcp_process+0x588>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8005904:	4b30      	ldr	r3, [pc, #192]	@ (80059c8 <tcp_process+0x58c>)
 8005906:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8005908:	885b      	ldrh	r3, [r3, #2]
 800590a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800590c:	4a2e      	ldr	r2, [pc, #184]	@ (80059c8 <tcp_process+0x58c>)
 800590e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8005910:	8812      	ldrh	r2, [r2, #0]
 8005912:	b292      	uxth	r2, r2
 8005914:	9202      	str	r2, [sp, #8]
 8005916:	9301      	str	r3, [sp, #4]
 8005918:	4b2c      	ldr	r3, [pc, #176]	@ (80059cc <tcp_process+0x590>)
 800591a:	9300      	str	r3, [sp, #0]
 800591c:	4b2c      	ldr	r3, [pc, #176]	@ (80059d0 <tcp_process+0x594>)
 800591e:	4602      	mov	r2, r0
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f001 ff81 	bl	8007828 <tcp_rst>
      break;
 8005926:	e14f      	b.n	8005bc8 <tcp_process+0x78c>
 8005928:	e14e      	b.n	8005bc8 <tcp_process+0x78c>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 f9d8 	bl	8005ce0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8005930:	4b2a      	ldr	r3, [pc, #168]	@ (80059dc <tcp_process+0x5a0>)
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	f003 0320 	and.w	r3, r3, #32
 8005938:	2b00      	cmp	r3, #0
 800593a:	f000 8147 	beq.w	8005bcc <tcp_process+0x790>
        tcp_ack_now(pcb);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	8b5b      	ldrh	r3, [r3, #26]
 8005942:	f043 0302 	orr.w	r3, r3, #2
 8005946:	b29a      	uxth	r2, r3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2207      	movs	r2, #7
 8005950:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005952:	e13b      	b.n	8005bcc <tcp_process+0x790>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f000 f9c3 	bl	8005ce0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800595a:	4b20      	ldr	r3, [pc, #128]	@ (80059dc <tcp_process+0x5a0>)
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	f003 0320 	and.w	r3, r3, #32
 8005962:	2b00      	cmp	r3, #0
 8005964:	d06c      	beq.n	8005a40 <tcp_process+0x604>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8005966:	4b14      	ldr	r3, [pc, #80]	@ (80059b8 <tcp_process+0x57c>)
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	f003 0310 	and.w	r3, r3, #16
 800596e:	2b00      	cmp	r3, #0
 8005970:	d05b      	beq.n	8005a2a <tcp_process+0x5ee>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005976:	4b11      	ldr	r3, [pc, #68]	@ (80059bc <tcp_process+0x580>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	429a      	cmp	r2, r3
 800597c:	d155      	bne.n	8005a2a <tcp_process+0x5ee>
            pcb->unsent == NULL) {
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8005982:	2b00      	cmp	r3, #0
 8005984:	d151      	bne.n	8005a2a <tcp_process+0x5ee>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	8b5b      	ldrh	r3, [r3, #26]
 800598a:	f043 0302 	orr.w	r3, r3, #2
 800598e:	b29a      	uxth	r2, r3
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f7fe fe61 	bl	800465c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800599a:	4b11      	ldr	r3, [pc, #68]	@ (80059e0 <tcp_process+0x5a4>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d105      	bne.n	80059b0 <tcp_process+0x574>
 80059a4:	4b0e      	ldr	r3, [pc, #56]	@ (80059e0 <tcp_process+0x5a4>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	68db      	ldr	r3, [r3, #12]
 80059aa:	4a0d      	ldr	r2, [pc, #52]	@ (80059e0 <tcp_process+0x5a4>)
 80059ac:	6013      	str	r3, [r2, #0]
 80059ae:	e029      	b.n	8005a04 <tcp_process+0x5c8>
 80059b0:	4b0b      	ldr	r3, [pc, #44]	@ (80059e0 <tcp_process+0x5a4>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	617b      	str	r3, [r7, #20]
 80059b6:	e022      	b.n	80059fe <tcp_process+0x5c2>
 80059b8:	24008b50 	.word	0x24008b50
 80059bc:	24008b48 	.word	0x24008b48
 80059c0:	24008b4e 	.word	0x24008b4e
 80059c4:	24008b44 	.word	0x24008b44
 80059c8:	24008b34 	.word	0x24008b34
 80059cc:	240024ec 	.word	0x240024ec
 80059d0:	240024f0 	.word	0x240024f0
 80059d4:	0800c6cc 	.word	0x0800c6cc
 80059d8:	24008b4c 	.word	0x24008b4c
 80059dc:	24008b51 	.word	0x24008b51
 80059e0:	24008b18 	.word	0x24008b18
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d104      	bne.n	80059f8 <tcp_process+0x5bc>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	68da      	ldr	r2, [r3, #12]
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	60da      	str	r2, [r3, #12]
 80059f6:	e005      	b.n	8005a04 <tcp_process+0x5c8>
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	617b      	str	r3, [r7, #20]
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d1ef      	bne.n	80059e4 <tcp_process+0x5a8>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	60da      	str	r2, [r3, #12]
 8005a0a:	4b77      	ldr	r3, [pc, #476]	@ (8005be8 <tcp_process+0x7ac>)
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	220a      	movs	r2, #10
 8005a14:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8005a16:	4b75      	ldr	r3, [pc, #468]	@ (8005bec <tcp_process+0x7b0>)
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	60da      	str	r2, [r3, #12]
 8005a1e:	4a73      	ldr	r2, [pc, #460]	@ (8005bec <tcp_process+0x7b0>)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6013      	str	r3, [r2, #0]
 8005a24:	f002 f8a0 	bl	8007b68 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8005a28:	e0d2      	b.n	8005bd0 <tcp_process+0x794>
          tcp_ack_now(pcb);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	8b5b      	ldrh	r3, [r3, #26]
 8005a2e:	f043 0302 	orr.w	r3, r3, #2
 8005a32:	b29a      	uxth	r2, r3
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2208      	movs	r2, #8
 8005a3c:	751a      	strb	r2, [r3, #20]
      break;
 8005a3e:	e0c7      	b.n	8005bd0 <tcp_process+0x794>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8005a40:	4b6b      	ldr	r3, [pc, #428]	@ (8005bf0 <tcp_process+0x7b4>)
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	f003 0310 	and.w	r3, r3, #16
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	f000 80c1 	beq.w	8005bd0 <tcp_process+0x794>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005a52:	4b68      	ldr	r3, [pc, #416]	@ (8005bf4 <tcp_process+0x7b8>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	429a      	cmp	r2, r3
 8005a58:	f040 80ba 	bne.w	8005bd0 <tcp_process+0x794>
                 pcb->unsent == NULL) {
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	f040 80b5 	bne.w	8005bd0 <tcp_process+0x794>
        pcb->state = FIN_WAIT_2;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2206      	movs	r2, #6
 8005a6a:	751a      	strb	r2, [r3, #20]
      break;
 8005a6c:	e0b0      	b.n	8005bd0 <tcp_process+0x794>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 f936 	bl	8005ce0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8005a74:	4b60      	ldr	r3, [pc, #384]	@ (8005bf8 <tcp_process+0x7bc>)
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	f003 0320 	and.w	r3, r3, #32
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	f000 80a9 	beq.w	8005bd4 <tcp_process+0x798>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	8b5b      	ldrh	r3, [r3, #26]
 8005a86:	f043 0302 	orr.w	r3, r3, #2
 8005a8a:	b29a      	uxth	r2, r3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f7fe fde3 	bl	800465c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8005a96:	4b59      	ldr	r3, [pc, #356]	@ (8005bfc <tcp_process+0x7c0>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d105      	bne.n	8005aac <tcp_process+0x670>
 8005aa0:	4b56      	ldr	r3, [pc, #344]	@ (8005bfc <tcp_process+0x7c0>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	4a55      	ldr	r2, [pc, #340]	@ (8005bfc <tcp_process+0x7c0>)
 8005aa8:	6013      	str	r3, [r2, #0]
 8005aaa:	e013      	b.n	8005ad4 <tcp_process+0x698>
 8005aac:	4b53      	ldr	r3, [pc, #332]	@ (8005bfc <tcp_process+0x7c0>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	613b      	str	r3, [r7, #16]
 8005ab2:	e00c      	b.n	8005ace <tcp_process+0x692>
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d104      	bne.n	8005ac8 <tcp_process+0x68c>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	68da      	ldr	r2, [r3, #12]
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	60da      	str	r2, [r3, #12]
 8005ac6:	e005      	b.n	8005ad4 <tcp_process+0x698>
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	613b      	str	r3, [r7, #16]
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d1ef      	bne.n	8005ab4 <tcp_process+0x678>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	60da      	str	r2, [r3, #12]
 8005ada:	4b43      	ldr	r3, [pc, #268]	@ (8005be8 <tcp_process+0x7ac>)
 8005adc:	2201      	movs	r2, #1
 8005ade:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	220a      	movs	r2, #10
 8005ae4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8005ae6:	4b41      	ldr	r3, [pc, #260]	@ (8005bec <tcp_process+0x7b0>)
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	60da      	str	r2, [r3, #12]
 8005aee:	4a3f      	ldr	r2, [pc, #252]	@ (8005bec <tcp_process+0x7b0>)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6013      	str	r3, [r2, #0]
 8005af4:	f002 f838 	bl	8007b68 <tcp_timer_needed>
      }
      break;
 8005af8:	e06c      	b.n	8005bd4 <tcp_process+0x798>
    case CLOSING:
      tcp_receive(pcb);
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f000 f8f0 	bl	8005ce0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8005b00:	4b3b      	ldr	r3, [pc, #236]	@ (8005bf0 <tcp_process+0x7b4>)
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	f003 0310 	and.w	r3, r3, #16
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d065      	beq.n	8005bd8 <tcp_process+0x79c>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005b10:	4b38      	ldr	r3, [pc, #224]	@ (8005bf4 <tcp_process+0x7b8>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d15f      	bne.n	8005bd8 <tcp_process+0x79c>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d15b      	bne.n	8005bd8 <tcp_process+0x79c>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f7fe fd9b 	bl	800465c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8005b26:	4b35      	ldr	r3, [pc, #212]	@ (8005bfc <tcp_process+0x7c0>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d105      	bne.n	8005b3c <tcp_process+0x700>
 8005b30:	4b32      	ldr	r3, [pc, #200]	@ (8005bfc <tcp_process+0x7c0>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	4a31      	ldr	r2, [pc, #196]	@ (8005bfc <tcp_process+0x7c0>)
 8005b38:	6013      	str	r3, [r2, #0]
 8005b3a:	e013      	b.n	8005b64 <tcp_process+0x728>
 8005b3c:	4b2f      	ldr	r3, [pc, #188]	@ (8005bfc <tcp_process+0x7c0>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	60fb      	str	r3, [r7, #12]
 8005b42:	e00c      	b.n	8005b5e <tcp_process+0x722>
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d104      	bne.n	8005b58 <tcp_process+0x71c>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	68da      	ldr	r2, [r3, #12]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	60da      	str	r2, [r3, #12]
 8005b56:	e005      	b.n	8005b64 <tcp_process+0x728>
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	60fb      	str	r3, [r7, #12]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d1ef      	bne.n	8005b44 <tcp_process+0x708>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	60da      	str	r2, [r3, #12]
 8005b6a:	4b1f      	ldr	r3, [pc, #124]	@ (8005be8 <tcp_process+0x7ac>)
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	220a      	movs	r2, #10
 8005b74:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8005b76:	4b1d      	ldr	r3, [pc, #116]	@ (8005bec <tcp_process+0x7b0>)
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	60da      	str	r2, [r3, #12]
 8005b7e:	4a1b      	ldr	r2, [pc, #108]	@ (8005bec <tcp_process+0x7b0>)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6013      	str	r3, [r2, #0]
 8005b84:	f001 fff0 	bl	8007b68 <tcp_timer_needed>
      }
      break;
 8005b88:	e026      	b.n	8005bd8 <tcp_process+0x79c>
    case LAST_ACK:
      tcp_receive(pcb);
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f000 f8a8 	bl	8005ce0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8005b90:	4b17      	ldr	r3, [pc, #92]	@ (8005bf0 <tcp_process+0x7b4>)
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	f003 0310 	and.w	r3, r3, #16
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d01f      	beq.n	8005bdc <tcp_process+0x7a0>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005ba0:	4b14      	ldr	r3, [pc, #80]	@ (8005bf4 <tcp_process+0x7b8>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d119      	bne.n	8005bdc <tcp_process+0x7a0>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d115      	bne.n	8005bdc <tcp_process+0x7a0>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8005bb0:	4b11      	ldr	r3, [pc, #68]	@ (8005bf8 <tcp_process+0x7bc>)
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	f043 0310 	orr.w	r3, r3, #16
 8005bb8:	b2da      	uxtb	r2, r3
 8005bba:	4b0f      	ldr	r3, [pc, #60]	@ (8005bf8 <tcp_process+0x7bc>)
 8005bbc:	701a      	strb	r2, [r3, #0]
      }
      break;
 8005bbe:	e00d      	b.n	8005bdc <tcp_process+0x7a0>
    default:
      break;
 8005bc0:	bf00      	nop
 8005bc2:	e00c      	b.n	8005bde <tcp_process+0x7a2>
      break;
 8005bc4:	bf00      	nop
 8005bc6:	e00a      	b.n	8005bde <tcp_process+0x7a2>
      break;
 8005bc8:	bf00      	nop
 8005bca:	e008      	b.n	8005bde <tcp_process+0x7a2>
      break;
 8005bcc:	bf00      	nop
 8005bce:	e006      	b.n	8005bde <tcp_process+0x7a2>
      break;
 8005bd0:	bf00      	nop
 8005bd2:	e004      	b.n	8005bde <tcp_process+0x7a2>
      break;
 8005bd4:	bf00      	nop
 8005bd6:	e002      	b.n	8005bde <tcp_process+0x7a2>
      break;
 8005bd8:	bf00      	nop
 8005bda:	e000      	b.n	8005bde <tcp_process+0x7a2>
      break;
 8005bdc:	bf00      	nop
  }
  return ERR_OK;
 8005bde:	2300      	movs	r3, #0
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3724      	adds	r7, #36	@ 0x24
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd90      	pop	{r4, r7, pc}
 8005be8:	24008b20 	.word	0x24008b20
 8005bec:	24008b1c 	.word	0x24008b1c
 8005bf0:	24008b50 	.word	0x24008b50
 8005bf4:	24008b48 	.word	0x24008b48
 8005bf8:	24008b51 	.word	0x24008b51
 8005bfc:	24008b18 	.word	0x24008b18

08005c00 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8005c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c02:	b087      	sub	sp, #28
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	60f8      	str	r0, [r7, #12]
 8005c08:	60b9      	str	r1, [r7, #8]
 8005c0a:	607a      	str	r2, [r7, #4]
 8005c0c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8005c0e:	e036      	b.n	8005c7e <tcp_free_acked_segments+0x7e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f7fd fa78 	bl	8003114 <pbuf_clen>
 8005c24:	4603      	mov	r3, r0
 8005c26:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8005c2e:	8a7a      	ldrh	r2, [r7, #18]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d902      	bls.n	8005c3a <tcp_free_acked_segments+0x3a>
 8005c34:	4826      	ldr	r0, [pc, #152]	@ (8005cd0 <tcp_free_acked_segments+0xd0>)
 8005c36:	f005 f815 	bl	800ac64 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8005c40:	8a7b      	ldrh	r3, [r7, #18]
 8005c42:	1ad3      	subs	r3, r2, r3
 8005c44:	b29a      	uxth	r2, r3
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	891a      	ldrh	r2, [r3, #8]
 8005c50:	4b20      	ldr	r3, [pc, #128]	@ (8005cd4 <tcp_free_acked_segments+0xd4>)
 8005c52:	881b      	ldrh	r3, [r3, #0]
 8005c54:	4413      	add	r3, r2
 8005c56:	b29a      	uxth	r2, r3
 8005c58:	4b1e      	ldr	r3, [pc, #120]	@ (8005cd4 <tcp_free_acked_segments+0xd4>)
 8005c5a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8005c5c:	6978      	ldr	r0, [r7, #20]
 8005c5e:	f7fe fb52 	bl	8004306 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d008      	beq.n	8005c7e <tcp_free_acked_segments+0x7e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d105      	bne.n	8005c7e <tcp_free_acked_segments+0x7e>
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d102      	bne.n	8005c7e <tcp_free_acked_segments+0x7e>
 8005c78:	4817      	ldr	r0, [pc, #92]	@ (8005cd8 <tcp_free_acked_segments+0xd8>)
 8005c7a:	f004 fff3 	bl	800ac64 <iprintf>
  while (seg_list != NULL &&
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d020      	beq.n	8005cc6 <tcp_free_acked_segments+0xc6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8005c84:	4b15      	ldr	r3, [pc, #84]	@ (8005cdc <tcp_free_acked_segments+0xdc>)
 8005c86:	681c      	ldr	r4, [r3, #0]
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f7fb fed7 	bl	8001a42 <lwip_htonl>
 8005c94:	4605      	mov	r5, r0
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	891b      	ldrh	r3, [r3, #8]
 8005c9a:	461e      	mov	r6, r3
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	899b      	ldrh	r3, [r3, #12]
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f7fb feb7 	bl	8001a18 <lwip_htons>
 8005caa:	4603      	mov	r3, r0
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	f003 0303 	and.w	r3, r3, #3
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d001      	beq.n	8005cba <tcp_free_acked_segments+0xba>
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e000      	b.n	8005cbc <tcp_free_acked_segments+0xbc>
 8005cba:	2300      	movs	r3, #0
 8005cbc:	4433      	add	r3, r6
 8005cbe:	442b      	add	r3, r5
 8005cc0:	1ae3      	subs	r3, r4, r3
  while (seg_list != NULL &&
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	daa4      	bge.n	8005c10 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8005cc6:	68bb      	ldr	r3, [r7, #8]
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	371c      	adds	r7, #28
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cd0:	0800c6ec 	.word	0x0800c6ec
 8005cd4:	24008b4c 	.word	0x24008b4c
 8005cd8:	0800c714 	.word	0x0800c714
 8005cdc:	24008b48 	.word	0x24008b48

08005ce0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8005ce0:	b590      	push	{r4, r7, lr}
 8005ce2:	b08b      	sub	sp, #44	@ 0x2c
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d102      	bne.n	8005cf4 <tcp_receive+0x14>
 8005cee:	489f      	ldr	r0, [pc, #636]	@ (8005f6c <tcp_receive+0x28c>)
 8005cf0:	f004 ffb8 	bl	800ac64 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	7d1b      	ldrb	r3, [r3, #20]
 8005cf8:	2b03      	cmp	r3, #3
 8005cfa:	d802      	bhi.n	8005d02 <tcp_receive+0x22>
 8005cfc:	489c      	ldr	r0, [pc, #624]	@ (8005f70 <tcp_receive+0x290>)
 8005cfe:	f004 ffb1 	bl	800ac64 <iprintf>

  if (flags & TCP_ACK) {
 8005d02:	4b9c      	ldr	r3, [pc, #624]	@ (8005f74 <tcp_receive+0x294>)
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	f003 0310 	and.w	r3, r3, #16
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	f000 8250 	beq.w	80061b0 <tcp_receive+0x4d0>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005d16:	461a      	mov	r2, r3
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d1c:	4413      	add	r3, r2
 8005d1e:	61bb      	str	r3, [r7, #24]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005d24:	4b94      	ldr	r3, [pc, #592]	@ (8005f78 <tcp_receive+0x298>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	1ad3      	subs	r3, r2, r3
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	db1b      	blt.n	8005d66 <tcp_receive+0x86>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005d32:	4b91      	ldr	r3, [pc, #580]	@ (8005f78 <tcp_receive+0x298>)
 8005d34:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d106      	bne.n	8005d48 <tcp_receive+0x68>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005d3e:	4b8f      	ldr	r3, [pc, #572]	@ (8005f7c <tcp_receive+0x29c>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	1ad3      	subs	r3, r2, r3
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	db0e      	blt.n	8005d66 <tcp_receive+0x86>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005d4c:	4b8b      	ldr	r3, [pc, #556]	@ (8005f7c <tcp_receive+0x29c>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d125      	bne.n	8005da0 <tcp_receive+0xc0>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8005d54:	4b8a      	ldr	r3, [pc, #552]	@ (8005f80 <tcp_receive+0x2a0>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	89db      	ldrh	r3, [r3, #14]
 8005d5a:	b29a      	uxth	r2, r3
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d91c      	bls.n	8005da0 <tcp_receive+0xc0>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8005d66:	4b86      	ldr	r3, [pc, #536]	@ (8005f80 <tcp_receive+0x2a0>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	89db      	ldrh	r3, [r3, #14]
 8005d6c:	b29a      	uxth	r2, r3
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d205      	bcs.n	8005d90 <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8005d90:	4b79      	ldr	r3, [pc, #484]	@ (8005f78 <tcp_receive+0x298>)
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8005d98:	4b78      	ldr	r3, [pc, #480]	@ (8005f7c <tcp_receive+0x29c>)
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005da4:	4b75      	ldr	r3, [pc, #468]	@ (8005f7c <tcp_receive+0x29c>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	1ad3      	subs	r3, r2, r3
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	db53      	blt.n	8005e56 <tcp_receive+0x176>
      /* Clause 2 */
      if (tcplen == 0) {
 8005dae:	4b75      	ldr	r3, [pc, #468]	@ (8005f84 <tcp_receive+0x2a4>)
 8005db0:	881b      	ldrh	r3, [r3, #0]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	f040 81a5 	bne.w	8006102 <tcp_receive+0x422>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8005dc2:	4413      	add	r3, r2
 8005dc4:	69ba      	ldr	r2, [r7, #24]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	f040 819b 	bne.w	8006102 <tcp_receive+0x422>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	f2c0 8195 	blt.w	8006102 <tcp_receive+0x422>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ddc:	4b67      	ldr	r3, [pc, #412]	@ (8005f7c <tcp_receive+0x29c>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	429a      	cmp	r2, r3
 8005de2:	f040 818e 	bne.w	8006102 <tcp_receive+0x422>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005dec:	2bff      	cmp	r3, #255	@ 0xff
 8005dee:	d007      	beq.n	8005e00 <tcp_receive+0x120>
                ++pcb->dupacks;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005df6:	3301      	adds	r3, #1
 8005df8:	b2da      	uxtb	r2, r3
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005e06:	2b03      	cmp	r3, #3
 8005e08:	d91b      	bls.n	8005e42 <tcp_receive+0x162>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005e14:	4413      	add	r3, r2
 8005e16:	b29a      	uxth	r2, r3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d30a      	bcc.n	8005e38 <tcp_receive+0x158>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005e2c:	4413      	add	r3, r2
 8005e2e:	b29a      	uxth	r2, r3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8005e36:	e004      	b.n	8005e42 <tcp_receive+0x162>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005e3e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005e48:	2b02      	cmp	r3, #2
 8005e4a:	f240 815a 	bls.w	8006102 <tcp_receive+0x422>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f001 fb0a 	bl	8007468 <tcp_rexmit_fast>
 8005e54:	e155      	b.n	8006102 <tcp_receive+0x422>
              }
            }
          }
        }
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8005e56:	4b49      	ldr	r3, [pc, #292]	@ (8005f7c <tcp_receive+0x29c>)
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e5e:	1ad3      	subs	r3, r2, r3
 8005e60:	3b01      	subs	r3, #1
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	f2c0 8148 	blt.w	80060f8 <tcp_receive+0x418>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005e6c:	4b43      	ldr	r3, [pc, #268]	@ (8005f7c <tcp_receive+0x29c>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	1ad3      	subs	r3, r2, r3
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	f2c0 8140 	blt.w	80060f8 <tcp_receive+0x418>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	8b5b      	ldrh	r3, [r3, #26]
 8005e7c:	f003 0304 	and.w	r3, r3, #4
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d010      	beq.n	8005ea6 <tcp_receive+0x1c6>
        tcp_clear_flags(pcb, TF_INFR);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	8b5b      	ldrh	r3, [r3, #26]
 8005e88:	f023 0304 	bic.w	r3, r3, #4
 8005e8c:	b29a      	uxth	r2, r3
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8005eb4:	10db      	asrs	r3, r3, #3
 8005eb6:	b21b      	sxth	r3, r3
 8005eb8:	b29a      	uxth	r2, r3
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	4413      	add	r3, r2
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	b21a      	sxth	r2, r3
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8005ece:	4b2b      	ldr	r3, [pc, #172]	@ (8005f7c <tcp_receive+0x29c>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	b29a      	uxth	r2, r3
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	1ad3      	subs	r3, r2, r3
 8005edc:	82fb      	strh	r3, [r7, #22]

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8005ee6:	4b25      	ldr	r3, [pc, #148]	@ (8005f7c <tcp_receive+0x29c>)
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	7d1b      	ldrb	r3, [r3, #20]
 8005ef2:	2b03      	cmp	r3, #3
 8005ef4:	f240 8091 	bls.w	800601a <tcp_receive+0x33a>
        if (pcb->cwnd < pcb->ssthresh) {
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d23f      	bcs.n	8005f88 <tcp_receive+0x2a8>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	8b5b      	ldrh	r3, [r3, #26]
 8005f0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d001      	beq.n	8005f18 <tcp_receive+0x238>
 8005f14:	2301      	movs	r3, #1
 8005f16:	e000      	b.n	8005f1a <tcp_receive+0x23a>
 8005f18:	2302      	movs	r3, #2
 8005f1a:	757b      	strb	r3, [r7, #21]
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8005f1c:	7d7b      	ldrb	r3, [r7, #21]
 8005f1e:	b29a      	uxth	r2, r3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005f24:	fb12 f303 	smulbb	r3, r2, r3
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	8afa      	ldrh	r2, [r7, #22]
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	bf28      	it	cs
 8005f30:	4613      	movcs	r3, r2
 8005f32:	827b      	strh	r3, [r7, #18]
          TCP_WND_INC(pcb->cwnd, increase);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8005f3a:	8a7b      	ldrh	r3, [r7, #18]
 8005f3c:	4413      	add	r3, r2
 8005f3e:	b29a      	uxth	r2, r3
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d309      	bcc.n	8005f5e <tcp_receive+0x27e>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8005f50:	8a7b      	ldrh	r3, [r7, #18]
 8005f52:	4413      	add	r3, r2
 8005f54:	b29a      	uxth	r2, r3
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8005f5c:	e05d      	b.n	800601a <tcp_receive+0x33a>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005f64:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8005f68:	e057      	b.n	800601a <tcp_receive+0x33a>
 8005f6a:	bf00      	nop
 8005f6c:	0800c734 	.word	0x0800c734
 8005f70:	0800c750 	.word	0x0800c750
 8005f74:	24008b50 	.word	0x24008b50
 8005f78:	24008b44 	.word	0x24008b44
 8005f7c:	24008b48 	.word	0x24008b48
 8005f80:	24008b34 	.word	0x24008b34
 8005f84:	24008b4e 	.word	0x24008b4e
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8005f8e:	8afb      	ldrh	r3, [r7, #22]
 8005f90:	4413      	add	r3, r2
 8005f92:	b29a      	uxth	r2, r3
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d309      	bcc.n	8005fb2 <tcp_receive+0x2d2>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8005fa4:	8afb      	ldrh	r3, [r7, #22]
 8005fa6:	4413      	add	r3, r2
 8005fa8:	b29a      	uxth	r2, r3
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005fb0:	e004      	b.n	8005fbc <tcp_receive+0x2dc>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005fb8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d326      	bcc.n	800601a <tcp_receive+0x33a>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8005fd8:	1ad3      	subs	r3, r2, r3
 8005fda:	b29a      	uxth	r2, r3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005fec:	4413      	add	r3, r2
 8005fee:	b29a      	uxth	r2, r3
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d30a      	bcc.n	8006010 <tcp_receive+0x330>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006004:	4413      	add	r3, r2
 8006006:	b29a      	uxth	r2, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800600e:	e004      	b.n	800601a <tcp_receive+0x33a>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006016:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006022:	4a8b      	ldr	r2, [pc, #556]	@ (8006250 <tcp_receive+0x570>)
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f7ff fdeb 	bl	8005c00 <tcp_free_acked_segments>
 800602a:	4602      	mov	r2, r0
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006038:	4a86      	ldr	r2, [pc, #536]	@ (8006254 <tcp_receive+0x574>)
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f7ff fde0 	bl	8005c00 <tcp_free_acked_segments>
 8006040:	4602      	mov	r2, r0
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800604a:	2b00      	cmp	r3, #0
 800604c:	d104      	bne.n	8006058 <tcp_receive+0x378>
        pcb->rtime = -1;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006054:	861a      	strh	r2, [r3, #48]	@ 0x30
 8006056:	e002      	b.n	800605e <tcp_receive+0x37e>
      } else {
        pcb->rtime = 0;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006068:	2b00      	cmp	r3, #0
 800606a:	d103      	bne.n	8006074 <tcp_receive+0x394>
        pcb->unsent_oversize = 0;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800607a:	4b77      	ldr	r3, [pc, #476]	@ (8006258 <tcp_receive+0x578>)
 800607c:	881b      	ldrh	r3, [r3, #0]
 800607e:	4413      	add	r3, r2
 8006080:	b29a      	uxth	r2, r3
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	8b5b      	ldrh	r3, [r3, #26]
 800608c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006090:	2b00      	cmp	r3, #0
 8006092:	d035      	beq.n	8006100 <tcp_receive+0x420>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006098:	2b00      	cmp	r3, #0
 800609a:	d118      	bne.n	80060ce <tcp_receive+0x3ee>
          if ((pcb->unsent == NULL) ||
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d00c      	beq.n	80060be <tcp_receive+0x3de>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	4618      	mov	r0, r3
 80060ae:	f7fb fcc8 	bl	8001a42 <lwip_htonl>
 80060b2:	4602      	mov	r2, r0
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060b8:	1ad3      	subs	r3, r2, r3
          if ((pcb->unsent == NULL) ||
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	db20      	blt.n	8006100 <tcp_receive+0x420>
            tcp_clear_flags(pcb, TF_RTO);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	8b5b      	ldrh	r3, [r3, #26]
 80060c2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80060c6:	b29a      	uxth	r2, r3
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80060cc:	e018      	b.n	8006100 <tcp_receive+0x420>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	4618      	mov	r0, r3
 80060d8:	f7fb fcb3 	bl	8001a42 <lwip_htonl>
 80060dc:	4602      	mov	r2, r0
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060e2:	1ad3      	subs	r3, r2, r3
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	db0b      	blt.n	8006100 <tcp_receive+0x420>
          tcp_clear_flags(pcb, TF_RTO);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	8b5b      	ldrh	r3, [r3, #26]
 80060ec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80060f0:	b29a      	uxth	r2, r3
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80060f6:	e003      	b.n	8006100 <tcp_receive+0x420>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f001 fbdd 	bl	80078b8 <tcp_send_empty_ack>
 80060fe:	e000      	b.n	8006102 <tcp_receive+0x422>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8006100:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006106:	2b00      	cmp	r3, #0
 8006108:	d052      	beq.n	80061b0 <tcp_receive+0x4d0>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800610e:	4b53      	ldr	r3, [pc, #332]	@ (800625c <tcp_receive+0x57c>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	1ad3      	subs	r3, r2, r3
 8006114:	2b00      	cmp	r3, #0
 8006116:	da4b      	bge.n	80061b0 <tcp_receive+0x4d0>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8006118:	4b51      	ldr	r3, [pc, #324]	@ (8006260 <tcp_receive+0x580>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	b29a      	uxth	r2, r3
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006122:	b29b      	uxth	r3, r3
 8006124:	1ad3      	subs	r3, r2, r3
 8006126:	b29b      	uxth	r3, r3
 8006128:	84fb      	strh	r3, [r7, #38]	@ 0x26

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800612a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8006132:	10db      	asrs	r3, r3, #3
 8006134:	b21b      	sxth	r3, r3
 8006136:	b29b      	uxth	r3, r3
 8006138:	1ad3      	subs	r3, r2, r3
 800613a:	b29b      	uxth	r3, r3
 800613c:	84fb      	strh	r3, [r7, #38]	@ 0x26
      pcb->sa = (s16_t)(pcb->sa + m);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8006144:	b29a      	uxth	r2, r3
 8006146:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006148:	4413      	add	r3, r2
 800614a:	b29b      	uxth	r3, r3
 800614c:	b21a      	sxth	r2, r3
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8006152:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8006156:	2b00      	cmp	r3, #0
 8006158:	da03      	bge.n	8006162 <tcp_receive+0x482>
        m = (s16_t) - m;
 800615a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800615c:	425b      	negs	r3, r3
 800615e:	b29b      	uxth	r3, r3
 8006160:	84fb      	strh	r3, [r7, #38]	@ 0x26
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8006162:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800616a:	109b      	asrs	r3, r3, #2
 800616c:	b21b      	sxth	r3, r3
 800616e:	b29b      	uxth	r3, r3
 8006170:	1ad3      	subs	r3, r2, r3
 8006172:	b29b      	uxth	r3, r3
 8006174:	84fb      	strh	r3, [r7, #38]	@ 0x26
      pcb->sv = (s16_t)(pcb->sv + m);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800617c:	b29a      	uxth	r2, r3
 800617e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006180:	4413      	add	r3, r2
 8006182:	b29b      	uxth	r3, r3
 8006184:	b21a      	sxth	r2, r3
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8006190:	10db      	asrs	r3, r3, #3
 8006192:	b21b      	sxth	r3, r3
 8006194:	b29a      	uxth	r2, r3
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800619c:	b29b      	uxth	r3, r3
 800619e:	4413      	add	r3, r2
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	b21a      	sxth	r2, r3
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2200      	movs	r2, #0
 80061ae:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80061b0:	4b2c      	ldr	r3, [pc, #176]	@ (8006264 <tcp_receive+0x584>)
 80061b2:	881b      	ldrh	r3, [r3, #0]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	f000 81a9 	beq.w	800650c <tcp_receive+0x82c>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	7d1b      	ldrb	r3, [r3, #20]
 80061be:	2b06      	cmp	r3, #6
 80061c0:	f200 81a4 	bhi.w	800650c <tcp_receive+0x82c>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80061c8:	4b27      	ldr	r3, [pc, #156]	@ (8006268 <tcp_receive+0x588>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	1ad3      	subs	r3, r2, r3
 80061ce:	3b01      	subs	r3, #1
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	db75      	blt.n	80062c0 <tcp_receive+0x5e0>
 80061d4:	4b23      	ldr	r3, [pc, #140]	@ (8006264 <tcp_receive+0x584>)
 80061d6:	881b      	ldrh	r3, [r3, #0]
 80061d8:	461a      	mov	r2, r3
 80061da:	4b23      	ldr	r3, [pc, #140]	@ (8006268 <tcp_receive+0x588>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	441a      	add	r2, r3
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061e4:	1ad3      	subs	r3, r2, r3
 80061e6:	3b01      	subs	r3, #1
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	db69      	blt.n	80062c0 <tcp_receive+0x5e0>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80061ec:	4b1f      	ldr	r3, [pc, #124]	@ (800626c <tcp_receive+0x58c>)
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	623b      	str	r3, [r7, #32]
      u32_t off32 = pcb->rcv_nxt - seqno;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80061f6:	4b1c      	ldr	r3, [pc, #112]	@ (8006268 <tcp_receive+0x588>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	1ad3      	subs	r3, r2, r3
 80061fc:	60fb      	str	r3, [r7, #12]
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80061fe:	4b1b      	ldr	r3, [pc, #108]	@ (800626c <tcp_receive+0x58c>)
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d102      	bne.n	800620c <tcp_receive+0x52c>
 8006206:	481a      	ldr	r0, [pc, #104]	@ (8006270 <tcp_receive+0x590>)
 8006208:	f004 fd2c 	bl	800ac64 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8006212:	4293      	cmp	r3, r2
 8006214:	d902      	bls.n	800621c <tcp_receive+0x53c>
 8006216:	4817      	ldr	r0, [pc, #92]	@ (8006274 <tcp_receive+0x594>)
 8006218:	f004 fd24 	bl	800ac64 <iprintf>
      off = (u16_t)off32;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8006220:	4b12      	ldr	r3, [pc, #72]	@ (800626c <tcp_receive+0x58c>)
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	891b      	ldrh	r3, [r3, #8]
 8006226:	8bfa      	ldrh	r2, [r7, #30]
 8006228:	429a      	cmp	r2, r3
 800622a:	d902      	bls.n	8006232 <tcp_receive+0x552>
 800622c:	4812      	ldr	r0, [pc, #72]	@ (8006278 <tcp_receive+0x598>)
 800622e:	f004 fd19 	bl	800ac64 <iprintf>
      inseg.len -= off;
 8006232:	4b0e      	ldr	r3, [pc, #56]	@ (800626c <tcp_receive+0x58c>)
 8006234:	891a      	ldrh	r2, [r3, #8]
 8006236:	8bfb      	ldrh	r3, [r7, #30]
 8006238:	1ad3      	subs	r3, r2, r3
 800623a:	b29a      	uxth	r2, r3
 800623c:	4b0b      	ldr	r3, [pc, #44]	@ (800626c <tcp_receive+0x58c>)
 800623e:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8006240:	4b0a      	ldr	r3, [pc, #40]	@ (800626c <tcp_receive+0x58c>)
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	891a      	ldrh	r2, [r3, #8]
 8006246:	8bfb      	ldrh	r3, [r7, #30]
 8006248:	1ad3      	subs	r3, r2, r3
 800624a:	817b      	strh	r3, [r7, #10]
      while (p->len < off) {
 800624c:	e024      	b.n	8006298 <tcp_receive+0x5b8>
 800624e:	bf00      	nop
 8006250:	0800c76c 	.word	0x0800c76c
 8006254:	0800c774 	.word	0x0800c774
 8006258:	24008b4c 	.word	0x24008b4c
 800625c:	24008b48 	.word	0x24008b48
 8006260:	24008b0c 	.word	0x24008b0c
 8006264:	24008b4e 	.word	0x24008b4e
 8006268:	24008b44 	.word	0x24008b44
 800626c:	24008b24 	.word	0x24008b24
 8006270:	0800c77c 	.word	0x0800c77c
 8006274:	0800c78c 	.word	0x0800c78c
 8006278:	0800c79c 	.word	0x0800c79c
        off -= p->len;
 800627c:	6a3b      	ldr	r3, [r7, #32]
 800627e:	895b      	ldrh	r3, [r3, #10]
 8006280:	8bfa      	ldrh	r2, [r7, #30]
 8006282:	1ad3      	subs	r3, r2, r3
 8006284:	83fb      	strh	r3, [r7, #30]
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8006286:	6a3b      	ldr	r3, [r7, #32]
 8006288:	897a      	ldrh	r2, [r7, #10]
 800628a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800628c:	6a3b      	ldr	r3, [r7, #32]
 800628e:	2200      	movs	r2, #0
 8006290:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8006292:	6a3b      	ldr	r3, [r7, #32]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	623b      	str	r3, [r7, #32]
      while (p->len < off) {
 8006298:	6a3b      	ldr	r3, [r7, #32]
 800629a:	895b      	ldrh	r3, [r3, #10]
 800629c:	8bfa      	ldrh	r2, [r7, #30]
 800629e:	429a      	cmp	r2, r3
 80062a0:	d8ec      	bhi.n	800627c <tcp_receive+0x59c>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80062a2:	8bfb      	ldrh	r3, [r7, #30]
 80062a4:	4619      	mov	r1, r3
 80062a6:	6a38      	ldr	r0, [r7, #32]
 80062a8:	f7fc fe4c 	bl	8002f44 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062b0:	4a8f      	ldr	r2, [pc, #572]	@ (80064f0 <tcp_receive+0x810>)
 80062b2:	6013      	str	r3, [r2, #0]
 80062b4:	4b8f      	ldr	r3, [pc, #572]	@ (80064f4 <tcp_receive+0x814>)
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	4a8d      	ldr	r2, [pc, #564]	@ (80064f0 <tcp_receive+0x810>)
 80062ba:	6812      	ldr	r2, [r2, #0]
 80062bc:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80062be:	e00d      	b.n	80062dc <tcp_receive+0x5fc>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80062c0:	4b8b      	ldr	r3, [pc, #556]	@ (80064f0 <tcp_receive+0x810>)
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062c8:	1ad3      	subs	r3, r2, r3
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	da06      	bge.n	80062dc <tcp_receive+0x5fc>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	8b5b      	ldrh	r3, [r3, #26]
 80062d2:	f043 0302 	orr.w	r3, r3, #2
 80062d6:	b29a      	uxth	r2, r3
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80062dc:	4b84      	ldr	r3, [pc, #528]	@ (80064f0 <tcp_receive+0x810>)
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062e4:	1ad3      	subs	r3, r2, r3
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	f2c0 80fd 	blt.w	80064e6 <tcp_receive+0x806>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80062f4:	441a      	add	r2, r3
 80062f6:	4b7e      	ldr	r3, [pc, #504]	@ (80064f0 <tcp_receive+0x810>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	1ad3      	subs	r3, r2, r3
 80062fc:	3b01      	subs	r3, #1
 80062fe:	2b00      	cmp	r3, #0
 8006300:	f2c0 80f1 	blt.w	80064e6 <tcp_receive+0x806>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006308:	4b79      	ldr	r3, [pc, #484]	@ (80064f0 <tcp_receive+0x810>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	429a      	cmp	r2, r3
 800630e:	f040 80e6 	bne.w	80064de <tcp_receive+0x7fe>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8006312:	4b78      	ldr	r3, [pc, #480]	@ (80064f4 <tcp_receive+0x814>)
 8006314:	891c      	ldrh	r4, [r3, #8]
 8006316:	4b77      	ldr	r3, [pc, #476]	@ (80064f4 <tcp_receive+0x814>)
 8006318:	68db      	ldr	r3, [r3, #12]
 800631a:	899b      	ldrh	r3, [r3, #12]
 800631c:	b29b      	uxth	r3, r3
 800631e:	4618      	mov	r0, r3
 8006320:	f7fb fb7a 	bl	8001a18 <lwip_htons>
 8006324:	4603      	mov	r3, r0
 8006326:	b2db      	uxtb	r3, r3
 8006328:	f003 0303 	and.w	r3, r3, #3
 800632c:	2b00      	cmp	r3, #0
 800632e:	d001      	beq.n	8006334 <tcp_receive+0x654>
 8006330:	2301      	movs	r3, #1
 8006332:	e000      	b.n	8006336 <tcp_receive+0x656>
 8006334:	2300      	movs	r3, #0
 8006336:	4423      	add	r3, r4
 8006338:	b29a      	uxth	r2, r3
 800633a:	4b6f      	ldr	r3, [pc, #444]	@ (80064f8 <tcp_receive+0x818>)
 800633c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8006342:	4b6d      	ldr	r3, [pc, #436]	@ (80064f8 <tcp_receive+0x818>)
 8006344:	881b      	ldrh	r3, [r3, #0]
 8006346:	429a      	cmp	r2, r3
 8006348:	d270      	bcs.n	800642c <tcp_receive+0x74c>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800634a:	4b6a      	ldr	r3, [pc, #424]	@ (80064f4 <tcp_receive+0x814>)
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	899b      	ldrh	r3, [r3, #12]
 8006350:	b29b      	uxth	r3, r3
 8006352:	4618      	mov	r0, r3
 8006354:	f7fb fb60 	bl	8001a18 <lwip_htons>
 8006358:	4603      	mov	r3, r0
 800635a:	b2db      	uxtb	r3, r3
 800635c:	f003 0301 	and.w	r3, r3, #1
 8006360:	2b00      	cmp	r3, #0
 8006362:	d01e      	beq.n	80063a2 <tcp_receive+0x6c2>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8006364:	4b63      	ldr	r3, [pc, #396]	@ (80064f4 <tcp_receive+0x814>)
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	899b      	ldrh	r3, [r3, #12]
 800636a:	b29b      	uxth	r3, r3
 800636c:	b21b      	sxth	r3, r3
 800636e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006372:	b21c      	sxth	r4, r3
 8006374:	4b5f      	ldr	r3, [pc, #380]	@ (80064f4 <tcp_receive+0x814>)
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	899b      	ldrh	r3, [r3, #12]
 800637a:	b29b      	uxth	r3, r3
 800637c:	4618      	mov	r0, r3
 800637e:	f7fb fb4b 	bl	8001a18 <lwip_htons>
 8006382:	4603      	mov	r3, r0
 8006384:	b2db      	uxtb	r3, r3
 8006386:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800638a:	b29b      	uxth	r3, r3
 800638c:	4618      	mov	r0, r3
 800638e:	f7fb fb43 	bl	8001a18 <lwip_htons>
 8006392:	4603      	mov	r3, r0
 8006394:	b21b      	sxth	r3, r3
 8006396:	4323      	orrs	r3, r4
 8006398:	b21a      	sxth	r2, r3
 800639a:	4b56      	ldr	r3, [pc, #344]	@ (80064f4 <tcp_receive+0x814>)
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	b292      	uxth	r2, r2
 80063a0:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80063a6:	4b53      	ldr	r3, [pc, #332]	@ (80064f4 <tcp_receive+0x814>)
 80063a8:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80063aa:	4b52      	ldr	r3, [pc, #328]	@ (80064f4 <tcp_receive+0x814>)
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	899b      	ldrh	r3, [r3, #12]
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	4618      	mov	r0, r3
 80063b4:	f7fb fb30 	bl	8001a18 <lwip_htons>
 80063b8:	4603      	mov	r3, r0
 80063ba:	b2db      	uxtb	r3, r3
 80063bc:	f003 0302 	and.w	r3, r3, #2
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d005      	beq.n	80063d0 <tcp_receive+0x6f0>
            inseg.len -= 1;
 80063c4:	4b4b      	ldr	r3, [pc, #300]	@ (80064f4 <tcp_receive+0x814>)
 80063c6:	891b      	ldrh	r3, [r3, #8]
 80063c8:	3b01      	subs	r3, #1
 80063ca:	b29a      	uxth	r2, r3
 80063cc:	4b49      	ldr	r3, [pc, #292]	@ (80064f4 <tcp_receive+0x814>)
 80063ce:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80063d0:	4b48      	ldr	r3, [pc, #288]	@ (80064f4 <tcp_receive+0x814>)
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	4a47      	ldr	r2, [pc, #284]	@ (80064f4 <tcp_receive+0x814>)
 80063d6:	8912      	ldrh	r2, [r2, #8]
 80063d8:	4611      	mov	r1, r2
 80063da:	4618      	mov	r0, r3
 80063dc:	f7fc fcc2 	bl	8002d64 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80063e0:	4b44      	ldr	r3, [pc, #272]	@ (80064f4 <tcp_receive+0x814>)
 80063e2:	891c      	ldrh	r4, [r3, #8]
 80063e4:	4b43      	ldr	r3, [pc, #268]	@ (80064f4 <tcp_receive+0x814>)
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	899b      	ldrh	r3, [r3, #12]
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	4618      	mov	r0, r3
 80063ee:	f7fb fb13 	bl	8001a18 <lwip_htons>
 80063f2:	4603      	mov	r3, r0
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	f003 0303 	and.w	r3, r3, #3
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d001      	beq.n	8006402 <tcp_receive+0x722>
 80063fe:	2301      	movs	r3, #1
 8006400:	e000      	b.n	8006404 <tcp_receive+0x724>
 8006402:	2300      	movs	r3, #0
 8006404:	4423      	add	r3, r4
 8006406:	b29a      	uxth	r2, r3
 8006408:	4b3b      	ldr	r3, [pc, #236]	@ (80064f8 <tcp_receive+0x818>)
 800640a:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd",
 800640c:	4b3a      	ldr	r3, [pc, #232]	@ (80064f8 <tcp_receive+0x818>)
 800640e:	881b      	ldrh	r3, [r3, #0]
 8006410:	461a      	mov	r2, r3
 8006412:	4b37      	ldr	r3, [pc, #220]	@ (80064f0 <tcp_receive+0x810>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	441a      	add	r2, r3
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800641c:	6879      	ldr	r1, [r7, #4]
 800641e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8006420:	440b      	add	r3, r1
 8006422:	429a      	cmp	r2, r3
 8006424:	d002      	beq.n	800642c <tcp_receive+0x74c>
 8006426:	4835      	ldr	r0, [pc, #212]	@ (80064fc <tcp_receive+0x81c>)
 8006428:	f004 fc1c 	bl	800ac64 <iprintf>
            pcb->ooseq = next;
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800642c:	4b32      	ldr	r3, [pc, #200]	@ (80064f8 <tcp_receive+0x818>)
 800642e:	881b      	ldrh	r3, [r3, #0]
 8006430:	461a      	mov	r2, r3
 8006432:	4b2f      	ldr	r3, [pc, #188]	@ (80064f0 <tcp_receive+0x810>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	441a      	add	r2, r3
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd", pcb->rcv_wnd >= tcplen);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8006440:	4b2d      	ldr	r3, [pc, #180]	@ (80064f8 <tcp_receive+0x818>)
 8006442:	881b      	ldrh	r3, [r3, #0]
 8006444:	429a      	cmp	r2, r3
 8006446:	d202      	bcs.n	800644e <tcp_receive+0x76e>
 8006448:	482d      	ldr	r0, [pc, #180]	@ (8006500 <tcp_receive+0x820>)
 800644a:	f004 fc0b 	bl	800ac64 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8006452:	4b29      	ldr	r3, [pc, #164]	@ (80064f8 <tcp_receive+0x818>)
 8006454:	881b      	ldrh	r3, [r3, #0]
 8006456:	1ad3      	subs	r3, r2, r3
 8006458:	b29a      	uxth	r2, r3
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f7fd fae2 	bl	8003a28 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8006464:	4b23      	ldr	r3, [pc, #140]	@ (80064f4 <tcp_receive+0x814>)
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	891b      	ldrh	r3, [r3, #8]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d006      	beq.n	800647c <tcp_receive+0x79c>
          recv_data = inseg.p;
 800646e:	4b21      	ldr	r3, [pc, #132]	@ (80064f4 <tcp_receive+0x814>)
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	4a24      	ldr	r2, [pc, #144]	@ (8006504 <tcp_receive+0x824>)
 8006474:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8006476:	4b1f      	ldr	r3, [pc, #124]	@ (80064f4 <tcp_receive+0x814>)
 8006478:	2200      	movs	r2, #0
 800647a:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800647c:	4b1d      	ldr	r3, [pc, #116]	@ (80064f4 <tcp_receive+0x814>)
 800647e:	68db      	ldr	r3, [r3, #12]
 8006480:	899b      	ldrh	r3, [r3, #12]
 8006482:	b29b      	uxth	r3, r3
 8006484:	4618      	mov	r0, r3
 8006486:	f7fb fac7 	bl	8001a18 <lwip_htons>
 800648a:	4603      	mov	r3, r0
 800648c:	b2db      	uxtb	r3, r3
 800648e:	f003 0301 	and.w	r3, r3, #1
 8006492:	2b00      	cmp	r3, #0
 8006494:	d006      	beq.n	80064a4 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8006496:	4b1c      	ldr	r3, [pc, #112]	@ (8006508 <tcp_receive+0x828>)
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	f043 0320 	orr.w	r3, r3, #32
 800649e:	b2da      	uxtb	r2, r3
 80064a0:	4b19      	ldr	r3, [pc, #100]	@ (8006508 <tcp_receive+0x828>)
 80064a2:	701a      	strb	r2, [r3, #0]
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	8b5b      	ldrh	r3, [r3, #26]
 80064a8:	f003 0301 	and.w	r3, r3, #1
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d00e      	beq.n	80064ce <tcp_receive+0x7ee>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	8b5b      	ldrh	r3, [r3, #26]
 80064b4:	f023 0301 	bic.w	r3, r3, #1
 80064b8:	b29a      	uxth	r2, r3
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	835a      	strh	r2, [r3, #26]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	8b5b      	ldrh	r3, [r3, #26]
 80064c2:	f043 0302 	orr.w	r3, r3, #2
 80064c6:	b29a      	uxth	r2, r3
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80064cc:	e00f      	b.n	80064ee <tcp_receive+0x80e>
        tcp_ack(pcb);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	8b5b      	ldrh	r3, [r3, #26]
 80064d2:	f043 0301 	orr.w	r3, r3, #1
 80064d6:	b29a      	uxth	r2, r3
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80064dc:	e007      	b.n	80064ee <tcp_receive+0x80e>
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f001 f9ea 	bl	80078b8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80064e4:	e003      	b.n	80064ee <tcp_receive+0x80e>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f001 f9e6 	bl	80078b8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80064ec:	e028      	b.n	8006540 <tcp_receive+0x860>
 80064ee:	e027      	b.n	8006540 <tcp_receive+0x860>
 80064f0:	24008b44 	.word	0x24008b44
 80064f4:	24008b24 	.word	0x24008b24
 80064f8:	24008b4e 	.word	0x24008b4e
 80064fc:	0800c7ac 	.word	0x0800c7ac
 8006500:	0800c7e4 	.word	0x0800c7e4
 8006504:	24008b54 	.word	0x24008b54
 8006508:	24008b51 	.word	0x24008b51
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800650c:	4b0e      	ldr	r3, [pc, #56]	@ (8006548 <tcp_receive+0x868>)
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006514:	1ad3      	subs	r3, r2, r3
 8006516:	2b00      	cmp	r3, #0
 8006518:	db0a      	blt.n	8006530 <tcp_receive+0x850>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800651e:	687a      	ldr	r2, [r7, #4]
 8006520:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8006522:	441a      	add	r2, r3
 8006524:	4b08      	ldr	r3, [pc, #32]	@ (8006548 <tcp_receive+0x868>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	1ad3      	subs	r3, r2, r3
 800652a:	3b01      	subs	r3, #1
 800652c:	2b00      	cmp	r3, #0
 800652e:	da07      	bge.n	8006540 <tcp_receive+0x860>
      tcp_ack_now(pcb);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	8b5b      	ldrh	r3, [r3, #26]
 8006534:	f043 0302 	orr.w	r3, r3, #2
 8006538:	b29a      	uxth	r2, r3
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800653e:	e7ff      	b.n	8006540 <tcp_receive+0x860>
 8006540:	bf00      	nop
 8006542:	372c      	adds	r7, #44	@ 0x2c
 8006544:	46bd      	mov	sp, r7
 8006546:	bd90      	pop	{r4, r7, pc}
 8006548:	24008b44 	.word	0x24008b44

0800654c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800654c:	b480      	push	{r7}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8006552:	4b15      	ldr	r3, [pc, #84]	@ (80065a8 <tcp_get_next_optbyte+0x5c>)
 8006554:	881b      	ldrh	r3, [r3, #0]
 8006556:	1c5a      	adds	r2, r3, #1
 8006558:	b291      	uxth	r1, r2
 800655a:	4a13      	ldr	r2, [pc, #76]	@ (80065a8 <tcp_get_next_optbyte+0x5c>)
 800655c:	8011      	strh	r1, [r2, #0]
 800655e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8006560:	4b12      	ldr	r3, [pc, #72]	@ (80065ac <tcp_get_next_optbyte+0x60>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d004      	beq.n	8006572 <tcp_get_next_optbyte+0x26>
 8006568:	4b11      	ldr	r3, [pc, #68]	@ (80065b0 <tcp_get_next_optbyte+0x64>)
 800656a:	881b      	ldrh	r3, [r3, #0]
 800656c:	88fa      	ldrh	r2, [r7, #6]
 800656e:	429a      	cmp	r2, r3
 8006570:	d208      	bcs.n	8006584 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8006572:	4b10      	ldr	r3, [pc, #64]	@ (80065b4 <tcp_get_next_optbyte+0x68>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	3314      	adds	r3, #20
 8006578:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800657a:	88fb      	ldrh	r3, [r7, #6]
 800657c:	683a      	ldr	r2, [r7, #0]
 800657e:	4413      	add	r3, r2
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	e00b      	b.n	800659c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8006584:	88fb      	ldrh	r3, [r7, #6]
 8006586:	b2da      	uxtb	r2, r3
 8006588:	4b09      	ldr	r3, [pc, #36]	@ (80065b0 <tcp_get_next_optbyte+0x64>)
 800658a:	881b      	ldrh	r3, [r3, #0]
 800658c:	b2db      	uxtb	r3, r3
 800658e:	1ad3      	subs	r3, r2, r3
 8006590:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8006592:	4b06      	ldr	r3, [pc, #24]	@ (80065ac <tcp_get_next_optbyte+0x60>)
 8006594:	681a      	ldr	r2, [r3, #0]
 8006596:	797b      	ldrb	r3, [r7, #5]
 8006598:	4413      	add	r3, r2
 800659a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800659c:	4618      	mov	r0, r3
 800659e:	370c      	adds	r7, #12
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr
 80065a8:	24008b40 	.word	0x24008b40
 80065ac:	24008b3c 	.word	0x24008b3c
 80065b0:	24008b3a 	.word	0x24008b3a
 80065b4:	24008b34 	.word	0x24008b34

080065b8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d102      	bne.n	80065cc <tcp_parseopt+0x14>
 80065c6:	4831      	ldr	r0, [pc, #196]	@ (800668c <tcp_parseopt+0xd4>)
 80065c8:	f004 fb4c 	bl	800ac64 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80065cc:	4b30      	ldr	r3, [pc, #192]	@ (8006690 <tcp_parseopt+0xd8>)
 80065ce:	881b      	ldrh	r3, [r3, #0]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d057      	beq.n	8006684 <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80065d4:	4b2f      	ldr	r3, [pc, #188]	@ (8006694 <tcp_parseopt+0xdc>)
 80065d6:	2200      	movs	r2, #0
 80065d8:	801a      	strh	r2, [r3, #0]
 80065da:	e047      	b.n	800666c <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 80065dc:	f7ff ffb6 	bl	800654c <tcp_get_next_optbyte>
 80065e0:	4603      	mov	r3, r0
 80065e2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80065e4:	7bfb      	ldrb	r3, [r7, #15]
 80065e6:	2b02      	cmp	r3, #2
 80065e8:	d006      	beq.n	80065f8 <tcp_parseopt+0x40>
 80065ea:	2b02      	cmp	r3, #2
 80065ec:	dc2b      	bgt.n	8006646 <tcp_parseopt+0x8e>
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d043      	beq.n	800667a <tcp_parseopt+0xc2>
 80065f2:	2b01      	cmp	r3, #1
 80065f4:	d039      	beq.n	800666a <tcp_parseopt+0xb2>
 80065f6:	e026      	b.n	8006646 <tcp_parseopt+0x8e>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80065f8:	f7ff ffa8 	bl	800654c <tcp_get_next_optbyte>
 80065fc:	4603      	mov	r3, r0
 80065fe:	2b04      	cmp	r3, #4
 8006600:	d13d      	bne.n	800667e <tcp_parseopt+0xc6>
 8006602:	4b24      	ldr	r3, [pc, #144]	@ (8006694 <tcp_parseopt+0xdc>)
 8006604:	881b      	ldrh	r3, [r3, #0]
 8006606:	3301      	adds	r3, #1
 8006608:	4a21      	ldr	r2, [pc, #132]	@ (8006690 <tcp_parseopt+0xd8>)
 800660a:	8812      	ldrh	r2, [r2, #0]
 800660c:	4293      	cmp	r3, r2
 800660e:	da36      	bge.n	800667e <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8006610:	f7ff ff9c 	bl	800654c <tcp_get_next_optbyte>
 8006614:	4603      	mov	r3, r0
 8006616:	021b      	lsls	r3, r3, #8
 8006618:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800661a:	f7ff ff97 	bl	800654c <tcp_get_next_optbyte>
 800661e:	4603      	mov	r3, r0
 8006620:	461a      	mov	r2, r3
 8006622:	89bb      	ldrh	r3, [r7, #12]
 8006624:	4313      	orrs	r3, r2
 8006626:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8006628:	89bb      	ldrh	r3, [r7, #12]
 800662a:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 800662e:	4293      	cmp	r3, r2
 8006630:	d804      	bhi.n	800663c <tcp_parseopt+0x84>
 8006632:	89bb      	ldrh	r3, [r7, #12]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d001      	beq.n	800663c <tcp_parseopt+0x84>
 8006638:	89ba      	ldrh	r2, [r7, #12]
 800663a:	e001      	b.n	8006640 <tcp_parseopt+0x88>
 800663c:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 8006644:	e012      	b.n	800666c <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8006646:	f7ff ff81 	bl	800654c <tcp_get_next_optbyte>
 800664a:	4603      	mov	r3, r0
 800664c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800664e:	7afb      	ldrb	r3, [r7, #11]
 8006650:	2b01      	cmp	r3, #1
 8006652:	d916      	bls.n	8006682 <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8006654:	7afb      	ldrb	r3, [r7, #11]
 8006656:	b29a      	uxth	r2, r3
 8006658:	4b0e      	ldr	r3, [pc, #56]	@ (8006694 <tcp_parseopt+0xdc>)
 800665a:	881b      	ldrh	r3, [r3, #0]
 800665c:	4413      	add	r3, r2
 800665e:	b29b      	uxth	r3, r3
 8006660:	3b02      	subs	r3, #2
 8006662:	b29a      	uxth	r2, r3
 8006664:	4b0b      	ldr	r3, [pc, #44]	@ (8006694 <tcp_parseopt+0xdc>)
 8006666:	801a      	strh	r2, [r3, #0]
 8006668:	e000      	b.n	800666c <tcp_parseopt+0xb4>
          break;
 800666a:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800666c:	4b09      	ldr	r3, [pc, #36]	@ (8006694 <tcp_parseopt+0xdc>)
 800666e:	881a      	ldrh	r2, [r3, #0]
 8006670:	4b07      	ldr	r3, [pc, #28]	@ (8006690 <tcp_parseopt+0xd8>)
 8006672:	881b      	ldrh	r3, [r3, #0]
 8006674:	429a      	cmp	r2, r3
 8006676:	d3b1      	bcc.n	80065dc <tcp_parseopt+0x24>
 8006678:	e004      	b.n	8006684 <tcp_parseopt+0xcc>
          return;
 800667a:	bf00      	nop
 800667c:	e002      	b.n	8006684 <tcp_parseopt+0xcc>
            return;
 800667e:	bf00      	nop
 8006680:	e000      	b.n	8006684 <tcp_parseopt+0xcc>
            return;
 8006682:	bf00      	nop
      }
    }
  }
}
 8006684:	3710      	adds	r7, #16
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}
 800668a:	bf00      	nop
 800668c:	0800c804 	.word	0x0800c804
 8006690:	24008b38 	.word	0x24008b38
 8006694:	24008b40 	.word	0x24008b40

08006698 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8006698:	b480      	push	{r7}
 800669a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800669c:	4b05      	ldr	r3, [pc, #20]	@ (80066b4 <tcp_trigger_input_pcb_close+0x1c>)
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	f043 0310 	orr.w	r3, r3, #16
 80066a4:	b2da      	uxtb	r2, r3
 80066a6:	4b03      	ldr	r3, [pc, #12]	@ (80066b4 <tcp_trigger_input_pcb_close+0x1c>)
 80066a8:	701a      	strb	r2, [r3, #0]
}
 80066aa:	bf00      	nop
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr
 80066b4:	24008b51 	.word	0x24008b51

080066b8 <tcp_route>:
                                              struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b084      	sub	sp, #16
 80066bc:	af00      	add	r7, sp, #0
 80066be:	60f8      	str	r0, [r7, #12]
 80066c0:	60b9      	str	r1, [r7, #8]
 80066c2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d00a      	beq.n	80066e0 <tcp_route+0x28>
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	7a1b      	ldrb	r3, [r3, #8]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d006      	beq.n	80066e0 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	7a1b      	ldrb	r3, [r3, #8]
 80066d6:	4618      	mov	r0, r3
 80066d8:	f7fc f9b2 	bl	8002a40 <netif_get_by_index>
 80066dc:	4603      	mov	r3, r0
 80066de:	e003      	b.n	80066e8 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f003 f817 	bl	8009714 <ip4_route>
 80066e6:	4603      	mov	r3, r0
  }
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3710      	adds	r7, #16
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80066f0:	b590      	push	{r4, r7, lr}
 80066f2:	b087      	sub	sp, #28
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	60f8      	str	r0, [r7, #12]
 80066f8:	60b9      	str	r1, [r7, #8]
 80066fa:	603b      	str	r3, [r7, #0]
 80066fc:	4613      	mov	r3, r2
 80066fe:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d102      	bne.n	800670c <tcp_create_segment+0x1c>
 8006706:	483f      	ldr	r0, [pc, #252]	@ (8006804 <tcp_create_segment+0x114>)
 8006708:	f004 faac 	bl	800ac64 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d102      	bne.n	8006718 <tcp_create_segment+0x28>
 8006712:	483d      	ldr	r0, [pc, #244]	@ (8006808 <tcp_create_segment+0x118>)
 8006714:	f004 faa6 	bl	800ac64 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8006718:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	b2db      	uxtb	r3, r3
 8006720:	f003 0304 	and.w	r3, r3, #4
 8006724:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8006726:	2003      	movs	r0, #3
 8006728:	f7fb fee8 	bl	80024fc <memp_malloc>
 800672c:	6138      	str	r0, [r7, #16]
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d104      	bne.n	800673e <tcp_create_segment+0x4e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8006734:	68b8      	ldr	r0, [r7, #8]
 8006736:	f7fc fc79 	bl	800302c <pbuf_free>
    return NULL;
 800673a:	2300      	movs	r3, #0
 800673c:	e05d      	b.n	80067fa <tcp_create_segment+0x10a>
  }
  seg->flags = optflags;
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8006744:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	2200      	movs	r2, #0
 800674a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	68ba      	ldr	r2, [r7, #8]
 8006750:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	891a      	ldrh	r2, [r3, #8]
 8006756:	7dfb      	ldrb	r3, [r7, #23]
 8006758:	b29b      	uxth	r3, r3
 800675a:	429a      	cmp	r2, r3
 800675c:	d202      	bcs.n	8006764 <tcp_create_segment+0x74>
 800675e:	482b      	ldr	r0, [pc, #172]	@ (800680c <tcp_create_segment+0x11c>)
 8006760:	f004 fa80 	bl	800ac64 <iprintf>
  seg->len = p->tot_len - optlen;
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	891a      	ldrh	r2, [r3, #8]
 8006768:	7dfb      	ldrb	r3, [r7, #23]
 800676a:	b29b      	uxth	r3, r3
 800676c:	1ad3      	subs	r3, r2, r3
 800676e:	b29a      	uxth	r2, r3
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8006774:	2114      	movs	r1, #20
 8006776:	68b8      	ldr	r0, [r7, #8]
 8006778:	f7fc fbd4 	bl	8002f24 <pbuf_add_header>
 800677c:	4603      	mov	r3, r0
 800677e:	2b00      	cmp	r3, #0
 8006780:	d004      	beq.n	800678c <tcp_create_segment+0x9c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8006782:	6938      	ldr	r0, [r7, #16]
 8006784:	f7fd fdbf 	bl	8004306 <tcp_seg_free>
    return NULL;
 8006788:	2300      	movs	r3, #0
 800678a:	e036      	b.n	80067fa <tcp_create_segment+0x10a>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	685a      	ldr	r2, [r3, #4]
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	8ada      	ldrh	r2, [r3, #22]
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	68dc      	ldr	r4, [r3, #12]
 800679e:	4610      	mov	r0, r2
 80067a0:	f7fb f93a 	bl	8001a18 <lwip_htons>
 80067a4:	4603      	mov	r3, r0
 80067a6:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	8b1a      	ldrh	r2, [r3, #24]
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	68dc      	ldr	r4, [r3, #12]
 80067b0:	4610      	mov	r0, r2
 80067b2:	f7fb f931 	bl	8001a18 <lwip_htons>
 80067b6:	4603      	mov	r3, r0
 80067b8:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	68dc      	ldr	r4, [r3, #12]
 80067be:	6838      	ldr	r0, [r7, #0]
 80067c0:	f7fb f93f 	bl	8001a42 <lwip_htonl>
 80067c4:	4603      	mov	r3, r0
 80067c6:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80067c8:	7dfb      	ldrb	r3, [r7, #23]
 80067ca:	089b      	lsrs	r3, r3, #2
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	3305      	adds	r3, #5
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	031b      	lsls	r3, r3, #12
 80067d4:	b29a      	uxth	r2, r3
 80067d6:	79fb      	ldrb	r3, [r7, #7]
 80067d8:	b29b      	uxth	r3, r3
 80067da:	4313      	orrs	r3, r2
 80067dc:	b29a      	uxth	r2, r3
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	68dc      	ldr	r4, [r3, #12]
 80067e2:	4610      	mov	r0, r2
 80067e4:	f7fb f918 	bl	8001a18 <lwip_htons>
 80067e8:	4603      	mov	r3, r0
 80067ea:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	2200      	movs	r2, #0
 80067f2:	749a      	strb	r2, [r3, #18]
 80067f4:	2200      	movs	r2, #0
 80067f6:	74da      	strb	r2, [r3, #19]
  return seg;
 80067f8:	693b      	ldr	r3, [r7, #16]
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	371c      	adds	r7, #28
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd90      	pop	{r4, r7, pc}
 8006802:	bf00      	nop
 8006804:	0800c820 	.word	0x0800c820
 8006808:	0800c840 	.word	0x0800c840
 800680c:	0800c864 	.word	0x0800c864

08006810 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8006810:	b590      	push	{r4, r7, lr}
 8006812:	b08b      	sub	sp, #44	@ 0x2c
 8006814:	af02      	add	r7, sp, #8
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	460b      	mov	r3, r1
 800681a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800681c:	2300      	movs	r3, #0
 800681e:	61fb      	str	r3, [r7, #28]
 8006820:	2300      	movs	r3, #0
 8006822:	613b      	str	r3, [r7, #16]
  struct pbuf *p = NULL;
 8006824:	2300      	movs	r3, #0
 8006826:	61bb      	str	r3, [r7, #24]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d102      	bne.n	8006834 <tcp_split_unsent_seg+0x24>
 800682e:	488c      	ldr	r0, [pc, #560]	@ (8006a60 <tcp_split_unsent_seg+0x250>)
 8006830:	f004 fa18 	bl	800ac64 <iprintf>

  useg = pcb->unsent;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006838:	613b      	str	r3, [r7, #16]
  if (useg == NULL) {
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d102      	bne.n	8006846 <tcp_split_unsent_seg+0x36>
    return ERR_MEM;
 8006840:	f04f 33ff 	mov.w	r3, #4294967295
 8006844:	e107      	b.n	8006a56 <tcp_split_unsent_seg+0x246>
  }

  if (split == 0) {
 8006846:	887b      	ldrh	r3, [r7, #2]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d105      	bne.n	8006858 <tcp_split_unsent_seg+0x48>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800684c:	4885      	ldr	r0, [pc, #532]	@ (8006a64 <tcp_split_unsent_seg+0x254>)
 800684e:	f004 fa09 	bl	800ac64 <iprintf>
    return ERR_VAL;
 8006852:	f06f 0305 	mvn.w	r3, #5
 8006856:	e0fe      	b.n	8006a56 <tcp_split_unsent_seg+0x246>
  }

  if (useg->len <= split) {
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	891b      	ldrh	r3, [r3, #8]
 800685c:	887a      	ldrh	r2, [r7, #2]
 800685e:	429a      	cmp	r2, r3
 8006860:	d301      	bcc.n	8006866 <tcp_split_unsent_seg+0x56>
    return ERR_OK;
 8006862:	2300      	movs	r3, #0
 8006864:	e0f7      	b.n	8006a56 <tcp_split_unsent_seg+0x246>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800686a:	887a      	ldrh	r2, [r7, #2]
 800686c:	429a      	cmp	r2, r3
 800686e:	d902      	bls.n	8006876 <tcp_split_unsent_seg+0x66>
 8006870:	487d      	ldr	r0, [pc, #500]	@ (8006a68 <tcp_split_unsent_seg+0x258>)
 8006872:	f004 f9f7 	bl	800ac64 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	891b      	ldrh	r3, [r3, #8]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d102      	bne.n	8006884 <tcp_split_unsent_seg+0x74>
 800687e:	487b      	ldr	r0, [pc, #492]	@ (8006a6c <tcp_split_unsent_seg+0x25c>)
 8006880:	f004 f9f0 	bl	800ac64 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	7a9b      	ldrb	r3, [r3, #10]
 8006888:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800688a:	7bfb      	ldrb	r3, [r7, #15]
 800688c:	009b      	lsls	r3, r3, #2
 800688e:	b2db      	uxtb	r3, r3
 8006890:	f003 0304 	and.w	r3, r3, #4
 8006894:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	891a      	ldrh	r2, [r3, #8]
 800689a:	887b      	ldrh	r3, [r7, #2]
 800689c:	1ad3      	subs	r3, r2, r3
 800689e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80068a0:	7bbb      	ldrb	r3, [r7, #14]
 80068a2:	b29a      	uxth	r2, r3
 80068a4:	89bb      	ldrh	r3, [r7, #12]
 80068a6:	4413      	add	r3, r2
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80068ae:	4619      	mov	r1, r3
 80068b0:	2036      	movs	r0, #54	@ 0x36
 80068b2:	f7fc f915 	bl	8002ae0 <pbuf_alloc>
 80068b6:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80068b8:	69bb      	ldr	r3, [r7, #24]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	f000 80ba 	beq.w	8006a34 <tcp_split_unsent_seg+0x224>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	891a      	ldrh	r2, [r3, #8]
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	891b      	ldrh	r3, [r3, #8]
 80068ca:	1ad3      	subs	r3, r2, r3
 80068cc:	b29a      	uxth	r2, r3
 80068ce:	887b      	ldrh	r3, [r7, #2]
 80068d0:	4413      	add	r3, r2
 80068d2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	6858      	ldr	r0, [r3, #4]
 80068d8:	69bb      	ldr	r3, [r7, #24]
 80068da:	685a      	ldr	r2, [r3, #4]
 80068dc:	7bbb      	ldrb	r3, [r7, #14]
 80068de:	18d1      	adds	r1, r2, r3
 80068e0:	897b      	ldrh	r3, [r7, #10]
 80068e2:	89ba      	ldrh	r2, [r7, #12]
 80068e4:	f7fc fd78 	bl	80033d8 <pbuf_copy_partial>
 80068e8:	4603      	mov	r3, r0
 80068ea:	461a      	mov	r2, r3
 80068ec:	89bb      	ldrh	r3, [r7, #12]
 80068ee:	4293      	cmp	r3, r2
 80068f0:	f040 80a2 	bne.w	8006a38 <tcp_split_unsent_seg+0x228>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	68db      	ldr	r3, [r3, #12]
 80068f8:	899b      	ldrh	r3, [r3, #12]
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	4618      	mov	r0, r3
 80068fe:	f7fb f88b 	bl	8001a18 <lwip_htons>
 8006902:	4603      	mov	r3, r0
 8006904:	b2db      	uxtb	r3, r3
 8006906:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800690a:	75fb      	strb	r3, [r7, #23]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800690c:	2300      	movs	r3, #0
 800690e:	75bb      	strb	r3, [r7, #22]

  if (split_flags & TCP_PSH) {
 8006910:	7dfb      	ldrb	r3, [r7, #23]
 8006912:	f003 0308 	and.w	r3, r3, #8
 8006916:	2b00      	cmp	r3, #0
 8006918:	d007      	beq.n	800692a <tcp_split_unsent_seg+0x11a>
    split_flags &= ~TCP_PSH;
 800691a:	7dfb      	ldrb	r3, [r7, #23]
 800691c:	f023 0308 	bic.w	r3, r3, #8
 8006920:	75fb      	strb	r3, [r7, #23]
    remainder_flags |= TCP_PSH;
 8006922:	7dbb      	ldrb	r3, [r7, #22]
 8006924:	f043 0308 	orr.w	r3, r3, #8
 8006928:	75bb      	strb	r3, [r7, #22]
  }
  if (split_flags & TCP_FIN) {
 800692a:	7dfb      	ldrb	r3, [r7, #23]
 800692c:	f003 0301 	and.w	r3, r3, #1
 8006930:	2b00      	cmp	r3, #0
 8006932:	d007      	beq.n	8006944 <tcp_split_unsent_seg+0x134>
    split_flags &= ~TCP_FIN;
 8006934:	7dfb      	ldrb	r3, [r7, #23]
 8006936:	f023 0301 	bic.w	r3, r3, #1
 800693a:	75fb      	strb	r3, [r7, #23]
    remainder_flags |= TCP_FIN;
 800693c:	7dbb      	ldrb	r3, [r7, #22]
 800693e:	f043 0301 	orr.w	r3, r3, #1
 8006942:	75bb      	strb	r3, [r7, #22]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	68db      	ldr	r3, [r3, #12]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	4618      	mov	r0, r3
 800694c:	f7fb f879 	bl	8001a42 <lwip_htonl>
 8006950:	4602      	mov	r2, r0
 8006952:	887b      	ldrh	r3, [r7, #2]
 8006954:	18d1      	adds	r1, r2, r3
 8006956:	7dba      	ldrb	r2, [r7, #22]
 8006958:	7bfb      	ldrb	r3, [r7, #15]
 800695a:	9300      	str	r3, [sp, #0]
 800695c:	460b      	mov	r3, r1
 800695e:	69b9      	ldr	r1, [r7, #24]
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f7ff fec5 	bl	80066f0 <tcp_create_segment>
 8006966:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8006968:	69fb      	ldr	r3, [r7, #28]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d102      	bne.n	8006974 <tcp_split_unsent_seg+0x164>
    p = NULL; /* Freed by tcp_create_segment */
 800696e:	2300      	movs	r3, #0
 8006970:	61bb      	str	r3, [r7, #24]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("tcp_split_unsent_seg: could not create new TCP segment\n"));
    goto memerr;
 8006972:	e062      	b.n	8006a3a <tcp_split_unsent_seg+0x22a>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	4618      	mov	r0, r3
 800697a:	f7fc fbcb 	bl	8003114 <pbuf_clen>
 800697e:	4603      	mov	r3, r0
 8006980:	461a      	mov	r2, r3
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8006988:	1a9b      	subs	r3, r3, r2
 800698a:	b29a      	uxth	r2, r3
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	6858      	ldr	r0, [r3, #4]
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	891a      	ldrh	r2, [r3, #8]
 800699c:	89bb      	ldrh	r3, [r7, #12]
 800699e:	1ad3      	subs	r3, r2, r3
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	4619      	mov	r1, r3
 80069a4:	f7fc f9de 	bl	8002d64 <pbuf_realloc>
  useg->len -= remainder;
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	891a      	ldrh	r2, [r3, #8]
 80069ac:	89bb      	ldrh	r3, [r7, #12]
 80069ae:	1ad3      	subs	r3, r2, r3
 80069b0:	b29a      	uxth	r2, r3
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	899b      	ldrh	r3, [r3, #12]
 80069bc:	b29c      	uxth	r4, r3
 80069be:	7dfb      	ldrb	r3, [r7, #23]
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	4618      	mov	r0, r3
 80069c4:	f7fb f828 	bl	8001a18 <lwip_htons>
 80069c8:	4603      	mov	r3, r0
 80069ca:	461a      	mov	r2, r3
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	68db      	ldr	r3, [r3, #12]
 80069d0:	4322      	orrs	r2, r4
 80069d2:	b292      	uxth	r2, r2
 80069d4:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	4618      	mov	r0, r3
 80069dc:	f7fc fb9a 	bl	8003114 <pbuf_clen>
 80069e0:	4603      	mov	r3, r0
 80069e2:	461a      	mov	r2, r3
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80069ea:	4413      	add	r3, r2
 80069ec:	b29a      	uxth	r2, r3
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80069f4:	69fb      	ldr	r3, [r7, #28]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	4618      	mov	r0, r3
 80069fa:	f7fc fb8b 	bl	8003114 <pbuf_clen>
 80069fe:	4603      	mov	r3, r0
 8006a00:	461a      	mov	r2, r3
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8006a08:	4413      	add	r3, r2
 8006a0a:	b29a      	uxth	r2, r3
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	69fb      	ldr	r3, [r7, #28]
 8006a18:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	69fa      	ldr	r2, [r7, #28]
 8006a1e:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8006a20:	69fb      	ldr	r3, [r7, #28]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d103      	bne.n	8006a30 <tcp_split_unsent_seg+0x220>
    pcb->unsent_oversize = 0;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8006a30:	2300      	movs	r3, #0
 8006a32:	e010      	b.n	8006a56 <tcp_split_unsent_seg+0x246>
    goto memerr;
 8006a34:	bf00      	nop
 8006a36:	e000      	b.n	8006a3a <tcp_split_unsent_seg+0x22a>
    goto memerr;
 8006a38:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8006a3a:	69fb      	ldr	r3, [r7, #28]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d002      	beq.n	8006a46 <tcp_split_unsent_seg+0x236>
 8006a40:	480b      	ldr	r0, [pc, #44]	@ (8006a70 <tcp_split_unsent_seg+0x260>)
 8006a42:	f004 f90f 	bl	800ac64 <iprintf>
  if (p != NULL) {
 8006a46:	69bb      	ldr	r3, [r7, #24]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d002      	beq.n	8006a52 <tcp_split_unsent_seg+0x242>
    pbuf_free(p);
 8006a4c:	69b8      	ldr	r0, [r7, #24]
 8006a4e:	f7fc faed 	bl	800302c <pbuf_free>
  }

  return ERR_MEM;
 8006a52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3724      	adds	r7, #36	@ 0x24
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd90      	pop	{r4, r7, pc}
 8006a5e:	bf00      	nop
 8006a60:	0800cb0c 	.word	0x0800cb0c
 8006a64:	0800cb30 	.word	0x0800cb30
 8006a68:	0800cb54 	.word	0x0800cb54
 8006a6c:	0800cb64 	.word	0x0800cb64
 8006a70:	0800cb74 	.word	0x0800cb74

08006a74 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8006a74:	b590      	push	{r4, r7, lr}
 8006a76:	b085      	sub	sp, #20
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d102      	bne.n	8006a88 <tcp_send_fin+0x14>
 8006a82:	481f      	ldr	r0, [pc, #124]	@ (8006b00 <tcp_send_fin+0x8c>)
 8006a84:	f004 f8ee 	bl	800ac64 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d02e      	beq.n	8006aee <tcp_send_fin+0x7a>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a94:	60fb      	str	r3, [r7, #12]
 8006a96:	e002      	b.n	8006a9e <tcp_send_fin+0x2a>
         last_unsent = last_unsent->next);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d1f8      	bne.n	8006a98 <tcp_send_fin+0x24>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	68db      	ldr	r3, [r3, #12]
 8006aaa:	899b      	ldrh	r3, [r3, #12]
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f7fa ffb2 	bl	8001a18 <lwip_htons>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	b2db      	uxtb	r3, r3
 8006ab8:	f003 0307 	and.w	r3, r3, #7
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d116      	bne.n	8006aee <tcp_send_fin+0x7a>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	68db      	ldr	r3, [r3, #12]
 8006ac4:	899b      	ldrh	r3, [r3, #12]
 8006ac6:	b29c      	uxth	r4, r3
 8006ac8:	2001      	movs	r0, #1
 8006aca:	f7fa ffa5 	bl	8001a18 <lwip_htons>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	68db      	ldr	r3, [r3, #12]
 8006ad6:	4322      	orrs	r2, r4
 8006ad8:	b292      	uxth	r2, r2
 8006ada:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	8b5b      	ldrh	r3, [r3, #26]
 8006ae0:	f043 0320 	orr.w	r3, r3, #32
 8006ae4:	b29a      	uxth	r2, r3
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8006aea:	2300      	movs	r3, #0
 8006aec:	e004      	b.n	8006af8 <tcp_send_fin+0x84>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8006aee:	2101      	movs	r1, #1
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f000 f807 	bl	8006b04 <tcp_enqueue_flags>
 8006af6:	4603      	mov	r3, r0
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3714      	adds	r7, #20
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd90      	pop	{r4, r7, pc}
 8006b00:	0800cb80 	.word	0x0800cb80

08006b04 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b08a      	sub	sp, #40	@ 0x28
 8006b08:	af02      	add	r7, sp, #8
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	460b      	mov	r3, r1
 8006b0e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8006b10:	2300      	movs	r3, #0
 8006b12:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8006b14:	2300      	movs	r3, #0
 8006b16:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8006b18:	78fb      	ldrb	r3, [r7, #3]
 8006b1a:	f003 0303 	and.w	r3, r3, #3
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d102      	bne.n	8006b28 <tcp_enqueue_flags+0x24>
 8006b22:	485b      	ldr	r0, [pc, #364]	@ (8006c90 <tcp_enqueue_flags+0x18c>)
 8006b24:	f004 f89e 	bl	800ac64 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d102      	bne.n	8006b34 <tcp_enqueue_flags+0x30>
 8006b2e:	4859      	ldr	r0, [pc, #356]	@ (8006c94 <tcp_enqueue_flags+0x190>)
 8006b30:	f004 f898 	bl	800ac64 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8006b34:	78fb      	ldrb	r3, [r7, #3]
 8006b36:	f003 0302 	and.w	r3, r3, #2
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d001      	beq.n	8006b42 <tcp_enqueue_flags+0x3e>
    optflags = TF_SEG_OPTS_MSS;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8006b42:	7ffb      	ldrb	r3, [r7, #31]
 8006b44:	009b      	lsls	r3, r3, #2
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	f003 0304 	and.w	r3, r3, #4
 8006b4c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8006b4e:	7dfb      	ldrb	r3, [r7, #23]
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8006b56:	4619      	mov	r1, r3
 8006b58:	2036      	movs	r0, #54	@ 0x36
 8006b5a:	f7fb ffc1 	bl	8002ae0 <pbuf_alloc>
 8006b5e:	6138      	str	r0, [r7, #16]
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d109      	bne.n	8006b7a <tcp_enqueue_flags+0x76>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	8b5b      	ldrh	r3, [r3, #26]
 8006b6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b6e:	b29a      	uxth	r2, r3
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8006b74:	f04f 33ff 	mov.w	r3, #4294967295
 8006b78:	e085      	b.n	8006c86 <tcp_enqueue_flags+0x182>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	895a      	ldrh	r2, [r3, #10]
 8006b7e:	7dfb      	ldrb	r3, [r7, #23]
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d202      	bcs.n	8006b8c <tcp_enqueue_flags+0x88>
 8006b86:	4844      	ldr	r0, [pc, #272]	@ (8006c98 <tcp_enqueue_flags+0x194>)
 8006b88:	f004 f86c 	bl	800ac64 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8006b90:	78fa      	ldrb	r2, [r7, #3]
 8006b92:	7ffb      	ldrb	r3, [r7, #31]
 8006b94:	9300      	str	r3, [sp, #0]
 8006b96:	460b      	mov	r3, r1
 8006b98:	6939      	ldr	r1, [r7, #16]
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f7ff fda8 	bl	80066f0 <tcp_create_segment>
 8006ba0:	60f8      	str	r0, [r7, #12]
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d109      	bne.n	8006bbc <tcp_enqueue_flags+0xb8>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	8b5b      	ldrh	r3, [r3, #26]
 8006bac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bb0:	b29a      	uxth	r2, r3
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8006bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8006bba:	e064      	b.n	8006c86 <tcp_enqueue_flags+0x182>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	68db      	ldr	r3, [r3, #12]
 8006bc0:	f003 0303 	and.w	r3, r3, #3
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d002      	beq.n	8006bce <tcp_enqueue_flags+0xca>
 8006bc8:	4834      	ldr	r0, [pc, #208]	@ (8006c9c <tcp_enqueue_flags+0x198>)
 8006bca:	f004 f84b 	bl	800ac64 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	891b      	ldrh	r3, [r3, #8]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d002      	beq.n	8006bdc <tcp_enqueue_flags+0xd8>
 8006bd6:	4832      	ldr	r0, [pc, #200]	@ (8006ca0 <tcp_enqueue_flags+0x19c>)
 8006bd8:	f004 f844 	bl	800ac64 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d103      	bne.n	8006bec <tcp_enqueue_flags+0xe8>
    pcb->unsent = seg;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	68fa      	ldr	r2, [r7, #12]
 8006be8:	66da      	str	r2, [r3, #108]	@ 0x6c
 8006bea:	e00d      	b.n	8006c08 <tcp_enqueue_flags+0x104>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006bf0:	61bb      	str	r3, [r7, #24]
 8006bf2:	e002      	b.n	8006bfa <tcp_enqueue_flags+0xf6>
 8006bf4:	69bb      	ldr	r3, [r7, #24]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	61bb      	str	r3, [r7, #24]
 8006bfa:	69bb      	ldr	r3, [r7, #24]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d1f8      	bne.n	8006bf4 <tcp_enqueue_flags+0xf0>
    useg->next = seg;
 8006c02:	69bb      	ldr	r3, [r7, #24]
 8006c04:	68fa      	ldr	r2, [r7, #12]
 8006c06:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8006c10:	78fb      	ldrb	r3, [r7, #3]
 8006c12:	f003 0302 	and.w	r3, r3, #2
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d104      	bne.n	8006c24 <tcp_enqueue_flags+0x120>
 8006c1a:	78fb      	ldrb	r3, [r7, #3]
 8006c1c:	f003 0301 	and.w	r3, r3, #1
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d004      	beq.n	8006c2e <tcp_enqueue_flags+0x12a>
    pcb->snd_lbb++;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c28:	1c5a      	adds	r2, r3, #1
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8006c2e:	78fb      	ldrb	r3, [r7, #3]
 8006c30:	f003 0301 	and.w	r3, r3, #1
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d006      	beq.n	8006c46 <tcp_enqueue_flags+0x142>
    tcp_set_flags(pcb, TF_FIN);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	8b5b      	ldrh	r3, [r3, #26]
 8006c3c:	f043 0320 	orr.w	r3, r3, #32
 8006c40:	b29a      	uxth	r2, r3
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f7fc fa62 	bl	8003114 <pbuf_clen>
 8006c50:	4603      	mov	r3, r0
 8006c52:	461a      	mov	r2, r3
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8006c5a:	4413      	add	r3, r2
 8006c5c:	b29a      	uxth	r2, r3
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d00a      	beq.n	8006c84 <tcp_enqueue_flags+0x180>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d106      	bne.n	8006c84 <tcp_enqueue_flags+0x180>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d102      	bne.n	8006c84 <tcp_enqueue_flags+0x180>
 8006c7e:	4809      	ldr	r0, [pc, #36]	@ (8006ca4 <tcp_enqueue_flags+0x1a0>)
 8006c80:	f003 fff0 	bl	800ac64 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8006c84:	2300      	movs	r3, #0
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3720      	adds	r7, #32
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}
 8006c8e:	bf00      	nop
 8006c90:	0800cb9c 	.word	0x0800cb9c
 8006c94:	0800cbf4 	.word	0x0800cbf4
 8006c98:	0800cc14 	.word	0x0800cc14
 8006c9c:	0800cc50 	.word	0x0800cc50
 8006ca0:	0800cc68 	.word	0x0800cc68
 8006ca4:	0800cc94 	.word	0x0800cc94

08006ca8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8006ca8:	b5b0      	push	{r4, r5, r7, lr}
 8006caa:	b08a      	sub	sp, #40	@ 0x28
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d102      	bne.n	8006cbc <tcp_output+0x14>
 8006cb6:	4898      	ldr	r0, [pc, #608]	@ (8006f18 <tcp_output+0x270>)
 8006cb8:	f003 ffd4 	bl	800ac64 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	7d1b      	ldrb	r3, [r3, #20]
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d102      	bne.n	8006cca <tcp_output+0x22>
 8006cc4:	4895      	ldr	r0, [pc, #596]	@ (8006f1c <tcp_output+0x274>)
 8006cc6:	f003 ffcd 	bl	800ac64 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8006cca:	4b95      	ldr	r3, [pc, #596]	@ (8006f20 <tcp_output+0x278>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d101      	bne.n	8006cd8 <tcp_output+0x30>
    return ERR_OK;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	e1c6      	b.n	8007066 <tcp_output+0x3be>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	bf28      	it	cs
 8006ce8:	4613      	movcs	r3, r2
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006cf2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8006cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d10b      	bne.n	8006d12 <tcp_output+0x6a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	8b5b      	ldrh	r3, [r3, #26]
 8006cfe:	f003 0302 	and.w	r3, r3, #2
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	f000 81a2 	beq.w	800704c <tcp_output+0x3a4>
      return tcp_send_empty_ack(pcb);
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f000 fdd5 	bl	80078b8 <tcp_send_empty_ack>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	e1a9      	b.n	8007066 <tcp_output+0x3be>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8006d12:	6879      	ldr	r1, [r7, #4]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	3304      	adds	r3, #4
 8006d18:	461a      	mov	r2, r3
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f7ff fccc 	bl	80066b8 <tcp_route>
 8006d20:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d102      	bne.n	8006d2e <tcp_output+0x86>
    return ERR_RTE;
 8006d28:	f06f 0303 	mvn.w	r3, #3
 8006d2c:	e19b      	b.n	8007066 <tcp_output+0x3be>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d003      	beq.n	8006d3c <tcp_output+0x94>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d111      	bne.n	8006d60 <tcp_output+0xb8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d002      	beq.n	8006d48 <tcp_output+0xa0>
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	3304      	adds	r3, #4
 8006d46:	e000      	b.n	8006d4a <tcp_output+0xa2>
 8006d48:	2300      	movs	r3, #0
 8006d4a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d102      	bne.n	8006d58 <tcp_output+0xb0>
      return ERR_RTE;
 8006d52:	f06f 0303 	mvn.w	r3, #3
 8006d56:	e186      	b.n	8007066 <tcp_output+0x3be>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8006d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d62:	68db      	ldr	r3, [r3, #12]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	4618      	mov	r0, r3
 8006d68:	f7fa fe6b 	bl	8001a42 <lwip_htonl>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d72:	1ad3      	subs	r3, r2, r3
 8006d74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d76:	8912      	ldrh	r2, [r2, #8]
 8006d78:	4413      	add	r3, r2
 8006d7a:	69ba      	ldr	r2, [r7, #24]
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d227      	bcs.n	8006dd0 <tcp_output+0x128>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006d86:	461a      	mov	r2, r3
 8006d88:	69bb      	ldr	r3, [r7, #24]
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d114      	bne.n	8006db8 <tcp_output+0x110>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d110      	bne.n	8006db8 <tcp_output+0x110>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d10b      	bne.n	8006db8 <tcp_output+0x110>
      pcb->persist_cnt = 0;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2200      	movs	r2, #0
 8006da4:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
      pcb->persist_backoff = 1;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2201      	movs	r2, #1
 8006dac:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
      pcb->persist_probe = 0;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	8b5b      	ldrh	r3, [r3, #26]
 8006dbc:	f003 0302 	and.w	r3, r3, #2
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	f000 8145 	beq.w	8007050 <tcp_output+0x3a8>
      return tcp_send_empty_ack(pcb);
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 fd76 	bl	80078b8 <tcp_send_empty_ack>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	e14a      	b.n	8007066 <tcp_output+0x3be>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ddc:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8006dde:	6a3b      	ldr	r3, [r7, #32]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	f000 8114 	beq.w	800700e <tcp_output+0x366>
    for (; useg->next != NULL; useg = useg->next);
 8006de6:	e002      	b.n	8006dee <tcp_output+0x146>
 8006de8:	6a3b      	ldr	r3, [r7, #32]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	623b      	str	r3, [r7, #32]
 8006dee:	6a3b      	ldr	r3, [r7, #32]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d1f8      	bne.n	8006de8 <tcp_output+0x140>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8006df6:	e10a      	b.n	800700e <tcp_output+0x366>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8006df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dfa:	68db      	ldr	r3, [r3, #12]
 8006dfc:	899b      	ldrh	r3, [r3, #12]
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	4618      	mov	r0, r3
 8006e02:	f7fa fe09 	bl	8001a18 <lwip_htons>
 8006e06:	4603      	mov	r3, r0
 8006e08:	b2db      	uxtb	r3, r3
 8006e0a:	f003 0304 	and.w	r3, r3, #4
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d002      	beq.n	8006e18 <tcp_output+0x170>
 8006e12:	4844      	ldr	r0, [pc, #272]	@ (8006f24 <tcp_output+0x27c>)
 8006e14:	f003 ff26 	bl	800ac64 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d01f      	beq.n	8006e60 <tcp_output+0x1b8>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	8b5b      	ldrh	r3, [r3, #26]
 8006e24:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d119      	bne.n	8006e60 <tcp_output+0x1b8>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d00b      	beq.n	8006e4c <tcp_output+0x1a4>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d110      	bne.n	8006e60 <tcp_output+0x1b8>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e42:	891a      	ldrh	r2, [r3, #8]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d209      	bcs.n	8006e60 <tcp_output+0x1b8>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d004      	beq.n	8006e60 <tcp_output+0x1b8>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8006e5c:	2b07      	cmp	r3, #7
 8006e5e:	d901      	bls.n	8006e64 <tcp_output+0x1bc>
 8006e60:	2301      	movs	r3, #1
 8006e62:	e000      	b.n	8006e66 <tcp_output+0x1be>
 8006e64:	2300      	movs	r3, #0
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d106      	bne.n	8006e78 <tcp_output+0x1d0>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	8b5b      	ldrh	r3, [r3, #26]
 8006e6e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	f000 80e0 	beq.w	8007038 <tcp_output+0x390>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	7d1b      	ldrb	r3, [r3, #20]
 8006e7c:	2b02      	cmp	r3, #2
 8006e7e:	d00d      	beq.n	8006e9c <tcp_output+0x1f4>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8006e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e82:	68db      	ldr	r3, [r3, #12]
 8006e84:	899b      	ldrh	r3, [r3, #12]
 8006e86:	b29c      	uxth	r4, r3
 8006e88:	2010      	movs	r0, #16
 8006e8a:	f7fa fdc5 	bl	8001a18 <lwip_htons>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	461a      	mov	r2, r3
 8006e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e94:	68db      	ldr	r3, [r3, #12]
 8006e96:	4322      	orrs	r2, r4
 8006e98:	b292      	uxth	r2, r2
 8006e9a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8006e9c:	697a      	ldr	r2, [r7, #20]
 8006e9e:	6879      	ldr	r1, [r7, #4]
 8006ea0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006ea2:	f000 f8fd 	bl	80070a0 <tcp_output_segment>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8006eaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d009      	beq.n	8006ec6 <tcp_output+0x21e>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	8b5b      	ldrh	r3, [r3, #26]
 8006eb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006eba:	b29a      	uxth	r2, r3
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	835a      	strh	r2, [r3, #26]
      return err;
 8006ec0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ec4:	e0cf      	b.n	8007066 <tcp_output+0x3be>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8006ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ec8:	681a      	ldr	r2, [r3, #0]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	7d1b      	ldrb	r3, [r3, #20]
 8006ed2:	2b02      	cmp	r3, #2
 8006ed4:	d006      	beq.n	8006ee4 <tcp_output+0x23c>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	8b5b      	ldrh	r3, [r3, #26]
 8006eda:	f023 0303 	bic.w	r3, r3, #3
 8006ede:	b29a      	uxth	r2, r3
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8006ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ee6:	68db      	ldr	r3, [r3, #12]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	4618      	mov	r0, r3
 8006eec:	f7fa fda9 	bl	8001a42 <lwip_htonl>
 8006ef0:	4604      	mov	r4, r0
 8006ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ef4:	891b      	ldrh	r3, [r3, #8]
 8006ef6:	461d      	mov	r5, r3
 8006ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	899b      	ldrh	r3, [r3, #12]
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	4618      	mov	r0, r3
 8006f02:	f7fa fd89 	bl	8001a18 <lwip_htons>
 8006f06:	4603      	mov	r3, r0
 8006f08:	b2db      	uxtb	r3, r3
 8006f0a:	f003 0303 	and.w	r3, r3, #3
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d00a      	beq.n	8006f28 <tcp_output+0x280>
 8006f12:	2301      	movs	r3, #1
 8006f14:	e009      	b.n	8006f2a <tcp_output+0x282>
 8006f16:	bf00      	nop
 8006f18:	0800ccbc 	.word	0x0800ccbc
 8006f1c:	0800ccd4 	.word	0x0800ccd4
 8006f20:	24008b58 	.word	0x24008b58
 8006f24:	0800ccfc 	.word	0x0800ccfc
 8006f28:	2300      	movs	r3, #0
 8006f2a:	442b      	add	r3, r5
 8006f2c:	4423      	add	r3, r4
 8006f2e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	1ad3      	subs	r3, r2, r3
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	da02      	bge.n	8006f42 <tcp_output+0x29a>
      pcb->snd_nxt = snd_nxt;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	68ba      	ldr	r2, [r7, #8]
 8006f40:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8006f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f44:	891b      	ldrh	r3, [r3, #8]
 8006f46:	461c      	mov	r4, r3
 8006f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f4a:	68db      	ldr	r3, [r3, #12]
 8006f4c:	899b      	ldrh	r3, [r3, #12]
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	4618      	mov	r0, r3
 8006f52:	f7fa fd61 	bl	8001a18 <lwip_htons>
 8006f56:	4603      	mov	r3, r0
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	f003 0303 	and.w	r3, r3, #3
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d001      	beq.n	8006f66 <tcp_output+0x2be>
 8006f62:	2301      	movs	r3, #1
 8006f64:	e000      	b.n	8006f68 <tcp_output+0x2c0>
 8006f66:	2300      	movs	r3, #0
 8006f68:	4423      	add	r3, r4
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d049      	beq.n	8007002 <tcp_output+0x35a>
      seg->next = NULL;
 8006f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f70:	2200      	movs	r2, #0
 8006f72:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d105      	bne.n	8006f88 <tcp_output+0x2e0>
        pcb->unacked = seg;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f80:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8006f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f84:	623b      	str	r3, [r7, #32]
 8006f86:	e03f      	b.n	8007008 <tcp_output+0x360>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8006f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f8a:	68db      	ldr	r3, [r3, #12]
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f7fa fd57 	bl	8001a42 <lwip_htonl>
 8006f94:	4604      	mov	r4, r0
 8006f96:	6a3b      	ldr	r3, [r7, #32]
 8006f98:	68db      	ldr	r3, [r3, #12]
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f7fa fd50 	bl	8001a42 <lwip_htonl>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	1ae3      	subs	r3, r4, r3
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	da24      	bge.n	8006ff4 <tcp_output+0x34c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	3370      	adds	r3, #112	@ 0x70
 8006fae:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8006fb0:	e002      	b.n	8006fb8 <tcp_output+0x310>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8006fb2:	69fb      	ldr	r3, [r7, #28]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8006fb8:	69fb      	ldr	r3, [r7, #28]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d011      	beq.n	8006fe4 <tcp_output+0x33c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8006fc0:	69fb      	ldr	r3, [r7, #28]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	68db      	ldr	r3, [r3, #12]
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f7fa fd3a 	bl	8001a42 <lwip_htonl>
 8006fce:	4604      	mov	r4, r0
 8006fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fd2:	68db      	ldr	r3, [r3, #12]
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f7fa fd33 	bl	8001a42 <lwip_htonl>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	dbe6      	blt.n	8006fb2 <tcp_output+0x30a>
          }
          seg->next = (*cur_seg);
 8006fe4:	69fb      	ldr	r3, [r7, #28]
 8006fe6:	681a      	ldr	r2, [r3, #0]
 8006fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fea:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8006fec:	69fb      	ldr	r3, [r7, #28]
 8006fee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ff0:	601a      	str	r2, [r3, #0]
 8006ff2:	e009      	b.n	8007008 <tcp_output+0x360>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8006ff4:	6a3b      	ldr	r3, [r7, #32]
 8006ff6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ff8:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8006ffa:	6a3b      	ldr	r3, [r7, #32]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	623b      	str	r3, [r7, #32]
 8007000:	e002      	b.n	8007008 <tcp_output+0x360>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8007002:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007004:	f7fd f97f 	bl	8004306 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800700c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 800700e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007010:	2b00      	cmp	r3, #0
 8007012:	d012      	beq.n	800703a <tcp_output+0x392>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8007014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007016:	68db      	ldr	r3, [r3, #12]
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	4618      	mov	r0, r3
 800701c:	f7fa fd11 	bl	8001a42 <lwip_htonl>
 8007020:	4602      	mov	r2, r0
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007026:	1ad3      	subs	r3, r2, r3
 8007028:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800702a:	8912      	ldrh	r2, [r2, #8]
 800702c:	4413      	add	r3, r2
  while (seg != NULL &&
 800702e:	69ba      	ldr	r2, [r7, #24]
 8007030:	429a      	cmp	r2, r3
 8007032:	f4bf aee1 	bcs.w	8006df8 <tcp_output+0x150>
 8007036:	e000      	b.n	800703a <tcp_output+0x392>
      break;
 8007038:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800703e:	2b00      	cmp	r3, #0
 8007040:	d108      	bne.n	8007054 <tcp_output+0x3ac>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2200      	movs	r2, #0
 8007046:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800704a:	e004      	b.n	8007056 <tcp_output+0x3ae>
    goto output_done;
 800704c:	bf00      	nop
 800704e:	e002      	b.n	8007056 <tcp_output+0x3ae>
    goto output_done;
 8007050:	bf00      	nop
 8007052:	e000      	b.n	8007056 <tcp_output+0x3ae>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8007054:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	8b5b      	ldrh	r3, [r3, #26]
 800705a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800705e:	b29a      	uxth	r2, r3
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8007064:	2300      	movs	r3, #0
}
 8007066:	4618      	mov	r0, r3
 8007068:	3728      	adds	r7, #40	@ 0x28
 800706a:	46bd      	mov	sp, r7
 800706c:	bdb0      	pop	{r4, r5, r7, pc}
 800706e:	bf00      	nop

08007070 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b082      	sub	sp, #8
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d102      	bne.n	8007084 <tcp_output_segment_busy+0x14>
 800707e:	4807      	ldr	r0, [pc, #28]	@ (800709c <tcp_output_segment_busy+0x2c>)
 8007080:	f003 fdf0 	bl	800ac64 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	7b9b      	ldrb	r3, [r3, #14]
 800708a:	2b01      	cmp	r3, #1
 800708c:	d001      	beq.n	8007092 <tcp_output_segment_busy+0x22>
    /* other reference found */
    return 1;
 800708e:	2301      	movs	r3, #1
 8007090:	e000      	b.n	8007094 <tcp_output_segment_busy+0x24>
  }
  /* no other references found */
  return 0;
 8007092:	2300      	movs	r3, #0
}
 8007094:	4618      	mov	r0, r3
 8007096:	3708      	adds	r7, #8
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}
 800709c:	0800cd14 	.word	0x0800cd14

080070a0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80070a0:	b5b0      	push	{r4, r5, r7, lr}
 80070a2:	b08c      	sub	sp, #48	@ 0x30
 80070a4:	af04      	add	r7, sp, #16
 80070a6:	60f8      	str	r0, [r7, #12]
 80070a8:	60b9      	str	r1, [r7, #8]
 80070aa:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d102      	bne.n	80070b8 <tcp_output_segment+0x18>
 80070b2:	4865      	ldr	r0, [pc, #404]	@ (8007248 <tcp_output_segment+0x1a8>)
 80070b4:	f003 fdd6 	bl	800ac64 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d102      	bne.n	80070c4 <tcp_output_segment+0x24>
 80070be:	4863      	ldr	r0, [pc, #396]	@ (800724c <tcp_output_segment+0x1ac>)
 80070c0:	f003 fdd0 	bl	800ac64 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d102      	bne.n	80070d0 <tcp_output_segment+0x30>
 80070ca:	4861      	ldr	r0, [pc, #388]	@ (8007250 <tcp_output_segment+0x1b0>)
 80070cc:	f003 fdca 	bl	800ac64 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80070d0:	68f8      	ldr	r0, [r7, #12]
 80070d2:	f7ff ffcd 	bl	8007070 <tcp_output_segment_busy>
 80070d6:	4603      	mov	r3, r0
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d001      	beq.n	80070e0 <tcp_output_segment+0x40>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80070dc:	2300      	movs	r3, #0
 80070de:	e0af      	b.n	8007240 <tcp_output_segment+0x1a0>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	68dc      	ldr	r4, [r3, #12]
 80070e8:	4610      	mov	r0, r2
 80070ea:	f7fa fcaa 	bl	8001a42 <lwip_htonl>
 80070ee:	4603      	mov	r3, r0
 80070f0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	68dc      	ldr	r4, [r3, #12]
 80070fa:	4610      	mov	r0, r2
 80070fc:	f7fa fc8c 	bl	8001a18 <lwip_htons>
 8007100:	4603      	mov	r3, r0
 8007102:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007108:	68ba      	ldr	r2, [r7, #8]
 800710a:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800710c:	441a      	add	r2, r3
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	68db      	ldr	r3, [r3, #12]
 8007116:	3314      	adds	r3, #20
 8007118:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	7a9b      	ldrb	r3, [r3, #10]
 800711e:	f003 0301 	and.w	r3, r3, #1
 8007122:	2b00      	cmp	r3, #0
 8007124:	d015      	beq.n	8007152 <tcp_output_segment+0xb2>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	3304      	adds	r3, #4
 800712a:	461a      	mov	r2, r3
 800712c:	6879      	ldr	r1, [r7, #4]
 800712e:	f240 50b4 	movw	r0, #1460	@ 0x5b4
 8007132:	f7fd fb5f 	bl	80047f4 <tcp_eff_send_mss_netif>
 8007136:	4603      	mov	r3, r0
 8007138:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800713a:	8b7b      	ldrh	r3, [r7, #26]
 800713c:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8007140:	4618      	mov	r0, r3
 8007142:	f7fa fc7e 	bl	8001a42 <lwip_htonl>
 8007146:	4602      	mov	r2, r0
 8007148:	69fb      	ldr	r3, [r7, #28]
 800714a:	601a      	str	r2, [r3, #0]
    opts += 1;
 800714c:	69fb      	ldr	r3, [r7, #28]
 800714e:	3304      	adds	r3, #4
 8007150:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8007158:	2b00      	cmp	r3, #0
 800715a:	da02      	bge.n	8007162 <tcp_output_segment+0xc2>
    pcb->rtime = 0;
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	2200      	movs	r2, #0
 8007160:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007166:	2b00      	cmp	r3, #0
 8007168:	d10c      	bne.n	8007184 <tcp_output_segment+0xe4>
    pcb->rttest = tcp_ticks;
 800716a:	4b3a      	ldr	r3, [pc, #232]	@ (8007254 <tcp_output_segment+0x1b4>)
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	68db      	ldr	r3, [r3, #12]
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	4618      	mov	r0, r3
 800717a:	f7fa fc62 	bl	8001a42 <lwip_htonl>
 800717e:	4602      	mov	r2, r0
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	68da      	ldr	r2, [r3, #12]
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	1ad3      	subs	r3, r2, r3
 8007190:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	8959      	ldrh	r1, [r3, #10]
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	8b3a      	ldrh	r2, [r7, #24]
 800719e:	1a8a      	subs	r2, r1, r2
 80071a0:	b292      	uxth	r2, r2
 80071a2:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	8919      	ldrh	r1, [r3, #8]
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	8b3a      	ldrh	r2, [r7, #24]
 80071b0:	1a8a      	subs	r2, r1, r2
 80071b2:	b292      	uxth	r2, r2
 80071b4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	68fa      	ldr	r2, [r7, #12]
 80071bc:	68d2      	ldr	r2, [r2, #12]
 80071be:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	68db      	ldr	r3, [r3, #12]
 80071c4:	2200      	movs	r2, #0
 80071c6:	741a      	strb	r2, [r3, #16]
 80071c8:	2200      	movs	r2, #0
 80071ca:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	68da      	ldr	r2, [r3, #12]
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	7a9b      	ldrb	r3, [r3, #10]
 80071d4:	f003 0301 	and.w	r3, r3, #1
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d001      	beq.n	80071e0 <tcp_output_segment+0x140>
 80071dc:	2318      	movs	r3, #24
 80071de:	e000      	b.n	80071e2 <tcp_output_segment+0x142>
 80071e0:	2314      	movs	r3, #20
 80071e2:	4413      	add	r3, r2
 80071e4:	69fa      	ldr	r2, [r7, #28]
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d002      	beq.n	80071f0 <tcp_output_segment+0x150>
 80071ea:	481b      	ldr	r0, [pc, #108]	@ (8007258 <tcp_output_segment+0x1b8>)
 80071ec:	f003 fd3a 	bl	800ac64 <iprintf>
         seg->tcphdr->chksum, chksum_slow));
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
#else /* TCP_CHECKSUM_ON_COPY */
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	6858      	ldr	r0, [r3, #4]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	685b      	ldr	r3, [r3, #4]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 80071f8:	8919      	ldrh	r1, [r3, #8]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 80071fa:	68bd      	ldr	r5, [r7, #8]
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	3304      	adds	r3, #4
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 8007200:	68fa      	ldr	r2, [r7, #12]
 8007202:	68d4      	ldr	r4, [r2, #12]
 8007204:	9300      	str	r3, [sp, #0]
 8007206:	462b      	mov	r3, r5
 8007208:	460a      	mov	r2, r1
 800720a:	2106      	movs	r1, #6
 800720c:	f7fa fd36 	bl	8001c7c <ip_chksum_pseudo>
 8007210:	4603      	mov	r3, r0
 8007212:	8223      	strh	r3, [r4, #16]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	6858      	ldr	r0, [r3, #4]
 8007218:	68b9      	ldr	r1, [r7, #8]
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	1d1c      	adds	r4, r3, #4
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	7add      	ldrb	r5, [r3, #11]
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	7a9b      	ldrb	r3, [r3, #10]
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	9202      	str	r2, [sp, #8]
 800722a:	2206      	movs	r2, #6
 800722c:	9201      	str	r2, [sp, #4]
 800722e:	9300      	str	r3, [sp, #0]
 8007230:	462b      	mov	r3, r5
 8007232:	4622      	mov	r2, r4
 8007234:	f002 fc38 	bl	8009aa8 <ip4_output_if>
 8007238:	4603      	mov	r3, r0
 800723a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800723c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007240:	4618      	mov	r0, r3
 8007242:	3720      	adds	r7, #32
 8007244:	46bd      	mov	sp, r7
 8007246:	bdb0      	pop	{r4, r5, r7, pc}
 8007248:	0800cd3c 	.word	0x0800cd3c
 800724c:	0800cd5c 	.word	0x0800cd5c
 8007250:	0800cd7c 	.word	0x0800cd7c
 8007254:	24008b0c 	.word	0x24008b0c
 8007258:	0800cda0 	.word	0x0800cda0

0800725c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800725c:	b5b0      	push	{r4, r5, r7, lr}
 800725e:	b084      	sub	sp, #16
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d102      	bne.n	8007270 <tcp_rexmit_rto_prepare+0x14>
 800726a:	482f      	ldr	r0, [pc, #188]	@ (8007328 <tcp_rexmit_rto_prepare+0xcc>)
 800726c:	f003 fcfa 	bl	800ac64 <iprintf>

  if (pcb->unacked == NULL) {
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007274:	2b00      	cmp	r3, #0
 8007276:	d102      	bne.n	800727e <tcp_rexmit_rto_prepare+0x22>
    return ERR_VAL;
 8007278:	f06f 0305 	mvn.w	r3, #5
 800727c:	e050      	b.n	8007320 <tcp_rexmit_rto_prepare+0xc4>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007282:	60fb      	str	r3, [r7, #12]
 8007284:	e00b      	b.n	800729e <tcp_rexmit_rto_prepare+0x42>
    if (tcp_output_segment_busy(seg)) {
 8007286:	68f8      	ldr	r0, [r7, #12]
 8007288:	f7ff fef2 	bl	8007070 <tcp_output_segment_busy>
 800728c:	4603      	mov	r3, r0
 800728e:	2b00      	cmp	r3, #0
 8007290:	d002      	beq.n	8007298 <tcp_rexmit_rto_prepare+0x3c>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8007292:	f06f 0305 	mvn.w	r3, #5
 8007296:	e043      	b.n	8007320 <tcp_rexmit_rto_prepare+0xc4>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	60fb      	str	r3, [r7, #12]
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d1ef      	bne.n	8007286 <tcp_rexmit_rto_prepare+0x2a>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80072a6:	68f8      	ldr	r0, [r7, #12]
 80072a8:	f7ff fee2 	bl	8007070 <tcp_output_segment_busy>
 80072ac:	4603      	mov	r3, r0
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d002      	beq.n	80072b8 <tcp_rexmit_rto_prepare+0x5c>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80072b2:	f06f 0305 	mvn.w	r3, #5
 80072b6:	e033      	b.n	8007320 <tcp_rexmit_rto_prepare+0xc4>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2200      	movs	r2, #0
 80072cc:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	8b5b      	ldrh	r3, [r3, #26]
 80072d2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80072d6:	b29a      	uxth	r2, r3
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	68db      	ldr	r3, [r3, #12]
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	4618      	mov	r0, r3
 80072e4:	f7fa fbad 	bl	8001a42 <lwip_htonl>
 80072e8:	4604      	mov	r4, r0
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	891b      	ldrh	r3, [r3, #8]
 80072ee:	461d      	mov	r5, r3
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	68db      	ldr	r3, [r3, #12]
 80072f4:	899b      	ldrh	r3, [r3, #12]
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	4618      	mov	r0, r3
 80072fa:	f7fa fb8d 	bl	8001a18 <lwip_htons>
 80072fe:	4603      	mov	r3, r0
 8007300:	b2db      	uxtb	r3, r3
 8007302:	f003 0303 	and.w	r3, r3, #3
 8007306:	2b00      	cmp	r3, #0
 8007308:	d001      	beq.n	800730e <tcp_rexmit_rto_prepare+0xb2>
 800730a:	2301      	movs	r3, #1
 800730c:	e000      	b.n	8007310 <tcp_rexmit_rto_prepare+0xb4>
 800730e:	2300      	movs	r3, #0
 8007310:	442b      	add	r3, r5
 8007312:	18e2      	adds	r2, r4, r3
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2200      	movs	r2, #0
 800731c:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 800731e:	2300      	movs	r3, #0
}
 8007320:	4618      	mov	r0, r3
 8007322:	3710      	adds	r7, #16
 8007324:	46bd      	mov	sp, r7
 8007326:	bdb0      	pop	{r4, r5, r7, pc}
 8007328:	0800cdb4 	.word	0x0800cdb4

0800732c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b082      	sub	sp, #8
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d102      	bne.n	8007340 <tcp_rexmit_rto_commit+0x14>
 800733a:	480b      	ldr	r0, [pc, #44]	@ (8007368 <tcp_rexmit_rto_commit+0x3c>)
 800733c:	f003 fc92 	bl	800ac64 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007346:	2bff      	cmp	r3, #255	@ 0xff
 8007348:	d007      	beq.n	800735a <tcp_rexmit_rto_commit+0x2e>
    ++pcb->nrtx;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007350:	3301      	adds	r3, #1
 8007352:	b2da      	uxtb	r2, r3
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f7ff fca4 	bl	8006ca8 <tcp_output>
}
 8007360:	bf00      	nop
 8007362:	3708      	adds	r7, #8
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}
 8007368:	0800cdd8 	.word	0x0800cdd8

0800736c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b082      	sub	sp, #8
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d102      	bne.n	8007380 <tcp_rexmit_rto+0x14>
 800737a:	4808      	ldr	r0, [pc, #32]	@ (800739c <tcp_rexmit_rto+0x30>)
 800737c:	f003 fc72 	bl	800ac64 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f7ff ff6b 	bl	800725c <tcp_rexmit_rto_prepare>
 8007386:	4603      	mov	r3, r0
 8007388:	2b00      	cmp	r3, #0
 800738a:	d102      	bne.n	8007392 <tcp_rexmit_rto+0x26>
    tcp_rexmit_rto_commit(pcb);
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f7ff ffcd 	bl	800732c <tcp_rexmit_rto_commit>
  }
}
 8007392:	bf00      	nop
 8007394:	3708      	adds	r7, #8
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}
 800739a:	bf00      	nop
 800739c:	0800cdfc 	.word	0x0800cdfc

080073a0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80073a0:	b590      	push	{r4, r7, lr}
 80073a2:	b085      	sub	sp, #20
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d102      	bne.n	80073b4 <tcp_rexmit+0x14>
 80073ae:	482d      	ldr	r0, [pc, #180]	@ (8007464 <tcp_rexmit+0xc4>)
 80073b0:	f003 fc58 	bl	800ac64 <iprintf>

  if (pcb->unacked == NULL) {
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d102      	bne.n	80073c2 <tcp_rexmit+0x22>
    return ERR_VAL;
 80073bc:	f06f 0305 	mvn.w	r3, #5
 80073c0:	e04c      	b.n	800745c <tcp_rexmit+0xbc>
  }

  seg = pcb->unacked;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073c6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80073c8:	68b8      	ldr	r0, [r7, #8]
 80073ca:	f7ff fe51 	bl	8007070 <tcp_output_segment_busy>
 80073ce:	4603      	mov	r3, r0
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d002      	beq.n	80073da <tcp_rexmit+0x3a>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80073d4:	f06f 0305 	mvn.w	r3, #5
 80073d8:	e040      	b.n	800745c <tcp_rexmit+0xbc>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	681a      	ldr	r2, [r3, #0]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	336c      	adds	r3, #108	@ 0x6c
 80073e6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80073e8:	e002      	b.n	80073f0 <tcp_rexmit+0x50>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d011      	beq.n	800741c <tcp_rexmit+0x7c>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	68db      	ldr	r3, [r3, #12]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	4618      	mov	r0, r3
 8007402:	f7fa fb1e 	bl	8001a42 <lwip_htonl>
 8007406:	4604      	mov	r4, r0
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	68db      	ldr	r3, [r3, #12]
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	4618      	mov	r0, r3
 8007410:	f7fa fb17 	bl	8001a42 <lwip_htonl>
 8007414:	4603      	mov	r3, r0
 8007416:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8007418:	2b00      	cmp	r3, #0
 800741a:	dbe6      	blt.n	80073ea <tcp_rexmit+0x4a>
  }
  seg->next = *cur_seg;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681a      	ldr	r2, [r3, #0]
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	68ba      	ldr	r2, [r7, #8]
 8007428:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d103      	bne.n	800743a <tcp_rexmit+0x9a>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007440:	2bff      	cmp	r3, #255	@ 0xff
 8007442:	d007      	beq.n	8007454 <tcp_rexmit+0xb4>
    ++pcb->nrtx;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800744a:	3301      	adds	r3, #1
 800744c:	b2da      	uxtb	r2, r3
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800745a:	2300      	movs	r3, #0
}
 800745c:	4618      	mov	r0, r3
 800745e:	3714      	adds	r7, #20
 8007460:	46bd      	mov	sp, r7
 8007462:	bd90      	pop	{r4, r7, pc}
 8007464:	0800ce18 	.word	0x0800ce18

08007468 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b082      	sub	sp, #8
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d102      	bne.n	800747c <tcp_rexmit_fast+0x14>
 8007476:	4828      	ldr	r0, [pc, #160]	@ (8007518 <tcp_rexmit_fast+0xb0>)
 8007478:	f003 fbf4 	bl	800ac64 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007480:	2b00      	cmp	r3, #0
 8007482:	d045      	beq.n	8007510 <tcp_rexmit_fast+0xa8>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	8b5b      	ldrh	r3, [r3, #26]
 8007488:	f003 0304 	and.w	r3, r3, #4
 800748c:	2b00      	cmp	r3, #0
 800748e:	d13f      	bne.n	8007510 <tcp_rexmit_fast+0xa8>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f7ff ff85 	bl	80073a0 <tcp_rexmit>
 8007496:	4603      	mov	r3, r0
 8007498:	2b00      	cmp	r3, #0
 800749a:	d139      	bne.n	8007510 <tcp_rexmit_fast+0xa8>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80074a8:	4293      	cmp	r3, r2
 80074aa:	bf28      	it	cs
 80074ac:	4613      	movcs	r3, r2
 80074ae:	b29b      	uxth	r3, r3
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	da00      	bge.n	80074b6 <tcp_rexmit_fast+0x4e>
 80074b4:	3301      	adds	r3, #1
 80074b6:	105b      	asrs	r3, r3, #1
 80074b8:	b29a      	uxth	r2, r3
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80074c6:	461a      	mov	r2, r3
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80074cc:	005b      	lsls	r3, r3, #1
 80074ce:	429a      	cmp	r2, r3
 80074d0:	d206      	bcs.n	80074e0 <tcp_rexmit_fast+0x78>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80074d6:	005b      	lsls	r3, r3, #1
 80074d8:	b29a      	uxth	r2, r3
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80074ea:	4619      	mov	r1, r3
 80074ec:	0049      	lsls	r1, r1, #1
 80074ee:	440b      	add	r3, r1
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	4413      	add	r3, r2
 80074f4:	b29a      	uxth	r2, r3
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	8b5b      	ldrh	r3, [r3, #26]
 8007500:	f043 0304 	orr.w	r3, r3, #4
 8007504:	b29a      	uxth	r2, r3
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2200      	movs	r2, #0
 800750e:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8007510:	bf00      	nop
 8007512:	3708      	adds	r7, #8
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}
 8007518:	0800ce30 	.word	0x0800ce30

0800751c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b086      	sub	sp, #24
 8007520:	af00      	add	r7, sp, #0
 8007522:	60f8      	str	r0, [r7, #12]
 8007524:	607b      	str	r3, [r7, #4]
 8007526:	460b      	mov	r3, r1
 8007528:	817b      	strh	r3, [r7, #10]
 800752a:	4613      	mov	r3, r2
 800752c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800752e:	897a      	ldrh	r2, [r7, #10]
 8007530:	893b      	ldrh	r3, [r7, #8]
 8007532:	4413      	add	r3, r2
 8007534:	b29b      	uxth	r3, r3
 8007536:	3314      	adds	r3, #20
 8007538:	b29b      	uxth	r3, r3
 800753a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800753e:	4619      	mov	r1, r3
 8007540:	2022      	movs	r0, #34	@ 0x22
 8007542:	f7fb facd 	bl	8002ae0 <pbuf_alloc>
 8007546:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d049      	beq.n	80075e2 <tcp_output_alloc_header_common+0xc6>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800754e:	897b      	ldrh	r3, [r7, #10]
 8007550:	3313      	adds	r3, #19
 8007552:	697a      	ldr	r2, [r7, #20]
 8007554:	8952      	ldrh	r2, [r2, #10]
 8007556:	4293      	cmp	r3, r2
 8007558:	db02      	blt.n	8007560 <tcp_output_alloc_header_common+0x44>
 800755a:	4824      	ldr	r0, [pc, #144]	@ (80075ec <tcp_output_alloc_header_common+0xd0>)
 800755c:	f003 fb82 	bl	800ac64 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8007566:	8c3b      	ldrh	r3, [r7, #32]
 8007568:	4618      	mov	r0, r3
 800756a:	f7fa fa55 	bl	8001a18 <lwip_htons>
 800756e:	4603      	mov	r3, r0
 8007570:	461a      	mov	r2, r3
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8007576:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007578:	4618      	mov	r0, r3
 800757a:	f7fa fa4d 	bl	8001a18 <lwip_htons>
 800757e:	4603      	mov	r3, r0
 8007580:	461a      	mov	r2, r3
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	687a      	ldr	r2, [r7, #4]
 800758a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800758c:	68f8      	ldr	r0, [r7, #12]
 800758e:	f7fa fa58 	bl	8001a42 <lwip_htonl>
 8007592:	4602      	mov	r2, r0
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8007598:	897b      	ldrh	r3, [r7, #10]
 800759a:	089b      	lsrs	r3, r3, #2
 800759c:	b29b      	uxth	r3, r3
 800759e:	3305      	adds	r3, #5
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	031b      	lsls	r3, r3, #12
 80075a4:	b29a      	uxth	r2, r3
 80075a6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	4313      	orrs	r3, r2
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	4618      	mov	r0, r3
 80075b2:	f7fa fa31 	bl	8001a18 <lwip_htons>
 80075b6:	4603      	mov	r3, r0
 80075b8:	461a      	mov	r2, r3
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80075be:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80075c0:	4618      	mov	r0, r3
 80075c2:	f7fa fa29 	bl	8001a18 <lwip_htons>
 80075c6:	4603      	mov	r3, r0
 80075c8:	461a      	mov	r2, r3
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	2200      	movs	r2, #0
 80075d2:	741a      	strb	r2, [r3, #16]
 80075d4:	2200      	movs	r2, #0
 80075d6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	2200      	movs	r2, #0
 80075dc:	749a      	strb	r2, [r3, #18]
 80075de:	2200      	movs	r2, #0
 80075e0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80075e2:	697b      	ldr	r3, [r7, #20]
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3718      	adds	r7, #24
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}
 80075ec:	0800ce50 	.word	0x0800ce50

080075f0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80075f0:	b5b0      	push	{r4, r5, r7, lr}
 80075f2:	b08a      	sub	sp, #40	@ 0x28
 80075f4:	af04      	add	r7, sp, #16
 80075f6:	60f8      	str	r0, [r7, #12]
 80075f8:	607b      	str	r3, [r7, #4]
 80075fa:	460b      	mov	r3, r1
 80075fc:	817b      	strh	r3, [r7, #10]
 80075fe:	4613      	mov	r3, r2
 8007600:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d102      	bne.n	800760e <tcp_output_alloc_header+0x1e>
 8007608:	4813      	ldr	r0, [pc, #76]	@ (8007658 <tcp_output_alloc_header+0x68>)
 800760a:	f003 fb2b 	bl	800ac64 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	8adb      	ldrh	r3, [r3, #22]
 8007616:	68fa      	ldr	r2, [r7, #12]
 8007618:	8b12      	ldrh	r2, [r2, #24]
 800761a:	68f9      	ldr	r1, [r7, #12]
 800761c:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 800761e:	893d      	ldrh	r5, [r7, #8]
 8007620:	897c      	ldrh	r4, [r7, #10]
 8007622:	9103      	str	r1, [sp, #12]
 8007624:	2110      	movs	r1, #16
 8007626:	9102      	str	r1, [sp, #8]
 8007628:	9201      	str	r2, [sp, #4]
 800762a:	9300      	str	r3, [sp, #0]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	462a      	mov	r2, r5
 8007630:	4621      	mov	r1, r4
 8007632:	f7ff ff73 	bl	800751c <tcp_output_alloc_header_common>
 8007636:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d006      	beq.n	800764c <tcp_output_alloc_header+0x5c>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007642:	68fa      	ldr	r2, [r7, #12]
 8007644:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8007646:	441a      	add	r2, r3
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 800764c:	697b      	ldr	r3, [r7, #20]
}
 800764e:	4618      	mov	r0, r3
 8007650:	3718      	adds	r7, #24
 8007652:	46bd      	mov	sp, r7
 8007654:	bdb0      	pop	{r4, r5, r7, pc}
 8007656:	bf00      	nop
 8007658:	0800ce80 	.word	0x0800ce80

0800765c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b088      	sub	sp, #32
 8007660:	af00      	add	r7, sp, #0
 8007662:	60f8      	str	r0, [r7, #12]
 8007664:	60b9      	str	r1, [r7, #8]
 8007666:	4611      	mov	r1, r2
 8007668:	461a      	mov	r2, r3
 800766a:	460b      	mov	r3, r1
 800766c:	71fb      	strb	r3, [r7, #7]
 800766e:	4613      	mov	r3, r2
 8007670:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8007672:	2300      	movs	r3, #0
 8007674:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d102      	bne.n	8007682 <tcp_output_fill_options+0x26>
 800767c:	480e      	ldr	r0, [pc, #56]	@ (80076b8 <tcp_output_fill_options+0x5c>)
 800767e:	f003 faf1 	bl	800ac64 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8007688:	69bb      	ldr	r3, [r7, #24]
 800768a:	3314      	adds	r3, #20
 800768c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800768e:	8bfb      	ldrh	r3, [r7, #30]
 8007690:	009b      	lsls	r3, r3, #2
 8007692:	461a      	mov	r2, r3
 8007694:	79fb      	ldrb	r3, [r7, #7]
 8007696:	009b      	lsls	r3, r3, #2
 8007698:	f003 0304 	and.w	r3, r3, #4
 800769c:	4413      	add	r3, r2
 800769e:	3314      	adds	r3, #20
 80076a0:	69ba      	ldr	r2, [r7, #24]
 80076a2:	4413      	add	r3, r2
 80076a4:	697a      	ldr	r2, [r7, #20]
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d002      	beq.n	80076b0 <tcp_output_fill_options+0x54>
 80076aa:	4804      	ldr	r0, [pc, #16]	@ (80076bc <tcp_output_fill_options+0x60>)
 80076ac:	f003 fada 	bl	800ac64 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80076b0:	bf00      	nop
 80076b2:	3720      	adds	r7, #32
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}
 80076b8:	0800cea8 	.word	0x0800cea8
 80076bc:	0800cda0 	.word	0x0800cda0

080076c0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b088      	sub	sp, #32
 80076c4:	af02      	add	r7, sp, #8
 80076c6:	60f8      	str	r0, [r7, #12]
 80076c8:	60b9      	str	r1, [r7, #8]
 80076ca:	607a      	str	r2, [r7, #4]
 80076cc:	603b      	str	r3, [r7, #0]
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d102      	bne.n	80076da <tcp_output_control_segment+0x1a>
 80076d4:	480f      	ldr	r0, [pc, #60]	@ (8007714 <tcp_output_control_segment+0x54>)
 80076d6:	f003 fac5 	bl	800ac64 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80076da:	683a      	ldr	r2, [r7, #0]
 80076dc:	6879      	ldr	r1, [r7, #4]
 80076de:	68f8      	ldr	r0, [r7, #12]
 80076e0:	f7fe ffea 	bl	80066b8 <tcp_route>
 80076e4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d105      	bne.n	80076f8 <tcp_output_control_segment+0x38>
    pbuf_free(p);
 80076ec:	68b8      	ldr	r0, [r7, #8]
 80076ee:	f7fb fc9d 	bl	800302c <pbuf_free>
    return ERR_RTE;
 80076f2:	f06f 0303 	mvn.w	r3, #3
 80076f6:	e008      	b.n	800770a <tcp_output_control_segment+0x4a>
  }
  return tcp_output_control_segment_netif(pcb, p, src, dst, netif);
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	9300      	str	r3, [sp, #0]
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	687a      	ldr	r2, [r7, #4]
 8007700:	68b9      	ldr	r1, [r7, #8]
 8007702:	68f8      	ldr	r0, [r7, #12]
 8007704:	f000 f808 	bl	8007718 <tcp_output_control_segment_netif>
 8007708:	4603      	mov	r3, r0
}
 800770a:	4618      	mov	r0, r3
 800770c:	3718      	adds	r7, #24
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}
 8007712:	bf00      	nop
 8007714:	0800ced0 	.word	0x0800ced0

08007718 <tcp_output_control_segment_netif>:
 */
static err_t
tcp_output_control_segment_netif(const struct tcp_pcb *pcb, struct pbuf *p,
                                 const ip_addr_t *src, const ip_addr_t *dst,
                                 struct netif *netif)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b08c      	sub	sp, #48	@ 0x30
 800771c:	af04      	add	r7, sp, #16
 800771e:	60f8      	str	r0, [r7, #12]
 8007720:	60b9      	str	r1, [r7, #8]
 8007722:	607a      	str	r2, [r7, #4]
 8007724:	603b      	str	r3, [r7, #0]
  err_t err;
  u8_t ttl, tos;

  LWIP_ASSERT("tcp_output_control_segment_netif: no netif given", netif != NULL);
 8007726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007728:	2b00      	cmp	r3, #0
 800772a:	d102      	bne.n	8007732 <tcp_output_control_segment_netif+0x1a>
 800772c:	481c      	ldr	r0, [pc, #112]	@ (80077a0 <tcp_output_control_segment_netif+0x88>)
 800772e:	f003 fa99 	bl	800ac64 <iprintf>

#if CHECKSUM_GEN_TCP
  IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
    struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	61bb      	str	r3, [r7, #24]
    tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	891a      	ldrh	r2, [r3, #8]
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	9300      	str	r3, [sp, #0]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2106      	movs	r1, #6
 8007744:	68b8      	ldr	r0, [r7, #8]
 8007746:	f7fa fa99 	bl	8001c7c <ip_chksum_pseudo>
 800774a:	4603      	mov	r3, r0
 800774c:	461a      	mov	r2, r3
 800774e:	69bb      	ldr	r3, [r7, #24]
 8007750:	821a      	strh	r2, [r3, #16]
                                      src, dst);
  }
#endif
  if (pcb != NULL) {
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d006      	beq.n	8007766 <tcp_output_control_segment_netif+0x4e>
    NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
    ttl = pcb->ttl;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	7adb      	ldrb	r3, [r3, #11]
 800775c:	77fb      	strb	r3, [r7, #31]
    tos = pcb->tos;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	7a9b      	ldrb	r3, [r3, #10]
 8007762:	77bb      	strb	r3, [r7, #30]
 8007764:	e003      	b.n	800776e <tcp_output_control_segment_netif+0x56>
  } else {
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ttl = TCP_TTL;
 8007766:	23ff      	movs	r3, #255	@ 0xff
 8007768:	77fb      	strb	r3, [r7, #31]
    tos = 0;
 800776a:	2300      	movs	r3, #0
 800776c:	77bb      	strb	r3, [r7, #30]
  }
  TCP_STATS_INC(tcp.xmit);
  err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800776e:	7ffa      	ldrb	r2, [r7, #31]
 8007770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007772:	9302      	str	r3, [sp, #8]
 8007774:	2306      	movs	r3, #6
 8007776:	9301      	str	r3, [sp, #4]
 8007778:	7fbb      	ldrb	r3, [r7, #30]
 800777a:	9300      	str	r3, [sp, #0]
 800777c:	4613      	mov	r3, r2
 800777e:	683a      	ldr	r2, [r7, #0]
 8007780:	6879      	ldr	r1, [r7, #4]
 8007782:	68b8      	ldr	r0, [r7, #8]
 8007784:	f002 f990 	bl	8009aa8 <ip4_output_if>
 8007788:	4603      	mov	r3, r0
 800778a:	75fb      	strb	r3, [r7, #23]
  NETIF_RESET_HINTS(netif);

  pbuf_free(p);
 800778c:	68b8      	ldr	r0, [r7, #8]
 800778e:	f7fb fc4d 	bl	800302c <pbuf_free>
  return err;
 8007792:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007796:	4618      	mov	r0, r3
 8007798:	3720      	adds	r7, #32
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}
 800779e:	bf00      	nop
 80077a0:	0800cefc 	.word	0x0800cefc

080077a4 <tcp_rst_common>:

static struct pbuf *
tcp_rst_common(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
               const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
               u16_t local_port, u16_t remote_port)
{
 80077a4:	b590      	push	{r4, r7, lr}
 80077a6:	b08b      	sub	sp, #44	@ 0x2c
 80077a8:	af04      	add	r7, sp, #16
 80077aa:	60f8      	str	r0, [r7, #12]
 80077ac:	60b9      	str	r1, [r7, #8]
 80077ae:	607a      	str	r2, [r7, #4]
 80077b0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d102      	bne.n	80077be <tcp_rst_common+0x1a>
 80077b8:	4819      	ldr	r0, [pc, #100]	@ (8007820 <tcp_rst_common+0x7c>)
 80077ba:	f003 fa53 	bl	800ac64 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80077be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d102      	bne.n	80077ca <tcp_rst_common+0x26>
 80077c4:	4817      	ldr	r0, [pc, #92]	@ (8007824 <tcp_rst_common+0x80>)
 80077c6:	f003 fa4d 	bl	800ac64 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80077ca:	2300      	movs	r3, #0
 80077cc:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80077ce:	f646 030b 	movw	r3, #26635	@ 0x680b
 80077d2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80077d4:	7dfb      	ldrb	r3, [r7, #23]
 80077d6:	b29c      	uxth	r4, r3
 80077d8:	68b8      	ldr	r0, [r7, #8]
 80077da:	f7fa f932 	bl	8001a42 <lwip_htonl>
 80077de:	4602      	mov	r2, r0
 80077e0:	8abb      	ldrh	r3, [r7, #20]
 80077e2:	9303      	str	r3, [sp, #12]
 80077e4:	2314      	movs	r3, #20
 80077e6:	9302      	str	r3, [sp, #8]
 80077e8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80077ea:	9301      	str	r3, [sp, #4]
 80077ec:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80077ee:	9300      	str	r3, [sp, #0]
 80077f0:	4613      	mov	r3, r2
 80077f2:	2200      	movs	r2, #0
 80077f4:	4621      	mov	r1, r4
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f7ff fe90 	bl	800751c <tcp_output_alloc_header_common>
 80077fc:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d101      	bne.n	8007808 <tcp_rst_common+0x64>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return NULL;
 8007804:	2300      	movs	r3, #0
 8007806:	e006      	b.n	8007816 <tcp_rst_common+0x72>
  }
  tcp_output_fill_options(pcb, p, 0, 0);
 8007808:	2300      	movs	r3, #0
 800780a:	2200      	movs	r2, #0
 800780c:	6939      	ldr	r1, [r7, #16]
 800780e:	68f8      	ldr	r0, [r7, #12]
 8007810:	f7ff ff24 	bl	800765c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
  return p;
 8007814:	693b      	ldr	r3, [r7, #16]
}
 8007816:	4618      	mov	r0, r3
 8007818:	371c      	adds	r7, #28
 800781a:	46bd      	mov	sp, r7
 800781c:	bd90      	pop	{r4, r7, pc}
 800781e:	bf00      	nop
 8007820:	0800cf30 	.word	0x0800cf30
 8007824:	0800cf4c 	.word	0x0800cf4c

08007828 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b08a      	sub	sp, #40	@ 0x28
 800782c:	af04      	add	r7, sp, #16
 800782e:	60f8      	str	r0, [r7, #12]
 8007830:	60b9      	str	r1, [r7, #8]
 8007832:	607a      	str	r2, [r7, #4]
 8007834:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  
  p = tcp_rst_common(pcb, seqno, ackno, local_ip, remote_ip, local_port, remote_port);
 8007836:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007838:	9302      	str	r3, [sp, #8]
 800783a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800783c:	9301      	str	r3, [sp, #4]
 800783e:	6a3b      	ldr	r3, [r7, #32]
 8007840:	9300      	str	r3, [sp, #0]
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	687a      	ldr	r2, [r7, #4]
 8007846:	68b9      	ldr	r1, [r7, #8]
 8007848:	68f8      	ldr	r0, [r7, #12]
 800784a:	f7ff ffab 	bl	80077a4 <tcp_rst_common>
 800784e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d005      	beq.n	8007862 <tcp_rst+0x3a>
    tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8007856:	6a3b      	ldr	r3, [r7, #32]
 8007858:	683a      	ldr	r2, [r7, #0]
 800785a:	6979      	ldr	r1, [r7, #20]
 800785c:	68f8      	ldr	r0, [r7, #12]
 800785e:	f7ff ff2f 	bl	80076c0 <tcp_output_control_segment>
  }
}
 8007862:	bf00      	nop
 8007864:	3718      	adds	r7, #24
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}

0800786a <tcp_rst_netif>:
 */
void
tcp_rst_netif(struct netif *netif, u32_t seqno, u32_t ackno,
              const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
              u16_t local_port, u16_t remote_port)
{
 800786a:	b580      	push	{r7, lr}
 800786c:	b08a      	sub	sp, #40	@ 0x28
 800786e:	af04      	add	r7, sp, #16
 8007870:	60f8      	str	r0, [r7, #12]
 8007872:	60b9      	str	r1, [r7, #8]
 8007874:	607a      	str	r2, [r7, #4]
 8007876:	603b      	str	r3, [r7, #0]
  if (netif) {
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d017      	beq.n	80078ae <tcp_rst_netif+0x44>
    struct pbuf *p = tcp_rst_common(NULL, seqno, ackno, local_ip, remote_ip, local_port, remote_port);
 800787e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007880:	9302      	str	r3, [sp, #8]
 8007882:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007884:	9301      	str	r3, [sp, #4]
 8007886:	6a3b      	ldr	r3, [r7, #32]
 8007888:	9300      	str	r3, [sp, #0]
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	68b9      	ldr	r1, [r7, #8]
 8007890:	2000      	movs	r0, #0
 8007892:	f7ff ff87 	bl	80077a4 <tcp_rst_common>
 8007896:	6178      	str	r0, [r7, #20]
    if (p != NULL) {
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d007      	beq.n	80078ae <tcp_rst_netif+0x44>
      tcp_output_control_segment_netif(NULL, p, local_ip, remote_ip, netif);
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	9300      	str	r3, [sp, #0]
 80078a2:	6a3b      	ldr	r3, [r7, #32]
 80078a4:	683a      	ldr	r2, [r7, #0]
 80078a6:	6979      	ldr	r1, [r7, #20]
 80078a8:	2000      	movs	r0, #0
 80078aa:	f7ff ff35 	bl	8007718 <tcp_output_control_segment_netif>
    }
  } else {
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_rst_netif: no netif given\n"));
  }
}
 80078ae:	bf00      	nop
 80078b0:	3718      	adds	r7, #24
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}
	...

080078b8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80078b8:	b590      	push	{r4, r7, lr}
 80078ba:	b087      	sub	sp, #28
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80078c0:	2300      	movs	r3, #0
 80078c2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80078c4:	2300      	movs	r3, #0
 80078c6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d102      	bne.n	80078d4 <tcp_send_empty_ack+0x1c>
 80078ce:	4826      	ldr	r0, [pc, #152]	@ (8007968 <tcp_send_empty_ack+0xb0>)
 80078d0:	f003 f9c8 	bl	800ac64 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80078d4:	7dfb      	ldrb	r3, [r7, #23]
 80078d6:	009b      	lsls	r3, r3, #2
 80078d8:	b2db      	uxtb	r3, r3
 80078da:	f003 0304 	and.w	r3, r3, #4
 80078de:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80078e0:	7d7b      	ldrb	r3, [r7, #21]
 80078e2:	b29c      	uxth	r4, r3
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078e8:	4618      	mov	r0, r3
 80078ea:	f7fa f8aa 	bl	8001a42 <lwip_htonl>
 80078ee:	4603      	mov	r3, r0
 80078f0:	2200      	movs	r2, #0
 80078f2:	4621      	mov	r1, r4
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f7ff fe7b 	bl	80075f0 <tcp_output_alloc_header>
 80078fa:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d109      	bne.n	8007916 <tcp_send_empty_ack+0x5e>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	8b5b      	ldrh	r3, [r3, #26]
 8007906:	f043 0303 	orr.w	r3, r3, #3
 800790a:	b29a      	uxth	r2, r3
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8007910:	f06f 0301 	mvn.w	r3, #1
 8007914:	e023      	b.n	800795e <tcp_send_empty_ack+0xa6>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8007916:	7dbb      	ldrb	r3, [r7, #22]
 8007918:	7dfa      	ldrb	r2, [r7, #23]
 800791a:	6939      	ldr	r1, [r7, #16]
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f7ff fe9d 	bl	800765c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8007922:	687a      	ldr	r2, [r7, #4]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	3304      	adds	r3, #4
 8007928:	6939      	ldr	r1, [r7, #16]
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f7ff fec8 	bl	80076c0 <tcp_output_control_segment>
 8007930:	4603      	mov	r3, r0
 8007932:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8007934:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d007      	beq.n	800794c <tcp_send_empty_ack+0x94>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	8b5b      	ldrh	r3, [r3, #26]
 8007940:	f043 0303 	orr.w	r3, r3, #3
 8007944:	b29a      	uxth	r2, r3
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	835a      	strh	r2, [r3, #26]
 800794a:	e006      	b.n	800795a <tcp_send_empty_ack+0xa2>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	8b5b      	ldrh	r3, [r3, #26]
 8007950:	f023 0303 	bic.w	r3, r3, #3
 8007954:	b29a      	uxth	r2, r3
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800795a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800795e:	4618      	mov	r0, r3
 8007960:	371c      	adds	r7, #28
 8007962:	46bd      	mov	sp, r7
 8007964:	bd90      	pop	{r4, r7, pc}
 8007966:	bf00      	nop
 8007968:	0800cf68 	.word	0x0800cf68

0800796c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800796c:	b590      	push	{r4, r7, lr}
 800796e:	b087      	sub	sp, #28
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8007974:	2300      	movs	r3, #0
 8007976:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d102      	bne.n	8007984 <tcp_keepalive+0x18>
 800797e:	4816      	ldr	r0, [pc, #88]	@ (80079d8 <tcp_keepalive+0x6c>)
 8007980:	f003 f970 	bl	800ac64 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8007984:	7dfb      	ldrb	r3, [r7, #23]
 8007986:	b29c      	uxth	r4, r3
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800798c:	3b01      	subs	r3, #1
 800798e:	4618      	mov	r0, r3
 8007990:	f7fa f857 	bl	8001a42 <lwip_htonl>
 8007994:	4603      	mov	r3, r0
 8007996:	2200      	movs	r2, #0
 8007998:	4621      	mov	r1, r4
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f7ff fe28 	bl	80075f0 <tcp_output_alloc_header>
 80079a0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d102      	bne.n	80079ae <tcp_keepalive+0x42>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80079a8:	f04f 33ff 	mov.w	r3, #4294967295
 80079ac:	e010      	b.n	80079d0 <tcp_keepalive+0x64>
  }
  tcp_output_fill_options(pcb, p, 0, 0);
 80079ae:	2300      	movs	r3, #0
 80079b0:	2200      	movs	r2, #0
 80079b2:	6939      	ldr	r1, [r7, #16]
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f7ff fe51 	bl	800765c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80079ba:	687a      	ldr	r2, [r7, #4]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	3304      	adds	r3, #4
 80079c0:	6939      	ldr	r1, [r7, #16]
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f7ff fe7c 	bl	80076c0 <tcp_output_control_segment>
 80079c8:	4603      	mov	r3, r0
 80079ca:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80079cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	371c      	adds	r7, #28
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd90      	pop	{r4, r7, pc}
 80079d8:	0800cf88 	.word	0x0800cf88

080079dc <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80079dc:	b590      	push	{r4, r7, lr}
 80079de:	b08b      	sub	sp, #44	@ 0x2c
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80079e4:	2300      	movs	r3, #0
 80079e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d102      	bne.n	80079f6 <tcp_zero_window_probe+0x1a>
 80079f0:	484a      	ldr	r0, [pc, #296]	@ (8007b1c <tcp_zero_window_probe+0x140>)
 80079f2:	f003 f937 	bl	800ac64 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80079fa:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80079fc:	6a3b      	ldr	r3, [r7, #32]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d101      	bne.n	8007a06 <tcp_zero_window_probe+0x2a>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8007a02:	2300      	movs	r3, #0
 8007a04:	e085      	b.n	8007b12 <tcp_zero_window_probe+0x136>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f893 3096 	ldrb.w	r3, [r3, #150]	@ 0x96
 8007a0c:	2bff      	cmp	r3, #255	@ 0xff
 8007a0e:	d007      	beq.n	8007a20 <tcp_zero_window_probe+0x44>
    ++pcb->persist_probe;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f893 3096 	ldrb.w	r3, [r3, #150]	@ 0x96
 8007a16:	3301      	adds	r3, #1
 8007a18:	b2da      	uxtb	r2, r3
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8007a20:	6a3b      	ldr	r3, [r7, #32]
 8007a22:	68db      	ldr	r3, [r3, #12]
 8007a24:	899b      	ldrh	r3, [r3, #12]
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f7f9 fff5 	bl	8001a18 <lwip_htons>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	f003 0301 	and.w	r3, r3, #1
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d005      	beq.n	8007a46 <tcp_zero_window_probe+0x6a>
 8007a3a:	6a3b      	ldr	r3, [r7, #32]
 8007a3c:	891b      	ldrh	r3, [r3, #8]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d101      	bne.n	8007a46 <tcp_zero_window_probe+0x6a>
 8007a42:	2301      	movs	r3, #1
 8007a44:	e000      	b.n	8007a48 <tcp_zero_window_probe+0x6c>
 8007a46:	2300      	movs	r3, #0
 8007a48:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8007a4a:	7ffb      	ldrb	r3, [r7, #31]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	bf0c      	ite	eq
 8007a50:	2301      	moveq	r3, #1
 8007a52:	2300      	movne	r3, #0
 8007a54:	b2db      	uxtb	r3, r3
 8007a56:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8007a58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007a5c:	b299      	uxth	r1, r3
 8007a5e:	6a3b      	ldr	r3, [r7, #32]
 8007a60:	68db      	ldr	r3, [r3, #12]
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	8bba      	ldrh	r2, [r7, #28]
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f7ff fdc2 	bl	80075f0 <tcp_output_alloc_header>
 8007a6c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8007a6e:	69bb      	ldr	r3, [r7, #24]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d102      	bne.n	8007a7a <tcp_zero_window_probe+0x9e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8007a74:	f04f 33ff 	mov.w	r3, #4294967295
 8007a78:	e04b      	b.n	8007b12 <tcp_zero_window_probe+0x136>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8007a7a:	69bb      	ldr	r3, [r7, #24]
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8007a80:	7ffb      	ldrb	r3, [r7, #31]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d011      	beq.n	8007aaa <tcp_zero_window_probe+0xce>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	899b      	ldrh	r3, [r3, #12]
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	b21b      	sxth	r3, r3
 8007a8e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007a92:	b21c      	sxth	r4, r3
 8007a94:	2011      	movs	r0, #17
 8007a96:	f7f9 ffbf 	bl	8001a18 <lwip_htons>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	b21b      	sxth	r3, r3
 8007a9e:	4323      	orrs	r3, r4
 8007aa0:	b21b      	sxth	r3, r3
 8007aa2:	b29a      	uxth	r2, r3
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	819a      	strh	r2, [r3, #12]
 8007aa8:	e010      	b.n	8007acc <tcp_zero_window_probe+0xf0>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8007aaa:	69bb      	ldr	r3, [r7, #24]
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	3314      	adds	r3, #20
 8007ab0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8007ab2:	6a3b      	ldr	r3, [r7, #32]
 8007ab4:	6858      	ldr	r0, [r3, #4]
 8007ab6:	6a3b      	ldr	r3, [r7, #32]
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	891a      	ldrh	r2, [r3, #8]
 8007abc:	6a3b      	ldr	r3, [r7, #32]
 8007abe:	891b      	ldrh	r3, [r3, #8]
 8007ac0:	1ad3      	subs	r3, r2, r3
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	6939      	ldr	r1, [r7, #16]
 8007ac8:	f7fb fc86 	bl	80033d8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8007acc:	6a3b      	ldr	r3, [r7, #32]
 8007ace:	68db      	ldr	r3, [r3, #12]
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f7f9 ffb5 	bl	8001a42 <lwip_htonl>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	3301      	adds	r3, #1
 8007adc:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	1ad3      	subs	r3, r2, r3
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	da02      	bge.n	8007af0 <tcp_zero_window_probe+0x114>
    pcb->snd_nxt = snd_nxt;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	68fa      	ldr	r2, [r7, #12]
 8007aee:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, 0);
 8007af0:	2300      	movs	r3, #0
 8007af2:	2200      	movs	r2, #0
 8007af4:	69b9      	ldr	r1, [r7, #24]
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f7ff fdb0 	bl	800765c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	3304      	adds	r3, #4
 8007b02:	69b9      	ldr	r1, [r7, #24]
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f7ff fddb 	bl	80076c0 <tcp_output_control_segment>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8007b0e:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	372c      	adds	r7, #44	@ 0x2c
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd90      	pop	{r4, r7, pc}
 8007b1a:	bf00      	nop
 8007b1c:	0800cfa4 	.word	0x0800cfa4

08007b20 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b082      	sub	sp, #8
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8007b28:	f7fb fd10 	bl	800354c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8007b2c:	4b0a      	ldr	r3, [pc, #40]	@ (8007b58 <tcpip_tcp_timer+0x38>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d103      	bne.n	8007b3c <tcpip_tcp_timer+0x1c>
 8007b34:	4b09      	ldr	r3, [pc, #36]	@ (8007b5c <tcpip_tcp_timer+0x3c>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d005      	beq.n	8007b48 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	4908      	ldr	r1, [pc, #32]	@ (8007b60 <tcpip_tcp_timer+0x40>)
 8007b40:	20fa      	movs	r0, #250	@ 0xfa
 8007b42:	f000 f8ed 	bl	8007d20 <sys_timeout>
 8007b46:	e003      	b.n	8007b50 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8007b48:	4b06      	ldr	r3, [pc, #24]	@ (8007b64 <tcpip_tcp_timer+0x44>)
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	601a      	str	r2, [r3, #0]
  }
}
 8007b4e:	bf00      	nop
 8007b50:	bf00      	nop
 8007b52:	3708      	adds	r7, #8
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}
 8007b58:	24008b18 	.word	0x24008b18
 8007b5c:	24008b1c 	.word	0x24008b1c
 8007b60:	08007b21 	.word	0x08007b21
 8007b64:	24008b64 	.word	0x24008b64

08007b68 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8007b6c:	4b0a      	ldr	r3, [pc, #40]	@ (8007b98 <tcp_timer_needed+0x30>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d10f      	bne.n	8007b94 <tcp_timer_needed+0x2c>
 8007b74:	4b09      	ldr	r3, [pc, #36]	@ (8007b9c <tcp_timer_needed+0x34>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d103      	bne.n	8007b84 <tcp_timer_needed+0x1c>
 8007b7c:	4b08      	ldr	r3, [pc, #32]	@ (8007ba0 <tcp_timer_needed+0x38>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d007      	beq.n	8007b94 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8007b84:	4b04      	ldr	r3, [pc, #16]	@ (8007b98 <tcp_timer_needed+0x30>)
 8007b86:	2201      	movs	r2, #1
 8007b88:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	4905      	ldr	r1, [pc, #20]	@ (8007ba4 <tcp_timer_needed+0x3c>)
 8007b8e:	20fa      	movs	r0, #250	@ 0xfa
 8007b90:	f000 f8c6 	bl	8007d20 <sys_timeout>
  }
}
 8007b94:	bf00      	nop
 8007b96:	bd80      	pop	{r7, pc}
 8007b98:	24008b64 	.word	0x24008b64
 8007b9c:	24008b18 	.word	0x24008b18
 8007ba0:	24008b1c 	.word	0x24008b1c
 8007ba4:	08007b21 	.word	0x08007b21

08007ba8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b086      	sub	sp, #24
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	60f8      	str	r0, [r7, #12]
 8007bb0:	60b9      	str	r1, [r7, #8]
 8007bb2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8007bb4:	2006      	movs	r0, #6
 8007bb6:	f7fa fca1 	bl	80024fc <memp_malloc>
 8007bba:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d106      	bne.n	8007bd0 <sys_timeout_abs+0x28>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d14e      	bne.n	8007c66 <sys_timeout_abs+0xbe>
 8007bc8:	4829      	ldr	r0, [pc, #164]	@ (8007c70 <sys_timeout_abs+0xc8>)
 8007bca:	f003 f84b 	bl	800ac64 <iprintf>
    return;
 8007bce:	e04a      	b.n	8007c66 <sys_timeout_abs+0xbe>
  }

  timeout->next = NULL;
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	68ba      	ldr	r2, [r7, #8]
 8007bda:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	687a      	ldr	r2, [r7, #4]
 8007be0:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	68fa      	ldr	r2, [r7, #12]
 8007be6:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8007be8:	4b22      	ldr	r3, [pc, #136]	@ (8007c74 <sys_timeout_abs+0xcc>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d103      	bne.n	8007bf8 <sys_timeout_abs+0x50>
    next_timeout = timeout;
 8007bf0:	4a20      	ldr	r2, [pc, #128]	@ (8007c74 <sys_timeout_abs+0xcc>)
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	6013      	str	r3, [r2, #0]
    return;
 8007bf6:	e037      	b.n	8007c68 <sys_timeout_abs+0xc0>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	685a      	ldr	r2, [r3, #4]
 8007bfc:	4b1d      	ldr	r3, [pc, #116]	@ (8007c74 <sys_timeout_abs+0xcc>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	1ad3      	subs	r3, r2, r3
 8007c04:	0fdb      	lsrs	r3, r3, #31
 8007c06:	f003 0301 	and.w	r3, r3, #1
 8007c0a:	b2db      	uxtb	r3, r3
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d007      	beq.n	8007c20 <sys_timeout_abs+0x78>
    timeout->next = next_timeout;
 8007c10:	4b18      	ldr	r3, [pc, #96]	@ (8007c74 <sys_timeout_abs+0xcc>)
 8007c12:	681a      	ldr	r2, [r3, #0]
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8007c18:	4a16      	ldr	r2, [pc, #88]	@ (8007c74 <sys_timeout_abs+0xcc>)
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	6013      	str	r3, [r2, #0]
 8007c1e:	e023      	b.n	8007c68 <sys_timeout_abs+0xc0>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8007c20:	4b14      	ldr	r3, [pc, #80]	@ (8007c74 <sys_timeout_abs+0xcc>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	617b      	str	r3, [r7, #20]
 8007c26:	e01a      	b.n	8007c5e <sys_timeout_abs+0xb6>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d00b      	beq.n	8007c48 <sys_timeout_abs+0xa0>
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	685a      	ldr	r2, [r3, #4]
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	1ad3      	subs	r3, r2, r3
 8007c3c:	0fdb      	lsrs	r3, r3, #31
 8007c3e:	f003 0301 	and.w	r3, r3, #1
 8007c42:	b2db      	uxtb	r3, r3
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d007      	beq.n	8007c58 <sys_timeout_abs+0xb0>
        timeout->next = t->next;
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	681a      	ldr	r2, [r3, #0]
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	693a      	ldr	r2, [r7, #16]
 8007c54:	601a      	str	r2, [r3, #0]
        break;
 8007c56:	e007      	b.n	8007c68 <sys_timeout_abs+0xc0>
    for (t = next_timeout; t != NULL; t = t->next) {
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	617b      	str	r3, [r7, #20]
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d1e1      	bne.n	8007c28 <sys_timeout_abs+0x80>
 8007c64:	e000      	b.n	8007c68 <sys_timeout_abs+0xc0>
    return;
 8007c66:	bf00      	nop
      }
    }
  }
}
 8007c68:	3718      	adds	r7, #24
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}
 8007c6e:	bf00      	nop
 8007c70:	0800cfc8 	.word	0x0800cfc8
 8007c74:	24008b5c 	.word	0x24008b5c

08007c78 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b086      	sub	sp, #24
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	4798      	blx	r3

  now = sys_now();
 8007c8a:	f7f9 febd 	bl	8001a08 <sys_now>
 8007c8e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	681a      	ldr	r2, [r3, #0]
 8007c94:	4b0f      	ldr	r3, [pc, #60]	@ (8007cd4 <lwip_cyclic_timer+0x5c>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4413      	add	r3, r2
 8007c9a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8007c9c:	68fa      	ldr	r2, [r7, #12]
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	1ad3      	subs	r3, r2, r3
 8007ca2:	0fdb      	lsrs	r3, r3, #31
 8007ca4:	f003 0301 	and.w	r3, r3, #1
 8007ca8:	b2db      	uxtb	r3, r3
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d009      	beq.n	8007cc2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	681a      	ldr	r2, [r3, #0]
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	4413      	add	r3, r2
 8007cb6:	687a      	ldr	r2, [r7, #4]
 8007cb8:	4907      	ldr	r1, [pc, #28]	@ (8007cd8 <lwip_cyclic_timer+0x60>)
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f7ff ff74 	bl	8007ba8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8007cc0:	e004      	b.n	8007ccc <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8007cc2:	687a      	ldr	r2, [r7, #4]
 8007cc4:	4904      	ldr	r1, [pc, #16]	@ (8007cd8 <lwip_cyclic_timer+0x60>)
 8007cc6:	68f8      	ldr	r0, [r7, #12]
 8007cc8:	f7ff ff6e 	bl	8007ba8 <sys_timeout_abs>
}
 8007ccc:	bf00      	nop
 8007cce:	3718      	adds	r7, #24
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}
 8007cd4:	24008b60 	.word	0x24008b60
 8007cd8:	08007c79 	.word	0x08007c79

08007cdc <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b082      	sub	sp, #8
 8007ce0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	607b      	str	r3, [r7, #4]
 8007ce6:	e00e      	b.n	8007d06 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8007ce8:	4a0b      	ldr	r2, [pc, #44]	@ (8007d18 <sys_timeouts_init+0x3c>)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	00db      	lsls	r3, r3, #3
 8007cf4:	4a08      	ldr	r2, [pc, #32]	@ (8007d18 <sys_timeouts_init+0x3c>)
 8007cf6:	4413      	add	r3, r2
 8007cf8:	461a      	mov	r2, r3
 8007cfa:	4908      	ldr	r1, [pc, #32]	@ (8007d1c <sys_timeouts_init+0x40>)
 8007cfc:	f000 f810 	bl	8007d20 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	3301      	adds	r3, #1
 8007d04:	607b      	str	r3, [r7, #4]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2b02      	cmp	r3, #2
 8007d0a:	d9ed      	bls.n	8007ce8 <sys_timeouts_init+0xc>
  }
}
 8007d0c:	bf00      	nop
 8007d0e:	bf00      	nop
 8007d10:	3708      	adds	r7, #8
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}
 8007d16:	bf00      	nop
 8007d18:	0800d69c 	.word	0x0800d69c
 8007d1c:	08007c79 	.word	0x08007c79

08007d20 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b086      	sub	sp, #24
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	60f8      	str	r0, [r7, #12]
 8007d28:	60b9      	str	r1, [r7, #8]
 8007d2a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d32:	d302      	bcc.n	8007d3a <sys_timeout+0x1a>
 8007d34:	4808      	ldr	r0, [pc, #32]	@ (8007d58 <sys_timeout+0x38>)
 8007d36:	f002 ff95 	bl	800ac64 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */
 8007d3a:	f7f9 fe65 	bl	8001a08 <sys_now>
 8007d3e:	4602      	mov	r2, r0
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	4413      	add	r3, r2
 8007d44:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8007d46:	687a      	ldr	r2, [r7, #4]
 8007d48:	68b9      	ldr	r1, [r7, #8]
 8007d4a:	6978      	ldr	r0, [r7, #20]
 8007d4c:	f7ff ff2c 	bl	8007ba8 <sys_timeout_abs>
#endif
}
 8007d50:	bf00      	nop
 8007d52:	3718      	adds	r7, #24
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}
 8007d58:	0800d008 	.word	0x0800d008

08007d5c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b084      	sub	sp, #16
 8007d60:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8007d62:	f7f9 fe51 	bl	8001a08 <sys_now>
 8007d66:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8007d68:	4b17      	ldr	r3, [pc, #92]	@ (8007dc8 <sys_check_timeouts+0x6c>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d022      	beq.n	8007dba <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	68fa      	ldr	r2, [r7, #12]
 8007d7a:	1ad3      	subs	r3, r2, r3
 8007d7c:	0fdb      	lsrs	r3, r3, #31
 8007d7e:	f003 0301 	and.w	r3, r3, #1
 8007d82:	b2db      	uxtb	r3, r3
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d11a      	bne.n	8007dbe <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a0e      	ldr	r2, [pc, #56]	@ (8007dc8 <sys_check_timeouts+0x6c>)
 8007d8e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	689b      	ldr	r3, [r3, #8]
 8007d94:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	68db      	ldr	r3, [r3, #12]
 8007d9a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	4a0a      	ldr	r2, [pc, #40]	@ (8007dcc <sys_check_timeouts+0x70>)
 8007da2:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8007da4:	68b9      	ldr	r1, [r7, #8]
 8007da6:	2006      	movs	r0, #6
 8007da8:	f7fa fbe0 	bl	800256c <memp_free>
    if (handler != NULL) {
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d0da      	beq.n	8007d68 <sys_check_timeouts+0xc>
      handler(arg);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6838      	ldr	r0, [r7, #0]
 8007db6:	4798      	blx	r3
  do {
 8007db8:	e7d6      	b.n	8007d68 <sys_check_timeouts+0xc>
      return;
 8007dba:	bf00      	nop
 8007dbc:	e000      	b.n	8007dc0 <sys_check_timeouts+0x64>
      return;
 8007dbe:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8007dc0:	3710      	adds	r7, #16
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}
 8007dc6:	bf00      	nop
 8007dc8:	24008b5c 	.word	0x24008b5c
 8007dcc:	24008b60 	.word	0x24008b60

08007dd0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RAND */
}
 8007dd4:	bf00      	nop
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ddc:	4770      	bx	lr
	...

08007de0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b083      	sub	sp, #12
 8007de4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8007de6:	2300      	movs	r3, #0
 8007de8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8007dea:	4b17      	ldr	r3, [pc, #92]	@ (8007e48 <udp_new_port+0x68>)
 8007dec:	881b      	ldrh	r3, [r3, #0]
 8007dee:	1c5a      	adds	r2, r3, #1
 8007df0:	b291      	uxth	r1, r2
 8007df2:	4a15      	ldr	r2, [pc, #84]	@ (8007e48 <udp_new_port+0x68>)
 8007df4:	8011      	strh	r1, [r2, #0]
 8007df6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d103      	bne.n	8007e06 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8007dfe:	4b12      	ldr	r3, [pc, #72]	@ (8007e48 <udp_new_port+0x68>)
 8007e00:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8007e04:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8007e06:	4b11      	ldr	r3, [pc, #68]	@ (8007e4c <udp_new_port+0x6c>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	603b      	str	r3, [r7, #0]
 8007e0c:	e011      	b.n	8007e32 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	8a5a      	ldrh	r2, [r3, #18]
 8007e12:	4b0d      	ldr	r3, [pc, #52]	@ (8007e48 <udp_new_port+0x68>)
 8007e14:	881b      	ldrh	r3, [r3, #0]
 8007e16:	429a      	cmp	r2, r3
 8007e18:	d108      	bne.n	8007e2c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8007e1a:	88fb      	ldrh	r3, [r7, #6]
 8007e1c:	3301      	adds	r3, #1
 8007e1e:	80fb      	strh	r3, [r7, #6]
 8007e20:	88fb      	ldrh	r3, [r7, #6]
 8007e22:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007e26:	d3e0      	bcc.n	8007dea <udp_new_port+0xa>
        return 0;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	e007      	b.n	8007e3c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	68db      	ldr	r3, [r3, #12]
 8007e30:	603b      	str	r3, [r7, #0]
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d1ea      	bne.n	8007e0e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8007e38:	4b03      	ldr	r3, [pc, #12]	@ (8007e48 <udp_new_port+0x68>)
 8007e3a:	881b      	ldrh	r3, [r3, #0]
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	370c      	adds	r7, #12
 8007e40:	46bd      	mov	sp, r7
 8007e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e46:	4770      	bx	lr
 8007e48:	2400000c 	.word	0x2400000c
 8007e4c:	24008b68 	.word	0x24008b68

08007e50 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	60f8      	str	r0, [r7, #12]
 8007e58:	60b9      	str	r1, [r7, #8]
 8007e5a:	4613      	mov	r3, r2
 8007e5c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d102      	bne.n	8007e6a <udp_input_local_match+0x1a>
 8007e64:	4824      	ldr	r0, [pc, #144]	@ (8007ef8 <udp_input_local_match+0xa8>)
 8007e66:	f002 fefd 	bl	800ac64 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d102      	bne.n	8007e76 <udp_input_local_match+0x26>
 8007e70:	4822      	ldr	r0, [pc, #136]	@ (8007efc <udp_input_local_match+0xac>)
 8007e72:	f002 fef7 	bl	800ac64 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	7a1b      	ldrb	r3, [r3, #8]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d00b      	beq.n	8007e96 <udp_input_local_match+0x46>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	7a1a      	ldrb	r2, [r3, #8]
 8007e82:	4b1f      	ldr	r3, [pc, #124]	@ (8007f00 <udp_input_local_match+0xb0>)
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007e8a:	3301      	adds	r3, #1
 8007e8c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007e8e:	429a      	cmp	r2, r3
 8007e90:	d001      	beq.n	8007e96 <udp_input_local_match+0x46>
    return 0;
 8007e92:	2300      	movs	r3, #0
 8007e94:	e02b      	b.n	8007eee <udp_input_local_match+0x9e>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8007e96:	79fb      	ldrb	r3, [r7, #7]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d018      	beq.n	8007ece <udp_input_local_match+0x7e>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d013      	beq.n	8007eca <udp_input_local_match+0x7a>
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d00f      	beq.n	8007eca <udp_input_local_match+0x7a>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8007eaa:	4b15      	ldr	r3, [pc, #84]	@ (8007f00 <udp_input_local_match+0xb0>)
 8007eac:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8007eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eb2:	d00a      	beq.n	8007eca <udp_input_local_match+0x7a>
            ip4_addr_net_eq(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681a      	ldr	r2, [r3, #0]
 8007eb8:	4b11      	ldr	r3, [pc, #68]	@ (8007f00 <udp_input_local_match+0xb0>)
 8007eba:	695b      	ldr	r3, [r3, #20]
 8007ebc:	405a      	eors	r2, r3
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	3308      	adds	r3, #8
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d110      	bne.n	8007eec <udp_input_local_match+0x9c>
          return 1;
 8007eca:	2301      	movs	r3, #1
 8007ecc:	e00f      	b.n	8007eee <udp_input_local_match+0x9e>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_eq(&pcb->local_ip, ip_current_dest_addr())) {
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d009      	beq.n	8007ee8 <udp_input_local_match+0x98>
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d005      	beq.n	8007ee8 <udp_input_local_match+0x98>
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681a      	ldr	r2, [r3, #0]
 8007ee0:	4b07      	ldr	r3, [pc, #28]	@ (8007f00 <udp_input_local_match+0xb0>)
 8007ee2:	695b      	ldr	r3, [r3, #20]
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	d101      	bne.n	8007eec <udp_input_local_match+0x9c>
        return 1;
 8007ee8:	2301      	movs	r3, #1
 8007eea:	e000      	b.n	8007eee <udp_input_local_match+0x9e>
      }
  }

  return 0;
 8007eec:	2300      	movs	r3, #0
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3710      	adds	r7, #16
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}
 8007ef6:	bf00      	nop
 8007ef8:	0800d054 	.word	0x0800d054
 8007efc:	0800d078 	.word	0x0800d078
 8007f00:	240024dc 	.word	0x240024dc

08007f04 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8007f04:	b590      	push	{r4, r7, lr}
 8007f06:	b08d      	sub	sp, #52	@ 0x34
 8007f08:	af02      	add	r7, sp, #8
 8007f0a:	6078      	str	r0, [r7, #4]
 8007f0c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d102      	bne.n	8007f1e <udp_input+0x1a>
 8007f18:	4882      	ldr	r0, [pc, #520]	@ (8008124 <udp_input+0x220>)
 8007f1a:	f002 fea3 	bl	800ac64 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d102      	bne.n	8007f2a <udp_input+0x26>
 8007f24:	4880      	ldr	r0, [pc, #512]	@ (8008128 <udp_input+0x224>)
 8007f26:	f002 fe9d 	bl	800ac64 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	895b      	ldrh	r3, [r3, #10]
 8007f2e:	2b07      	cmp	r3, #7
 8007f30:	d803      	bhi.n	8007f3a <udp_input+0x36>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f7fb f87a 	bl	800302c <pbuf_free>
    goto end;
 8007f38:	e0ec      	b.n	8008114 <udp_input+0x210>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	685b      	ldr	r3, [r3, #4]
 8007f3e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8007f40:	4b7a      	ldr	r3, [pc, #488]	@ (800812c <udp_input+0x228>)
 8007f42:	695b      	ldr	r3, [r3, #20]
 8007f44:	4a79      	ldr	r2, [pc, #484]	@ (800812c <udp_input+0x228>)
 8007f46:	6812      	ldr	r2, [r2, #0]
 8007f48:	4611      	mov	r1, r2
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f001 fede 	bl	8009d0c <ip4_addr_isbroadcast_u32>
 8007f50:	4603      	mov	r3, r0
 8007f52:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	881b      	ldrh	r3, [r3, #0]
 8007f58:	b29b      	uxth	r3, r3
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f7f9 fd5c 	bl	8001a18 <lwip_htons>
 8007f60:	4603      	mov	r3, r0
 8007f62:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	885b      	ldrh	r3, [r3, #2]
 8007f68:	b29b      	uxth	r3, r3
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f7f9 fd54 	bl	8001a18 <lwip_htons>
 8007f70:	4603      	mov	r3, r0
 8007f72:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8007f74:	2300      	movs	r3, #0
 8007f76:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8007f80:	4b6b      	ldr	r3, [pc, #428]	@ (8008130 <udp_input+0x22c>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f86:	e054      	b.n	8008032 <udp_input+0x12e>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8007f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f8a:	8a5b      	ldrh	r3, [r3, #18]
 8007f8c:	89fa      	ldrh	r2, [r7, #14]
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	d14a      	bne.n	8008028 <udp_input+0x124>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8007f92:	7cfb      	ldrb	r3, [r7, #19]
 8007f94:	461a      	mov	r2, r3
 8007f96:	6839      	ldr	r1, [r7, #0]
 8007f98:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007f9a:	f7ff ff59 	bl	8007e50 <udp_input_local_match>
 8007f9e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d041      	beq.n	8008028 <udp_input+0x124>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8007fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fa6:	7c1b      	ldrb	r3, [r3, #16]
 8007fa8:	f003 0304 	and.w	r3, r3, #4
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d11d      	bne.n	8007fec <udp_input+0xe8>
        if (uncon_pcb == NULL) {
 8007fb0:	69fb      	ldr	r3, [r7, #28]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d102      	bne.n	8007fbc <udp_input+0xb8>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8007fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fb8:	61fb      	str	r3, [r7, #28]
 8007fba:	e017      	b.n	8007fec <udp_input+0xe8>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8007fbc:	7cfb      	ldrb	r3, [r7, #19]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d014      	beq.n	8007fec <udp_input+0xe8>
 8007fc2:	4b5a      	ldr	r3, [pc, #360]	@ (800812c <udp_input+0x228>)
 8007fc4:	695b      	ldr	r3, [r3, #20]
 8007fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fca:	d10f      	bne.n	8007fec <udp_input+0xe8>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_eq(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8007fcc:	69fb      	ldr	r3, [r7, #28]
 8007fce:	681a      	ldr	r2, [r3, #0]
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	3304      	adds	r3, #4
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	d008      	beq.n	8007fec <udp_input+0xe8>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_eq(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8007fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fdc:	681a      	ldr	r2, [r3, #0]
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	3304      	adds	r3, #4
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	d101      	bne.n	8007fec <udp_input+0xe8>
              /* better match */
              uncon_pcb = pcb;
 8007fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fea:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8007fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fee:	8a9b      	ldrh	r3, [r3, #20]
 8007ff0:	8a3a      	ldrh	r2, [r7, #16]
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	d118      	bne.n	8008028 <udp_input+0x124>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8007ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ff8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d005      	beq.n	800800a <udp_input+0x106>
           ip_addr_eq(&pcb->remote_ip, ip_current_src_addr()))) {
 8007ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008000:	685a      	ldr	r2, [r3, #4]
 8008002:	4b4a      	ldr	r3, [pc, #296]	@ (800812c <udp_input+0x228>)
 8008004:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8008006:	429a      	cmp	r2, r3
 8008008:	d10e      	bne.n	8008028 <udp_input+0x124>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800800a:	6a3b      	ldr	r3, [r7, #32]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d014      	beq.n	800803a <udp_input+0x136>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8008010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008012:	68da      	ldr	r2, [r3, #12]
 8008014:	6a3b      	ldr	r3, [r7, #32]
 8008016:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8008018:	4b45      	ldr	r3, [pc, #276]	@ (8008130 <udp_input+0x22c>)
 800801a:	681a      	ldr	r2, [r3, #0]
 800801c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800801e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8008020:	4a43      	ldr	r2, [pc, #268]	@ (8008130 <udp_input+0x22c>)
 8008022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008024:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8008026:	e008      	b.n	800803a <udp_input+0x136>
      }
    }

    prev = pcb;
 8008028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800802a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800802c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800802e:	68db      	ldr	r3, [r3, #12]
 8008030:	627b      	str	r3, [r7, #36]	@ 0x24
 8008032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008034:	2b00      	cmp	r3, #0
 8008036:	d1a7      	bne.n	8007f88 <udp_input+0x84>
 8008038:	e000      	b.n	800803c <udp_input+0x138>
        break;
 800803a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800803c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800803e:	2b00      	cmp	r3, #0
 8008040:	d101      	bne.n	8008046 <udp_input+0x142>
    pcb = uncon_pcb;
 8008042:	69fb      	ldr	r3, [r7, #28]
 8008044:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8008046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008048:	2b00      	cmp	r3, #0
 800804a:	d002      	beq.n	8008052 <udp_input+0x14e>
    for_us = 1;
 800804c:	2301      	movs	r3, #1
 800804e:	76fb      	strb	r3, [r7, #27]
 8008050:	e00a      	b.n	8008068 <udp_input+0x164>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_eq(netif_ip4_addr(inp), ip4_current_dest_addr());
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	3304      	adds	r3, #4
 8008056:	681a      	ldr	r2, [r3, #0]
 8008058:	4b34      	ldr	r3, [pc, #208]	@ (800812c <udp_input+0x228>)
 800805a:	695b      	ldr	r3, [r3, #20]
 800805c:	429a      	cmp	r2, r3
 800805e:	bf0c      	ite	eq
 8008060:	2301      	moveq	r3, #1
 8008062:	2300      	movne	r3, #0
 8008064:	b2db      	uxtb	r3, r3
 8008066:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8008068:	7efb      	ldrb	r3, [r7, #27]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d04e      	beq.n	800810c <udp_input+0x208>
          goto chkerr;
        }
      } else
#endif /* LWIP_UDPLITE */
      {
        if (udphdr->chksum != 0) {
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	88db      	ldrh	r3, [r3, #6]
 8008072:	b29b      	uxth	r3, r3
 8008074:	2b00      	cmp	r3, #0
 8008076:	d00b      	beq.n	8008090 <udp_input+0x18c>
          if (ip_chksum_pseudo(p, IP_PROTO_UDP, p->tot_len,
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	891a      	ldrh	r2, [r3, #8]
 800807c:	4b2d      	ldr	r3, [pc, #180]	@ (8008134 <udp_input+0x230>)
 800807e:	9300      	str	r3, [sp, #0]
 8008080:	4b2d      	ldr	r3, [pc, #180]	@ (8008138 <udp_input+0x234>)
 8008082:	2111      	movs	r1, #17
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f7f9 fdf9 	bl	8001c7c <ip_chksum_pseudo>
 800808a:	4603      	mov	r3, r0
 800808c:	2b00      	cmp	r3, #0
 800808e:	d142      	bne.n	8008116 <udp_input+0x212>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8008090:	2108      	movs	r1, #8
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f7fa ff56 	bl	8002f44 <pbuf_remove_header>
 8008098:	4603      	mov	r3, r0
 800809a:	2b00      	cmp	r3, #0
 800809c:	d006      	beq.n	80080ac <udp_input+0x1a8>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed", 0);
 800809e:	4827      	ldr	r0, [pc, #156]	@ (800813c <udp_input+0x238>)
 80080a0:	f002 fde0 	bl	800ac64 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f7fa ffc1 	bl	800302c <pbuf_free>
      goto end;
 80080aa:	e033      	b.n	8008114 <udp_input+0x210>
    }

    if (pcb != NULL) {
 80080ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d012      	beq.n	80080d8 <udp_input+0x1d4>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80080b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080b4:	699b      	ldr	r3, [r3, #24]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d00a      	beq.n	80080d0 <udp_input+0x1cc>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80080ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080bc:	699c      	ldr	r4, [r3, #24]
 80080be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080c0:	69d8      	ldr	r0, [r3, #28]
 80080c2:	8a3b      	ldrh	r3, [r7, #16]
 80080c4:	9300      	str	r3, [sp, #0]
 80080c6:	4b1c      	ldr	r3, [pc, #112]	@ (8008138 <udp_input+0x234>)
 80080c8:	687a      	ldr	r2, [r7, #4]
 80080ca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80080cc:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80080ce:	e026      	b.n	800811e <udp_input+0x21a>
        pbuf_free(p);
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f7fa ffab 	bl	800302c <pbuf_free>
        goto end;
 80080d6:	e01d      	b.n	8008114 <udp_input+0x210>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80080d8:	7cfb      	ldrb	r3, [r7, #19]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d112      	bne.n	8008104 <udp_input+0x200>
 80080de:	4b13      	ldr	r3, [pc, #76]	@ (800812c <udp_input+0x228>)
 80080e0:	695b      	ldr	r3, [r3, #20]
 80080e2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80080e6:	2be0      	cmp	r3, #224	@ 0xe0
 80080e8:	d00c      	beq.n	8008104 <udp_input+0x200>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80080ea:	4b10      	ldr	r3, [pc, #64]	@ (800812c <udp_input+0x228>)
 80080ec:	899b      	ldrh	r3, [r3, #12]
 80080ee:	3308      	adds	r3, #8
 80080f0:	b29b      	uxth	r3, r3
 80080f2:	b21b      	sxth	r3, r3
 80080f4:	4619      	mov	r1, r3
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f7fa ff85 	bl	8003006 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80080fc:	2103      	movs	r1, #3
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f001 fa72 	bl	80095e8 <icmp_dest_unreach>
      pbuf_free(p);
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f7fa ff91 	bl	800302c <pbuf_free>
  return;
 800810a:	e008      	b.n	800811e <udp_input+0x21a>
    pbuf_free(p);
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f7fa ff8d 	bl	800302c <pbuf_free>
  return;
 8008112:	e004      	b.n	800811e <udp_input+0x21a>
 8008114:	e003      	b.n	800811e <udp_input+0x21a>
            goto chkerr;
 8008116:	bf00      	nop
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
              ("udp_input: UDP (or UDP Lite) datagram discarded due to failing checksum\n"));
  UDP_STATS_INC(udp.chkerr);
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f7fa ff87 	bl	800302c <pbuf_free>
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800811e:	372c      	adds	r7, #44	@ 0x2c
 8008120:	46bd      	mov	sp, r7
 8008122:	bd90      	pop	{r4, r7, pc}
 8008124:	0800d0a0 	.word	0x0800d0a0
 8008128:	0800d0b8 	.word	0x0800d0b8
 800812c:	240024dc 	.word	0x240024dc
 8008130:	24008b68 	.word	0x24008b68
 8008134:	240024f0 	.word	0x240024f0
 8008138:	240024ec 	.word	0x240024ec
 800813c:	0800d0d4 	.word	0x0800d0d4

08008140 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b088      	sub	sp, #32
 8008144:	af02      	add	r7, sp, #8
 8008146:	60f8      	str	r0, [r7, #12]
 8008148:	60b9      	str	r1, [r7, #8]
 800814a:	607a      	str	r2, [r7, #4]
 800814c:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d102      	bne.n	800815a <udp_sendto+0x1a>
 8008154:	f06f 030f 	mvn.w	r3, #15
 8008158:	e02a      	b.n	80081b0 <udp_sendto+0x70>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d102      	bne.n	8008166 <udp_sendto+0x26>
 8008160:	f06f 030f 	mvn.w	r3, #15
 8008164:	e024      	b.n	80081b0 <udp_sendto+0x70>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d102      	bne.n	8008172 <udp_sendto+0x32>
 800816c:	f06f 030f 	mvn.w	r3, #15
 8008170:	e01e      	b.n	80081b0 <udp_sendto+0x70>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	7a1b      	ldrb	r3, [r3, #8]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d006      	beq.n	8008188 <udp_sendto+0x48>
    netif = netif_get_by_index(pcb->netif_idx);
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	7a1b      	ldrb	r3, [r3, #8]
 800817e:	4618      	mov	r0, r3
 8008180:	f7fa fc5e 	bl	8002a40 <netif_get_by_index>
 8008184:	6178      	str	r0, [r7, #20]
 8008186:	e003      	b.n	8008190 <udp_sendto+0x50>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f001 fac3 	bl	8009714 <ip4_route>
 800818e:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d102      	bne.n	800819c <udp_sendto+0x5c>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8008196:	f06f 0303 	mvn.w	r3, #3
 800819a:	e009      	b.n	80081b0 <udp_sendto+0x70>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800819c:	887a      	ldrh	r2, [r7, #2]
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	9300      	str	r3, [sp, #0]
 80081a2:	4613      	mov	r3, r2
 80081a4:	687a      	ldr	r2, [r7, #4]
 80081a6:	68b9      	ldr	r1, [r7, #8]
 80081a8:	68f8      	ldr	r0, [r7, #12]
 80081aa:	f000 f805 	bl	80081b8 <udp_sendto_if>
 80081ae:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3718      	adds	r7, #24
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}

080081b8 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b088      	sub	sp, #32
 80081bc:	af02      	add	r7, sp, #8
 80081be:	60f8      	str	r0, [r7, #12]
 80081c0:	60b9      	str	r1, [r7, #8]
 80081c2:	607a      	str	r2, [r7, #4]
 80081c4:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d102      	bne.n	80081d2 <udp_sendto_if+0x1a>
 80081cc:	f06f 030f 	mvn.w	r3, #15
 80081d0:	e03a      	b.n	8008248 <udp_sendto_if+0x90>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d102      	bne.n	80081de <udp_sendto_if+0x26>
 80081d8:	f06f 030f 	mvn.w	r3, #15
 80081dc:	e034      	b.n	8008248 <udp_sendto_if+0x90>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d102      	bne.n	80081ea <udp_sendto_if+0x32>
 80081e4:	f06f 030f 	mvn.w	r3, #15
 80081e8:	e02e      	b.n	8008248 <udp_sendto_if+0x90>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80081ea:	6a3b      	ldr	r3, [r7, #32]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d102      	bne.n	80081f6 <udp_sendto_if+0x3e>
 80081f0:	f06f 030f 	mvn.w	r3, #15
 80081f4:	e028      	b.n	8008248 <udp_sendto_if+0x90>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d009      	beq.n	8008210 <udp_sendto_if+0x58>
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d005      	beq.n	8008210 <udp_sendto_if+0x58>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800820c:	2be0      	cmp	r3, #224	@ 0xe0
 800820e:	d103      	bne.n	8008218 <udp_sendto_if+0x60>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8008210:	6a3b      	ldr	r3, [r7, #32]
 8008212:	3304      	adds	r3, #4
 8008214:	617b      	str	r3, [r7, #20]
 8008216:	e00b      	b.n	8008230 <udp_sendto_if+0x78>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_eq(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681a      	ldr	r2, [r3, #0]
 800821c:	6a3b      	ldr	r3, [r7, #32]
 800821e:	3304      	adds	r3, #4
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	429a      	cmp	r2, r3
 8008224:	d002      	beq.n	800822c <udp_sendto_if+0x74>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8008226:	f06f 0303 	mvn.w	r3, #3
 800822a:	e00d      	b.n	8008248 <udp_sendto_if+0x90>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8008230:	887a      	ldrh	r2, [r7, #2]
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	9301      	str	r3, [sp, #4]
 8008236:	6a3b      	ldr	r3, [r7, #32]
 8008238:	9300      	str	r3, [sp, #0]
 800823a:	4613      	mov	r3, r2
 800823c:	687a      	ldr	r2, [r7, #4]
 800823e:	68b9      	ldr	r1, [r7, #8]
 8008240:	68f8      	ldr	r0, [r7, #12]
 8008242:	f000 f805 	bl	8008250 <udp_sendto_if_src>
 8008246:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8008248:	4618      	mov	r0, r3
 800824a:	3718      	adds	r7, #24
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}

08008250 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b08c      	sub	sp, #48	@ 0x30
 8008254:	af04      	add	r7, sp, #16
 8008256:	60f8      	str	r0, [r7, #12]
 8008258:	60b9      	str	r1, [r7, #8]
 800825a:	607a      	str	r2, [r7, #4]
 800825c:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d102      	bne.n	800826a <udp_sendto_if_src+0x1a>
 8008264:	f06f 030f 	mvn.w	r3, #15
 8008268:	e0b6      	b.n	80083d8 <udp_sendto_if_src+0x188>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d102      	bne.n	8008276 <udp_sendto_if_src+0x26>
 8008270:	f06f 030f 	mvn.w	r3, #15
 8008274:	e0b0      	b.n	80083d8 <udp_sendto_if_src+0x188>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d102      	bne.n	8008282 <udp_sendto_if_src+0x32>
 800827c:	f06f 030f 	mvn.w	r3, #15
 8008280:	e0aa      	b.n	80083d8 <udp_sendto_if_src+0x188>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8008282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008284:	2b00      	cmp	r3, #0
 8008286:	d102      	bne.n	800828e <udp_sendto_if_src+0x3e>
 8008288:	f06f 030f 	mvn.w	r3, #15
 800828c:	e0a4      	b.n	80083d8 <udp_sendto_if_src+0x188>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800828e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008290:	2b00      	cmp	r3, #0
 8008292:	d102      	bne.n	800829a <udp_sendto_if_src+0x4a>
 8008294:	f06f 030f 	mvn.w	r3, #15
 8008298:	e09e      	b.n	80083d8 <udp_sendto_if_src+0x188>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	8a5b      	ldrh	r3, [r3, #18]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d10f      	bne.n	80082c2 <udp_sendto_if_src+0x72>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80082a2:	68f9      	ldr	r1, [r7, #12]
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	8a5b      	ldrh	r3, [r3, #18]
 80082a8:	461a      	mov	r2, r3
 80082aa:	68f8      	ldr	r0, [r7, #12]
 80082ac:	f000 f89a 	bl	80083e4 <udp_bind>
 80082b0:	4603      	mov	r3, r0
 80082b2:	767b      	strb	r3, [r7, #25]
    if (err != ERR_OK) {
 80082b4:	f997 3019 	ldrsb.w	r3, [r7, #25]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d002      	beq.n	80082c2 <udp_sendto_if_src+0x72>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80082bc:	f997 3019 	ldrsb.w	r3, [r7, #25]
 80082c0:	e08a      	b.n	80083d8 <udp_sendto_if_src+0x188>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	891b      	ldrh	r3, [r3, #8]
 80082c6:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d902      	bls.n	80082d4 <udp_sendto_if_src+0x84>
    return ERR_MEM;
 80082ce:	f04f 33ff 	mov.w	r3, #4294967295
 80082d2:	e081      	b.n	80083d8 <udp_sendto_if_src+0x188>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80082d4:	2108      	movs	r1, #8
 80082d6:	68b8      	ldr	r0, [r7, #8]
 80082d8:	f7fa fe24 	bl	8002f24 <pbuf_add_header>
 80082dc:	4603      	mov	r3, r0
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d015      	beq.n	800830e <udp_sendto_if_src+0xbe>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80082e2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80082e6:	2108      	movs	r1, #8
 80082e8:	2022      	movs	r0, #34	@ 0x22
 80082ea:	f7fa fbf9 	bl	8002ae0 <pbuf_alloc>
 80082ee:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80082f0:	69fb      	ldr	r3, [r7, #28]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d102      	bne.n	80082fc <udp_sendto_if_src+0xac>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80082f6:	f04f 33ff 	mov.w	r3, #4294967295
 80082fa:	e06d      	b.n	80083d8 <udp_sendto_if_src+0x188>
    }
    if (p->tot_len != 0) {
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	891b      	ldrh	r3, [r3, #8]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d006      	beq.n	8008312 <udp_sendto_if_src+0xc2>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8008304:	68b9      	ldr	r1, [r7, #8]
 8008306:	69f8      	ldr	r0, [r7, #28]
 8008308:	f7fa ff76 	bl	80031f8 <pbuf_chain>
 800830c:	e001      	b.n	8008312 <udp_sendto_if_src+0xc2>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8008312:	69fb      	ldr	r3, [r7, #28]
 8008314:	895b      	ldrh	r3, [r3, #10]
 8008316:	2b07      	cmp	r3, #7
 8008318:	d802      	bhi.n	8008320 <udp_sendto_if_src+0xd0>
 800831a:	4831      	ldr	r0, [pc, #196]	@ (80083e0 <udp_sendto_if_src+0x190>)
 800831c:	f002 fca2 	bl	800ac64 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8008320:	69fb      	ldr	r3, [r7, #28]
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	8a5b      	ldrh	r3, [r3, #18]
 800832a:	4618      	mov	r0, r3
 800832c:	f7f9 fb74 	bl	8001a18 <lwip_htons>
 8008330:	4603      	mov	r3, r0
 8008332:	461a      	mov	r2, r3
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8008338:	887b      	ldrh	r3, [r7, #2]
 800833a:	4618      	mov	r0, r3
 800833c:	f7f9 fb6c 	bl	8001a18 <lwip_htons>
 8008340:	4603      	mov	r3, r0
 8008342:	461a      	mov	r2, r3
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	2200      	movs	r2, #0
 800834c:	719a      	strb	r2, [r3, #6]
 800834e:	2200      	movs	r2, #0
 8008350:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8008352:	69fb      	ldr	r3, [r7, #28]
 8008354:	891b      	ldrh	r3, [r3, #8]
 8008356:	4618      	mov	r0, r3
 8008358:	f7f9 fb5e 	bl	8001a18 <lwip_htons>
 800835c:	4603      	mov	r3, r0
 800835e:	461a      	mov	r2, r3
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	809a      	strh	r2, [r3, #4]
    /* calculate checksum */
#if CHECKSUM_GEN_UDP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_UDP) {
      /* Checksum is mandatory over IPv6. */
      if (IP_IS_V6(dst_ip) || (pcb->flags & UDP_FLAGS_NOCHKSUM) == 0) {
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	7c1b      	ldrb	r3, [r3, #16]
 8008368:	f003 0301 	and.w	r3, r3, #1
 800836c:	2b00      	cmp	r3, #0
 800836e:	d113      	bne.n	8008398 <udp_sendto_if_src+0x148>
          acc = udpchksum + (u16_t)~(chksum);
          udpchksum = FOLD_U32T(acc);
        } else
#endif /* LWIP_CHECKSUM_ON_COPY */
        {
          udpchksum = ip_chksum_pseudo(q, IP_PROTO_UDP, q->tot_len,
 8008370:	69fb      	ldr	r3, [r7, #28]
 8008372:	891a      	ldrh	r2, [r3, #8]
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	9300      	str	r3, [sp, #0]
 8008378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800837a:	2111      	movs	r1, #17
 800837c:	69f8      	ldr	r0, [r7, #28]
 800837e:	f7f9 fc7d 	bl	8001c7c <ip_chksum_pseudo>
 8008382:	4603      	mov	r3, r0
 8008384:	837b      	strh	r3, [r7, #26]
                                       src_ip, dst_ip);
        }

        /* chksum zero must become 0xffff, as zero means 'no checksum' */
        if (udpchksum == 0x0000) {
 8008386:	8b7b      	ldrh	r3, [r7, #26]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d102      	bne.n	8008392 <udp_sendto_if_src+0x142>
          udpchksum = 0xffff;
 800838c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008390:	837b      	strh	r3, [r7, #26]
        }
        udphdr->chksum = udpchksum;
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	8b7a      	ldrh	r2, [r7, #26]
 8008396:	80da      	strh	r2, [r3, #6]
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8008398:	2311      	movs	r3, #17
 800839a:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	7adb      	ldrb	r3, [r3, #11]
 80083a0:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	7a9b      	ldrb	r3, [r3, #10]
 80083a6:	7cb9      	ldrb	r1, [r7, #18]
 80083a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80083aa:	9202      	str	r2, [sp, #8]
 80083ac:	7cfa      	ldrb	r2, [r7, #19]
 80083ae:	9201      	str	r2, [sp, #4]
 80083b0:	9300      	str	r3, [sp, #0]
 80083b2:	460b      	mov	r3, r1
 80083b4:	687a      	ldr	r2, [r7, #4]
 80083b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80083b8:	69f8      	ldr	r0, [r7, #28]
 80083ba:	f001 fb9f 	bl	8009afc <ip4_output_if_src>
 80083be:	4603      	mov	r3, r0
 80083c0:	767b      	strb	r3, [r7, #25]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80083c2:	69fa      	ldr	r2, [r7, #28]
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	429a      	cmp	r2, r3
 80083c8:	d004      	beq.n	80083d4 <udp_sendto_if_src+0x184>
    /* free the header pbuf */
    pbuf_free(q);
 80083ca:	69f8      	ldr	r0, [r7, #28]
 80083cc:	f7fa fe2e 	bl	800302c <pbuf_free>
    q = NULL;
 80083d0:	2300      	movs	r3, #0
 80083d2:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80083d4:	f997 3019 	ldrsb.w	r3, [r7, #25]
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3720      	adds	r7, #32
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}
 80083e0:	0800d0f0 	.word	0x0800d0f0

080083e4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b086      	sub	sp, #24
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	60f8      	str	r0, [r7, #12]
 80083ec:	60b9      	str	r1, [r7, #8]
 80083ee:	4613      	mov	r3, r2
 80083f0:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d101      	bne.n	80083fc <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80083f8:	4b36      	ldr	r3, [pc, #216]	@ (80084d4 <udp_bind+0xf0>)
 80083fa:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d102      	bne.n	8008408 <udp_bind+0x24>
 8008402:	f06f 030f 	mvn.w	r3, #15
 8008406:	e060      	b.n	80084ca <udp_bind+0xe6>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8008408:	2300      	movs	r3, #0
 800840a:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800840c:	4b32      	ldr	r3, [pc, #200]	@ (80084d8 <udp_bind+0xf4>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	617b      	str	r3, [r7, #20]
 8008412:	e009      	b.n	8008428 <udp_bind+0x44>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8008414:	68fa      	ldr	r2, [r7, #12]
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	429a      	cmp	r2, r3
 800841a:	d102      	bne.n	8008422 <udp_bind+0x3e>
      rebind = 1;
 800841c:	2301      	movs	r3, #1
 800841e:	74fb      	strb	r3, [r7, #19]
      break;
 8008420:	e005      	b.n	800842e <udp_bind+0x4a>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	68db      	ldr	r3, [r3, #12]
 8008426:	617b      	str	r3, [r7, #20]
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d1f2      	bne.n	8008414 <udp_bind+0x30>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800842e:	88fb      	ldrh	r3, [r7, #6]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d109      	bne.n	8008448 <udp_bind+0x64>
    port = udp_new_port();
 8008434:	f7ff fcd4 	bl	8007de0 <udp_new_port>
 8008438:	4603      	mov	r3, r0
 800843a:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800843c:	88fb      	ldrh	r3, [r7, #6]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d12c      	bne.n	800849c <udp_bind+0xb8>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8008442:	f06f 0307 	mvn.w	r3, #7
 8008446:	e040      	b.n	80084ca <udp_bind+0xe6>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8008448:	4b23      	ldr	r3, [pc, #140]	@ (80084d8 <udp_bind+0xf4>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	617b      	str	r3, [r7, #20]
 800844e:	e022      	b.n	8008496 <udp_bind+0xb2>
      if (pcb != ipcb) {
 8008450:	68fa      	ldr	r2, [r7, #12]
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	429a      	cmp	r2, r3
 8008456:	d01b      	beq.n	8008490 <udp_bind+0xac>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	8a5b      	ldrh	r3, [r3, #18]
 800845c:	88fa      	ldrh	r2, [r7, #6]
 800845e:	429a      	cmp	r2, r3
 8008460:	d116      	bne.n	8008490 <udp_bind+0xac>
              (((IP_GET_TYPE(&ipcb->local_ip) == IP_GET_TYPE(ipaddr)) &&
              /* IP address matches or any IP used? */
              (ip_addr_eq(&ipcb->local_ip, ipaddr) ||
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	681a      	ldr	r2, [r3, #0]
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800846a:	429a      	cmp	r2, r3
 800846c:	d00d      	beq.n	800848a <udp_bind+0xa6>
              (ip_addr_eq(&ipcb->local_ip, ipaddr) ||
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d00a      	beq.n	800848a <udp_bind+0xa6>
              ip_addr_isany(ipaddr) ||
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d006      	beq.n	800848a <udp_bind+0xa6>
              ip_addr_isany(&ipcb->local_ip))) ||
 800847c:	697b      	ldr	r3, [r7, #20]
              (IP_GET_TYPE(&ipcb->local_ip) == IPADDR_TYPE_ANY) ||
 800847e:	2b00      	cmp	r3, #0
 8008480:	d003      	beq.n	800848a <udp_bind+0xa6>
              ip_addr_isany(&ipcb->local_ip))) ||
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d102      	bne.n	8008490 <udp_bind+0xac>
              (IP_GET_TYPE(ipaddr) == IPADDR_TYPE_ANY))) {
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800848a:	f06f 0307 	mvn.w	r3, #7
 800848e:	e01c      	b.n	80084ca <udp_bind+0xe6>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	68db      	ldr	r3, [r3, #12]
 8008494:	617b      	str	r3, [r7, #20]
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d1d9      	bne.n	8008450 <udp_bind+0x6c>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d002      	beq.n	80084a8 <udp_bind+0xc4>
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	e000      	b.n	80084aa <udp_bind+0xc6>
 80084a8:	2300      	movs	r3, #0
 80084aa:	68fa      	ldr	r2, [r7, #12]
 80084ac:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	88fa      	ldrh	r2, [r7, #6]
 80084b2:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80084b4:	7cfb      	ldrb	r3, [r7, #19]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d106      	bne.n	80084c8 <udp_bind+0xe4>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80084ba:	4b07      	ldr	r3, [pc, #28]	@ (80084d8 <udp_bind+0xf4>)
 80084bc:	681a      	ldr	r2, [r3, #0]
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80084c2:	4a05      	ldr	r2, [pc, #20]	@ (80084d8 <udp_bind+0xf4>)
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80084c8:	2300      	movs	r3, #0
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	3718      	adds	r7, #24
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}
 80084d2:	bf00      	nop
 80084d4:	0800d6b4 	.word	0x0800d6b4
 80084d8:	24008b68 	.word	0x24008b68

080084dc <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80084dc:	b480      	push	{r7}
 80084de:	b085      	sub	sp, #20
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	60f8      	str	r0, [r7, #12]
 80084e4:	60b9      	str	r1, [r7, #8]
 80084e6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d005      	beq.n	80084fa <udp_recv+0x1e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	68ba      	ldr	r2, [r7, #8]
 80084f2:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	687a      	ldr	r2, [r7, #4]
 80084f8:	61da      	str	r2, [r3, #28]
}
 80084fa:	3714      	adds	r7, #20
 80084fc:	46bd      	mov	sp, r7
 80084fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008502:	4770      	bx	lr

08008504 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b082      	sub	sp, #8
 8008508:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800850a:	2000      	movs	r0, #0
 800850c:	f7f9 fff6 	bl	80024fc <memp_malloc>
 8008510:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d007      	beq.n	8008528 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8008518:	2220      	movs	r2, #32
 800851a:	2100      	movs	r1, #0
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f002 fc06 	bl	800ad2e <memset>
    pcb->ttl = UDP_TTL;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	22ff      	movs	r2, #255	@ 0xff
 8008526:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    pcb_tci_init(pcb);
  }
  return pcb;
 8008528:	687b      	ldr	r3, [r7, #4]
}
 800852a:	4618      	mov	r0, r3
 800852c:	3708      	adds	r7, #8
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}
	...

08008534 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8008534:	b480      	push	{r7}
 8008536:	b085      	sub	sp, #20
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
 800853c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d01e      	beq.n	8008582 <udp_netif_ip_addr_changed+0x4e>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d01a      	beq.n	8008582 <udp_netif_ip_addr_changed+0x4e>
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d017      	beq.n	8008582 <udp_netif_ip_addr_changed+0x4e>
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d013      	beq.n	8008582 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800855a:	4b0d      	ldr	r3, [pc, #52]	@ (8008590 <udp_netif_ip_addr_changed+0x5c>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	60fb      	str	r3, [r7, #12]
 8008560:	e00c      	b.n	800857c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_eq(&upcb->local_ip, old_addr)) {
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681a      	ldr	r2, [r3, #0]
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	429a      	cmp	r2, r3
 800856c:	d103      	bne.n	8008576 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	681a      	ldr	r2, [r3, #0]
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	68db      	ldr	r3, [r3, #12]
 800857a:	60fb      	str	r3, [r7, #12]
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d1ef      	bne.n	8008562 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8008582:	bf00      	nop
 8008584:	3714      	adds	r7, #20
 8008586:	46bd      	mov	sp, r7
 8008588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858c:	4770      	bx	lr
 800858e:	bf00      	nop
 8008590:	24008b68 	.word	0x24008b68

08008594 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b082      	sub	sp, #8
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800859c:	4915      	ldr	r1, [pc, #84]	@ (80085f4 <etharp_free_entry+0x60>)
 800859e:	687a      	ldr	r2, [r7, #4]
 80085a0:	4613      	mov	r3, r2
 80085a2:	005b      	lsls	r3, r3, #1
 80085a4:	4413      	add	r3, r2
 80085a6:	00db      	lsls	r3, r3, #3
 80085a8:	440b      	add	r3, r1
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d013      	beq.n	80085d8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80085b0:	4910      	ldr	r1, [pc, #64]	@ (80085f4 <etharp_free_entry+0x60>)
 80085b2:	687a      	ldr	r2, [r7, #4]
 80085b4:	4613      	mov	r3, r2
 80085b6:	005b      	lsls	r3, r3, #1
 80085b8:	4413      	add	r3, r2
 80085ba:	00db      	lsls	r3, r3, #3
 80085bc:	440b      	add	r3, r1
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4618      	mov	r0, r3
 80085c2:	f7fa fd33 	bl	800302c <pbuf_free>
    arp_table[i].q = NULL;
 80085c6:	490b      	ldr	r1, [pc, #44]	@ (80085f4 <etharp_free_entry+0x60>)
 80085c8:	687a      	ldr	r2, [r7, #4]
 80085ca:	4613      	mov	r3, r2
 80085cc:	005b      	lsls	r3, r3, #1
 80085ce:	4413      	add	r3, r2
 80085d0:	00db      	lsls	r3, r3, #3
 80085d2:	440b      	add	r3, r1
 80085d4:	2200      	movs	r2, #0
 80085d6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80085d8:	4906      	ldr	r1, [pc, #24]	@ (80085f4 <etharp_free_entry+0x60>)
 80085da:	687a      	ldr	r2, [r7, #4]
 80085dc:	4613      	mov	r3, r2
 80085de:	005b      	lsls	r3, r3, #1
 80085e0:	4413      	add	r3, r2
 80085e2:	00db      	lsls	r3, r3, #3
 80085e4:	440b      	add	r3, r1
 80085e6:	3314      	adds	r3, #20
 80085e8:	2200      	movs	r2, #0
 80085ea:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80085ec:	bf00      	nop
 80085ee:	3708      	adds	r7, #8
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}
 80085f4:	24008b6c 	.word	0x24008b6c

080085f8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b082      	sub	sp, #8
 80085fc:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80085fe:	2300      	movs	r3, #0
 8008600:	607b      	str	r3, [r7, #4]
 8008602:	e096      	b.n	8008732 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8008604:	494f      	ldr	r1, [pc, #316]	@ (8008744 <etharp_tmr+0x14c>)
 8008606:	687a      	ldr	r2, [r7, #4]
 8008608:	4613      	mov	r3, r2
 800860a:	005b      	lsls	r3, r3, #1
 800860c:	4413      	add	r3, r2
 800860e:	00db      	lsls	r3, r3, #3
 8008610:	440b      	add	r3, r1
 8008612:	3314      	adds	r3, #20
 8008614:	781b      	ldrb	r3, [r3, #0]
 8008616:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8008618:	78fb      	ldrb	r3, [r7, #3]
 800861a:	2b00      	cmp	r3, #0
 800861c:	f000 8086 	beq.w	800872c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8008620:	4948      	ldr	r1, [pc, #288]	@ (8008744 <etharp_tmr+0x14c>)
 8008622:	687a      	ldr	r2, [r7, #4]
 8008624:	4613      	mov	r3, r2
 8008626:	005b      	lsls	r3, r3, #1
 8008628:	4413      	add	r3, r2
 800862a:	00db      	lsls	r3, r3, #3
 800862c:	440b      	add	r3, r1
 800862e:	3312      	adds	r3, #18
 8008630:	881b      	ldrh	r3, [r3, #0]
 8008632:	3301      	adds	r3, #1
 8008634:	b298      	uxth	r0, r3
 8008636:	4943      	ldr	r1, [pc, #268]	@ (8008744 <etharp_tmr+0x14c>)
 8008638:	687a      	ldr	r2, [r7, #4]
 800863a:	4613      	mov	r3, r2
 800863c:	005b      	lsls	r3, r3, #1
 800863e:	4413      	add	r3, r2
 8008640:	00db      	lsls	r3, r3, #3
 8008642:	440b      	add	r3, r1
 8008644:	3312      	adds	r3, #18
 8008646:	4602      	mov	r2, r0
 8008648:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800864a:	493e      	ldr	r1, [pc, #248]	@ (8008744 <etharp_tmr+0x14c>)
 800864c:	687a      	ldr	r2, [r7, #4]
 800864e:	4613      	mov	r3, r2
 8008650:	005b      	lsls	r3, r3, #1
 8008652:	4413      	add	r3, r2
 8008654:	00db      	lsls	r3, r3, #3
 8008656:	440b      	add	r3, r1
 8008658:	3312      	adds	r3, #18
 800865a:	881b      	ldrh	r3, [r3, #0]
 800865c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8008660:	d215      	bcs.n	800868e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8008662:	4938      	ldr	r1, [pc, #224]	@ (8008744 <etharp_tmr+0x14c>)
 8008664:	687a      	ldr	r2, [r7, #4]
 8008666:	4613      	mov	r3, r2
 8008668:	005b      	lsls	r3, r3, #1
 800866a:	4413      	add	r3, r2
 800866c:	00db      	lsls	r3, r3, #3
 800866e:	440b      	add	r3, r1
 8008670:	3314      	adds	r3, #20
 8008672:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8008674:	2b01      	cmp	r3, #1
 8008676:	d10e      	bne.n	8008696 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8008678:	4932      	ldr	r1, [pc, #200]	@ (8008744 <etharp_tmr+0x14c>)
 800867a:	687a      	ldr	r2, [r7, #4]
 800867c:	4613      	mov	r3, r2
 800867e:	005b      	lsls	r3, r3, #1
 8008680:	4413      	add	r3, r2
 8008682:	00db      	lsls	r3, r3, #3
 8008684:	440b      	add	r3, r1
 8008686:	3312      	adds	r3, #18
 8008688:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800868a:	2b04      	cmp	r3, #4
 800868c:	d903      	bls.n	8008696 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f7ff ff80 	bl	8008594 <etharp_free_entry>
 8008694:	e04a      	b.n	800872c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8008696:	492b      	ldr	r1, [pc, #172]	@ (8008744 <etharp_tmr+0x14c>)
 8008698:	687a      	ldr	r2, [r7, #4]
 800869a:	4613      	mov	r3, r2
 800869c:	005b      	lsls	r3, r3, #1
 800869e:	4413      	add	r3, r2
 80086a0:	00db      	lsls	r3, r3, #3
 80086a2:	440b      	add	r3, r1
 80086a4:	3314      	adds	r3, #20
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	2b03      	cmp	r3, #3
 80086aa:	d10a      	bne.n	80086c2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80086ac:	4925      	ldr	r1, [pc, #148]	@ (8008744 <etharp_tmr+0x14c>)
 80086ae:	687a      	ldr	r2, [r7, #4]
 80086b0:	4613      	mov	r3, r2
 80086b2:	005b      	lsls	r3, r3, #1
 80086b4:	4413      	add	r3, r2
 80086b6:	00db      	lsls	r3, r3, #3
 80086b8:	440b      	add	r3, r1
 80086ba:	3314      	adds	r3, #20
 80086bc:	2204      	movs	r2, #4
 80086be:	701a      	strb	r2, [r3, #0]
 80086c0:	e034      	b.n	800872c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80086c2:	4920      	ldr	r1, [pc, #128]	@ (8008744 <etharp_tmr+0x14c>)
 80086c4:	687a      	ldr	r2, [r7, #4]
 80086c6:	4613      	mov	r3, r2
 80086c8:	005b      	lsls	r3, r3, #1
 80086ca:	4413      	add	r3, r2
 80086cc:	00db      	lsls	r3, r3, #3
 80086ce:	440b      	add	r3, r1
 80086d0:	3314      	adds	r3, #20
 80086d2:	781b      	ldrb	r3, [r3, #0]
 80086d4:	2b04      	cmp	r3, #4
 80086d6:	d10a      	bne.n	80086ee <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80086d8:	491a      	ldr	r1, [pc, #104]	@ (8008744 <etharp_tmr+0x14c>)
 80086da:	687a      	ldr	r2, [r7, #4]
 80086dc:	4613      	mov	r3, r2
 80086de:	005b      	lsls	r3, r3, #1
 80086e0:	4413      	add	r3, r2
 80086e2:	00db      	lsls	r3, r3, #3
 80086e4:	440b      	add	r3, r1
 80086e6:	3314      	adds	r3, #20
 80086e8:	2202      	movs	r2, #2
 80086ea:	701a      	strb	r2, [r3, #0]
 80086ec:	e01e      	b.n	800872c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80086ee:	4915      	ldr	r1, [pc, #84]	@ (8008744 <etharp_tmr+0x14c>)
 80086f0:	687a      	ldr	r2, [r7, #4]
 80086f2:	4613      	mov	r3, r2
 80086f4:	005b      	lsls	r3, r3, #1
 80086f6:	4413      	add	r3, r2
 80086f8:	00db      	lsls	r3, r3, #3
 80086fa:	440b      	add	r3, r1
 80086fc:	3314      	adds	r3, #20
 80086fe:	781b      	ldrb	r3, [r3, #0]
 8008700:	2b01      	cmp	r3, #1
 8008702:	d113      	bne.n	800872c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8008704:	490f      	ldr	r1, [pc, #60]	@ (8008744 <etharp_tmr+0x14c>)
 8008706:	687a      	ldr	r2, [r7, #4]
 8008708:	4613      	mov	r3, r2
 800870a:	005b      	lsls	r3, r3, #1
 800870c:	4413      	add	r3, r2
 800870e:	00db      	lsls	r3, r3, #3
 8008710:	440b      	add	r3, r1
 8008712:	3308      	adds	r3, #8
 8008714:	6818      	ldr	r0, [r3, #0]
 8008716:	687a      	ldr	r2, [r7, #4]
 8008718:	4613      	mov	r3, r2
 800871a:	005b      	lsls	r3, r3, #1
 800871c:	4413      	add	r3, r2
 800871e:	00db      	lsls	r3, r3, #3
 8008720:	4a08      	ldr	r2, [pc, #32]	@ (8008744 <etharp_tmr+0x14c>)
 8008722:	4413      	add	r3, r2
 8008724:	3304      	adds	r3, #4
 8008726:	4619      	mov	r1, r3
 8008728:	f000 fe2e 	bl	8009388 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	3301      	adds	r3, #1
 8008730:	607b      	str	r3, [r7, #4]
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2b09      	cmp	r3, #9
 8008736:	f77f af65 	ble.w	8008604 <etharp_tmr+0xc>
      }
    }
  }
}
 800873a:	bf00      	nop
 800873c:	bf00      	nop
 800873e:	3708      	adds	r7, #8
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}
 8008744:	24008b6c 	.word	0x24008b6c

08008748 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b08a      	sub	sp, #40	@ 0x28
 800874c:	af00      	add	r7, sp, #0
 800874e:	60f8      	str	r0, [r7, #12]
 8008750:	460b      	mov	r3, r1
 8008752:	607a      	str	r2, [r7, #4]
 8008754:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8008756:	230a      	movs	r3, #10
 8008758:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800875a:	230a      	movs	r3, #10
 800875c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800875e:	230a      	movs	r3, #10
 8008760:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 8008762:	2300      	movs	r3, #0
 8008764:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8008766:	230a      	movs	r3, #10
 8008768:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800876a:	2300      	movs	r3, #0
 800876c:	83bb      	strh	r3, [r7, #28]
 800876e:	2300      	movs	r3, #0
 8008770:	837b      	strh	r3, [r7, #26]
 8008772:	2300      	movs	r3, #0
 8008774:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8008776:	2300      	movs	r3, #0
 8008778:	843b      	strh	r3, [r7, #32]
 800877a:	e0aa      	b.n	80088d2 <etharp_find_entry+0x18a>
    u8_t state = arp_table[i].state;
 800877c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008780:	499c      	ldr	r1, [pc, #624]	@ (80089f4 <etharp_find_entry+0x2ac>)
 8008782:	4613      	mov	r3, r2
 8008784:	005b      	lsls	r3, r3, #1
 8008786:	4413      	add	r3, r2
 8008788:	00db      	lsls	r3, r3, #3
 800878a:	440b      	add	r3, r1
 800878c:	3314      	adds	r3, #20
 800878e:	781b      	ldrb	r3, [r3, #0]
 8008790:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8008792:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8008796:	2b0a      	cmp	r3, #10
 8008798:	d105      	bne.n	80087a6 <etharp_find_entry+0x5e>
 800879a:	7dfb      	ldrb	r3, [r7, #23]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d102      	bne.n	80087a6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80087a0:	8c3b      	ldrh	r3, [r7, #32]
 80087a2:	847b      	strh	r3, [r7, #34]	@ 0x22
 80087a4:	e091      	b.n	80088ca <etharp_find_entry+0x182>
    } else if (state != ETHARP_STATE_EMPTY) {
 80087a6:	7dfb      	ldrb	r3, [r7, #23]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	f000 808e 	beq.w	80088ca <etharp_find_entry+0x182>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80087ae:	7dfb      	ldrb	r3, [r7, #23]
 80087b0:	2b01      	cmp	r3, #1
 80087b2:	d005      	beq.n	80087c0 <etharp_find_entry+0x78>
 80087b4:	7dfb      	ldrb	r3, [r7, #23]
 80087b6:	2b01      	cmp	r3, #1
 80087b8:	d802      	bhi.n	80087c0 <etharp_find_entry+0x78>
 80087ba:	488f      	ldr	r0, [pc, #572]	@ (80089f8 <etharp_find_entry+0x2b0>)
 80087bc:	f002 fa52 	bl	800ac64 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_eq(ipaddr, &arp_table[i].ipaddr)
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d020      	beq.n	8008808 <etharp_find_entry+0xc0>
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	6819      	ldr	r1, [r3, #0]
 80087ca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80087ce:	4889      	ldr	r0, [pc, #548]	@ (80089f4 <etharp_find_entry+0x2ac>)
 80087d0:	4613      	mov	r3, r2
 80087d2:	005b      	lsls	r3, r3, #1
 80087d4:	4413      	add	r3, r2
 80087d6:	00db      	lsls	r3, r3, #3
 80087d8:	4403      	add	r3, r0
 80087da:	3304      	adds	r3, #4
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	4299      	cmp	r1, r3
 80087e0:	d112      	bne.n	8008808 <etharp_find_entry+0xc0>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d00c      	beq.n	8008802 <etharp_find_entry+0xba>
 80087e8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80087ec:	4981      	ldr	r1, [pc, #516]	@ (80089f4 <etharp_find_entry+0x2ac>)
 80087ee:	4613      	mov	r3, r2
 80087f0:	005b      	lsls	r3, r3, #1
 80087f2:	4413      	add	r3, r2
 80087f4:	00db      	lsls	r3, r3, #3
 80087f6:	440b      	add	r3, r1
 80087f8:	3308      	adds	r3, #8
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	687a      	ldr	r2, [r7, #4]
 80087fe:	429a      	cmp	r2, r3
 8008800:	d102      	bne.n	8008808 <etharp_find_entry+0xc0>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8008802:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8008806:	e0f0      	b.n	80089ea <etharp_find_entry+0x2a2>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8008808:	7dfb      	ldrb	r3, [r7, #23]
 800880a:	2b01      	cmp	r3, #1
 800880c:	d140      	bne.n	8008890 <etharp_find_entry+0x148>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800880e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008812:	4978      	ldr	r1, [pc, #480]	@ (80089f4 <etharp_find_entry+0x2ac>)
 8008814:	4613      	mov	r3, r2
 8008816:	005b      	lsls	r3, r3, #1
 8008818:	4413      	add	r3, r2
 800881a:	00db      	lsls	r3, r3, #3
 800881c:	440b      	add	r3, r1
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d01a      	beq.n	800885a <etharp_find_entry+0x112>
          if (arp_table[i].ctime >= age_queue) {
 8008824:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008828:	4972      	ldr	r1, [pc, #456]	@ (80089f4 <etharp_find_entry+0x2ac>)
 800882a:	4613      	mov	r3, r2
 800882c:	005b      	lsls	r3, r3, #1
 800882e:	4413      	add	r3, r2
 8008830:	00db      	lsls	r3, r3, #3
 8008832:	440b      	add	r3, r1
 8008834:	3312      	adds	r3, #18
 8008836:	881b      	ldrh	r3, [r3, #0]
 8008838:	8bba      	ldrh	r2, [r7, #28]
 800883a:	429a      	cmp	r2, r3
 800883c:	d845      	bhi.n	80088ca <etharp_find_entry+0x182>
            old_queue = i;
 800883e:	8c3b      	ldrh	r3, [r7, #32]
 8008840:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8008842:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008846:	496b      	ldr	r1, [pc, #428]	@ (80089f4 <etharp_find_entry+0x2ac>)
 8008848:	4613      	mov	r3, r2
 800884a:	005b      	lsls	r3, r3, #1
 800884c:	4413      	add	r3, r2
 800884e:	00db      	lsls	r3, r3, #3
 8008850:	440b      	add	r3, r1
 8008852:	3312      	adds	r3, #18
 8008854:	881b      	ldrh	r3, [r3, #0]
 8008856:	83bb      	strh	r3, [r7, #28]
 8008858:	e037      	b.n	80088ca <etharp_find_entry+0x182>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800885a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800885e:	4965      	ldr	r1, [pc, #404]	@ (80089f4 <etharp_find_entry+0x2ac>)
 8008860:	4613      	mov	r3, r2
 8008862:	005b      	lsls	r3, r3, #1
 8008864:	4413      	add	r3, r2
 8008866:	00db      	lsls	r3, r3, #3
 8008868:	440b      	add	r3, r1
 800886a:	3312      	adds	r3, #18
 800886c:	881b      	ldrh	r3, [r3, #0]
 800886e:	8b7a      	ldrh	r2, [r7, #26]
 8008870:	429a      	cmp	r2, r3
 8008872:	d82a      	bhi.n	80088ca <etharp_find_entry+0x182>
            old_pending = i;
 8008874:	8c3b      	ldrh	r3, [r7, #32]
 8008876:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8008878:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800887c:	495d      	ldr	r1, [pc, #372]	@ (80089f4 <etharp_find_entry+0x2ac>)
 800887e:	4613      	mov	r3, r2
 8008880:	005b      	lsls	r3, r3, #1
 8008882:	4413      	add	r3, r2
 8008884:	00db      	lsls	r3, r3, #3
 8008886:	440b      	add	r3, r1
 8008888:	3312      	adds	r3, #18
 800888a:	881b      	ldrh	r3, [r3, #0]
 800888c:	837b      	strh	r3, [r7, #26]
 800888e:	e01c      	b.n	80088ca <etharp_find_entry+0x182>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8008890:	7dfb      	ldrb	r3, [r7, #23]
 8008892:	2b01      	cmp	r3, #1
 8008894:	d919      	bls.n	80088ca <etharp_find_entry+0x182>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8008896:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800889a:	4956      	ldr	r1, [pc, #344]	@ (80089f4 <etharp_find_entry+0x2ac>)
 800889c:	4613      	mov	r3, r2
 800889e:	005b      	lsls	r3, r3, #1
 80088a0:	4413      	add	r3, r2
 80088a2:	00db      	lsls	r3, r3, #3
 80088a4:	440b      	add	r3, r1
 80088a6:	3312      	adds	r3, #18
 80088a8:	881b      	ldrh	r3, [r3, #0]
 80088aa:	8b3a      	ldrh	r2, [r7, #24]
 80088ac:	429a      	cmp	r2, r3
 80088ae:	d80c      	bhi.n	80088ca <etharp_find_entry+0x182>
            old_stable = i;
 80088b0:	8c3b      	ldrh	r3, [r7, #32]
 80088b2:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 80088b4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80088b8:	494e      	ldr	r1, [pc, #312]	@ (80089f4 <etharp_find_entry+0x2ac>)
 80088ba:	4613      	mov	r3, r2
 80088bc:	005b      	lsls	r3, r3, #1
 80088be:	4413      	add	r3, r2
 80088c0:	00db      	lsls	r3, r3, #3
 80088c2:	440b      	add	r3, r1
 80088c4:	3312      	adds	r3, #18
 80088c6:	881b      	ldrh	r3, [r3, #0]
 80088c8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80088ca:	8c3b      	ldrh	r3, [r7, #32]
 80088cc:	3301      	adds	r3, #1
 80088ce:	b29b      	uxth	r3, r3
 80088d0:	843b      	strh	r3, [r7, #32]
 80088d2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80088d6:	2b09      	cmp	r3, #9
 80088d8:	f77f af50 	ble.w	800877c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80088dc:	7afb      	ldrb	r3, [r7, #11]
 80088de:	f003 0302 	and.w	r3, r3, #2
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d108      	bne.n	80088f8 <etharp_find_entry+0x1b0>
 80088e6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80088ea:	2b0a      	cmp	r3, #10
 80088ec:	d107      	bne.n	80088fe <etharp_find_entry+0x1b6>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80088ee:	7afb      	ldrb	r3, [r7, #11]
 80088f0:	f003 0301 	and.w	r3, r3, #1
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d102      	bne.n	80088fe <etharp_find_entry+0x1b6>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80088f8:	f04f 33ff 	mov.w	r3, #4294967295
 80088fc:	e075      	b.n	80089ea <etharp_find_entry+0x2a2>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80088fe:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8008902:	2b09      	cmp	r3, #9
 8008904:	dc02      	bgt.n	800890c <etharp_find_entry+0x1c4>
    i = empty;
 8008906:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008908:	843b      	strh	r3, [r7, #32]
 800890a:	e031      	b.n	8008970 <etharp_find_entry+0x228>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800890c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8008910:	2b09      	cmp	r3, #9
 8008912:	dc10      	bgt.n	8008936 <etharp_find_entry+0x1ee>
      /* recycle oldest stable*/
      i = old_stable;
 8008914:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008916:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8008918:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800891c:	4935      	ldr	r1, [pc, #212]	@ (80089f4 <etharp_find_entry+0x2ac>)
 800891e:	4613      	mov	r3, r2
 8008920:	005b      	lsls	r3, r3, #1
 8008922:	4413      	add	r3, r2
 8008924:	00db      	lsls	r3, r3, #3
 8008926:	440b      	add	r3, r1
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d014      	beq.n	8008958 <etharp_find_entry+0x210>
 800892e:	4833      	ldr	r0, [pc, #204]	@ (80089fc <etharp_find_entry+0x2b4>)
 8008930:	f002 f998 	bl	800ac64 <iprintf>
 8008934:	e010      	b.n	8008958 <etharp_find_entry+0x210>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8008936:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800893a:	2b09      	cmp	r3, #9
 800893c:	dc02      	bgt.n	8008944 <etharp_find_entry+0x1fc>
      /* recycle oldest pending */
      i = old_pending;
 800893e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008940:	843b      	strh	r3, [r7, #32]
 8008942:	e009      	b.n	8008958 <etharp_find_entry+0x210>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8008944:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8008948:	2b09      	cmp	r3, #9
 800894a:	dc02      	bgt.n	8008952 <etharp_find_entry+0x20a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800894c:	8bfb      	ldrh	r3, [r7, #30]
 800894e:	843b      	strh	r3, [r7, #32]
 8008950:	e002      	b.n	8008958 <etharp_find_entry+0x210>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8008952:	f04f 33ff 	mov.w	r3, #4294967295
 8008956:	e048      	b.n	80089ea <etharp_find_entry+0x2a2>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8008958:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800895c:	2b09      	cmp	r3, #9
 800895e:	dd02      	ble.n	8008966 <etharp_find_entry+0x21e>
 8008960:	4827      	ldr	r0, [pc, #156]	@ (8008a00 <etharp_find_entry+0x2b8>)
 8008962:	f002 f97f 	bl	800ac64 <iprintf>
    etharp_free_entry(i);
 8008966:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800896a:	4618      	mov	r0, r3
 800896c:	f7ff fe12 	bl	8008594 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8008970:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8008974:	2b09      	cmp	r3, #9
 8008976:	dd02      	ble.n	800897e <etharp_find_entry+0x236>
 8008978:	4821      	ldr	r0, [pc, #132]	@ (8008a00 <etharp_find_entry+0x2b8>)
 800897a:	f002 f973 	bl	800ac64 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800897e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008982:	491c      	ldr	r1, [pc, #112]	@ (80089f4 <etharp_find_entry+0x2ac>)
 8008984:	4613      	mov	r3, r2
 8008986:	005b      	lsls	r3, r3, #1
 8008988:	4413      	add	r3, r2
 800898a:	00db      	lsls	r3, r3, #3
 800898c:	440b      	add	r3, r1
 800898e:	3314      	adds	r3, #20
 8008990:	781b      	ldrb	r3, [r3, #0]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d002      	beq.n	800899c <etharp_find_entry+0x254>
 8008996:	481b      	ldr	r0, [pc, #108]	@ (8008a04 <etharp_find_entry+0x2bc>)
 8008998:	f002 f964 	bl	800ac64 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d00b      	beq.n	80089ba <etharp_find_entry+0x272>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80089a2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	6819      	ldr	r1, [r3, #0]
 80089aa:	4812      	ldr	r0, [pc, #72]	@ (80089f4 <etharp_find_entry+0x2ac>)
 80089ac:	4613      	mov	r3, r2
 80089ae:	005b      	lsls	r3, r3, #1
 80089b0:	4413      	add	r3, r2
 80089b2:	00db      	lsls	r3, r3, #3
 80089b4:	4403      	add	r3, r0
 80089b6:	3304      	adds	r3, #4
 80089b8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80089ba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80089be:	490d      	ldr	r1, [pc, #52]	@ (80089f4 <etharp_find_entry+0x2ac>)
 80089c0:	4613      	mov	r3, r2
 80089c2:	005b      	lsls	r3, r3, #1
 80089c4:	4413      	add	r3, r2
 80089c6:	00db      	lsls	r3, r3, #3
 80089c8:	440b      	add	r3, r1
 80089ca:	3312      	adds	r3, #18
 80089cc:	2200      	movs	r2, #0
 80089ce:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80089d0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80089d4:	4907      	ldr	r1, [pc, #28]	@ (80089f4 <etharp_find_entry+0x2ac>)
 80089d6:	4613      	mov	r3, r2
 80089d8:	005b      	lsls	r3, r3, #1
 80089da:	4413      	add	r3, r2
 80089dc:	00db      	lsls	r3, r3, #3
 80089de:	440b      	add	r3, r1
 80089e0:	3308      	adds	r3, #8
 80089e2:	687a      	ldr	r2, [r7, #4]
 80089e4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80089e6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	3728      	adds	r7, #40	@ 0x28
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}
 80089f2:	bf00      	nop
 80089f4:	24008b6c 	.word	0x24008b6c
 80089f8:	0800d120 	.word	0x0800d120
 80089fc:	0800d160 	.word	0x0800d160
 8008a00:	0800d178 	.word	0x0800d178
 8008a04:	0800d18c 	.word	0x0800d18c

08008a08 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b088      	sub	sp, #32
 8008a0c:	af02      	add	r7, sp, #8
 8008a0e:	60f8      	str	r0, [r7, #12]
 8008a10:	60b9      	str	r1, [r7, #8]
 8008a12:	607a      	str	r2, [r7, #4]
 8008a14:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8008a1c:	2b06      	cmp	r3, #6
 8008a1e:	d002      	beq.n	8008a26 <etharp_update_arp_entry+0x1e>
 8008a20:	4846      	ldr	r0, [pc, #280]	@ (8008b3c <etharp_update_arp_entry+0x134>)
 8008a22:	f002 f91f 	bl	800ac64 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d012      	beq.n	8008a52 <etharp_update_arp_entry+0x4a>
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d00e      	beq.n	8008a52 <etharp_update_arp_entry+0x4a>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	68f9      	ldr	r1, [r7, #12]
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f001 f966 	bl	8009d0c <ip4_addr_isbroadcast_u32>
 8008a40:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d105      	bne.n	8008a52 <etharp_update_arp_entry+0x4a>
      ip4_addr_ismulticast(ipaddr)) {
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8008a4e:	2be0      	cmp	r3, #224	@ 0xe0
 8008a50:	d102      	bne.n	8008a58 <etharp_update_arp_entry+0x50>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8008a52:	f06f 030f 	mvn.w	r3, #15
 8008a56:	e06c      	b.n	8008b32 <etharp_update_arp_entry+0x12a>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8008a58:	78fb      	ldrb	r3, [r7, #3]
 8008a5a:	68fa      	ldr	r2, [r7, #12]
 8008a5c:	4619      	mov	r1, r3
 8008a5e:	68b8      	ldr	r0, [r7, #8]
 8008a60:	f7ff fe72 	bl	8008748 <etharp_find_entry>
 8008a64:	4603      	mov	r3, r0
 8008a66:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8008a68:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	da02      	bge.n	8008a76 <etharp_update_arp_entry+0x6e>
    return (err_t)i;
 8008a70:	8afb      	ldrh	r3, [r7, #22]
 8008a72:	b25b      	sxtb	r3, r3
 8008a74:	e05d      	b.n	8008b32 <etharp_update_arp_entry+0x12a>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8008a76:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8008a7a:	4931      	ldr	r1, [pc, #196]	@ (8008b40 <etharp_update_arp_entry+0x138>)
 8008a7c:	4613      	mov	r3, r2
 8008a7e:	005b      	lsls	r3, r3, #1
 8008a80:	4413      	add	r3, r2
 8008a82:	00db      	lsls	r3, r3, #3
 8008a84:	440b      	add	r3, r1
 8008a86:	3314      	adds	r3, #20
 8008a88:	2202      	movs	r2, #2
 8008a8a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8008a8c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8008a90:	492b      	ldr	r1, [pc, #172]	@ (8008b40 <etharp_update_arp_entry+0x138>)
 8008a92:	4613      	mov	r3, r2
 8008a94:	005b      	lsls	r3, r3, #1
 8008a96:	4413      	add	r3, r2
 8008a98:	00db      	lsls	r3, r3, #3
 8008a9a:	440b      	add	r3, r1
 8008a9c:	3308      	adds	r3, #8
 8008a9e:	68fa      	ldr	r2, [r7, #12]
 8008aa0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8008aa2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8008aa6:	4613      	mov	r3, r2
 8008aa8:	005b      	lsls	r3, r3, #1
 8008aaa:	4413      	add	r3, r2
 8008aac:	00db      	lsls	r3, r3, #3
 8008aae:	3308      	adds	r3, #8
 8008ab0:	4a23      	ldr	r2, [pc, #140]	@ (8008b40 <etharp_update_arp_entry+0x138>)
 8008ab2:	4413      	add	r3, r2
 8008ab4:	3304      	adds	r3, #4
 8008ab6:	2206      	movs	r2, #6
 8008ab8:	6879      	ldr	r1, [r7, #4]
 8008aba:	4618      	mov	r0, r3
 8008abc:	f002 f9b3 	bl	800ae26 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8008ac0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8008ac4:	491e      	ldr	r1, [pc, #120]	@ (8008b40 <etharp_update_arp_entry+0x138>)
 8008ac6:	4613      	mov	r3, r2
 8008ac8:	005b      	lsls	r3, r3, #1
 8008aca:	4413      	add	r3, r2
 8008acc:	00db      	lsls	r3, r3, #3
 8008ace:	440b      	add	r3, r1
 8008ad0:	3312      	adds	r3, #18
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8008ad6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8008ada:	4919      	ldr	r1, [pc, #100]	@ (8008b40 <etharp_update_arp_entry+0x138>)
 8008adc:	4613      	mov	r3, r2
 8008ade:	005b      	lsls	r3, r3, #1
 8008ae0:	4413      	add	r3, r2
 8008ae2:	00db      	lsls	r3, r3, #3
 8008ae4:	440b      	add	r3, r1
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d021      	beq.n	8008b30 <etharp_update_arp_entry+0x128>
    struct pbuf *p = arp_table[i].q;
 8008aec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8008af0:	4913      	ldr	r1, [pc, #76]	@ (8008b40 <etharp_update_arp_entry+0x138>)
 8008af2:	4613      	mov	r3, r2
 8008af4:	005b      	lsls	r3, r3, #1
 8008af6:	4413      	add	r3, r2
 8008af8:	00db      	lsls	r3, r3, #3
 8008afa:	440b      	add	r3, r1
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8008b00:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8008b04:	490e      	ldr	r1, [pc, #56]	@ (8008b40 <etharp_update_arp_entry+0x138>)
 8008b06:	4613      	mov	r3, r2
 8008b08:	005b      	lsls	r3, r3, #1
 8008b0a:	4413      	add	r3, r2
 8008b0c:	00db      	lsls	r3, r3, #3
 8008b0e:	440b      	add	r3, r1
 8008b10:	2200      	movs	r2, #0
 8008b12:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8008b1a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008b1e:	9300      	str	r3, [sp, #0]
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6939      	ldr	r1, [r7, #16]
 8008b24:	68f8      	ldr	r0, [r7, #12]
 8008b26:	f001 ff9b 	bl	800aa60 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8008b2a:	6938      	ldr	r0, [r7, #16]
 8008b2c:	f7fa fa7e 	bl	800302c <pbuf_free>
  }
  return ERR_OK;
 8008b30:	2300      	movs	r3, #0
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3718      	adds	r7, #24
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}
 8008b3a:	bf00      	nop
 8008b3c:	0800d1b8 	.word	0x0800d1b8
 8008b40:	24008b6c 	.word	0x24008b6c

08008b44 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b084      	sub	sp, #16
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	60fb      	str	r3, [r7, #12]
 8008b50:	e01e      	b.n	8008b90 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8008b52:	4913      	ldr	r1, [pc, #76]	@ (8008ba0 <etharp_cleanup_netif+0x5c>)
 8008b54:	68fa      	ldr	r2, [r7, #12]
 8008b56:	4613      	mov	r3, r2
 8008b58:	005b      	lsls	r3, r3, #1
 8008b5a:	4413      	add	r3, r2
 8008b5c:	00db      	lsls	r3, r3, #3
 8008b5e:	440b      	add	r3, r1
 8008b60:	3314      	adds	r3, #20
 8008b62:	781b      	ldrb	r3, [r3, #0]
 8008b64:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8008b66:	7afb      	ldrb	r3, [r7, #11]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d00e      	beq.n	8008b8a <etharp_cleanup_netif+0x46>
 8008b6c:	490c      	ldr	r1, [pc, #48]	@ (8008ba0 <etharp_cleanup_netif+0x5c>)
 8008b6e:	68fa      	ldr	r2, [r7, #12]
 8008b70:	4613      	mov	r3, r2
 8008b72:	005b      	lsls	r3, r3, #1
 8008b74:	4413      	add	r3, r2
 8008b76:	00db      	lsls	r3, r3, #3
 8008b78:	440b      	add	r3, r1
 8008b7a:	3308      	adds	r3, #8
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	687a      	ldr	r2, [r7, #4]
 8008b80:	429a      	cmp	r2, r3
 8008b82:	d102      	bne.n	8008b8a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8008b84:	68f8      	ldr	r0, [r7, #12]
 8008b86:	f7ff fd05 	bl	8008594 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	3301      	adds	r3, #1
 8008b8e:	60fb      	str	r3, [r7, #12]
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	2b09      	cmp	r3, #9
 8008b94:	dddd      	ble.n	8008b52 <etharp_cleanup_netif+0xe>
    }
  }
}
 8008b96:	bf00      	nop
 8008b98:	bf00      	nop
 8008b9a:	3710      	adds	r7, #16
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}
 8008ba0:	24008b6c 	.word	0x24008b6c

08008ba4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8008ba4:	b5b0      	push	{r4, r5, r7, lr}
 8008ba6:	b08a      	sub	sp, #40	@ 0x28
 8008ba8:	af04      	add	r7, sp, #16
 8008baa:	6078      	str	r0, [r7, #4]
 8008bac:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us, from_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d07e      	beq.n	8008cb2 <etharp_input+0x10e>

  hdr = (struct etharp_hdr *)p->payload;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	685b      	ldr	r3, [r3, #4]
 8008bb8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8008bba:	693b      	ldr	r3, [r7, #16]
 8008bbc:	881b      	ldrh	r3, [r3, #0]
 8008bbe:	b29b      	uxth	r3, r3
 8008bc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008bc4:	d10c      	bne.n	8008be0 <etharp_input+0x3c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8008bca:	2b06      	cmp	r3, #6
 8008bcc:	d108      	bne.n	8008be0 <etharp_input+0x3c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8008bce:	693b      	ldr	r3, [r7, #16]
 8008bd0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8008bd2:	2b04      	cmp	r3, #4
 8008bd4:	d104      	bne.n	8008be0 <etharp_input+0x3c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	885b      	ldrh	r3, [r3, #2]
 8008bda:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8008bdc:	2b08      	cmp	r3, #8
 8008bde:	d003      	beq.n	8008be8 <etharp_input+0x44>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f7fa fa23 	bl	800302c <pbuf_free>
    return;
 8008be6:	e064      	b.n	8008cb2 <etharp_input+0x10e>
  acd_arp_reply(netif, hdr);
#endif /* LWIP_ACD */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8008be8:	693b      	ldr	r3, [r7, #16]
 8008bea:	330e      	adds	r3, #14
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	3318      	adds	r3, #24
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	3304      	adds	r3, #4
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d104      	bne.n	8008c0c <etharp_input+0x68>
    for_us = 0;
 8008c02:	2300      	movs	r3, #0
 8008c04:	75fb      	strb	r3, [r7, #23]
    from_us = 0;
 8008c06:	2300      	movs	r3, #0
 8008c08:	75bb      	strb	r3, [r7, #22]
 8008c0a:	e013      	b.n	8008c34 <etharp_input+0x90>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_eq(&dipaddr, netif_ip4_addr(netif));
 8008c0c:	68ba      	ldr	r2, [r7, #8]
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	3304      	adds	r3, #4
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	429a      	cmp	r2, r3
 8008c16:	bf0c      	ite	eq
 8008c18:	2301      	moveq	r3, #1
 8008c1a:	2300      	movne	r3, #0
 8008c1c:	b2db      	uxtb	r3, r3
 8008c1e:	75fb      	strb	r3, [r7, #23]
    /* ARP packet from us? */
    from_us = (u8_t)ip4_addr_eq(&sipaddr, netif_ip4_addr(netif));
 8008c20:	68fa      	ldr	r2, [r7, #12]
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	3304      	adds	r3, #4
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	429a      	cmp	r2, r3
 8008c2a:	bf0c      	ite	eq
 8008c2c:	2301      	moveq	r3, #1
 8008c2e:	2300      	movne	r3, #0
 8008c30:	b2db      	uxtb	r3, r3
 8008c32:	75bb      	strb	r3, [r7, #22]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8008c34:	693b      	ldr	r3, [r7, #16]
 8008c36:	f103 0208 	add.w	r2, r3, #8
 8008c3a:	7dfb      	ldrb	r3, [r7, #23]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d001      	beq.n	8008c44 <etharp_input+0xa0>
 8008c40:	2301      	movs	r3, #1
 8008c42:	e000      	b.n	8008c46 <etharp_input+0xa2>
 8008c44:	2302      	movs	r3, #2
 8008c46:	f107 010c 	add.w	r1, r7, #12
 8008c4a:	6838      	ldr	r0, [r7, #0]
 8008c4c:	f7ff fedc 	bl	8008a08 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	88db      	ldrh	r3, [r3, #6]
 8008c54:	b29b      	uxth	r3, r3
 8008c56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c5a:	d003      	beq.n	8008c64 <etharp_input+0xc0>
 8008c5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c60:	d021      	beq.n	8008ca6 <etharp_input+0x102>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: incoming ARP reply\n"));
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8008c62:	e023      	b.n	8008cac <etharp_input+0x108>
      if (for_us && !from_us) {
 8008c64:	7dfb      	ldrb	r3, [r7, #23]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d01f      	beq.n	8008caa <etharp_input+0x106>
 8008c6a:	7dbb      	ldrb	r3, [r7, #22]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d11c      	bne.n	8008caa <etharp_input+0x106>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8008c86:	693a      	ldr	r2, [r7, #16]
 8008c88:	3208      	adds	r2, #8
        etharp_raw(netif,
 8008c8a:	2102      	movs	r1, #2
 8008c8c:	9103      	str	r1, [sp, #12]
 8008c8e:	f107 010c 	add.w	r1, r7, #12
 8008c92:	9102      	str	r1, [sp, #8]
 8008c94:	9201      	str	r2, [sp, #4]
 8008c96:	9300      	str	r3, [sp, #0]
 8008c98:	462b      	mov	r3, r5
 8008c9a:	4622      	mov	r2, r4
 8008c9c:	4601      	mov	r1, r0
 8008c9e:	6838      	ldr	r0, [r7, #0]
 8008ca0:	f000 fad4 	bl	800924c <etharp_raw>
      break;
 8008ca4:	e001      	b.n	8008caa <etharp_input+0x106>
      break;
 8008ca6:	bf00      	nop
 8008ca8:	e000      	b.n	8008cac <etharp_input+0x108>
      break;
 8008caa:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f7fa f9bd 	bl	800302c <pbuf_free>
}
 8008cb2:	3718      	adds	r7, #24
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bdb0      	pop	{r4, r5, r7, pc}

08008cb8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b086      	sub	sp, #24
 8008cbc:	af02      	add	r7, sp, #8
 8008cbe:	60f8      	str	r0, [r7, #12]
 8008cc0:	60b9      	str	r1, [r7, #8]
 8008cc2:	4613      	mov	r3, r2
 8008cc4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8008cc6:	79fa      	ldrb	r2, [r7, #7]
 8008cc8:	4942      	ldr	r1, [pc, #264]	@ (8008dd4 <etharp_output_to_arp_index+0x11c>)
 8008cca:	4613      	mov	r3, r2
 8008ccc:	005b      	lsls	r3, r3, #1
 8008cce:	4413      	add	r3, r2
 8008cd0:	00db      	lsls	r3, r3, #3
 8008cd2:	440b      	add	r3, r1
 8008cd4:	3314      	adds	r3, #20
 8008cd6:	781b      	ldrb	r3, [r3, #0]
 8008cd8:	2b01      	cmp	r3, #1
 8008cda:	d802      	bhi.n	8008ce2 <etharp_output_to_arp_index+0x2a>
 8008cdc:	483e      	ldr	r0, [pc, #248]	@ (8008dd8 <etharp_output_to_arp_index+0x120>)
 8008cde:	f001 ffc1 	bl	800ac64 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8008ce2:	79fa      	ldrb	r2, [r7, #7]
 8008ce4:	493b      	ldr	r1, [pc, #236]	@ (8008dd4 <etharp_output_to_arp_index+0x11c>)
 8008ce6:	4613      	mov	r3, r2
 8008ce8:	005b      	lsls	r3, r3, #1
 8008cea:	4413      	add	r3, r2
 8008cec:	00db      	lsls	r3, r3, #3
 8008cee:	440b      	add	r3, r1
 8008cf0:	3314      	adds	r3, #20
 8008cf2:	781b      	ldrb	r3, [r3, #0]
 8008cf4:	2b02      	cmp	r3, #2
 8008cf6:	d153      	bne.n	8008da0 <etharp_output_to_arp_index+0xe8>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8008cf8:	79fa      	ldrb	r2, [r7, #7]
 8008cfa:	4936      	ldr	r1, [pc, #216]	@ (8008dd4 <etharp_output_to_arp_index+0x11c>)
 8008cfc:	4613      	mov	r3, r2
 8008cfe:	005b      	lsls	r3, r3, #1
 8008d00:	4413      	add	r3, r2
 8008d02:	00db      	lsls	r3, r3, #3
 8008d04:	440b      	add	r3, r1
 8008d06:	3312      	adds	r3, #18
 8008d08:	881b      	ldrh	r3, [r3, #0]
 8008d0a:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8008d0e:	d919      	bls.n	8008d44 <etharp_output_to_arp_index+0x8c>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8008d10:	79fa      	ldrb	r2, [r7, #7]
 8008d12:	4613      	mov	r3, r2
 8008d14:	005b      	lsls	r3, r3, #1
 8008d16:	4413      	add	r3, r2
 8008d18:	00db      	lsls	r3, r3, #3
 8008d1a:	4a2e      	ldr	r2, [pc, #184]	@ (8008dd4 <etharp_output_to_arp_index+0x11c>)
 8008d1c:	4413      	add	r3, r2
 8008d1e:	3304      	adds	r3, #4
 8008d20:	4619      	mov	r1, r3
 8008d22:	68f8      	ldr	r0, [r7, #12]
 8008d24:	f000 fb30 	bl	8009388 <etharp_request>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d138      	bne.n	8008da0 <etharp_output_to_arp_index+0xe8>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8008d2e:	79fa      	ldrb	r2, [r7, #7]
 8008d30:	4928      	ldr	r1, [pc, #160]	@ (8008dd4 <etharp_output_to_arp_index+0x11c>)
 8008d32:	4613      	mov	r3, r2
 8008d34:	005b      	lsls	r3, r3, #1
 8008d36:	4413      	add	r3, r2
 8008d38:	00db      	lsls	r3, r3, #3
 8008d3a:	440b      	add	r3, r1
 8008d3c:	3314      	adds	r3, #20
 8008d3e:	2203      	movs	r2, #3
 8008d40:	701a      	strb	r2, [r3, #0]
 8008d42:	e02d      	b.n	8008da0 <etharp_output_to_arp_index+0xe8>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8008d44:	79fa      	ldrb	r2, [r7, #7]
 8008d46:	4923      	ldr	r1, [pc, #140]	@ (8008dd4 <etharp_output_to_arp_index+0x11c>)
 8008d48:	4613      	mov	r3, r2
 8008d4a:	005b      	lsls	r3, r3, #1
 8008d4c:	4413      	add	r3, r2
 8008d4e:	00db      	lsls	r3, r3, #3
 8008d50:	440b      	add	r3, r1
 8008d52:	3312      	adds	r3, #18
 8008d54:	881b      	ldrh	r3, [r3, #0]
 8008d56:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8008d5a:	d321      	bcc.n	8008da0 <etharp_output_to_arp_index+0xe8>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8008d5c:	79fa      	ldrb	r2, [r7, #7]
 8008d5e:	4613      	mov	r3, r2
 8008d60:	005b      	lsls	r3, r3, #1
 8008d62:	4413      	add	r3, r2
 8008d64:	00db      	lsls	r3, r3, #3
 8008d66:	4a1b      	ldr	r2, [pc, #108]	@ (8008dd4 <etharp_output_to_arp_index+0x11c>)
 8008d68:	4413      	add	r3, r2
 8008d6a:	1d19      	adds	r1, r3, #4
 8008d6c:	79fa      	ldrb	r2, [r7, #7]
 8008d6e:	4613      	mov	r3, r2
 8008d70:	005b      	lsls	r3, r3, #1
 8008d72:	4413      	add	r3, r2
 8008d74:	00db      	lsls	r3, r3, #3
 8008d76:	3308      	adds	r3, #8
 8008d78:	4a16      	ldr	r2, [pc, #88]	@ (8008dd4 <etharp_output_to_arp_index+0x11c>)
 8008d7a:	4413      	add	r3, r2
 8008d7c:	3304      	adds	r3, #4
 8008d7e:	461a      	mov	r2, r3
 8008d80:	68f8      	ldr	r0, [r7, #12]
 8008d82:	f000 fadf 	bl	8009344 <etharp_request_dst>
 8008d86:	4603      	mov	r3, r0
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d109      	bne.n	8008da0 <etharp_output_to_arp_index+0xe8>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8008d8c:	79fa      	ldrb	r2, [r7, #7]
 8008d8e:	4911      	ldr	r1, [pc, #68]	@ (8008dd4 <etharp_output_to_arp_index+0x11c>)
 8008d90:	4613      	mov	r3, r2
 8008d92:	005b      	lsls	r3, r3, #1
 8008d94:	4413      	add	r3, r2
 8008d96:	00db      	lsls	r3, r3, #3
 8008d98:	440b      	add	r3, r1
 8008d9a:	3314      	adds	r3, #20
 8008d9c:	2203      	movs	r2, #3
 8008d9e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 8008da6:	79fa      	ldrb	r2, [r7, #7]
 8008da8:	4613      	mov	r3, r2
 8008daa:	005b      	lsls	r3, r3, #1
 8008dac:	4413      	add	r3, r2
 8008dae:	00db      	lsls	r3, r3, #3
 8008db0:	3308      	adds	r3, #8
 8008db2:	4a08      	ldr	r2, [pc, #32]	@ (8008dd4 <etharp_output_to_arp_index+0x11c>)
 8008db4:	4413      	add	r3, r2
 8008db6:	3304      	adds	r3, #4
 8008db8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008dbc:	9200      	str	r2, [sp, #0]
 8008dbe:	460a      	mov	r2, r1
 8008dc0:	68b9      	ldr	r1, [r7, #8]
 8008dc2:	68f8      	ldr	r0, [r7, #12]
 8008dc4:	f001 fe4c 	bl	800aa60 <ethernet_output>
 8008dc8:	4603      	mov	r3, r0
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3710      	adds	r7, #16
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}
 8008dd2:	bf00      	nop
 8008dd4:	24008b6c 	.word	0x24008b6c
 8008dd8:	0800d230 	.word	0x0800d230

08008ddc <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b08a      	sub	sp, #40	@ 0x28
 8008de0:	af02      	add	r7, sp, #8
 8008de2:	60f8      	str	r0, [r7, #12]
 8008de4:	60b9      	str	r1, [r7, #8]
 8008de6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d102      	bne.n	8008df8 <etharp_output+0x1c>
 8008df2:	486d      	ldr	r0, [pc, #436]	@ (8008fa8 <etharp_output+0x1cc>)
 8008df4:	f001 ff36 	bl	800ac64 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d102      	bne.n	8008e04 <etharp_output+0x28>
 8008dfe:	486b      	ldr	r0, [pc, #428]	@ (8008fac <etharp_output+0x1d0>)
 8008e00:	f001 ff30 	bl	800ac64 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d102      	bne.n	8008e10 <etharp_output+0x34>
 8008e0a:	4869      	ldr	r0, [pc, #420]	@ (8008fb0 <etharp_output+0x1d4>)
 8008e0c:	f001 ff2a 	bl	800ac64 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	68f9      	ldr	r1, [r7, #12]
 8008e16:	4618      	mov	r0, r3
 8008e18:	f000 ff78 	bl	8009d0c <ip4_addr_isbroadcast_u32>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d002      	beq.n	8008e28 <etharp_output+0x4c>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8008e22:	4b64      	ldr	r3, [pc, #400]	@ (8008fb4 <etharp_output+0x1d8>)
 8008e24:	61fb      	str	r3, [r7, #28]
 8008e26:	e0af      	b.n	8008f88 <etharp_output+0x1ac>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008e30:	2be0      	cmp	r3, #224	@ 0xe0
 8008e32:	d118      	bne.n	8008e66 <etharp_output+0x8a>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8008e34:	2301      	movs	r3, #1
 8008e36:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8008e3c:	235e      	movs	r3, #94	@ 0x5e
 8008e3e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	3301      	adds	r3, #1
 8008e44:	781b      	ldrb	r3, [r3, #0]
 8008e46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e4a:	b2db      	uxtb	r3, r3
 8008e4c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	3302      	adds	r3, #2
 8008e52:	781b      	ldrb	r3, [r3, #0]
 8008e54:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	3303      	adds	r3, #3
 8008e5a:	781b      	ldrb	r3, [r3, #0]
 8008e5c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8008e5e:	f107 0310 	add.w	r3, r7, #16
 8008e62:	61fb      	str	r3, [r7, #28]
 8008e64:	e090      	b.n	8008f88 <etharp_output+0x1ac>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_net_eq(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681a      	ldr	r2, [r3, #0]
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	3304      	adds	r3, #4
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	405a      	eors	r2, r3
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	3308      	adds	r3, #8
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	4013      	ands	r3, r2
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d012      	beq.n	8008ea4 <etharp_output+0xc8>
        !ip4_addr_islinklocal(ipaddr)) {
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	b29b      	uxth	r3, r3
    if (!ip4_addr_net_eq(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8008e84:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d00b      	beq.n	8008ea4 <etharp_output+0xc8>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	330c      	adds	r3, #12
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d003      	beq.n	8008e9e <etharp_output+0xc2>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	330c      	adds	r3, #12
 8008e9a:	61bb      	str	r3, [r7, #24]
 8008e9c:	e002      	b.n	8008ea4 <etharp_output+0xc8>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8008e9e:	f06f 0303 	mvn.w	r3, #3
 8008ea2:	e07d      	b.n	8008fa0 <etharp_output+0x1c4>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8008ea4:	4b44      	ldr	r3, [pc, #272]	@ (8008fb8 <etharp_output+0x1dc>)
 8008ea6:	781b      	ldrb	r3, [r3, #0]
 8008ea8:	4619      	mov	r1, r3
 8008eaa:	4a44      	ldr	r2, [pc, #272]	@ (8008fbc <etharp_output+0x1e0>)
 8008eac:	460b      	mov	r3, r1
 8008eae:	005b      	lsls	r3, r3, #1
 8008eb0:	440b      	add	r3, r1
 8008eb2:	00db      	lsls	r3, r3, #3
 8008eb4:	4413      	add	r3, r2
 8008eb6:	3314      	adds	r3, #20
 8008eb8:	781b      	ldrb	r3, [r3, #0]
 8008eba:	2b01      	cmp	r3, #1
 8008ebc:	d925      	bls.n	8008f0a <etharp_output+0x12e>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8008ebe:	4b3e      	ldr	r3, [pc, #248]	@ (8008fb8 <etharp_output+0x1dc>)
 8008ec0:	781b      	ldrb	r3, [r3, #0]
 8008ec2:	4619      	mov	r1, r3
 8008ec4:	4a3d      	ldr	r2, [pc, #244]	@ (8008fbc <etharp_output+0x1e0>)
 8008ec6:	460b      	mov	r3, r1
 8008ec8:	005b      	lsls	r3, r3, #1
 8008eca:	440b      	add	r3, r1
 8008ecc:	00db      	lsls	r3, r3, #3
 8008ece:	4413      	add	r3, r2
 8008ed0:	3308      	adds	r3, #8
 8008ed2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8008ed4:	68fa      	ldr	r2, [r7, #12]
 8008ed6:	429a      	cmp	r2, r3
 8008ed8:	d117      	bne.n	8008f0a <etharp_output+0x12e>
#endif
            (ip4_addr_eq(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8008eda:	69bb      	ldr	r3, [r7, #24]
 8008edc:	681a      	ldr	r2, [r3, #0]
 8008ede:	4b36      	ldr	r3, [pc, #216]	@ (8008fb8 <etharp_output+0x1dc>)
 8008ee0:	781b      	ldrb	r3, [r3, #0]
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	4935      	ldr	r1, [pc, #212]	@ (8008fbc <etharp_output+0x1e0>)
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	005b      	lsls	r3, r3, #1
 8008eea:	4403      	add	r3, r0
 8008eec:	00db      	lsls	r3, r3, #3
 8008eee:	440b      	add	r3, r1
 8008ef0:	3304      	adds	r3, #4
 8008ef2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	d108      	bne.n	8008f0a <etharp_output+0x12e>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8008ef8:	4b2f      	ldr	r3, [pc, #188]	@ (8008fb8 <etharp_output+0x1dc>)
 8008efa:	781b      	ldrb	r3, [r3, #0]
 8008efc:	461a      	mov	r2, r3
 8008efe:	68b9      	ldr	r1, [r7, #8]
 8008f00:	68f8      	ldr	r0, [r7, #12]
 8008f02:	f7ff fed9 	bl	8008cb8 <etharp_output_to_arp_index>
 8008f06:	4603      	mov	r3, r0
 8008f08:	e04a      	b.n	8008fa0 <etharp_output+0x1c4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	75fb      	strb	r3, [r7, #23]
 8008f0e:	e031      	b.n	8008f74 <etharp_output+0x198>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8008f10:	7dfa      	ldrb	r2, [r7, #23]
 8008f12:	492a      	ldr	r1, [pc, #168]	@ (8008fbc <etharp_output+0x1e0>)
 8008f14:	4613      	mov	r3, r2
 8008f16:	005b      	lsls	r3, r3, #1
 8008f18:	4413      	add	r3, r2
 8008f1a:	00db      	lsls	r3, r3, #3
 8008f1c:	440b      	add	r3, r1
 8008f1e:	3314      	adds	r3, #20
 8008f20:	781b      	ldrb	r3, [r3, #0]
 8008f22:	2b01      	cmp	r3, #1
 8008f24:	d923      	bls.n	8008f6e <etharp_output+0x192>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8008f26:	7dfa      	ldrb	r2, [r7, #23]
 8008f28:	4924      	ldr	r1, [pc, #144]	@ (8008fbc <etharp_output+0x1e0>)
 8008f2a:	4613      	mov	r3, r2
 8008f2c:	005b      	lsls	r3, r3, #1
 8008f2e:	4413      	add	r3, r2
 8008f30:	00db      	lsls	r3, r3, #3
 8008f32:	440b      	add	r3, r1
 8008f34:	3308      	adds	r3, #8
 8008f36:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8008f38:	68fa      	ldr	r2, [r7, #12]
 8008f3a:	429a      	cmp	r2, r3
 8008f3c:	d117      	bne.n	8008f6e <etharp_output+0x192>
#endif
          (ip4_addr_eq(dst_addr, &arp_table[i].ipaddr))) {
 8008f3e:	69bb      	ldr	r3, [r7, #24]
 8008f40:	6819      	ldr	r1, [r3, #0]
 8008f42:	7dfa      	ldrb	r2, [r7, #23]
 8008f44:	481d      	ldr	r0, [pc, #116]	@ (8008fbc <etharp_output+0x1e0>)
 8008f46:	4613      	mov	r3, r2
 8008f48:	005b      	lsls	r3, r3, #1
 8008f4a:	4413      	add	r3, r2
 8008f4c:	00db      	lsls	r3, r3, #3
 8008f4e:	4403      	add	r3, r0
 8008f50:	3304      	adds	r3, #4
 8008f52:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8008f54:	4299      	cmp	r1, r3
 8008f56:	d10a      	bne.n	8008f6e <etharp_output+0x192>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8008f58:	4a17      	ldr	r2, [pc, #92]	@ (8008fb8 <etharp_output+0x1dc>)
 8008f5a:	7dfb      	ldrb	r3, [r7, #23]
 8008f5c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8008f5e:	7dfb      	ldrb	r3, [r7, #23]
 8008f60:	461a      	mov	r2, r3
 8008f62:	68b9      	ldr	r1, [r7, #8]
 8008f64:	68f8      	ldr	r0, [r7, #12]
 8008f66:	f7ff fea7 	bl	8008cb8 <etharp_output_to_arp_index>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	e018      	b.n	8008fa0 <etharp_output+0x1c4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8008f6e:	7dfb      	ldrb	r3, [r7, #23]
 8008f70:	3301      	adds	r3, #1
 8008f72:	75fb      	strb	r3, [r7, #23]
 8008f74:	7dfb      	ldrb	r3, [r7, #23]
 8008f76:	2b09      	cmp	r3, #9
 8008f78:	d9ca      	bls.n	8008f10 <etharp_output+0x134>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8008f7a:	68ba      	ldr	r2, [r7, #8]
 8008f7c:	69b9      	ldr	r1, [r7, #24]
 8008f7e:	68f8      	ldr	r0, [r7, #12]
 8008f80:	f000 f81e 	bl	8008fc0 <etharp_query>
 8008f84:	4603      	mov	r3, r0
 8008f86:	e00b      	b.n	8008fa0 <etharp_output+0x1c4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8008f8e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008f92:	9300      	str	r3, [sp, #0]
 8008f94:	69fb      	ldr	r3, [r7, #28]
 8008f96:	68b9      	ldr	r1, [r7, #8]
 8008f98:	68f8      	ldr	r0, [r7, #12]
 8008f9a:	f001 fd61 	bl	800aa60 <ethernet_output>
 8008f9e:	4603      	mov	r3, r0
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	3720      	adds	r7, #32
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}
 8008fa8:	0800d210 	.word	0x0800d210
 8008fac:	0800d260 	.word	0x0800d260
 8008fb0:	0800d200 	.word	0x0800d200
 8008fb4:	0800d6b8 	.word	0x0800d6b8
 8008fb8:	24008c5c 	.word	0x24008c5c
 8008fbc:	24008b6c 	.word	0x24008b6c

08008fc0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b08c      	sub	sp, #48	@ 0x30
 8008fc4:	af02      	add	r7, sp, #8
 8008fc6:	60f8      	str	r0, [r7, #12]
 8008fc8:	60b9      	str	r1, [r7, #8]
 8008fca:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	3326      	adds	r3, #38	@ 0x26
 8008fd0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8008fd2:	23ff      	movs	r3, #255	@ 0xff
 8008fd4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	68f9      	ldr	r1, [r7, #12]
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f000 fe92 	bl	8009d0c <ip4_addr_isbroadcast_u32>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d10c      	bne.n	8009008 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8008ff6:	2be0      	cmp	r3, #224	@ 0xe0
 8008ff8:	d006      	beq.n	8009008 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d003      	beq.n	8009008 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d102      	bne.n	800900e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8009008:	f06f 030f 	mvn.w	r3, #15
 800900c:	e10d      	b.n	800922a <etharp_query+0x26a>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800900e:	68fa      	ldr	r2, [r7, #12]
 8009010:	2101      	movs	r1, #1
 8009012:	68b8      	ldr	r0, [r7, #8]
 8009014:	f7ff fb98 	bl	8008748 <etharp_find_entry>
 8009018:	4603      	mov	r3, r0
 800901a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800901c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009020:	2b00      	cmp	r3, #0
 8009022:	da02      	bge.n	800902a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8009024:	8a7b      	ldrh	r3, [r7, #18]
 8009026:	b25b      	sxtb	r3, r3
 8009028:	e0ff      	b.n	800922a <etharp_query+0x26a>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800902a:	8a7b      	ldrh	r3, [r7, #18]
 800902c:	2b7e      	cmp	r3, #126	@ 0x7e
 800902e:	d902      	bls.n	8009036 <etharp_query+0x76>
 8009030:	4880      	ldr	r0, [pc, #512]	@ (8009234 <etharp_query+0x274>)
 8009032:	f001 fe17 	bl	800ac64 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8009036:	8a7b      	ldrh	r3, [r7, #18]
 8009038:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800903a:	7c7a      	ldrb	r2, [r7, #17]
 800903c:	497e      	ldr	r1, [pc, #504]	@ (8009238 <etharp_query+0x278>)
 800903e:	4613      	mov	r3, r2
 8009040:	005b      	lsls	r3, r3, #1
 8009042:	4413      	add	r3, r2
 8009044:	00db      	lsls	r3, r3, #3
 8009046:	440b      	add	r3, r1
 8009048:	3314      	adds	r3, #20
 800904a:	781b      	ldrb	r3, [r3, #0]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d115      	bne.n	800907c <etharp_query+0xbc>
    is_new_entry = 1;
 8009050:	2301      	movs	r3, #1
 8009052:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8009054:	7c7a      	ldrb	r2, [r7, #17]
 8009056:	4978      	ldr	r1, [pc, #480]	@ (8009238 <etharp_query+0x278>)
 8009058:	4613      	mov	r3, r2
 800905a:	005b      	lsls	r3, r3, #1
 800905c:	4413      	add	r3, r2
 800905e:	00db      	lsls	r3, r3, #3
 8009060:	440b      	add	r3, r1
 8009062:	3314      	adds	r3, #20
 8009064:	2201      	movs	r2, #1
 8009066:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8009068:	7c7a      	ldrb	r2, [r7, #17]
 800906a:	4973      	ldr	r1, [pc, #460]	@ (8009238 <etharp_query+0x278>)
 800906c:	4613      	mov	r3, r2
 800906e:	005b      	lsls	r3, r3, #1
 8009070:	4413      	add	r3, r2
 8009072:	00db      	lsls	r3, r3, #3
 8009074:	440b      	add	r3, r1
 8009076:	3308      	adds	r3, #8
 8009078:	68fa      	ldr	r2, [r7, #12]
 800907a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800907c:	7c7a      	ldrb	r2, [r7, #17]
 800907e:	496e      	ldr	r1, [pc, #440]	@ (8009238 <etharp_query+0x278>)
 8009080:	4613      	mov	r3, r2
 8009082:	005b      	lsls	r3, r3, #1
 8009084:	4413      	add	r3, r2
 8009086:	00db      	lsls	r3, r3, #3
 8009088:	440b      	add	r3, r1
 800908a:	3314      	adds	r3, #20
 800908c:	781b      	ldrb	r3, [r3, #0]
 800908e:	2b01      	cmp	r3, #1
 8009090:	d00d      	beq.n	80090ae <etharp_query+0xee>
 8009092:	7c7a      	ldrb	r2, [r7, #17]
 8009094:	4968      	ldr	r1, [pc, #416]	@ (8009238 <etharp_query+0x278>)
 8009096:	4613      	mov	r3, r2
 8009098:	005b      	lsls	r3, r3, #1
 800909a:	4413      	add	r3, r2
 800909c:	00db      	lsls	r3, r3, #3
 800909e:	440b      	add	r3, r1
 80090a0:	3314      	adds	r3, #20
 80090a2:	781b      	ldrb	r3, [r3, #0]
 80090a4:	2b01      	cmp	r3, #1
 80090a6:	d802      	bhi.n	80090ae <etharp_query+0xee>
 80090a8:	4864      	ldr	r0, [pc, #400]	@ (800923c <etharp_query+0x27c>)
 80090aa:	f001 fddb 	bl	800ac64 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80090ae:	6a3b      	ldr	r3, [r7, #32]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d102      	bne.n	80090ba <etharp_query+0xfa>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d128      	bne.n	800910c <etharp_query+0x14c>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80090ba:	68b9      	ldr	r1, [r7, #8]
 80090bc:	68f8      	ldr	r0, [r7, #12]
 80090be:	f000 f963 	bl	8009388 <etharp_request>
 80090c2:	4603      	mov	r3, r0
 80090c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (result != ERR_OK) {
 80090c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d117      	bne.n	8009100 <etharp_query+0x140>
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    } else {
      /* ARP request successfully sent */
      if ((arp_table[i].state == ETHARP_STATE_PENDING) && !is_new_entry) {
 80090d0:	7c7a      	ldrb	r2, [r7, #17]
 80090d2:	4959      	ldr	r1, [pc, #356]	@ (8009238 <etharp_query+0x278>)
 80090d4:	4613      	mov	r3, r2
 80090d6:	005b      	lsls	r3, r3, #1
 80090d8:	4413      	add	r3, r2
 80090da:	00db      	lsls	r3, r3, #3
 80090dc:	440b      	add	r3, r1
 80090de:	3314      	adds	r3, #20
 80090e0:	781b      	ldrb	r3, [r3, #0]
 80090e2:	2b01      	cmp	r3, #1
 80090e4:	d10c      	bne.n	8009100 <etharp_query+0x140>
 80090e6:	6a3b      	ldr	r3, [r7, #32]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d109      	bne.n	8009100 <etharp_query+0x140>
        /* A new ARP request has been sent for a pending entry. Reset the ctime to
           not let it expire too fast. */
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: reset ctime for entry %"S16_F"\n", (s16_t)i));
        arp_table[i].ctime = 0;
 80090ec:	7c7a      	ldrb	r2, [r7, #17]
 80090ee:	4952      	ldr	r1, [pc, #328]	@ (8009238 <etharp_query+0x278>)
 80090f0:	4613      	mov	r3, r2
 80090f2:	005b      	lsls	r3, r3, #1
 80090f4:	4413      	add	r3, r2
 80090f6:	00db      	lsls	r3, r3, #3
 80090f8:	440b      	add	r3, r1
 80090fa:	3312      	adds	r3, #18
 80090fc:	2200      	movs	r2, #0
 80090fe:	801a      	strh	r2, [r3, #0]
      }
    }
    if (q == NULL) {
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d102      	bne.n	800910c <etharp_query+0x14c>
      return result;
 8009106:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800910a:	e08e      	b.n	800922a <etharp_query+0x26a>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d102      	bne.n	8009118 <etharp_query+0x158>
 8009112:	484b      	ldr	r0, [pc, #300]	@ (8009240 <etharp_query+0x280>)
 8009114:	f001 fda6 	bl	800ac64 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8009118:	7c7a      	ldrb	r2, [r7, #17]
 800911a:	4947      	ldr	r1, [pc, #284]	@ (8009238 <etharp_query+0x278>)
 800911c:	4613      	mov	r3, r2
 800911e:	005b      	lsls	r3, r3, #1
 8009120:	4413      	add	r3, r2
 8009122:	00db      	lsls	r3, r3, #3
 8009124:	440b      	add	r3, r1
 8009126:	3314      	adds	r3, #20
 8009128:	781b      	ldrb	r3, [r3, #0]
 800912a:	2b01      	cmp	r3, #1
 800912c:	d917      	bls.n	800915e <etharp_query+0x19e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800912e:	4a45      	ldr	r2, [pc, #276]	@ (8009244 <etharp_query+0x284>)
 8009130:	7c7b      	ldrb	r3, [r7, #17]
 8009132:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8009134:	7c7a      	ldrb	r2, [r7, #17]
 8009136:	4613      	mov	r3, r2
 8009138:	005b      	lsls	r3, r3, #1
 800913a:	4413      	add	r3, r2
 800913c:	00db      	lsls	r3, r3, #3
 800913e:	3308      	adds	r3, #8
 8009140:	4a3d      	ldr	r2, [pc, #244]	@ (8009238 <etharp_query+0x278>)
 8009142:	4413      	add	r3, r2
 8009144:	3304      	adds	r3, #4
 8009146:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800914a:	9200      	str	r2, [sp, #0]
 800914c:	697a      	ldr	r2, [r7, #20]
 800914e:	6879      	ldr	r1, [r7, #4]
 8009150:	68f8      	ldr	r0, [r7, #12]
 8009152:	f001 fc85 	bl	800aa60 <ethernet_output>
 8009156:	4603      	mov	r3, r0
 8009158:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800915c:	e063      	b.n	8009226 <etharp_query+0x266>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800915e:	7c7a      	ldrb	r2, [r7, #17]
 8009160:	4935      	ldr	r1, [pc, #212]	@ (8009238 <etharp_query+0x278>)
 8009162:	4613      	mov	r3, r2
 8009164:	005b      	lsls	r3, r3, #1
 8009166:	4413      	add	r3, r2
 8009168:	00db      	lsls	r3, r3, #3
 800916a:	440b      	add	r3, r1
 800916c:	3314      	adds	r3, #20
 800916e:	781b      	ldrb	r3, [r3, #0]
 8009170:	2b01      	cmp	r3, #1
 8009172:	d158      	bne.n	8009226 <etharp_query+0x266>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8009174:	2300      	movs	r3, #0
 8009176:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	61fb      	str	r3, [r7, #28]
    while (p) {
 800917c:	e018      	b.n	80091b0 <etharp_query+0x1f0>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == NULL));
 800917e:	69fb      	ldr	r3, [r7, #28]
 8009180:	895a      	ldrh	r2, [r3, #10]
 8009182:	69fb      	ldr	r3, [r7, #28]
 8009184:	891b      	ldrh	r3, [r3, #8]
 8009186:	429a      	cmp	r2, r3
 8009188:	d106      	bne.n	8009198 <etharp_query+0x1d8>
 800918a:	69fb      	ldr	r3, [r7, #28]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d002      	beq.n	8009198 <etharp_query+0x1d8>
 8009192:	482d      	ldr	r0, [pc, #180]	@ (8009248 <etharp_query+0x288>)
 8009194:	f001 fd66 	bl	800ac64 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8009198:	69fb      	ldr	r3, [r7, #28]
 800919a:	7b1b      	ldrb	r3, [r3, #12]
 800919c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d002      	beq.n	80091aa <etharp_query+0x1ea>
        copy_needed = 1;
 80091a4:	2301      	movs	r3, #1
 80091a6:	61bb      	str	r3, [r7, #24]
        break;
 80091a8:	e005      	b.n	80091b6 <etharp_query+0x1f6>
      }
      p = p->next;
 80091aa:	69fb      	ldr	r3, [r7, #28]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	61fb      	str	r3, [r7, #28]
    while (p) {
 80091b0:	69fb      	ldr	r3, [r7, #28]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d1e3      	bne.n	800917e <etharp_query+0x1be>
    }
    if (copy_needed) {
 80091b6:	69bb      	ldr	r3, [r7, #24]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d007      	beq.n	80091cc <etharp_query+0x20c>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80091bc:	687a      	ldr	r2, [r7, #4]
 80091be:	f44f 7120 	mov.w	r1, #640	@ 0x280
 80091c2:	200e      	movs	r0, #14
 80091c4:	f7fa f964 	bl	8003490 <pbuf_clone>
 80091c8:	61f8      	str	r0, [r7, #28]
 80091ca:	e004      	b.n	80091d6 <etharp_query+0x216>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80091d0:	69f8      	ldr	r0, [r7, #28]
 80091d2:	f7f9 ffb7 	bl	8003144 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80091d6:	69fb      	ldr	r3, [r7, #28]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d021      	beq.n	8009220 <etharp_query+0x260>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80091dc:	7c7a      	ldrb	r2, [r7, #17]
 80091de:	4916      	ldr	r1, [pc, #88]	@ (8009238 <etharp_query+0x278>)
 80091e0:	4613      	mov	r3, r2
 80091e2:	005b      	lsls	r3, r3, #1
 80091e4:	4413      	add	r3, r2
 80091e6:	00db      	lsls	r3, r3, #3
 80091e8:	440b      	add	r3, r1
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d00a      	beq.n	8009206 <etharp_query+0x246>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80091f0:	7c7a      	ldrb	r2, [r7, #17]
 80091f2:	4911      	ldr	r1, [pc, #68]	@ (8009238 <etharp_query+0x278>)
 80091f4:	4613      	mov	r3, r2
 80091f6:	005b      	lsls	r3, r3, #1
 80091f8:	4413      	add	r3, r2
 80091fa:	00db      	lsls	r3, r3, #3
 80091fc:	440b      	add	r3, r1
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	4618      	mov	r0, r3
 8009202:	f7f9 ff13 	bl	800302c <pbuf_free>
      }
      arp_table[i].q = p;
 8009206:	7c7a      	ldrb	r2, [r7, #17]
 8009208:	490b      	ldr	r1, [pc, #44]	@ (8009238 <etharp_query+0x278>)
 800920a:	4613      	mov	r3, r2
 800920c:	005b      	lsls	r3, r3, #1
 800920e:	4413      	add	r3, r2
 8009210:	00db      	lsls	r3, r3, #3
 8009212:	440b      	add	r3, r1
 8009214:	69fa      	ldr	r2, [r7, #28]
 8009216:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8009218:	2300      	movs	r3, #0
 800921a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800921e:	e002      	b.n	8009226 <etharp_query+0x266>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8009220:	23ff      	movs	r3, #255	@ 0xff
 8009222:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8009226:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800922a:	4618      	mov	r0, r3
 800922c:	3728      	adds	r7, #40	@ 0x28
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}
 8009232:	bf00      	nop
 8009234:	0800d26c 	.word	0x0800d26c
 8009238:	24008b6c 	.word	0x24008b6c
 800923c:	0800d27c 	.word	0x0800d27c
 8009240:	0800d260 	.word	0x0800d260
 8009244:	24008c5c 	.word	0x24008c5c
 8009248:	0800d2a4 	.word	0x0800d2a4

0800924c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b08a      	sub	sp, #40	@ 0x28
 8009250:	af02      	add	r7, sp, #8
 8009252:	60f8      	str	r0, [r7, #12]
 8009254:	60b9      	str	r1, [r7, #8]
 8009256:	607a      	str	r2, [r7, #4]
 8009258:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800925a:	2300      	movs	r3, #0
 800925c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d102      	bne.n	800926a <etharp_raw+0x1e>
 8009264:	4834      	ldr	r0, [pc, #208]	@ (8009338 <etharp_raw+0xec>)
 8009266:	f001 fcfd 	bl	800ac64 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800926a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800926e:	211c      	movs	r1, #28
 8009270:	200e      	movs	r0, #14
 8009272:	f7f9 fc35 	bl	8002ae0 <pbuf_alloc>
 8009276:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8009278:	69bb      	ldr	r3, [r7, #24]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d102      	bne.n	8009284 <etharp_raw+0x38>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800927e:	f04f 33ff 	mov.w	r3, #4294967295
 8009282:	e055      	b.n	8009330 <etharp_raw+0xe4>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8009284:	69bb      	ldr	r3, [r7, #24]
 8009286:	895b      	ldrh	r3, [r3, #10]
 8009288:	2b1b      	cmp	r3, #27
 800928a:	d802      	bhi.n	8009292 <etharp_raw+0x46>
 800928c:	482b      	ldr	r0, [pc, #172]	@ (800933c <etharp_raw+0xf0>)
 800928e:	f001 fce9 	bl	800ac64 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8009292:	69bb      	ldr	r3, [r7, #24]
 8009294:	685b      	ldr	r3, [r3, #4]
 8009296:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8009298:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800929a:	4618      	mov	r0, r3
 800929c:	f7f8 fbbc 	bl	8001a18 <lwip_htons>
 80092a0:	4603      	mov	r3, r0
 80092a2:	461a      	mov	r2, r3
 80092a4:	697b      	ldr	r3, [r7, #20]
 80092a6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80092ae:	2b06      	cmp	r3, #6
 80092b0:	d002      	beq.n	80092b8 <etharp_raw+0x6c>
 80092b2:	4823      	ldr	r0, [pc, #140]	@ (8009340 <etharp_raw+0xf4>)
 80092b4:	f001 fcd6 	bl	800ac64 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80092b8:	697b      	ldr	r3, [r7, #20]
 80092ba:	3308      	adds	r3, #8
 80092bc:	2206      	movs	r2, #6
 80092be:	6839      	ldr	r1, [r7, #0]
 80092c0:	4618      	mov	r0, r3
 80092c2:	f001 fdb0 	bl	800ae26 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80092c6:	697b      	ldr	r3, [r7, #20]
 80092c8:	3312      	adds	r3, #18
 80092ca:	2206      	movs	r2, #6
 80092cc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80092ce:	4618      	mov	r0, r3
 80092d0:	f001 fda9 	bl	800ae26 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80092d4:	697b      	ldr	r3, [r7, #20]
 80092d6:	330e      	adds	r3, #14
 80092d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80092da:	6812      	ldr	r2, [r2, #0]
 80092dc:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80092de:	697b      	ldr	r3, [r7, #20]
 80092e0:	3318      	adds	r3, #24
 80092e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80092e4:	6812      	ldr	r2, [r2, #0]
 80092e6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80092e8:	697b      	ldr	r3, [r7, #20]
 80092ea:	2200      	movs	r2, #0
 80092ec:	701a      	strb	r2, [r3, #0]
 80092ee:	2200      	movs	r2, #0
 80092f0:	f042 0201 	orr.w	r2, r2, #1
 80092f4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80092f6:	697b      	ldr	r3, [r7, #20]
 80092f8:	2200      	movs	r2, #0
 80092fa:	f042 0208 	orr.w	r2, r2, #8
 80092fe:	709a      	strb	r2, [r3, #2]
 8009300:	2200      	movs	r2, #0
 8009302:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	2206      	movs	r2, #6
 8009308:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	2204      	movs	r2, #4
 800930e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8009310:	f640 0306 	movw	r3, #2054	@ 0x806
 8009314:	9300      	str	r3, [sp, #0]
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	68ba      	ldr	r2, [r7, #8]
 800931a:	69b9      	ldr	r1, [r7, #24]
 800931c:	68f8      	ldr	r0, [r7, #12]
 800931e:	f001 fb9f 	bl	800aa60 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8009322:	69b8      	ldr	r0, [r7, #24]
 8009324:	f7f9 fe82 	bl	800302c <pbuf_free>
  p = NULL;
 8009328:	2300      	movs	r3, #0
 800932a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800932c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009330:	4618      	mov	r0, r3
 8009332:	3720      	adds	r7, #32
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}
 8009338:	0800d210 	.word	0x0800d210
 800933c:	0800d2c0 	.word	0x0800d2c0
 8009340:	0800d2f4 	.word	0x0800d2f4

08009344 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b088      	sub	sp, #32
 8009348:	af04      	add	r7, sp, #16
 800934a:	60f8      	str	r0, [r7, #12]
 800934c:	60b9      	str	r1, [r7, #8]
 800934e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8009360:	2201      	movs	r2, #1
 8009362:	9203      	str	r2, [sp, #12]
 8009364:	68ba      	ldr	r2, [r7, #8]
 8009366:	9202      	str	r2, [sp, #8]
 8009368:	4a06      	ldr	r2, [pc, #24]	@ (8009384 <etharp_request_dst+0x40>)
 800936a:	9201      	str	r2, [sp, #4]
 800936c:	9300      	str	r3, [sp, #0]
 800936e:	4603      	mov	r3, r0
 8009370:	687a      	ldr	r2, [r7, #4]
 8009372:	68f8      	ldr	r0, [r7, #12]
 8009374:	f7ff ff6a 	bl	800924c <etharp_raw>
 8009378:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800937a:	4618      	mov	r0, r3
 800937c:	3710      	adds	r7, #16
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}
 8009382:	bf00      	nop
 8009384:	0800d6c0 	.word	0x0800d6c0

08009388 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b082      	sub	sp, #8
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
 8009390:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8009392:	4a05      	ldr	r2, [pc, #20]	@ (80093a8 <etharp_request+0x20>)
 8009394:	6839      	ldr	r1, [r7, #0]
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f7ff ffd4 	bl	8009344 <etharp_request_dst>
 800939c:	4603      	mov	r3, r0
}
 800939e:	4618      	mov	r0, r3
 80093a0:	3708      	adds	r7, #8
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}
 80093a6:	bf00      	nop
 80093a8:	0800d6b8 	.word	0x0800d6b8

080093ac <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b08e      	sub	sp, #56	@ 0x38
 80093b0:	af04      	add	r7, sp, #16
 80093b2:	6078      	str	r0, [r7, #4]
 80093b4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80093b6:	4b88      	ldr	r3, [pc, #544]	@ (80095d8 <icmp_input+0x22c>)
 80093b8:	689b      	ldr	r3, [r3, #8]
 80093ba:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80093bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093be:	781b      	ldrb	r3, [r3, #0]
 80093c0:	f003 030f 	and.w	r3, r3, #15
 80093c4:	b2db      	uxtb	r3, r3
 80093c6:	009b      	lsls	r3, r3, #2
 80093c8:	b2db      	uxtb	r3, r3
 80093ca:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 80093cc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80093ce:	2b13      	cmp	r3, #19
 80093d0:	f240 80eb 	bls.w	80095aa <icmp_input+0x1fe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	895b      	ldrh	r3, [r3, #10]
 80093d8:	2b03      	cmp	r3, #3
 80093da:	f240 80e8 	bls.w	80095ae <icmp_input+0x202>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	685b      	ldr	r3, [r3, #4]
 80093e2:	781b      	ldrb	r3, [r3, #0]
 80093e4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80093e8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	f000 80d5 	beq.w	800959c <icmp_input+0x1f0>
 80093f2:	2b08      	cmp	r3, #8
 80093f4:	f040 80d5 	bne.w	80095a2 <icmp_input+0x1f6>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80093f8:	4b78      	ldr	r3, [pc, #480]	@ (80095dc <icmp_input+0x230>)
 80093fa:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80093fc:	4b76      	ldr	r3, [pc, #472]	@ (80095d8 <icmp_input+0x22c>)
 80093fe:	695b      	ldr	r3, [r3, #20]
 8009400:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009404:	2be0      	cmp	r3, #224	@ 0xe0
 8009406:	f000 80d9 	beq.w	80095bc <icmp_input+0x210>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800940a:	4b73      	ldr	r3, [pc, #460]	@ (80095d8 <icmp_input+0x22c>)
 800940c:	695b      	ldr	r3, [r3, #20]
 800940e:	4a72      	ldr	r2, [pc, #456]	@ (80095d8 <icmp_input+0x22c>)
 8009410:	6812      	ldr	r2, [r2, #0]
 8009412:	4611      	mov	r1, r2
 8009414:	4618      	mov	r0, r3
 8009416:	f000 fc79 	bl	8009d0c <ip4_addr_isbroadcast_u32>
 800941a:	4603      	mov	r3, r0
 800941c:	2b00      	cmp	r3, #0
 800941e:	f040 80cf 	bne.w	80095c0 <icmp_input+0x214>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	891b      	ldrh	r3, [r3, #8]
 8009426:	2b07      	cmp	r3, #7
 8009428:	f240 80c3 	bls.w	80095b2 <icmp_input+0x206>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f7f8 fc4d 	bl	8001ccc <inet_chksum_pbuf>
 8009432:	4603      	mov	r3, r0
 8009434:	2b00      	cmp	r3, #0
 8009436:	d003      	beq.n	8009440 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f7f9 fdf7 	bl	800302c <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 800943e:	e0c8      	b.n	80095d2 <icmp_input+0x226>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8009440:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009442:	330e      	adds	r3, #14
 8009444:	4619      	mov	r1, r3
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f7f9 fd6c 	bl	8002f24 <pbuf_add_header>
 800944c:	4603      	mov	r3, r0
 800944e:	2b00      	cmp	r3, #0
 8009450:	d048      	beq.n	80094e4 <icmp_input+0x138>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	891a      	ldrh	r2, [r3, #8]
 8009456:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009458:	4413      	add	r3, r2
 800945a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	891b      	ldrh	r3, [r3, #8]
 8009460:	8b7a      	ldrh	r2, [r7, #26]
 8009462:	429a      	cmp	r2, r3
 8009464:	f0c0 80ae 	bcc.w	80095c4 <icmp_input+0x218>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8009468:	8b7b      	ldrh	r3, [r7, #26]
 800946a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800946e:	4619      	mov	r1, r3
 8009470:	200e      	movs	r0, #14
 8009472:	f7f9 fb35 	bl	8002ae0 <pbuf_alloc>
 8009476:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8009478:	697b      	ldr	r3, [r7, #20]
 800947a:	2b00      	cmp	r3, #0
 800947c:	f000 80a4 	beq.w	80095c8 <icmp_input+0x21c>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8009480:	697b      	ldr	r3, [r7, #20]
 8009482:	895b      	ldrh	r3, [r3, #10]
 8009484:	461a      	mov	r2, r3
 8009486:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009488:	3308      	adds	r3, #8
 800948a:	429a      	cmp	r2, r3
 800948c:	d203      	bcs.n	8009496 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header\n"));
          pbuf_free(r);
 800948e:	6978      	ldr	r0, [r7, #20]
 8009490:	f7f9 fdcc 	bl	800302c <pbuf_free>
          goto icmperr;
 8009494:	e099      	b.n	80095ca <icmp_input+0x21e>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8009496:	697b      	ldr	r3, [r7, #20]
 8009498:	685b      	ldr	r3, [r3, #4]
 800949a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800949c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800949e:	4618      	mov	r0, r3
 80094a0:	f001 fcc1 	bl	800ae26 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80094a4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80094a6:	4619      	mov	r1, r3
 80094a8:	6978      	ldr	r0, [r7, #20]
 80094aa:	f7f9 fd4b 	bl	8002f44 <pbuf_remove_header>
 80094ae:	4603      	mov	r3, r0
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d006      	beq.n	80094c2 <icmp_input+0x116>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed", 0);
 80094b4:	484a      	ldr	r0, [pc, #296]	@ (80095e0 <icmp_input+0x234>)
 80094b6:	f001 fbd5 	bl	800ac64 <iprintf>
          pbuf_free(r);
 80094ba:	6978      	ldr	r0, [r7, #20]
 80094bc:	f7f9 fdb6 	bl	800302c <pbuf_free>
          goto icmperr;
 80094c0:	e083      	b.n	80095ca <icmp_input+0x21e>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80094c2:	6879      	ldr	r1, [r7, #4]
 80094c4:	6978      	ldr	r0, [r7, #20]
 80094c6:	f7f9 fea7 	bl	8003218 <pbuf_copy>
 80094ca:	4603      	mov	r3, r0
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d003      	beq.n	80094d8 <icmp_input+0x12c>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed\n"));
          pbuf_free(r);
 80094d0:	6978      	ldr	r0, [r7, #20]
 80094d2:	f7f9 fdab 	bl	800302c <pbuf_free>
          goto icmperr;
 80094d6:	e078      	b.n	80095ca <icmp_input+0x21e>
        }
        /* free the original p */
        pbuf_free(p);
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f7f9 fda7 	bl	800302c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	607b      	str	r3, [r7, #4]
 80094e2:	e00c      	b.n	80094fe <icmp_input+0x152>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80094e4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80094e6:	330e      	adds	r3, #14
 80094e8:	4619      	mov	r1, r3
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f7f9 fd2a 	bl	8002f44 <pbuf_remove_header>
 80094f0:	4603      	mov	r3, r0
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d003      	beq.n	80094fe <icmp_input+0x152>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed", 0);
 80094f6:	483b      	ldr	r0, [pc, #236]	@ (80095e4 <icmp_input+0x238>)
 80094f8:	f001 fbb4 	bl	800ac64 <iprintf>
          goto icmperr;
 80094fc:	e065      	b.n	80095ca <icmp_input+0x21e>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	685b      	ldr	r3, [r3, #4]
 8009502:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8009504:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009506:	4619      	mov	r1, r3
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f7f9 fd0b 	bl	8002f24 <pbuf_add_header>
 800950e:	4603      	mov	r3, r0
 8009510:	2b00      	cmp	r3, #0
 8009512:	d145      	bne.n	80095a0 <icmp_input+0x1f4>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet\n"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	685b      	ldr	r3, [r3, #4]
 8009518:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800951a:	69fb      	ldr	r3, [r7, #28]
 800951c:	681a      	ldr	r2, [r3, #0]
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8009522:	4b2d      	ldr	r3, [pc, #180]	@ (80095d8 <icmp_input+0x22c>)
 8009524:	691a      	ldr	r2, [r3, #16]
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800952a:	693b      	ldr	r3, [r7, #16]
 800952c:	2200      	movs	r2, #0
 800952e:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	885b      	ldrh	r3, [r3, #2]
 8009534:	b29b      	uxth	r3, r3
 8009536:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 800953a:	4293      	cmp	r3, r2
 800953c:	d907      	bls.n	800954e <icmp_input+0x1a2>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 800953e:	693b      	ldr	r3, [r7, #16]
 8009540:	885b      	ldrh	r3, [r3, #2]
 8009542:	b29b      	uxth	r3, r3
 8009544:	3309      	adds	r3, #9
 8009546:	b29a      	uxth	r2, r3
 8009548:	693b      	ldr	r3, [r7, #16]
 800954a:	805a      	strh	r2, [r3, #2]
 800954c:	e006      	b.n	800955c <icmp_input+0x1b0>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 800954e:	693b      	ldr	r3, [r7, #16]
 8009550:	885b      	ldrh	r3, [r3, #2]
 8009552:	b29b      	uxth	r3, r3
 8009554:	3308      	adds	r3, #8
 8009556:	b29a      	uxth	r2, r3
 8009558:	693b      	ldr	r3, [r7, #16]
 800955a:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	22ff      	movs	r2, #255	@ 0xff
 8009560:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	2200      	movs	r2, #0
 8009566:	729a      	strb	r2, [r3, #10]
 8009568:	2200      	movs	r2, #0
 800956a:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_IP) {
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 800956c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800956e:	4619      	mov	r1, r3
 8009570:	68f8      	ldr	r0, [r7, #12]
 8009572:	f7f8 fb99 	bl	8001ca8 <inet_chksum>
 8009576:	4603      	mov	r3, r0
 8009578:	461a      	mov	r2, r3
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	815a      	strh	r2, [r3, #10]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	9302      	str	r3, [sp, #8]
 8009582:	2301      	movs	r3, #1
 8009584:	9301      	str	r3, [sp, #4]
 8009586:	2300      	movs	r3, #0
 8009588:	9300      	str	r3, [sp, #0]
 800958a:	23ff      	movs	r3, #255	@ 0xff
 800958c:	2200      	movs	r2, #0
 800958e:	69f9      	ldr	r1, [r7, #28]
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f000 fa89 	bl	8009aa8 <ip4_output_if>
 8009596:	4603      	mov	r3, r0
 8009598:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800959a:	e001      	b.n	80095a0 <icmp_input+0x1f4>
      break;
 800959c:	bf00      	nop
 800959e:	e000      	b.n	80095a2 <icmp_input+0x1f6>
      break;
 80095a0:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f7f9 fd42 	bl	800302c <pbuf_free>
  return;
 80095a8:	e013      	b.n	80095d2 <icmp_input+0x226>
    goto lenerr;
 80095aa:	bf00      	nop
 80095ac:	e002      	b.n	80095b4 <icmp_input+0x208>
    goto lenerr;
 80095ae:	bf00      	nop
 80095b0:	e000      	b.n	80095b4 <icmp_input+0x208>
        goto lenerr;
 80095b2:	bf00      	nop
lenerr:
  pbuf_free(p);
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f7f9 fd39 	bl	800302c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80095ba:	e00a      	b.n	80095d2 <icmp_input+0x226>
        goto icmperr;
 80095bc:	bf00      	nop
 80095be:	e004      	b.n	80095ca <icmp_input+0x21e>
        goto icmperr;
 80095c0:	bf00      	nop
 80095c2:	e002      	b.n	80095ca <icmp_input+0x21e>
          goto icmperr;
 80095c4:	bf00      	nop
 80095c6:	e000      	b.n	80095ca <icmp_input+0x21e>
          goto icmperr;
 80095c8:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f7f9 fd2e 	bl	800302c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80095d0:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80095d2:	3728      	adds	r7, #40	@ 0x28
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}
 80095d8:	240024dc 	.word	0x240024dc
 80095dc:	240024f0 	.word	0x240024f0
 80095e0:	0800d338 	.word	0x0800d338
 80095e4:	0800d36c 	.word	0x0800d36c

080095e8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b082      	sub	sp, #8
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
 80095f0:	460b      	mov	r3, r1
 80095f2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80095f4:	78fb      	ldrb	r3, [r7, #3]
 80095f6:	461a      	mov	r2, r3
 80095f8:	2103      	movs	r1, #3
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f000 f814 	bl	8009628 <icmp_send_response>
}
 8009600:	bf00      	nop
 8009602:	3708      	adds	r7, #8
 8009604:	46bd      	mov	sp, r7
 8009606:	bd80      	pop	{r7, pc}

08009608 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b082      	sub	sp, #8
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	460b      	mov	r3, r1
 8009612:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8009614:	78fb      	ldrb	r3, [r7, #3]
 8009616:	461a      	mov	r2, r3
 8009618:	210b      	movs	r1, #11
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f000 f804 	bl	8009628 <icmp_send_response>
}
 8009620:	bf00      	nop
 8009622:	3708      	adds	r7, #8
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}

08009628 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b08c      	sub	sp, #48	@ 0x30
 800962c:	af04      	add	r7, sp, #16
 800962e:	6078      	str	r0, [r7, #4]
 8009630:	460b      	mov	r3, r1
 8009632:	70fb      	strb	r3, [r7, #3]
 8009634:	4613      	mov	r3, r2
 8009636:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* Keep IP header + up to 8 bytes */
  response_pkt_len = IP_HLEN + ICMP_DEST_UNREACH_DATASIZE;
 8009638:	231c      	movs	r3, #28
 800963a:	83fb      	strh	r3, [r7, #30]
  if (p->tot_len < response_pkt_len) {
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	891b      	ldrh	r3, [r3, #8]
 8009640:	8bfa      	ldrh	r2, [r7, #30]
 8009642:	429a      	cmp	r2, r3
 8009644:	d902      	bls.n	800964c <icmp_send_response+0x24>
    response_pkt_len = p->tot_len;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	891b      	ldrh	r3, [r3, #8]
 800964a:	83fb      	strh	r3, [r7, #30]
  }

  /* ICMP header + part of original packet */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_hdr) + response_pkt_len, PBUF_RAM);
 800964c:	8bfb      	ldrh	r3, [r7, #30]
 800964e:	3308      	adds	r3, #8
 8009650:	b29b      	uxth	r3, r3
 8009652:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8009656:	4619      	mov	r1, r3
 8009658:	2022      	movs	r0, #34	@ 0x22
 800965a:	f7f9 fa41 	bl	8002ae0 <pbuf_alloc>
 800965e:	61b8      	str	r0, [r7, #24]
  if (q == NULL) {
 8009660:	69bb      	ldr	r3, [r7, #24]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d050      	beq.n	8009708 <icmp_send_response+0xe0>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_send_response: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8009666:	69bb      	ldr	r3, [r7, #24]
 8009668:	895b      	ldrh	r3, [r3, #10]
 800966a:	461a      	mov	r2, r3
 800966c:	8bfb      	ldrh	r3, [r7, #30]
 800966e:	3308      	adds	r3, #8
 8009670:	429a      	cmp	r2, r3
 8009672:	d202      	bcs.n	800967a <icmp_send_response+0x52>
 8009674:	4826      	ldr	r0, [pc, #152]	@ (8009710 <icmp_send_response+0xe8>)
 8009676:	f001 faf5 	bl	800ac64 <iprintf>
              (q->len >= (sizeof(struct icmp_hdr) + response_pkt_len)));

  iphdr = (struct ip_hdr *)p->payload;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	685b      	ldr	r3, [r3, #4]
 800967e:	617b      	str	r3, [r7, #20]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_hdr *)q->payload;
 8009680:	69bb      	ldr	r3, [r7, #24]
 8009682:	685b      	ldr	r3, [r3, #4]
 8009684:	613b      	str	r3, [r7, #16]
  icmphdr->type = type;
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	78fa      	ldrb	r2, [r7, #3]
 800968a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800968c:	693b      	ldr	r3, [r7, #16]
 800968e:	78ba      	ldrb	r2, [r7, #2]
 8009690:	705a      	strb	r2, [r3, #1]
  icmphdr->data = 0;
 8009692:	693b      	ldr	r3, [r7, #16]
 8009694:	2200      	movs	r2, #0
 8009696:	711a      	strb	r2, [r3, #4]
 8009698:	2200      	movs	r2, #0
 800969a:	715a      	strb	r2, [r3, #5]
 800969c:	2200      	movs	r2, #0
 800969e:	719a      	strb	r2, [r3, #6]
 80096a0:	2200      	movs	r2, #0
 80096a2:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  pbuf_copy_partial_pbuf(q, p, response_pkt_len, sizeof(struct icmp_hdr));
 80096a4:	8bfa      	ldrh	r2, [r7, #30]
 80096a6:	2308      	movs	r3, #8
 80096a8:	6879      	ldr	r1, [r7, #4]
 80096aa:	69b8      	ldr	r0, [r7, #24]
 80096ac:	f7f9 fdcc 	bl	8003248 <pbuf_copy_partial_pbuf>

  ip4_addr_copy(iphdr_src, iphdr->src);
 80096b0:	697b      	ldr	r3, [r7, #20]
 80096b2:	68db      	ldr	r3, [r3, #12]
 80096b4:	60bb      	str	r3, [r7, #8]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80096b6:	f107 0308 	add.w	r3, r7, #8
 80096ba:	4618      	mov	r0, r3
 80096bc:	f000 f82a 	bl	8009714 <ip4_route>
 80096c0:	60f8      	str	r0, [r7, #12]
#endif
  if (netif != NULL) {
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d01b      	beq.n	8009700 <icmp_send_response+0xd8>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80096c8:	693b      	ldr	r3, [r7, #16]
 80096ca:	2200      	movs	r2, #0
 80096cc:	709a      	strb	r2, [r3, #2]
 80096ce:	2200      	movs	r2, #0
 80096d0:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 80096d2:	69bb      	ldr	r3, [r7, #24]
 80096d4:	895b      	ldrh	r3, [r3, #10]
 80096d6:	4619      	mov	r1, r3
 80096d8:	6938      	ldr	r0, [r7, #16]
 80096da:	f7f8 fae5 	bl	8001ca8 <inet_chksum>
 80096de:	4603      	mov	r3, r0
 80096e0:	461a      	mov	r2, r3
 80096e2:	693b      	ldr	r3, [r7, #16]
 80096e4:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80096e6:	f107 0208 	add.w	r2, r7, #8
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	9302      	str	r3, [sp, #8]
 80096ee:	2301      	movs	r3, #1
 80096f0:	9301      	str	r3, [sp, #4]
 80096f2:	2300      	movs	r3, #0
 80096f4:	9300      	str	r3, [sp, #0]
 80096f6:	23ff      	movs	r3, #255	@ 0xff
 80096f8:	2100      	movs	r1, #0
 80096fa:	69b8      	ldr	r0, [r7, #24]
 80096fc:	f000 f9d4 	bl	8009aa8 <ip4_output_if>
  }
  pbuf_free(q);
 8009700:	69b8      	ldr	r0, [r7, #24]
 8009702:	f7f9 fc93 	bl	800302c <pbuf_free>
 8009706:	e000      	b.n	800970a <icmp_send_response+0xe2>
    return;
 8009708:	bf00      	nop
}
 800970a:	3720      	adds	r7, #32
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}
 8009710:	0800d3a0 	.word	0x0800d3a0

08009714 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8009714:	b480      	push	{r7}
 8009716:	b085      	sub	sp, #20
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800971c:	4b33      	ldr	r3, [pc, #204]	@ (80097ec <ip4_route+0xd8>)
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	60fb      	str	r3, [r7, #12]
 8009722:	e036      	b.n	8009792 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800972a:	f003 0301 	and.w	r3, r3, #1
 800972e:	b2db      	uxtb	r3, r3
 8009730:	2b00      	cmp	r3, #0
 8009732:	d02b      	beq.n	800978c <ip4_route+0x78>
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800973a:	089b      	lsrs	r3, r3, #2
 800973c:	f003 0301 	and.w	r3, r3, #1
 8009740:	b2db      	uxtb	r3, r3
 8009742:	2b00      	cmp	r3, #0
 8009744:	d022      	beq.n	800978c <ip4_route+0x78>
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	3304      	adds	r3, #4
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d01d      	beq.n	800978c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_net_eq(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681a      	ldr	r2, [r3, #0]
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	3304      	adds	r3, #4
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	405a      	eors	r2, r3
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	3308      	adds	r3, #8
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	4013      	ands	r3, r2
 8009764:	2b00      	cmp	r3, #0
 8009766:	d101      	bne.n	800976c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	e038      	b.n	80097de <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_eq(dest, netif_ip4_gw(netif))) {
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009772:	f003 0302 	and.w	r3, r3, #2
 8009776:	2b00      	cmp	r3, #0
 8009778:	d108      	bne.n	800978c <ip4_route+0x78>
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681a      	ldr	r2, [r3, #0]
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	330c      	adds	r3, #12
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	429a      	cmp	r2, r3
 8009786:	d101      	bne.n	800978c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	e028      	b.n	80097de <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	60fb      	str	r3, [r7, #12]
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d1c5      	bne.n	8009724 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8009798:	4b15      	ldr	r3, [pc, #84]	@ (80097f0 <ip4_route+0xdc>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d01a      	beq.n	80097d6 <ip4_route+0xc2>
 80097a0:	4b13      	ldr	r3, [pc, #76]	@ (80097f0 <ip4_route+0xdc>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80097a8:	f003 0301 	and.w	r3, r3, #1
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d012      	beq.n	80097d6 <ip4_route+0xc2>
 80097b0:	4b0f      	ldr	r3, [pc, #60]	@ (80097f0 <ip4_route+0xdc>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80097b8:	f003 0304 	and.w	r3, r3, #4
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d00a      	beq.n	80097d6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80097c0:	4b0b      	ldr	r3, [pc, #44]	@ (80097f0 <ip4_route+0xdc>)
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	3304      	adds	r3, #4
 80097c6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d004      	beq.n	80097d6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	b2db      	uxtb	r3, r3
 80097d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80097d4:	d101      	bne.n	80097da <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80097d6:	2300      	movs	r3, #0
 80097d8:	e001      	b.n	80097de <ip4_route+0xca>
  }

  return netif_default;
 80097da:	4b05      	ldr	r3, [pc, #20]	@ (80097f0 <ip4_route+0xdc>)
 80097dc:	681b      	ldr	r3, [r3, #0]
}
 80097de:	4618      	mov	r0, r3
 80097e0:	3714      	adds	r7, #20
 80097e2:	46bd      	mov	sp, r7
 80097e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e8:	4770      	bx	lr
 80097ea:	bf00      	nop
 80097ec:	24008b00 	.word	0x24008b00
 80097f0:	24008b04 	.word	0x24008b04

080097f4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b082      	sub	sp, #8
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009802:	f003 0301 	and.w	r3, r3, #1
 8009806:	b2db      	uxtb	r3, r3
 8009808:	2b00      	cmp	r3, #0
 800980a:	d016      	beq.n	800983a <ip4_input_accept+0x46>
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	3304      	adds	r3, #4
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d011      	beq.n	800983a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_eq(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8009816:	4b0b      	ldr	r3, [pc, #44]	@ (8009844 <ip4_input_accept+0x50>)
 8009818:	695a      	ldr	r2, [r3, #20]
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	3304      	adds	r3, #4
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	429a      	cmp	r2, r3
 8009822:	d008      	beq.n	8009836 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8009824:	4b07      	ldr	r3, [pc, #28]	@ (8009844 <ip4_input_accept+0x50>)
 8009826:	695b      	ldr	r3, [r3, #20]
 8009828:	6879      	ldr	r1, [r7, #4]
 800982a:	4618      	mov	r0, r3
 800982c:	f000 fa6e 	bl	8009d0c <ip4_addr_isbroadcast_u32>
 8009830:	4603      	mov	r3, r0
    if (ip4_addr_eq(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8009832:	2b00      	cmp	r3, #0
 8009834:	d001      	beq.n	800983a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8009836:	2301      	movs	r3, #1
 8009838:	e000      	b.n	800983c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800983a:	2300      	movs	r3, #0
}
 800983c:	4618      	mov	r0, r3
 800983e:	3708      	adds	r7, #8
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}
 8009844:	240024dc 	.word	0x240024dc

08009848 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b086      	sub	sp, #24
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
 8009850:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	685b      	ldr	r3, [r3, #4]
 8009856:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8009858:	697b      	ldr	r3, [r7, #20]
 800985a:	781b      	ldrb	r3, [r3, #0]
 800985c:	091b      	lsrs	r3, r3, #4
 800985e:	b2db      	uxtb	r3, r3
 8009860:	2b04      	cmp	r3, #4
 8009862:	d004      	beq.n	800986e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f7f9 fbe1 	bl	800302c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800986a:	2300      	movs	r3, #0
 800986c:	e114      	b.n	8009a98 <ip4_input+0x250>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800986e:	697b      	ldr	r3, [r7, #20]
 8009870:	781b      	ldrb	r3, [r3, #0]
 8009872:	f003 030f 	and.w	r3, r3, #15
 8009876:	b2db      	uxtb	r3, r3
 8009878:	009b      	lsls	r3, r3, #2
 800987a:	b2db      	uxtb	r3, r3
 800987c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	885b      	ldrh	r3, [r3, #2]
 8009882:	b29b      	uxth	r3, r3
 8009884:	4618      	mov	r0, r3
 8009886:	f7f8 f8c7 	bl	8001a18 <lwip_htons>
 800988a:	4603      	mov	r3, r0
 800988c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	891b      	ldrh	r3, [r3, #8]
 8009892:	89ba      	ldrh	r2, [r7, #12]
 8009894:	429a      	cmp	r2, r3
 8009896:	d204      	bcs.n	80098a2 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8009898:	89bb      	ldrh	r3, [r7, #12]
 800989a:	4619      	mov	r1, r3
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	f7f9 fa61 	bl	8002d64 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	895b      	ldrh	r3, [r3, #10]
 80098a6:	89fa      	ldrh	r2, [r7, #14]
 80098a8:	429a      	cmp	r2, r3
 80098aa:	d807      	bhi.n	80098bc <ip4_input+0x74>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	891b      	ldrh	r3, [r3, #8]
 80098b0:	89ba      	ldrh	r2, [r7, #12]
 80098b2:	429a      	cmp	r2, r3
 80098b4:	d802      	bhi.n	80098bc <ip4_input+0x74>
 80098b6:	89fb      	ldrh	r3, [r7, #14]
 80098b8:	2b13      	cmp	r3, #19
 80098ba:	d804      	bhi.n	80098c6 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f7f9 fbb5 	bl	800302c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80098c2:	2300      	movs	r3, #0
 80098c4:	e0e8      	b.n	8009a98 <ip4_input+0x250>
  }

  /* verify checksum */
#if CHECKSUM_CHECK_IP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_IP) {
    if (inet_chksum(iphdr, iphdr_hlen) != 0) {
 80098c6:	89fb      	ldrh	r3, [r7, #14]
 80098c8:	4619      	mov	r1, r3
 80098ca:	6978      	ldr	r0, [r7, #20]
 80098cc:	f7f8 f9ec 	bl	8001ca8 <inet_chksum>
 80098d0:	4603      	mov	r3, r0
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d004      	beq.n	80098e0 <ip4_input+0x98>

      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("Checksum (0x%"X16_F") failed, IP packet dropped.\n", inet_chksum(iphdr, iphdr_hlen)));
      ip4_debug_print(p);
      pbuf_free(p);
 80098d6:	6878      	ldr	r0, [r7, #4]
 80098d8:	f7f9 fba8 	bl	800302c <pbuf_free>
      IP_STATS_INC(ip.chkerr);
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinhdrerrors);
      return ERR_OK;
 80098dc:	2300      	movs	r3, #0
 80098de:	e0db      	b.n	8009a98 <ip4_input+0x250>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80098e0:	697b      	ldr	r3, [r7, #20]
 80098e2:	691b      	ldr	r3, [r3, #16]
 80098e4:	4a6e      	ldr	r2, [pc, #440]	@ (8009aa0 <ip4_input+0x258>)
 80098e6:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	68db      	ldr	r3, [r3, #12]
 80098ec:	4a6c      	ldr	r2, [pc, #432]	@ (8009aa0 <ip4_input+0x258>)
 80098ee:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80098f0:	4b6b      	ldr	r3, [pc, #428]	@ (8009aa0 <ip4_input+0x258>)
 80098f2:	695b      	ldr	r3, [r3, #20]
 80098f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80098f8:	2be0      	cmp	r3, #224	@ 0xe0
 80098fa:	d112      	bne.n	8009922 <ip4_input+0xda>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009902:	f003 0301 	and.w	r3, r3, #1
 8009906:	b2db      	uxtb	r3, r3
 8009908:	2b00      	cmp	r3, #0
 800990a:	d007      	beq.n	800991c <ip4_input+0xd4>
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	3304      	adds	r3, #4
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d002      	beq.n	800991c <ip4_input+0xd4>
      netif = inp;
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	613b      	str	r3, [r7, #16]
 800991a:	e02a      	b.n	8009972 <ip4_input+0x12a>
    } else {
      netif = NULL;
 800991c:	2300      	movs	r3, #0
 800991e:	613b      	str	r3, [r7, #16]
 8009920:	e027      	b.n	8009972 <ip4_input+0x12a>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8009922:	6838      	ldr	r0, [r7, #0]
 8009924:	f7ff ff66 	bl	80097f4 <ip4_input_accept>
 8009928:	4603      	mov	r3, r0
 800992a:	2b00      	cmp	r3, #0
 800992c:	d002      	beq.n	8009934 <ip4_input+0xec>
      netif = inp;
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	613b      	str	r3, [r7, #16]
 8009932:	e01e      	b.n	8009972 <ip4_input+0x12a>
    } else {
      netif = NULL;
 8009934:	2300      	movs	r3, #0
 8009936:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8009938:	4b59      	ldr	r3, [pc, #356]	@ (8009aa0 <ip4_input+0x258>)
 800993a:	695b      	ldr	r3, [r3, #20]
 800993c:	b2db      	uxtb	r3, r3
 800993e:	2b7f      	cmp	r3, #127	@ 0x7f
 8009940:	d017      	beq.n	8009972 <ip4_input+0x12a>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8009942:	4b58      	ldr	r3, [pc, #352]	@ (8009aa4 <ip4_input+0x25c>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	613b      	str	r3, [r7, #16]
 8009948:	e00e      	b.n	8009968 <ip4_input+0x120>
          if (netif == inp) {
 800994a:	693a      	ldr	r2, [r7, #16]
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	429a      	cmp	r2, r3
 8009950:	d006      	beq.n	8009960 <ip4_input+0x118>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8009952:	6938      	ldr	r0, [r7, #16]
 8009954:	f7ff ff4e 	bl	80097f4 <ip4_input_accept>
 8009958:	4603      	mov	r3, r0
 800995a:	2b00      	cmp	r3, #0
 800995c:	d108      	bne.n	8009970 <ip4_input+0x128>
 800995e:	e000      	b.n	8009962 <ip4_input+0x11a>
            continue;
 8009960:	bf00      	nop
        NETIF_FOREACH(netif) {
 8009962:	693b      	ldr	r3, [r7, #16]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	613b      	str	r3, [r7, #16]
 8009968:	693b      	ldr	r3, [r7, #16]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d1ed      	bne.n	800994a <ip4_input+0x102>
 800996e:	e000      	b.n	8009972 <ip4_input+0x12a>
            break;
 8009970:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8009972:	4b4b      	ldr	r3, [pc, #300]	@ (8009aa0 <ip4_input+0x258>)
 8009974:	691b      	ldr	r3, [r3, #16]
 8009976:	6839      	ldr	r1, [r7, #0]
 8009978:	4618      	mov	r0, r3
 800997a:	f000 f9c7 	bl	8009d0c <ip4_addr_isbroadcast_u32>
 800997e:	4603      	mov	r3, r0
 8009980:	2b00      	cmp	r3, #0
 8009982:	d105      	bne.n	8009990 <ip4_input+0x148>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8009984:	4b46      	ldr	r3, [pc, #280]	@ (8009aa0 <ip4_input+0x258>)
 8009986:	691b      	ldr	r3, [r3, #16]
 8009988:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800998c:	2be0      	cmp	r3, #224	@ 0xe0
 800998e:	d104      	bne.n	800999a <ip4_input+0x152>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f7f9 fb4b 	bl	800302c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8009996:	2300      	movs	r3, #0
 8009998:	e07e      	b.n	8009a98 <ip4_input+0x250>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d104      	bne.n	80099aa <ip4_input+0x162>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f7f9 fb43 	bl	800302c <pbuf_free>
    return ERR_OK;
 80099a6:	2300      	movs	r3, #0
 80099a8:	e076      	b.n	8009a98 <ip4_input+0x250>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	88db      	ldrh	r3, [r3, #6]
 80099ae:	b29b      	uxth	r3, r3
 80099b0:	461a      	mov	r2, r3
 80099b2:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 80099b6:	4013      	ands	r3, r2
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d00b      	beq.n	80099d4 <ip4_input+0x18c>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f000 fcb7 	bl	800a330 <ip4_reass>
 80099c2:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d101      	bne.n	80099ce <ip4_input+0x186>
      return ERR_OK;
 80099ca:	2300      	movs	r3, #0
 80099cc:	e064      	b.n	8009a98 <ip4_input+0x250>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	685b      	ldr	r3, [r3, #4]
 80099d2:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80099d4:	4a32      	ldr	r2, [pc, #200]	@ (8009aa0 <ip4_input+0x258>)
 80099d6:	693b      	ldr	r3, [r7, #16]
 80099d8:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80099da:	4a31      	ldr	r2, [pc, #196]	@ (8009aa0 <ip4_input+0x258>)
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80099e0:	4a2f      	ldr	r2, [pc, #188]	@ (8009aa0 <ip4_input+0x258>)
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80099e6:	697b      	ldr	r3, [r7, #20]
 80099e8:	781b      	ldrb	r3, [r3, #0]
 80099ea:	f003 030f 	and.w	r3, r3, #15
 80099ee:	b2db      	uxtb	r3, r3
 80099f0:	009b      	lsls	r3, r3, #2
 80099f2:	b2db      	uxtb	r3, r3
 80099f4:	461a      	mov	r2, r3
 80099f6:	4b2a      	ldr	r3, [pc, #168]	@ (8009aa0 <ip4_input+0x258>)
 80099f8:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80099fa:	89fb      	ldrh	r3, [r7, #14]
 80099fc:	4619      	mov	r1, r3
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f7f9 faa0 	bl	8002f44 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	7a5b      	ldrb	r3, [r3, #9]
 8009a08:	2b11      	cmp	r3, #17
 8009a0a:	d006      	beq.n	8009a1a <ip4_input+0x1d2>
 8009a0c:	2b11      	cmp	r3, #17
 8009a0e:	dc13      	bgt.n	8009a38 <ip4_input+0x1f0>
 8009a10:	2b01      	cmp	r3, #1
 8009a12:	d00c      	beq.n	8009a2e <ip4_input+0x1e6>
 8009a14:	2b06      	cmp	r3, #6
 8009a16:	d005      	beq.n	8009a24 <ip4_input+0x1dc>
 8009a18:	e00e      	b.n	8009a38 <ip4_input+0x1f0>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8009a1a:	6839      	ldr	r1, [r7, #0]
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f7fe fa71 	bl	8007f04 <udp_input>
        break;
 8009a22:	e026      	b.n	8009a72 <ip4_input+0x22a>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8009a24:	6839      	ldr	r1, [r7, #0]
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f7fa ff7e 	bl	8004928 <tcp_input>
        break;
 8009a2c:	e021      	b.n	8009a72 <ip4_input+0x22a>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8009a2e:	6839      	ldr	r1, [r7, #0]
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f7ff fcbb 	bl	80093ac <icmp_input>
        break;
 8009a36:	e01c      	b.n	8009a72 <ip4_input+0x22a>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8009a38:	4b19      	ldr	r3, [pc, #100]	@ (8009aa0 <ip4_input+0x258>)
 8009a3a:	695b      	ldr	r3, [r3, #20]
 8009a3c:	6939      	ldr	r1, [r7, #16]
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f000 f964 	bl	8009d0c <ip4_addr_isbroadcast_u32>
 8009a44:	4603      	mov	r3, r0
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d10f      	bne.n	8009a6a <ip4_input+0x222>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8009a4a:	4b15      	ldr	r3, [pc, #84]	@ (8009aa0 <ip4_input+0x258>)
 8009a4c:	695b      	ldr	r3, [r3, #20]
 8009a4e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8009a52:	2be0      	cmp	r3, #224	@ 0xe0
 8009a54:	d009      	beq.n	8009a6a <ip4_input+0x222>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8009a56:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009a5a:	4619      	mov	r1, r3
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f7f9 fad2 	bl	8003006 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8009a62:	2102      	movs	r1, #2
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f7ff fdbf 	bl	80095e8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f7f9 fade 	bl	800302c <pbuf_free>
        break;
 8009a70:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8009a72:	4b0b      	ldr	r3, [pc, #44]	@ (8009aa0 <ip4_input+0x258>)
 8009a74:	2200      	movs	r2, #0
 8009a76:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8009a78:	4b09      	ldr	r3, [pc, #36]	@ (8009aa0 <ip4_input+0x258>)
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8009a7e:	4b08      	ldr	r3, [pc, #32]	@ (8009aa0 <ip4_input+0x258>)
 8009a80:	2200      	movs	r2, #0
 8009a82:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8009a84:	4b06      	ldr	r3, [pc, #24]	@ (8009aa0 <ip4_input+0x258>)
 8009a86:	2200      	movs	r2, #0
 8009a88:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8009a8a:	4b05      	ldr	r3, [pc, #20]	@ (8009aa0 <ip4_input+0x258>)
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8009a90:	4b03      	ldr	r3, [pc, #12]	@ (8009aa0 <ip4_input+0x258>)
 8009a92:	2200      	movs	r2, #0
 8009a94:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8009a96:	2300      	movs	r3, #0
}
 8009a98:	4618      	mov	r0, r3
 8009a9a:	3718      	adds	r7, #24
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	bd80      	pop	{r7, pc}
 8009aa0:	240024dc 	.word	0x240024dc
 8009aa4:	24008b00 	.word	0x24008b00

08009aa8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b08a      	sub	sp, #40	@ 0x28
 8009aac:	af04      	add	r7, sp, #16
 8009aae:	60f8      	str	r0, [r7, #12]
 8009ab0:	60b9      	str	r1, [r7, #8]
 8009ab2:	607a      	str	r2, [r7, #4]
 8009ab4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d009      	beq.n	8009ad4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d003      	beq.n	8009ace <ip4_output_if+0x26>
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d102      	bne.n	8009ad4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8009ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ad0:	3304      	adds	r3, #4
 8009ad2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8009ad4:	78fa      	ldrb	r2, [r7, #3]
 8009ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ad8:	9302      	str	r3, [sp, #8]
 8009ada:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009ade:	9301      	str	r3, [sp, #4]
 8009ae0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009ae4:	9300      	str	r3, [sp, #0]
 8009ae6:	4613      	mov	r3, r2
 8009ae8:	687a      	ldr	r2, [r7, #4]
 8009aea:	6979      	ldr	r1, [r7, #20]
 8009aec:	68f8      	ldr	r0, [r7, #12]
 8009aee:	f000 f805 	bl	8009afc <ip4_output_if_src>
 8009af2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	3718      	adds	r7, #24
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}

08009afc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b088      	sub	sp, #32
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	60f8      	str	r0, [r7, #12]
 8009b04:	60b9      	str	r1, [r7, #8]
 8009b06:	607a      	str	r2, [r7, #4]
 8009b08:	70fb      	strb	r3, [r7, #3]
{
#endif /* IP_OPTIONS_SEND */
  struct ip_hdr *iphdr;
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	7b9b      	ldrb	r3, [r3, #14]
 8009b12:	2b01      	cmp	r3, #1
 8009b14:	d002      	beq.n	8009b1c <ip4_output_if_src+0x20>
 8009b16:	4879      	ldr	r0, [pc, #484]	@ (8009cfc <ip4_output_if_src+0x200>)
 8009b18:	f001 f8a4 	bl	800ac64 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	f000 80c0 	beq.w	8009ca4 <ip4_output_if_src+0x1a8>
    u16_t ip_hlen = IP_HLEN;
 8009b24:	2314      	movs	r3, #20
 8009b26:	82fb      	strh	r3, [r7, #22]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8009b28:	2114      	movs	r1, #20
 8009b2a:	68f8      	ldr	r0, [r7, #12]
 8009b2c:	f7f9 f9fa 	bl	8002f24 <pbuf_add_header>
 8009b30:	4603      	mov	r3, r0
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d002      	beq.n	8009b3c <ip4_output_if_src+0x40>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8009b36:	f06f 0301 	mvn.w	r3, #1
 8009b3a:	e0db      	b.n	8009cf4 <ip4_output_if_src+0x1f8>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	685b      	ldr	r3, [r3, #4]
 8009b40:	61bb      	str	r3, [r7, #24]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	895b      	ldrh	r3, [r3, #10]
 8009b46:	2b13      	cmp	r3, #19
 8009b48:	d802      	bhi.n	8009b50 <ip4_output_if_src+0x54>
 8009b4a:	486d      	ldr	r0, [pc, #436]	@ (8009d00 <ip4_output_if_src+0x204>)
 8009b4c:	f001 f88a 	bl	800ac64 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8009b50:	69bb      	ldr	r3, [r7, #24]
 8009b52:	78fa      	ldrb	r2, [r7, #3]
 8009b54:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8009b56:	69bb      	ldr	r3, [r7, #24]
 8009b58:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8009b5c:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 8009b5e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8009b62:	78fb      	ldrb	r3, [r7, #3]
 8009b64:	021b      	lsls	r3, r3, #8
 8009b66:	4313      	orrs	r3, r2
 8009b68:	021b      	lsls	r3, r3, #8
 8009b6a:	b21a      	sxth	r2, r3
 8009b6c:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8009b70:	78fb      	ldrb	r3, [r7, #3]
 8009b72:	021b      	lsls	r3, r3, #8
 8009b74:	430b      	orrs	r3, r1
 8009b76:	121b      	asrs	r3, r3, #8
 8009b78:	b21b      	sxth	r3, r3
 8009b7a:	b2db      	uxtb	r3, r3
 8009b7c:	b21b      	sxth	r3, r3
 8009b7e:	4313      	orrs	r3, r2
 8009b80:	b21b      	sxth	r3, r3
 8009b82:	b29b      	uxth	r3, r3
 8009b84:	461a      	mov	r2, r3
 8009b86:	69fb      	ldr	r3, [r7, #28]
 8009b88:	4413      	add	r3, r2
 8009b8a:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681a      	ldr	r2, [r3, #0]
 8009b90:	69bb      	ldr	r3, [r7, #24]
 8009b92:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
 8009b94:	69bb      	ldr	r3, [r7, #24]
 8009b96:	691b      	ldr	r3, [r3, #16]
 8009b98:	b29b      	uxth	r3, r3
 8009b9a:	69fa      	ldr	r2, [r7, #28]
 8009b9c:	4413      	add	r3, r2
 8009b9e:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
 8009ba0:	69bb      	ldr	r3, [r7, #24]
 8009ba2:	691b      	ldr	r3, [r3, #16]
 8009ba4:	0c1b      	lsrs	r3, r3, #16
 8009ba6:	69fa      	ldr	r2, [r7, #28]
 8009ba8:	4413      	add	r3, r2
 8009baa:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8009bac:	8afb      	ldrh	r3, [r7, #22]
 8009bae:	089b      	lsrs	r3, r3, #2
 8009bb0:	b29b      	uxth	r3, r3
 8009bb2:	b2db      	uxtb	r3, r3
 8009bb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009bb8:	b2da      	uxtb	r2, r3
 8009bba:	69bb      	ldr	r3, [r7, #24]
 8009bbc:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8009bbe:	69bb      	ldr	r3, [r7, #24]
 8009bc0:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8009bc4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 8009bc6:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8009bca:	69bb      	ldr	r3, [r7, #24]
 8009bcc:	781b      	ldrb	r3, [r3, #0]
 8009bce:	021b      	lsls	r3, r3, #8
 8009bd0:	4313      	orrs	r3, r2
 8009bd2:	021b      	lsls	r3, r3, #8
 8009bd4:	b21a      	sxth	r2, r3
 8009bd6:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 8009bda:	69bb      	ldr	r3, [r7, #24]
 8009bdc:	781b      	ldrb	r3, [r3, #0]
 8009bde:	021b      	lsls	r3, r3, #8
 8009be0:	430b      	orrs	r3, r1
 8009be2:	121b      	asrs	r3, r3, #8
 8009be4:	b21b      	sxth	r3, r3
 8009be6:	b2db      	uxtb	r3, r3
 8009be8:	b21b      	sxth	r3, r3
 8009bea:	4313      	orrs	r3, r2
 8009bec:	b21b      	sxth	r3, r3
 8009bee:	b29b      	uxth	r3, r3
 8009bf0:	461a      	mov	r2, r3
 8009bf2:	69fb      	ldr	r3, [r7, #28]
 8009bf4:	4413      	add	r3, r2
 8009bf6:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	891b      	ldrh	r3, [r3, #8]
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	f7f7 ff0b 	bl	8001a18 <lwip_htons>
 8009c02:	4603      	mov	r3, r0
 8009c04:	461a      	mov	r2, r3
 8009c06:	69bb      	ldr	r3, [r7, #24]
 8009c08:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
 8009c0a:	69bb      	ldr	r3, [r7, #24]
 8009c0c:	885b      	ldrh	r3, [r3, #2]
 8009c0e:	b29b      	uxth	r3, r3
 8009c10:	461a      	mov	r2, r3
 8009c12:	69fb      	ldr	r3, [r7, #28]
 8009c14:	4413      	add	r3, r2
 8009c16:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8009c18:	69bb      	ldr	r3, [r7, #24]
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	719a      	strb	r2, [r3, #6]
 8009c1e:	2200      	movs	r2, #0
 8009c20:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8009c22:	4b38      	ldr	r3, [pc, #224]	@ (8009d04 <ip4_output_if_src+0x208>)
 8009c24:	881b      	ldrh	r3, [r3, #0]
 8009c26:	4618      	mov	r0, r3
 8009c28:	f7f7 fef6 	bl	8001a18 <lwip_htons>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	461a      	mov	r2, r3
 8009c30:	69bb      	ldr	r3, [r7, #24]
 8009c32:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
 8009c34:	69bb      	ldr	r3, [r7, #24]
 8009c36:	889b      	ldrh	r3, [r3, #4]
 8009c38:	b29b      	uxth	r3, r3
 8009c3a:	461a      	mov	r2, r3
 8009c3c:	69fb      	ldr	r3, [r7, #28]
 8009c3e:	4413      	add	r3, r2
 8009c40:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8009c42:	4b30      	ldr	r3, [pc, #192]	@ (8009d04 <ip4_output_if_src+0x208>)
 8009c44:	881b      	ldrh	r3, [r3, #0]
 8009c46:	3301      	adds	r3, #1
 8009c48:	b29a      	uxth	r2, r3
 8009c4a:	4b2e      	ldr	r3, [pc, #184]	@ (8009d04 <ip4_output_if_src+0x208>)
 8009c4c:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d104      	bne.n	8009c5e <ip4_output_if_src+0x162>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8009c54:	4b2c      	ldr	r3, [pc, #176]	@ (8009d08 <ip4_output_if_src+0x20c>)
 8009c56:	681a      	ldr	r2, [r3, #0]
 8009c58:	69bb      	ldr	r3, [r7, #24]
 8009c5a:	60da      	str	r2, [r3, #12]
 8009c5c:	e003      	b.n	8009c66 <ip4_output_if_src+0x16a>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	681a      	ldr	r2, [r3, #0]
 8009c62:	69bb      	ldr	r3, [r7, #24]
 8009c64:	60da      	str	r2, [r3, #12]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
 8009c66:	69bb      	ldr	r3, [r7, #24]
 8009c68:	68db      	ldr	r3, [r3, #12]
 8009c6a:	b29b      	uxth	r3, r3
 8009c6c:	69fa      	ldr	r2, [r7, #28]
 8009c6e:	4413      	add	r3, r2
 8009c70:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
 8009c72:	69bb      	ldr	r3, [r7, #24]
 8009c74:	68db      	ldr	r3, [r3, #12]
 8009c76:	0c1b      	lsrs	r3, r3, #16
 8009c78:	69fa      	ldr	r2, [r7, #28]
 8009c7a:	4413      	add	r3, r2
 8009c7c:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
 8009c7e:	69fb      	ldr	r3, [r7, #28]
 8009c80:	0c1a      	lsrs	r2, r3, #16
 8009c82:	69fb      	ldr	r3, [r7, #28]
 8009c84:	b29b      	uxth	r3, r3
 8009c86:	4413      	add	r3, r2
 8009c88:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + chk_sum;
 8009c8a:	69fb      	ldr	r3, [r7, #28]
 8009c8c:	0c1b      	lsrs	r3, r3, #16
 8009c8e:	69fa      	ldr	r2, [r7, #28]
 8009c90:	4413      	add	r3, r2
 8009c92:	61fb      	str	r3, [r7, #28]
    chk_sum = ~chk_sum;
 8009c94:	69fb      	ldr	r3, [r7, #28]
 8009c96:	43db      	mvns	r3, r3
 8009c98:	61fb      	str	r3, [r7, #28]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      iphdr->_chksum = (u16_t)chk_sum; /* network order */
 8009c9a:	69fb      	ldr	r3, [r7, #28]
 8009c9c:	b29a      	uxth	r2, r3
 8009c9e:	69bb      	ldr	r3, [r7, #24]
 8009ca0:	815a      	strh	r2, [r3, #10]
 8009ca2:	e00f      	b.n	8009cc4 <ip4_output_if_src+0x1c8>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	895b      	ldrh	r3, [r3, #10]
 8009ca8:	2b13      	cmp	r3, #19
 8009caa:	d802      	bhi.n	8009cb2 <ip4_output_if_src+0x1b6>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8009cac:	f06f 0301 	mvn.w	r3, #1
 8009cb0:	e020      	b.n	8009cf4 <ip4_output_if_src+0x1f8>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	685b      	ldr	r3, [r3, #4]
 8009cb6:	61bb      	str	r3, [r7, #24]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8009cb8:	69bb      	ldr	r3, [r7, #24]
 8009cba:	691b      	ldr	r3, [r3, #16]
 8009cbc:	613b      	str	r3, [r7, #16]
    dest = &dest_addr;
 8009cbe:	f107 0310 	add.w	r3, r7, #16
 8009cc2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8009cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cc6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d00c      	beq.n	8009ce6 <ip4_output_if_src+0x1ea>
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	891a      	ldrh	r2, [r3, #8]
 8009cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cd2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8009cd4:	429a      	cmp	r2, r3
 8009cd6:	d906      	bls.n	8009ce6 <ip4_output_if_src+0x1ea>
    return ip4_frag(p, netif, dest);
 8009cd8:	687a      	ldr	r2, [r7, #4]
 8009cda:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009cdc:	68f8      	ldr	r0, [r7, #12]
 8009cde:	f000 fcf9 	bl	800a6d4 <ip4_frag>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	e006      	b.n	8009cf4 <ip4_output_if_src+0x1f8>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8009ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ce8:	695b      	ldr	r3, [r3, #20]
 8009cea:	687a      	ldr	r2, [r7, #4]
 8009cec:	68f9      	ldr	r1, [r7, #12]
 8009cee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009cf0:	4798      	blx	r3
 8009cf2:	4603      	mov	r3, r0
}
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	3720      	adds	r7, #32
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bd80      	pop	{r7, pc}
 8009cfc:	0800d3cc 	.word	0x0800d3cc
 8009d00:	0800d3d8 	.word	0x0800d3d8
 8009d04:	24008c5e 	.word	0x24008c5e
 8009d08:	0800d6b4 	.word	0x0800d6b4

08009d0c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8009d0c:	b480      	push	{r7}
 8009d0e:	b085      	sub	sp, #20
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
 8009d14:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d20:	d002      	beq.n	8009d28 <ip4_addr_isbroadcast_u32+0x1c>
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d101      	bne.n	8009d2c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8009d28:	2301      	movs	r3, #1
 8009d2a:	e02a      	b.n	8009d82 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009d32:	f003 0302 	and.w	r3, r3, #2
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d101      	bne.n	8009d3e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	e021      	b.n	8009d82 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	3304      	adds	r3, #4
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	687a      	ldr	r2, [r7, #4]
 8009d46:	429a      	cmp	r2, r3
 8009d48:	d101      	bne.n	8009d4e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	e019      	b.n	8009d82 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_net_eq(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8009d4e:	68fa      	ldr	r2, [r7, #12]
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	3304      	adds	r3, #4
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	405a      	eors	r2, r3
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	3308      	adds	r3, #8
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	4013      	ands	r3, r2
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d10d      	bne.n	8009d80 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	3308      	adds	r3, #8
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	43da      	mvns	r2, r3
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	3308      	adds	r3, #8
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8009d78:	429a      	cmp	r2, r3
 8009d7a:	d101      	bne.n	8009d80 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	e000      	b.n	8009d82 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8009d80:	2300      	movs	r3, #0
  }
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	3714      	adds	r7, #20
 8009d86:	46bd      	mov	sp, r7
 8009d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8c:	4770      	bx	lr
	...

08009d90 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b084      	sub	sp, #16
 8009d94:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8009d96:	2300      	movs	r3, #0
 8009d98:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8009d9a:	4b12      	ldr	r3, [pc, #72]	@ (8009de4 <ip_reass_tmr+0x54>)
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8009da0:	e018      	b.n	8009dd4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	7fdb      	ldrb	r3, [r3, #31]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d00b      	beq.n	8009dc2 <ip_reass_tmr+0x32>
      r->timer--;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	7fdb      	ldrb	r3, [r3, #31]
 8009dae:	3b01      	subs	r3, #1
 8009db0:	b2da      	uxtb	r2, r3
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	60fb      	str	r3, [r7, #12]
 8009dc0:	e008      	b.n	8009dd4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8009dcc:	68b9      	ldr	r1, [r7, #8]
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f000 f80a 	bl	8009de8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d1e3      	bne.n	8009da2 <ip_reass_tmr+0x12>
    }
  }
}
 8009dda:	bf00      	nop
 8009ddc:	bf00      	nop
 8009dde:	3710      	adds	r7, #16
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd80      	pop	{r7, pc}
 8009de4:	24008c60 	.word	0x24008c60

08009de8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b088      	sub	sp, #32
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
 8009df0:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8009df2:	2300      	movs	r3, #0
 8009df4:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8009df6:	683a      	ldr	r2, [r7, #0]
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	429a      	cmp	r2, r3
 8009dfc:	d102      	bne.n	8009e04 <ip_reass_free_complete_datagram+0x1c>
 8009dfe:	483d      	ldr	r0, [pc, #244]	@ (8009ef4 <ip_reass_free_complete_datagram+0x10c>)
 8009e00:	f000 ff30 	bl	800ac64 <iprintf>
  if (prev != NULL) {
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d007      	beq.n	8009e1a <ip_reass_free_complete_datagram+0x32>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	687a      	ldr	r2, [r7, #4]
 8009e10:	429a      	cmp	r2, r3
 8009e12:	d002      	beq.n	8009e1a <ip_reass_free_complete_datagram+0x32>
 8009e14:	4838      	ldr	r0, [pc, #224]	@ (8009ef8 <ip_reass_free_complete_datagram+0x110>)
 8009e16:	f000 ff25 	bl	800ac64 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	685b      	ldr	r3, [r3, #4]
 8009e1e:	685b      	ldr	r3, [r3, #4]
 8009e20:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8009e22:	697b      	ldr	r3, [r7, #20]
 8009e24:	889b      	ldrh	r3, [r3, #4]
 8009e26:	b29b      	uxth	r3, r3
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d127      	bne.n	8009e7c <ip_reass_free_complete_datagram+0x94>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	685b      	ldr	r3, [r3, #4]
 8009e30:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8009e32:	697b      	ldr	r3, [r7, #20]
 8009e34:	681a      	ldr	r2, [r3, #0]
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8009e3a:	69bb      	ldr	r3, [r7, #24]
 8009e3c:	6858      	ldr	r0, [r3, #4]
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	3308      	adds	r3, #8
 8009e42:	2214      	movs	r2, #20
 8009e44:	4619      	mov	r1, r3
 8009e46:	f000 ffee 	bl	800ae26 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8009e4a:	2101      	movs	r1, #1
 8009e4c:	69b8      	ldr	r0, [r7, #24]
 8009e4e:	f7ff fbdb 	bl	8009608 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8009e52:	69b8      	ldr	r0, [r7, #24]
 8009e54:	f7f9 f95e 	bl	8003114 <pbuf_clen>
 8009e58:	4603      	mov	r3, r0
 8009e5a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8009e5c:	8bfa      	ldrh	r2, [r7, #30]
 8009e5e:	8a7b      	ldrh	r3, [r7, #18]
 8009e60:	4413      	add	r3, r2
 8009e62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e66:	db02      	blt.n	8009e6e <ip_reass_free_complete_datagram+0x86>
 8009e68:	4824      	ldr	r0, [pc, #144]	@ (8009efc <ip_reass_free_complete_datagram+0x114>)
 8009e6a:	f000 fefb 	bl	800ac64 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8009e6e:	8bfa      	ldrh	r2, [r7, #30]
 8009e70:	8a7b      	ldrh	r3, [r7, #18]
 8009e72:	4413      	add	r3, r2
 8009e74:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8009e76:	69b8      	ldr	r0, [r7, #24]
 8009e78:	f7f9 f8d8 	bl	800302c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	685b      	ldr	r3, [r3, #4]
 8009e80:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8009e82:	e01c      	b.n	8009ebe <ip_reass_free_complete_datagram+0xd6>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8009e84:	69bb      	ldr	r3, [r7, #24]
 8009e86:	685b      	ldr	r3, [r3, #4]
 8009e88:	617b      	str	r3, [r7, #20]
    pcur = p;
 8009e8a:	69bb      	ldr	r3, [r7, #24]
 8009e8c:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8009e8e:	697b      	ldr	r3, [r7, #20]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8009e94:	68f8      	ldr	r0, [r7, #12]
 8009e96:	f7f9 f93d 	bl	8003114 <pbuf_clen>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8009e9e:	8bfa      	ldrh	r2, [r7, #30]
 8009ea0:	8a7b      	ldrh	r3, [r7, #18]
 8009ea2:	4413      	add	r3, r2
 8009ea4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ea8:	db02      	blt.n	8009eb0 <ip_reass_free_complete_datagram+0xc8>
 8009eaa:	4814      	ldr	r0, [pc, #80]	@ (8009efc <ip_reass_free_complete_datagram+0x114>)
 8009eac:	f000 feda 	bl	800ac64 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8009eb0:	8bfa      	ldrh	r2, [r7, #30]
 8009eb2:	8a7b      	ldrh	r3, [r7, #18]
 8009eb4:	4413      	add	r3, r2
 8009eb6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8009eb8:	68f8      	ldr	r0, [r7, #12]
 8009eba:	f7f9 f8b7 	bl	800302c <pbuf_free>
  while (p != NULL) {
 8009ebe:	69bb      	ldr	r3, [r7, #24]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d1df      	bne.n	8009e84 <ip_reass_free_complete_datagram+0x9c>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8009ec4:	6839      	ldr	r1, [r7, #0]
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f000 f8ba 	bl	800a040 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8009ecc:	4b0c      	ldr	r3, [pc, #48]	@ (8009f00 <ip_reass_free_complete_datagram+0x118>)
 8009ece:	881b      	ldrh	r3, [r3, #0]
 8009ed0:	8bfa      	ldrh	r2, [r7, #30]
 8009ed2:	429a      	cmp	r2, r3
 8009ed4:	d902      	bls.n	8009edc <ip_reass_free_complete_datagram+0xf4>
 8009ed6:	480b      	ldr	r0, [pc, #44]	@ (8009f04 <ip_reass_free_complete_datagram+0x11c>)
 8009ed8:	f000 fec4 	bl	800ac64 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8009edc:	4b08      	ldr	r3, [pc, #32]	@ (8009f00 <ip_reass_free_complete_datagram+0x118>)
 8009ede:	881a      	ldrh	r2, [r3, #0]
 8009ee0:	8bfb      	ldrh	r3, [r7, #30]
 8009ee2:	1ad3      	subs	r3, r2, r3
 8009ee4:	b29a      	uxth	r2, r3
 8009ee6:	4b06      	ldr	r3, [pc, #24]	@ (8009f00 <ip_reass_free_complete_datagram+0x118>)
 8009ee8:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8009eea:	8bfb      	ldrh	r3, [r7, #30]
}
 8009eec:	4618      	mov	r0, r3
 8009eee:	3720      	adds	r7, #32
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}
 8009ef4:	0800d408 	.word	0x0800d408
 8009ef8:	0800d414 	.word	0x0800d414
 8009efc:	0800d428 	.word	0x0800d428
 8009f00:	24008c64 	.word	0x24008c64
 8009f04:	0800d448 	.word	0x0800d448

08009f08 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b08a      	sub	sp, #40	@ 0x28
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
 8009f10:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8009f12:	2300      	movs	r3, #0
 8009f14:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8009f16:	2300      	movs	r3, #0
 8009f18:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8009f1e:	2300      	movs	r3, #0
 8009f20:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8009f22:	2300      	movs	r3, #0
 8009f24:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8009f26:	4b28      	ldr	r3, [pc, #160]	@ (8009fc8 <ip_reass_remove_oldest_datagram+0xc0>)
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8009f2c:	e030      	b.n	8009f90 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8009f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f30:	695a      	ldr	r2, [r3, #20]
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	68db      	ldr	r3, [r3, #12]
 8009f36:	429a      	cmp	r2, r3
 8009f38:	d10c      	bne.n	8009f54 <ip_reass_remove_oldest_datagram+0x4c>
 8009f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f3c:	699a      	ldr	r2, [r3, #24]
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	691b      	ldr	r3, [r3, #16]
 8009f42:	429a      	cmp	r2, r3
 8009f44:	d106      	bne.n	8009f54 <ip_reass_remove_oldest_datagram+0x4c>
 8009f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f48:	899a      	ldrh	r2, [r3, #12]
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	889b      	ldrh	r3, [r3, #4]
 8009f4e:	b29b      	uxth	r3, r3
 8009f50:	429a      	cmp	r2, r3
 8009f52:	d014      	beq.n	8009f7e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8009f54:	693b      	ldr	r3, [r7, #16]
 8009f56:	3301      	adds	r3, #1
 8009f58:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8009f5a:	6a3b      	ldr	r3, [r7, #32]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d104      	bne.n	8009f6a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8009f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f62:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8009f64:	69fb      	ldr	r3, [r7, #28]
 8009f66:	61bb      	str	r3, [r7, #24]
 8009f68:	e009      	b.n	8009f7e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8009f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f6c:	7fda      	ldrb	r2, [r3, #31]
 8009f6e:	6a3b      	ldr	r3, [r7, #32]
 8009f70:	7fdb      	ldrb	r3, [r3, #31]
 8009f72:	429a      	cmp	r2, r3
 8009f74:	d803      	bhi.n	8009f7e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8009f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f78:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8009f7a:	69fb      	ldr	r3, [r7, #28]
 8009f7c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8009f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d001      	beq.n	8009f8a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8009f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f88:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8009f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8009f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d1cb      	bne.n	8009f2e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8009f96:	6a3b      	ldr	r3, [r7, #32]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d008      	beq.n	8009fae <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8009f9c:	69b9      	ldr	r1, [r7, #24]
 8009f9e:	6a38      	ldr	r0, [r7, #32]
 8009fa0:	f7ff ff22 	bl	8009de8 <ip_reass_free_complete_datagram>
 8009fa4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8009fa6:	697a      	ldr	r2, [r7, #20]
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	4413      	add	r3, r2
 8009fac:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8009fae:	697a      	ldr	r2, [r7, #20]
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	429a      	cmp	r2, r3
 8009fb4:	da02      	bge.n	8009fbc <ip_reass_remove_oldest_datagram+0xb4>
 8009fb6:	693b      	ldr	r3, [r7, #16]
 8009fb8:	2b01      	cmp	r3, #1
 8009fba:	dcac      	bgt.n	8009f16 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8009fbc:	697b      	ldr	r3, [r7, #20]
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	3728      	adds	r7, #40	@ 0x28
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd80      	pop	{r7, pc}
 8009fc6:	bf00      	nop
 8009fc8:	24008c60 	.word	0x24008c60

08009fcc <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b084      	sub	sp, #16
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
 8009fd4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8009fd6:	2004      	movs	r0, #4
 8009fd8:	f7f8 fa90 	bl	80024fc <memp_malloc>
 8009fdc:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d110      	bne.n	800a006 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8009fe4:	6839      	ldr	r1, [r7, #0]
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	f7ff ff8e 	bl	8009f08 <ip_reass_remove_oldest_datagram>
 8009fec:	4602      	mov	r2, r0
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	4293      	cmp	r3, r2
 8009ff2:	dc03      	bgt.n	8009ffc <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8009ff4:	2004      	movs	r0, #4
 8009ff6:	f7f8 fa81 	bl	80024fc <memp_malloc>
 8009ffa:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d101      	bne.n	800a006 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800a002:	2300      	movs	r3, #0
 800a004:	e016      	b.n	800a034 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800a006:	2220      	movs	r2, #32
 800a008:	2100      	movs	r1, #0
 800a00a:	68f8      	ldr	r0, [r7, #12]
 800a00c:	f000 fe8f 	bl	800ad2e <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	220f      	movs	r2, #15
 800a014:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800a016:	4b09      	ldr	r3, [pc, #36]	@ (800a03c <ip_reass_enqueue_new_datagram+0x70>)
 800a018:	681a      	ldr	r2, [r3, #0]
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800a01e:	4a07      	ldr	r2, [pc, #28]	@ (800a03c <ip_reass_enqueue_new_datagram+0x70>)
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	3308      	adds	r3, #8
 800a028:	2214      	movs	r2, #20
 800a02a:	6879      	ldr	r1, [r7, #4]
 800a02c:	4618      	mov	r0, r3
 800a02e:	f000 fefa 	bl	800ae26 <memcpy>
  return ipr;
 800a032:	68fb      	ldr	r3, [r7, #12]
}
 800a034:	4618      	mov	r0, r3
 800a036:	3710      	adds	r7, #16
 800a038:	46bd      	mov	sp, r7
 800a03a:	bd80      	pop	{r7, pc}
 800a03c:	24008c60 	.word	0x24008c60

0800a040 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b082      	sub	sp, #8
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
 800a048:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800a04a:	4b0e      	ldr	r3, [pc, #56]	@ (800a084 <ip_reass_dequeue_datagram+0x44>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	687a      	ldr	r2, [r7, #4]
 800a050:	429a      	cmp	r2, r3
 800a052:	d104      	bne.n	800a05e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	4a0a      	ldr	r2, [pc, #40]	@ (800a084 <ip_reass_dequeue_datagram+0x44>)
 800a05a:	6013      	str	r3, [r2, #0]
 800a05c:	e009      	b.n	800a072 <ip_reass_dequeue_datagram+0x32>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d102      	bne.n	800a06a <ip_reass_dequeue_datagram+0x2a>
 800a064:	4808      	ldr	r0, [pc, #32]	@ (800a088 <ip_reass_dequeue_datagram+0x48>)
 800a066:	f000 fdfd 	bl	800ac64 <iprintf>
    prev->next = ipr->next;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681a      	ldr	r2, [r3, #0]
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800a072:	6879      	ldr	r1, [r7, #4]
 800a074:	2004      	movs	r0, #4
 800a076:	f7f8 fa79 	bl	800256c <memp_free>
}
 800a07a:	bf00      	nop
 800a07c:	3708      	adds	r7, #8
 800a07e:	46bd      	mov	sp, r7
 800a080:	bd80      	pop	{r7, pc}
 800a082:	bf00      	nop
 800a084:	24008c60 	.word	0x24008c60
 800a088:	0800d46c 	.word	0x0800d46c

0800a08c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b08c      	sub	sp, #48	@ 0x30
 800a090:	af00      	add	r7, sp, #0
 800a092:	60f8      	str	r0, [r7, #12]
 800a094:	60b9      	str	r1, [r7, #8]
 800a096:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800a098:	2300      	movs	r3, #0
 800a09a:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800a09c:	2301      	movs	r3, #1
 800a09e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800a0a0:	68bb      	ldr	r3, [r7, #8]
 800a0a2:	685b      	ldr	r3, [r3, #4]
 800a0a4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800a0a6:	69fb      	ldr	r3, [r7, #28]
 800a0a8:	885b      	ldrh	r3, [r3, #2]
 800a0aa:	b29b      	uxth	r3, r3
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	f7f7 fcb3 	bl	8001a18 <lwip_htons>
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800a0b6:	69fb      	ldr	r3, [r7, #28]
 800a0b8:	781b      	ldrb	r3, [r3, #0]
 800a0ba:	f003 030f 	and.w	r3, r3, #15
 800a0be:	b2db      	uxtb	r3, r3
 800a0c0:	009b      	lsls	r3, r3, #2
 800a0c2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800a0c4:	7e7b      	ldrb	r3, [r7, #25]
 800a0c6:	b29b      	uxth	r3, r3
 800a0c8:	8b7a      	ldrh	r2, [r7, #26]
 800a0ca:	429a      	cmp	r2, r3
 800a0cc:	d202      	bcs.n	800a0d4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800a0ce:	f04f 33ff 	mov.w	r3, #4294967295
 800a0d2:	e121      	b.n	800a318 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
  }
  len = (u16_t)(len - hlen);
 800a0d4:	7e7b      	ldrb	r3, [r7, #25]
 800a0d6:	b29b      	uxth	r3, r3
 800a0d8:	8b7a      	ldrh	r2, [r7, #26]
 800a0da:	1ad3      	subs	r3, r2, r3
 800a0dc:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800a0de:	69fb      	ldr	r3, [r7, #28]
 800a0e0:	88db      	ldrh	r3, [r3, #6]
 800a0e2:	b29b      	uxth	r3, r3
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	f7f7 fc97 	bl	8001a18 <lwip_htons>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a0f0:	b29b      	uxth	r3, r3
 800a0f2:	00db      	lsls	r3, r3, #3
 800a0f4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	685b      	ldr	r3, [r3, #4]
 800a0fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 800a0fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0fe:	2200      	movs	r2, #0
 800a100:	701a      	strb	r2, [r3, #0]
 800a102:	2200      	movs	r2, #0
 800a104:	705a      	strb	r2, [r3, #1]
 800a106:	2200      	movs	r2, #0
 800a108:	709a      	strb	r2, [r3, #2]
 800a10a:	2200      	movs	r2, #0
 800a10c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800a10e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a110:	8afa      	ldrh	r2, [r7, #22]
 800a112:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800a114:	8afa      	ldrh	r2, [r7, #22]
 800a116:	8b7b      	ldrh	r3, [r7, #26]
 800a118:	4413      	add	r3, r2
 800a11a:	b29a      	uxth	r2, r3
 800a11c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a11e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800a120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a122:	88db      	ldrh	r3, [r3, #6]
 800a124:	b29b      	uxth	r3, r3
 800a126:	8afa      	ldrh	r2, [r7, #22]
 800a128:	429a      	cmp	r2, r3
 800a12a:	d902      	bls.n	800a132 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800a12c:	f04f 33ff 	mov.w	r3, #4294967295
 800a130:	e0f2      	b.n	800a318 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	685b      	ldr	r3, [r3, #4]
 800a136:	627b      	str	r3, [r7, #36]	@ 0x24
 800a138:	e068      	b.n	800a20c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800a13a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a13c:	685b      	ldr	r3, [r3, #4]
 800a13e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800a140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a142:	889b      	ldrh	r3, [r3, #4]
 800a144:	b29a      	uxth	r2, r3
 800a146:	693b      	ldr	r3, [r7, #16]
 800a148:	889b      	ldrh	r3, [r3, #4]
 800a14a:	b29b      	uxth	r3, r3
 800a14c:	429a      	cmp	r2, r3
 800a14e:	d235      	bcs.n	800a1bc <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800a150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a152:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a154:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800a156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d020      	beq.n	800a19e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800a15c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a15e:	889b      	ldrh	r3, [r3, #4]
 800a160:	b29a      	uxth	r2, r3
 800a162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a164:	88db      	ldrh	r3, [r3, #6]
 800a166:	b29b      	uxth	r3, r3
 800a168:	429a      	cmp	r2, r3
 800a16a:	d307      	bcc.n	800a17c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800a16c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a16e:	88db      	ldrh	r3, [r3, #6]
 800a170:	b29a      	uxth	r2, r3
 800a172:	693b      	ldr	r3, [r7, #16]
 800a174:	889b      	ldrh	r3, [r3, #4]
 800a176:	b29b      	uxth	r3, r3
 800a178:	429a      	cmp	r2, r3
 800a17a:	d902      	bls.n	800a182 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800a17c:	f04f 33ff 	mov.w	r3, #4294967295
 800a180:	e0ca      	b.n	800a318 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800a182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a184:	68ba      	ldr	r2, [r7, #8]
 800a186:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800a188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a18a:	88db      	ldrh	r3, [r3, #6]
 800a18c:	b29a      	uxth	r2, r3
 800a18e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a190:	889b      	ldrh	r3, [r3, #4]
 800a192:	b29b      	uxth	r3, r3
 800a194:	429a      	cmp	r2, r3
 800a196:	d03d      	beq.n	800a214 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800a198:	2300      	movs	r3, #0
 800a19a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800a19c:	e03a      	b.n	800a214 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800a19e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1a0:	88db      	ldrh	r3, [r3, #6]
 800a1a2:	b29a      	uxth	r2, r3
 800a1a4:	693b      	ldr	r3, [r7, #16]
 800a1a6:	889b      	ldrh	r3, [r3, #4]
 800a1a8:	b29b      	uxth	r3, r3
 800a1aa:	429a      	cmp	r2, r3
 800a1ac:	d902      	bls.n	800a1b4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800a1ae:	f04f 33ff 	mov.w	r3, #4294967295
 800a1b2:	e0b1      	b.n	800a318 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
        ipr->p = new_p;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	68ba      	ldr	r2, [r7, #8]
 800a1b8:	605a      	str	r2, [r3, #4]
      break;
 800a1ba:	e02b      	b.n	800a214 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800a1bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1be:	889b      	ldrh	r3, [r3, #4]
 800a1c0:	b29a      	uxth	r2, r3
 800a1c2:	693b      	ldr	r3, [r7, #16]
 800a1c4:	889b      	ldrh	r3, [r3, #4]
 800a1c6:	b29b      	uxth	r3, r3
 800a1c8:	429a      	cmp	r2, r3
 800a1ca:	d102      	bne.n	800a1d2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800a1cc:	f04f 33ff 	mov.w	r3, #4294967295
 800a1d0:	e0a2      	b.n	800a318 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800a1d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1d4:	889b      	ldrh	r3, [r3, #4]
 800a1d6:	b29a      	uxth	r2, r3
 800a1d8:	693b      	ldr	r3, [r7, #16]
 800a1da:	88db      	ldrh	r3, [r3, #6]
 800a1dc:	b29b      	uxth	r3, r3
 800a1de:	429a      	cmp	r2, r3
 800a1e0:	d202      	bcs.n	800a1e8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800a1e2:	f04f 33ff 	mov.w	r3, #4294967295
 800a1e6:	e097      	b.n	800a318 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800a1e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d009      	beq.n	800a202 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800a1ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1f0:	88db      	ldrh	r3, [r3, #6]
 800a1f2:	b29a      	uxth	r2, r3
 800a1f4:	693b      	ldr	r3, [r7, #16]
 800a1f6:	889b      	ldrh	r3, [r3, #4]
 800a1f8:	b29b      	uxth	r3, r3
 800a1fa:	429a      	cmp	r2, r3
 800a1fc:	d001      	beq.n	800a202 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800a1fe:	2300      	movs	r3, #0
 800a200:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800a202:	693b      	ldr	r3, [r7, #16]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 800a20c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d193      	bne.n	800a13a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800a212:	e000      	b.n	800a216 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800a214:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800a216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d125      	bne.n	800a268 <ip_reass_chain_frag_into_datagram_and_validate+0x1dc>
    if (iprh_prev != NULL) {
 800a21c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d018      	beq.n	800a254 <ip_reass_chain_frag_into_datagram_and_validate+0x1c8>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800a222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a224:	88db      	ldrh	r3, [r3, #6]
 800a226:	b29a      	uxth	r2, r3
 800a228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a22a:	889b      	ldrh	r3, [r3, #4]
 800a22c:	b29b      	uxth	r3, r3
 800a22e:	429a      	cmp	r2, r3
 800a230:	d902      	bls.n	800a238 <ip_reass_chain_frag_into_datagram_and_validate+0x1ac>
 800a232:	483b      	ldr	r0, [pc, #236]	@ (800a320 <ip_reass_chain_frag_into_datagram_and_validate+0x294>)
 800a234:	f000 fd16 	bl	800ac64 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800a238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a23a:	68ba      	ldr	r2, [r7, #8]
 800a23c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800a23e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a240:	88db      	ldrh	r3, [r3, #6]
 800a242:	b29a      	uxth	r2, r3
 800a244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a246:	889b      	ldrh	r3, [r3, #4]
 800a248:	b29b      	uxth	r3, r3
 800a24a:	429a      	cmp	r2, r3
 800a24c:	d00c      	beq.n	800a268 <ip_reass_chain_frag_into_datagram_and_validate+0x1dc>
        valid = 0;
 800a24e:	2300      	movs	r3, #0
 800a250:	623b      	str	r3, [r7, #32]
 800a252:	e009      	b.n	800a268 <ip_reass_chain_frag_into_datagram_and_validate+0x1dc>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	685b      	ldr	r3, [r3, #4]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d002      	beq.n	800a262 <ip_reass_chain_frag_into_datagram_and_validate+0x1d6>
 800a25c:	4831      	ldr	r0, [pc, #196]	@ (800a324 <ip_reass_chain_frag_into_datagram_and_validate+0x298>)
 800a25e:	f000 fd01 	bl	800ac64 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	68ba      	ldr	r2, [r7, #8]
 800a266:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d105      	bne.n	800a27a <ip_reass_chain_frag_into_datagram_and_validate+0x1ee>
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	7f9b      	ldrb	r3, [r3, #30]
 800a272:	f003 0301 	and.w	r3, r3, #1
 800a276:	2b00      	cmp	r3, #0
 800a278:	d04d      	beq.n	800a316 <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
    /* and had no holes so far */
    if (valid) {
 800a27a:	6a3b      	ldr	r3, [r7, #32]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d043      	beq.n	800a308 <ip_reass_chain_frag_into_datagram_and_validate+0x27c>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	685b      	ldr	r3, [r3, #4]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d006      	beq.n	800a296 <ip_reass_chain_frag_into_datagram_and_validate+0x20a>
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	685b      	ldr	r3, [r3, #4]
 800a28c:	685b      	ldr	r3, [r3, #4]
 800a28e:	889b      	ldrh	r3, [r3, #4]
 800a290:	b29b      	uxth	r3, r3
 800a292:	2b00      	cmp	r3, #0
 800a294:	d002      	beq.n	800a29c <ip_reass_chain_frag_into_datagram_and_validate+0x210>
        valid = 0;
 800a296:	2300      	movs	r3, #0
 800a298:	623b      	str	r3, [r7, #32]
 800a29a:	e035      	b.n	800a308 <ip_reass_chain_frag_into_datagram_and_validate+0x27c>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800a29c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a29e:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 800a2a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800a2a6:	e012      	b.n	800a2ce <ip_reass_chain_frag_into_datagram_and_validate+0x242>
          iprh = (struct ip_reass_helper *)q->payload;
 800a2a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2aa:	685b      	ldr	r3, [r3, #4]
 800a2ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 800a2ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2b0:	88db      	ldrh	r3, [r3, #6]
 800a2b2:	b29a      	uxth	r2, r3
 800a2b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2b6:	889b      	ldrh	r3, [r3, #4]
 800a2b8:	b29b      	uxth	r3, r3
 800a2ba:	429a      	cmp	r2, r3
 800a2bc:	d002      	beq.n	800a2c4 <ip_reass_chain_frag_into_datagram_and_validate+0x238>
            valid = 0;
 800a2be:	2300      	movs	r3, #0
 800a2c0:	623b      	str	r3, [r7, #32]
            break;
 800a2c2:	e007      	b.n	800a2d4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
          }
          iprh_prev = iprh;
 800a2c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2c6:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 800a2c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800a2ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d1e9      	bne.n	800a2a8 <ip_reass_chain_frag_into_datagram_and_validate+0x21c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800a2d4:	6a3b      	ldr	r3, [r7, #32]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d016      	beq.n	800a308 <ip_reass_chain_frag_into_datagram_and_validate+0x27c>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	685b      	ldr	r3, [r3, #4]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d102      	bne.n	800a2e8 <ip_reass_chain_frag_into_datagram_and_validate+0x25c>
 800a2e2:	4811      	ldr	r0, [pc, #68]	@ (800a328 <ip_reass_chain_frag_into_datagram_and_validate+0x29c>)
 800a2e4:	f000 fcbe 	bl	800ac64 <iprintf>
          LWIP_ASSERT("sanity check",
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	685b      	ldr	r3, [r3, #4]
 800a2ec:	685b      	ldr	r3, [r3, #4]
 800a2ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a2f0:	429a      	cmp	r2, r3
 800a2f2:	d102      	bne.n	800a2fa <ip_reass_chain_frag_into_datagram_and_validate+0x26e>
 800a2f4:	480c      	ldr	r0, [pc, #48]	@ (800a328 <ip_reass_chain_frag_into_datagram_and_validate+0x29c>)
 800a2f6:	f000 fcb5 	bl	800ac64 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800a2fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d002      	beq.n	800a308 <ip_reass_chain_frag_into_datagram_and_validate+0x27c>
 800a302:	480a      	ldr	r0, [pc, #40]	@ (800a32c <ip_reass_chain_frag_into_datagram_and_validate+0x2a0>)
 800a304:	f000 fcae 	bl	800ac64 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800a308:	6a3b      	ldr	r3, [r7, #32]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	bf14      	ite	ne
 800a30e:	2301      	movne	r3, #1
 800a310:	2300      	moveq	r3, #0
 800a312:	b2db      	uxtb	r3, r3
 800a314:	e000      	b.n	800a318 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800a316:	2300      	movs	r3, #0
}
 800a318:	4618      	mov	r0, r3
 800a31a:	3730      	adds	r7, #48	@ 0x30
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bd80      	pop	{r7, pc}
 800a320:	0800d488 	.word	0x0800d488
 800a324:	0800d4a8 	.word	0x0800d4a8
 800a328:	0800d4e0 	.word	0x0800d4e0
 800a32c:	0800d4f0 	.word	0x0800d4f0

0800a330 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b08e      	sub	sp, #56	@ 0x38
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	685b      	ldr	r3, [r3, #4]
 800a33c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800a33e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a340:	781b      	ldrb	r3, [r3, #0]
 800a342:	f003 030f 	and.w	r3, r3, #15
 800a346:	b2db      	uxtb	r3, r3
 800a348:	009b      	lsls	r3, r3, #2
 800a34a:	b2db      	uxtb	r3, r3
 800a34c:	2b14      	cmp	r3, #20
 800a34e:	f040 816d 	bne.w	800a62c <ip4_reass+0x2fc>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800a352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a354:	88db      	ldrh	r3, [r3, #6]
 800a356:	b29b      	uxth	r3, r3
 800a358:	4618      	mov	r0, r3
 800a35a:	f7f7 fb5d 	bl	8001a18 <lwip_htons>
 800a35e:	4603      	mov	r3, r0
 800a360:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a364:	b29b      	uxth	r3, r3
 800a366:	00db      	lsls	r3, r3, #3
 800a368:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800a36a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a36c:	885b      	ldrh	r3, [r3, #2]
 800a36e:	b29b      	uxth	r3, r3
 800a370:	4618      	mov	r0, r3
 800a372:	f7f7 fb51 	bl	8001a18 <lwip_htons>
 800a376:	4603      	mov	r3, r0
 800a378:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800a37a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a37c:	781b      	ldrb	r3, [r3, #0]
 800a37e:	f003 030f 	and.w	r3, r3, #15
 800a382:	b2db      	uxtb	r3, r3
 800a384:	009b      	lsls	r3, r3, #2
 800a386:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 800a38a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a38e:	b29b      	uxth	r3, r3
 800a390:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a392:	429a      	cmp	r2, r3
 800a394:	f0c0 814c 	bcc.w	800a630 <ip4_reass+0x300>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800a398:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a39c:	b29b      	uxth	r3, r3
 800a39e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a3a0:	1ad3      	subs	r3, r2, r3
 800a3a2:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800a3a4:	6878      	ldr	r0, [r7, #4]
 800a3a6:	f7f8 feb5 	bl	8003114 <pbuf_clen>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800a3ae:	4b9a      	ldr	r3, [pc, #616]	@ (800a618 <ip4_reass+0x2e8>)
 800a3b0:	881b      	ldrh	r3, [r3, #0]
 800a3b2:	461a      	mov	r2, r3
 800a3b4:	8c3b      	ldrh	r3, [r7, #32]
 800a3b6:	4413      	add	r3, r2
 800a3b8:	2b0a      	cmp	r3, #10
 800a3ba:	dd10      	ble.n	800a3de <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800a3bc:	8c3b      	ldrh	r3, [r7, #32]
 800a3be:	4619      	mov	r1, r3
 800a3c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a3c2:	f7ff fda1 	bl	8009f08 <ip_reass_remove_oldest_datagram>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	f000 8133 	beq.w	800a634 <ip4_reass+0x304>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800a3ce:	4b92      	ldr	r3, [pc, #584]	@ (800a618 <ip4_reass+0x2e8>)
 800a3d0:	881b      	ldrh	r3, [r3, #0]
 800a3d2:	461a      	mov	r2, r3
 800a3d4:	8c3b      	ldrh	r3, [r7, #32]
 800a3d6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800a3d8:	2b0a      	cmp	r3, #10
 800a3da:	f300 812b 	bgt.w	800a634 <ip4_reass+0x304>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800a3de:	4b8f      	ldr	r3, [pc, #572]	@ (800a61c <ip4_reass+0x2ec>)
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	633b      	str	r3, [r7, #48]	@ 0x30
 800a3e4:	e015      	b.n	800a412 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800a3e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3e8:	695a      	ldr	r2, [r3, #20]
 800a3ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3ec:	68db      	ldr	r3, [r3, #12]
 800a3ee:	429a      	cmp	r2, r3
 800a3f0:	d10c      	bne.n	800a40c <ip4_reass+0xdc>
 800a3f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3f4:	699a      	ldr	r2, [r3, #24]
 800a3f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3f8:	691b      	ldr	r3, [r3, #16]
 800a3fa:	429a      	cmp	r2, r3
 800a3fc:	d106      	bne.n	800a40c <ip4_reass+0xdc>
 800a3fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a400:	899a      	ldrh	r2, [r3, #12]
 800a402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a404:	889b      	ldrh	r3, [r3, #4]
 800a406:	b29b      	uxth	r3, r3
 800a408:	429a      	cmp	r2, r3
 800a40a:	d006      	beq.n	800a41a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800a40c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	633b      	str	r3, [r7, #48]	@ 0x30
 800a412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a414:	2b00      	cmp	r3, #0
 800a416:	d1e6      	bne.n	800a3e6 <ip4_reass+0xb6>
 800a418:	e000      	b.n	800a41c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800a41a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800a41c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d109      	bne.n	800a436 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800a422:	8c3b      	ldrh	r3, [r7, #32]
 800a424:	4619      	mov	r1, r3
 800a426:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a428:	f7ff fdd0 	bl	8009fcc <ip_reass_enqueue_new_datagram>
 800a42c:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800a42e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a430:	2b00      	cmp	r3, #0
 800a432:	d11c      	bne.n	800a46e <ip4_reass+0x13e>
      goto nullreturn;
 800a434:	e101      	b.n	800a63a <ip4_reass+0x30a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800a436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a438:	88db      	ldrh	r3, [r3, #6]
 800a43a:	b29b      	uxth	r3, r3
 800a43c:	4618      	mov	r0, r3
 800a43e:	f7f7 faeb 	bl	8001a18 <lwip_htons>
 800a442:	4603      	mov	r3, r0
 800a444:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d110      	bne.n	800a46e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800a44c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a44e:	89db      	ldrh	r3, [r3, #14]
 800a450:	4618      	mov	r0, r3
 800a452:	f7f7 fae1 	bl	8001a18 <lwip_htons>
 800a456:	4603      	mov	r3, r0
 800a458:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d006      	beq.n	800a46e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800a460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a462:	3308      	adds	r3, #8
 800a464:	2214      	movs	r2, #20
 800a466:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a468:	4618      	mov	r0, r3
 800a46a:	f000 fcdc 	bl	800ae26 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800a46e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a470:	88db      	ldrh	r3, [r3, #6]
 800a472:	b29b      	uxth	r3, r3
 800a474:	f003 0320 	and.w	r3, r3, #32
 800a478:	2b00      	cmp	r3, #0
 800a47a:	bf0c      	ite	eq
 800a47c:	2301      	moveq	r3, #1
 800a47e:	2300      	movne	r3, #0
 800a480:	b2db      	uxtb	r3, r3
 800a482:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800a484:	69fb      	ldr	r3, [r7, #28]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d00e      	beq.n	800a4a8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800a48a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800a48c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a48e:	4413      	add	r3, r2
 800a490:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800a492:	8b7a      	ldrh	r2, [r7, #26]
 800a494:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a496:	429a      	cmp	r2, r3
 800a498:	f0c0 80a4 	bcc.w	800a5e4 <ip4_reass+0x2b4>
 800a49c:	8b7b      	ldrh	r3, [r7, #26]
 800a49e:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	f200 809e 	bhi.w	800a5e4 <ip4_reass+0x2b4>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800a4a8:	69fa      	ldr	r2, [r7, #28]
 800a4aa:	6879      	ldr	r1, [r7, #4]
 800a4ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a4ae:	f7ff fded 	bl	800a08c <ip_reass_chain_frag_into_datagram_and_validate>
 800a4b2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800a4b4:	697b      	ldr	r3, [r7, #20]
 800a4b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4ba:	f000 8095 	beq.w	800a5e8 <ip4_reass+0x2b8>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800a4be:	4b56      	ldr	r3, [pc, #344]	@ (800a618 <ip4_reass+0x2e8>)
 800a4c0:	881a      	ldrh	r2, [r3, #0]
 800a4c2:	8c3b      	ldrh	r3, [r7, #32]
 800a4c4:	4413      	add	r3, r2
 800a4c6:	b29a      	uxth	r2, r3
 800a4c8:	4b53      	ldr	r3, [pc, #332]	@ (800a618 <ip4_reass+0x2e8>)
 800a4ca:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800a4cc:	69fb      	ldr	r3, [r7, #28]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d00d      	beq.n	800a4ee <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800a4d2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800a4d4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a4d6:	4413      	add	r3, r2
 800a4d8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800a4da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4dc:	8a7a      	ldrh	r2, [r7, #18]
 800a4de:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800a4e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4e2:	7f9b      	ldrb	r3, [r3, #30]
 800a4e4:	f043 0301 	orr.w	r3, r3, #1
 800a4e8:	b2da      	uxtb	r2, r3
 800a4ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4ec:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800a4ee:	697b      	ldr	r3, [r7, #20]
 800a4f0:	2b01      	cmp	r3, #1
 800a4f2:	d175      	bne.n	800a5e0 <ip4_reass+0x2b0>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800a4f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4f6:	8b9b      	ldrh	r3, [r3, #28]
 800a4f8:	3314      	adds	r3, #20
 800a4fa:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800a4fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4fe:	685b      	ldr	r3, [r3, #4]
 800a500:	685b      	ldr	r3, [r3, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800a506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a508:	685b      	ldr	r3, [r3, #4]
 800a50a:	685b      	ldr	r3, [r3, #4]
 800a50c:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800a50e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a510:	3308      	adds	r3, #8
 800a512:	2214      	movs	r2, #20
 800a514:	4619      	mov	r1, r3
 800a516:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a518:	f000 fc85 	bl	800ae26 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800a51c:	8a3b      	ldrh	r3, [r7, #16]
 800a51e:	4618      	mov	r0, r3
 800a520:	f7f7 fa7a 	bl	8001a18 <lwip_htons>
 800a524:	4603      	mov	r3, r0
 800a526:	461a      	mov	r2, r3
 800a528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a52a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800a52c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a52e:	2200      	movs	r2, #0
 800a530:	719a      	strb	r2, [r3, #6]
 800a532:	2200      	movs	r2, #0
 800a534:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800a536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a538:	2200      	movs	r2, #0
 800a53a:	729a      	strb	r2, [r3, #10]
 800a53c:	2200      	movs	r2, #0
 800a53e:	72da      	strb	r2, [r3, #11]
    /* @todo: do we need to set/calculate the correct checksum? */
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 800a540:	2114      	movs	r1, #20
 800a542:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a544:	f7f7 fbb0 	bl	8001ca8 <inet_chksum>
 800a548:	4603      	mov	r3, r0
 800a54a:	461a      	mov	r2, r3
 800a54c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a54e:	815a      	strh	r2, [r3, #10]
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800a550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a552:	685b      	ldr	r3, [r3, #4]
 800a554:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800a556:	e00d      	b.n	800a574 <ip4_reass+0x244>
      iprh = (struct ip_reass_helper *)r->payload;
 800a558:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a55a:	685b      	ldr	r3, [r3, #4]
 800a55c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800a55e:	2114      	movs	r1, #20
 800a560:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800a562:	f7f8 fcef 	bl	8002f44 <pbuf_remove_header>
      pbuf_cat(p, r);
 800a566:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800a568:	6878      	ldr	r0, [r7, #4]
 800a56a:	f7f8 fe05 	bl	8003178 <pbuf_cat>
      r = iprh->next_pbuf;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 800a574:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a576:	2b00      	cmp	r3, #0
 800a578:	d1ee      	bne.n	800a558 <ip4_reass+0x228>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800a57a:	4b28      	ldr	r3, [pc, #160]	@ (800a61c <ip4_reass+0x2ec>)
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a580:	429a      	cmp	r2, r3
 800a582:	d102      	bne.n	800a58a <ip4_reass+0x25a>
      ipr_prev = NULL;
 800a584:	2300      	movs	r3, #0
 800a586:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a588:	e010      	b.n	800a5ac <ip4_reass+0x27c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800a58a:	4b24      	ldr	r3, [pc, #144]	@ (800a61c <ip4_reass+0x2ec>)
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a590:	e007      	b.n	800a5a2 <ip4_reass+0x272>
        if (ipr_prev->next == ipr) {
 800a592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a598:	429a      	cmp	r2, r3
 800a59a:	d006      	beq.n	800a5aa <ip4_reass+0x27a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800a59c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a5a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d1f4      	bne.n	800a592 <ip4_reass+0x262>
 800a5a8:	e000      	b.n	800a5ac <ip4_reass+0x27c>
          break;
 800a5aa:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800a5ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a5ae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a5b0:	f7ff fd46 	bl	800a040 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800a5b4:	6878      	ldr	r0, [r7, #4]
 800a5b6:	f7f8 fdad 	bl	8003114 <pbuf_clen>
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800a5be:	4b16      	ldr	r3, [pc, #88]	@ (800a618 <ip4_reass+0x2e8>)
 800a5c0:	881b      	ldrh	r3, [r3, #0]
 800a5c2:	8c3a      	ldrh	r2, [r7, #32]
 800a5c4:	429a      	cmp	r2, r3
 800a5c6:	d902      	bls.n	800a5ce <ip4_reass+0x29e>
 800a5c8:	4815      	ldr	r0, [pc, #84]	@ (800a620 <ip4_reass+0x2f0>)
 800a5ca:	f000 fb4b 	bl	800ac64 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800a5ce:	4b12      	ldr	r3, [pc, #72]	@ (800a618 <ip4_reass+0x2e8>)
 800a5d0:	881a      	ldrh	r2, [r3, #0]
 800a5d2:	8c3b      	ldrh	r3, [r7, #32]
 800a5d4:	1ad3      	subs	r3, r2, r3
 800a5d6:	b29a      	uxth	r2, r3
 800a5d8:	4b0f      	ldr	r3, [pc, #60]	@ (800a618 <ip4_reass+0x2e8>)
 800a5da:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	e030      	b.n	800a642 <ip4_reass+0x312>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	e02e      	b.n	800a642 <ip4_reass+0x312>
      goto nullreturn_ipr;
 800a5e4:	bf00      	nop
 800a5e6:	e000      	b.n	800a5ea <ip4_reass+0x2ba>
    goto nullreturn_ipr;
 800a5e8:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800a5ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d102      	bne.n	800a5f6 <ip4_reass+0x2c6>
 800a5f0:	480c      	ldr	r0, [pc, #48]	@ (800a624 <ip4_reass+0x2f4>)
 800a5f2:	f000 fb37 	bl	800ac64 <iprintf>
  if (ipr->p == NULL) {
 800a5f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5f8:	685b      	ldr	r3, [r3, #4]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d11c      	bne.n	800a638 <ip4_reass+0x308>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800a5fe:	4b07      	ldr	r3, [pc, #28]	@ (800a61c <ip4_reass+0x2ec>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a604:	429a      	cmp	r2, r3
 800a606:	d002      	beq.n	800a60e <ip4_reass+0x2de>
 800a608:	4807      	ldr	r0, [pc, #28]	@ (800a628 <ip4_reass+0x2f8>)
 800a60a:	f000 fb2b 	bl	800ac64 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800a60e:	2100      	movs	r1, #0
 800a610:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a612:	f7ff fd15 	bl	800a040 <ip_reass_dequeue_datagram>
 800a616:	e010      	b.n	800a63a <ip4_reass+0x30a>
 800a618:	24008c64 	.word	0x24008c64
 800a61c:	24008c60 	.word	0x24008c60
 800a620:	0800d514 	.word	0x0800d514
 800a624:	0800d530 	.word	0x0800d530
 800a628:	0800d53c 	.word	0x0800d53c
    goto nullreturn;
 800a62c:	bf00      	nop
 800a62e:	e004      	b.n	800a63a <ip4_reass+0x30a>
    goto nullreturn;
 800a630:	bf00      	nop
 800a632:	e002      	b.n	800a63a <ip4_reass+0x30a>
      goto nullreturn;
 800a634:	bf00      	nop
 800a636:	e000      	b.n	800a63a <ip4_reass+0x30a>
  }

nullreturn:
 800a638:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800a63a:	6878      	ldr	r0, [r7, #4]
 800a63c:	f7f8 fcf6 	bl	800302c <pbuf_free>
  return NULL;
 800a640:	2300      	movs	r3, #0
}
 800a642:	4618      	mov	r0, r3
 800a644:	3738      	adds	r7, #56	@ 0x38
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}
 800a64a:	bf00      	nop

0800a64c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800a650:	2005      	movs	r0, #5
 800a652:	f7f7 ff53 	bl	80024fc <memp_malloc>
 800a656:	4603      	mov	r3, r0
}
 800a658:	4618      	mov	r0, r3
 800a65a:	bd80      	pop	{r7, pc}

0800a65c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b082      	sub	sp, #8
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d102      	bne.n	800a670 <ip_frag_free_pbuf_custom_ref+0x14>
 800a66a:	4805      	ldr	r0, [pc, #20]	@ (800a680 <ip_frag_free_pbuf_custom_ref+0x24>)
 800a66c:	f000 fafa 	bl	800ac64 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800a670:	6879      	ldr	r1, [r7, #4]
 800a672:	2005      	movs	r0, #5
 800a674:	f7f7 ff7a 	bl	800256c <memp_free>
}
 800a678:	bf00      	nop
 800a67a:	3708      	adds	r7, #8
 800a67c:	46bd      	mov	sp, r7
 800a67e:	bd80      	pop	{r7, pc}
 800a680:	0800d55c 	.word	0x0800d55c

0800a684 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b084      	sub	sp, #16
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d102      	bne.n	800a69c <ipfrag_free_pbuf_custom+0x18>
 800a696:	480d      	ldr	r0, [pc, #52]	@ (800a6cc <ipfrag_free_pbuf_custom+0x48>)
 800a698:	f000 fae4 	bl	800ac64 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800a69c:	68fa      	ldr	r2, [r7, #12]
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	429a      	cmp	r2, r3
 800a6a2:	d002      	beq.n	800a6aa <ipfrag_free_pbuf_custom+0x26>
 800a6a4:	480a      	ldr	r0, [pc, #40]	@ (800a6d0 <ipfrag_free_pbuf_custom+0x4c>)
 800a6a6:	f000 fadd 	bl	800ac64 <iprintf>
  if (pcr->original != NULL) {
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	695b      	ldr	r3, [r3, #20]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d004      	beq.n	800a6bc <ipfrag_free_pbuf_custom+0x38>
    pbuf_free(pcr->original);
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	695b      	ldr	r3, [r3, #20]
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	f7f8 fcb8 	bl	800302c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800a6bc:	68f8      	ldr	r0, [r7, #12]
 800a6be:	f7ff ffcd 	bl	800a65c <ip_frag_free_pbuf_custom_ref>
}
 800a6c2:	bf00      	nop
 800a6c4:	3710      	adds	r7, #16
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bd80      	pop	{r7, pc}
 800a6ca:	bf00      	nop
 800a6cc:	0800d568 	.word	0x0800d568
 800a6d0:	0800d574 	.word	0x0800d574

0800a6d4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b094      	sub	sp, #80	@ 0x50
 800a6d8:	af02      	add	r7, sp, #8
 800a6da:	60f8      	str	r0, [r7, #12]
 800a6dc:	60b9      	str	r1, [r7, #8]
 800a6de:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800a6e6:	68bb      	ldr	r3, [r7, #8]
 800a6e8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800a6ea:	3b14      	subs	r3, #20
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	da00      	bge.n	800a6f2 <ip4_frag+0x1e>
 800a6f0:	3307      	adds	r3, #7
 800a6f2:	10db      	asrs	r3, r3, #3
 800a6f4:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800a6f6:	2314      	movs	r3, #20
 800a6f8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	685b      	ldr	r3, [r3, #4]
 800a6fe:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 800a700:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a702:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800a704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a706:	781b      	ldrb	r3, [r3, #0]
 800a708:	f003 030f 	and.w	r3, r3, #15
 800a70c:	b2db      	uxtb	r3, r3
 800a70e:	009b      	lsls	r3, r3, #2
 800a710:	b2db      	uxtb	r3, r3
 800a712:	2b14      	cmp	r3, #20
 800a714:	d002      	beq.n	800a71c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800a716:	f06f 0305 	mvn.w	r3, #5
 800a71a:	e109      	b.n	800a930 <ip4_frag+0x25c>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	895b      	ldrh	r3, [r3, #10]
 800a720:	2b13      	cmp	r3, #19
 800a722:	d802      	bhi.n	800a72a <ip4_frag+0x56>
 800a724:	f06f 0305 	mvn.w	r3, #5
 800a728:	e102      	b.n	800a930 <ip4_frag+0x25c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800a72a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a72c:	88db      	ldrh	r3, [r3, #6]
 800a72e:	b29b      	uxth	r3, r3
 800a730:	4618      	mov	r0, r3
 800a732:	f7f7 f971 	bl	8001a18 <lwip_htons>
 800a736:	4603      	mov	r3, r0
 800a738:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 800a73a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800a73c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a740:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800a744:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800a746:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a74a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	891b      	ldrh	r3, [r3, #8]
 800a750:	3b14      	subs	r3, #20
 800a752:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 800a756:	e0e1      	b.n	800a91c <ip4_frag+0x248>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800a758:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800a75a:	00db      	lsls	r3, r3, #3
 800a75c:	b29b      	uxth	r3, r3
 800a75e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800a762:	4293      	cmp	r3, r2
 800a764:	bf28      	it	cs
 800a766:	4613      	movcs	r3, r2
 800a768:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800a76a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800a76e:	2114      	movs	r1, #20
 800a770:	200e      	movs	r0, #14
 800a772:	f7f8 f9b5 	bl	8002ae0 <pbuf_alloc>
 800a776:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 800a778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	f000 80d5 	beq.w	800a92a <ip4_frag+0x256>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800a780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a782:	895b      	ldrh	r3, [r3, #10]
 800a784:	2b13      	cmp	r3, #19
 800a786:	d802      	bhi.n	800a78e <ip4_frag+0xba>
 800a788:	486b      	ldr	r0, [pc, #428]	@ (800a938 <ip4_frag+0x264>)
 800a78a:	f000 fa6b 	bl	800ac64 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800a78e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a790:	685b      	ldr	r3, [r3, #4]
 800a792:	2214      	movs	r2, #20
 800a794:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800a796:	4618      	mov	r0, r3
 800a798:	f000 fb45 	bl	800ae26 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800a79c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a79e:	685b      	ldr	r3, [r3, #4]
 800a7a0:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 800a7a2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a7a4:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 800a7a8:	e060      	b.n	800a86c <ip4_frag+0x198>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	895a      	ldrh	r2, [r3, #10]
 800a7ae:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a7b0:	1ad3      	subs	r3, r2, r3
 800a7b2:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	895b      	ldrh	r3, [r3, #10]
 800a7b8:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800a7ba:	429a      	cmp	r2, r3
 800a7bc:	d902      	bls.n	800a7c4 <ip4_frag+0xf0>
 800a7be:	485f      	ldr	r0, [pc, #380]	@ (800a93c <ip4_frag+0x268>)
 800a7c0:	f000 fa50 	bl	800ac64 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800a7c4:	8bfa      	ldrh	r2, [r7, #30]
 800a7c6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800a7ca:	4293      	cmp	r3, r2
 800a7cc:	bf28      	it	cs
 800a7ce:	4613      	movcs	r3, r2
 800a7d0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800a7d4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d105      	bne.n	800a7e8 <ip4_frag+0x114>
        poff = 0;
 800a7dc:	2300      	movs	r3, #0
 800a7de:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	60fb      	str	r3, [r7, #12]
        continue;
 800a7e6:	e041      	b.n	800a86c <ip4_frag+0x198>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800a7e8:	f7ff ff30 	bl	800a64c <ip_frag_alloc_pbuf_custom_ref>
 800a7ec:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800a7ee:	69bb      	ldr	r3, [r7, #24]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d103      	bne.n	800a7fc <ip4_frag+0x128>
        pbuf_free(rambuf);
 800a7f4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a7f6:	f7f8 fc19 	bl	800302c <pbuf_free>
        goto memerr;
 800a7fa:	e097      	b.n	800a92c <ip4_frag+0x258>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800a7fc:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800a802:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a804:	4413      	add	r3, r2
 800a806:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 800a80a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800a80e:	9201      	str	r2, [sp, #4]
 800a810:	9300      	str	r3, [sp, #0]
 800a812:	4603      	mov	r3, r0
 800a814:	2241      	movs	r2, #65	@ 0x41
 800a816:	2000      	movs	r0, #0
 800a818:	f7f8 fa70 	bl	8002cfc <pbuf_alloced_custom>
 800a81c:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800a81e:	697b      	ldr	r3, [r7, #20]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d106      	bne.n	800a832 <ip4_frag+0x15e>
        ip_frag_free_pbuf_custom_ref(pcr);
 800a824:	69b8      	ldr	r0, [r7, #24]
 800a826:	f7ff ff19 	bl	800a65c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800a82a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a82c:	f7f8 fbfe 	bl	800302c <pbuf_free>
        goto memerr;
 800a830:	e07c      	b.n	800a92c <ip4_frag+0x258>
      }
      pbuf_ref(p);
 800a832:	68f8      	ldr	r0, [r7, #12]
 800a834:	f7f8 fc86 	bl	8003144 <pbuf_ref>
      pcr->original = p;
 800a838:	69bb      	ldr	r3, [r7, #24]
 800a83a:	68fa      	ldr	r2, [r7, #12]
 800a83c:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800a83e:	69bb      	ldr	r3, [r7, #24]
 800a840:	4a3f      	ldr	r2, [pc, #252]	@ (800a940 <ip4_frag+0x26c>)
 800a842:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800a844:	6979      	ldr	r1, [r7, #20]
 800a846:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a848:	f7f8 fc96 	bl	8003178 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800a84c:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800a850:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a854:	1ad3      	subs	r3, r2, r3
 800a856:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 800a85a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d004      	beq.n	800a86c <ip4_frag+0x198>
        poff = 0;
 800a862:	2300      	movs	r3, #0
 800a864:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800a86c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800a870:	2b00      	cmp	r3, #0
 800a872:	d19a      	bne.n	800a7aa <ip4_frag+0xd6>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800a874:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800a876:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a87a:	4413      	add	r3, r2
 800a87c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800a87e:	68bb      	ldr	r3, [r7, #8]
 800a880:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800a882:	f1a3 0213 	sub.w	r2, r3, #19
 800a886:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a88a:	429a      	cmp	r2, r3
 800a88c:	bfcc      	ite	gt
 800a88e:	2301      	movgt	r3, #1
 800a890:	2300      	movle	r3, #0
 800a892:	b2db      	uxtb	r3, r3
 800a894:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800a896:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800a89a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a89e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 800a8a0:	6a3b      	ldr	r3, [r7, #32]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d002      	beq.n	800a8ac <ip4_frag+0x1d8>
 800a8a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d003      	beq.n	800a8b4 <ip4_frag+0x1e0>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800a8ac:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800a8ae:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800a8b2:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800a8b4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	f7f7 f8ae 	bl	8001a18 <lwip_htons>
 800a8bc:	4603      	mov	r3, r0
 800a8be:	461a      	mov	r2, r3
 800a8c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8c2:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800a8c4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a8c6:	3314      	adds	r3, #20
 800a8c8:	b29b      	uxth	r3, r3
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	f7f7 f8a4 	bl	8001a18 <lwip_htons>
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	461a      	mov	r2, r3
 800a8d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8d6:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800a8d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8da:	2200      	movs	r2, #0
 800a8dc:	729a      	strb	r2, [r3, #10]
 800a8de:	2200      	movs	r2, #0
 800a8e0:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 800a8e2:	2114      	movs	r1, #20
 800a8e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a8e6:	f7f7 f9df 	bl	8001ca8 <inet_chksum>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	461a      	mov	r2, r3
 800a8ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8f0:	815a      	strh	r2, [r3, #10]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800a8f2:	68bb      	ldr	r3, [r7, #8]
 800a8f4:	695b      	ldr	r3, [r3, #20]
 800a8f6:	687a      	ldr	r2, [r7, #4]
 800a8f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a8fa:	68b8      	ldr	r0, [r7, #8]
 800a8fc:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800a8fe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a900:	f7f8 fb94 	bl	800302c <pbuf_free>
    left = (u16_t)(left - fragsize);
 800a904:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800a908:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a90a:	1ad3      	subs	r3, r2, r3
 800a90c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 800a910:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800a914:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800a916:	4413      	add	r3, r2
 800a918:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 800a91c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a920:	2b00      	cmp	r3, #0
 800a922:	f47f af19 	bne.w	800a758 <ip4_frag+0x84>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800a926:	2300      	movs	r3, #0
 800a928:	e002      	b.n	800a930 <ip4_frag+0x25c>
      goto memerr;
 800a92a:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800a92c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a930:	4618      	mov	r0, r3
 800a932:	3748      	adds	r7, #72	@ 0x48
 800a934:	46bd      	mov	sp, r7
 800a936:	bd80      	pop	{r7, pc}
 800a938:	0800d580 	.word	0x0800d580
 800a93c:	0800d5a0 	.word	0x0800d5a0
 800a940:	0800a685 	.word	0x0800a685

0800a944 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b086      	sub	sp, #24
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
 800a94c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800a94e:	230e      	movs	r3, #14
 800a950:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	895b      	ldrh	r3, [r3, #10]
 800a956:	2b0e      	cmp	r3, #14
 800a958:	d96e      	bls.n	800aa38 <ethernet_input+0xf4>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	685b      	ldr	r3, [r3, #4]
 800a95e:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800a960:	693b      	ldr	r3, [r7, #16]
 800a962:	7b1a      	ldrb	r2, [r3, #12]
 800a964:	7b5b      	ldrb	r3, [r3, #13]
 800a966:	021b      	lsls	r3, r3, #8
 800a968:	4313      	orrs	r3, r2
 800a96a:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (p->if_idx == NETIF_NO_INDEX) {
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	7bdb      	ldrb	r3, [r3, #15]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d106      	bne.n	800a982 <ethernet_input+0x3e>
    p->if_idx = netif_get_index(netif);
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a97a:	3301      	adds	r3, #1
 800a97c:	b2da      	uxtb	r2, r3
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	73da      	strb	r2, [r3, #15]
  }

  if (ethhdr->dest.addr[0] & 1) {
 800a982:	693b      	ldr	r3, [r7, #16]
 800a984:	781b      	ldrb	r3, [r3, #0]
 800a986:	f003 0301 	and.w	r3, r3, #1
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d023      	beq.n	800a9d6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800a98e:	693b      	ldr	r3, [r7, #16]
 800a990:	781b      	ldrb	r3, [r3, #0]
 800a992:	2b01      	cmp	r3, #1
 800a994:	d10f      	bne.n	800a9b6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800a996:	693b      	ldr	r3, [r7, #16]
 800a998:	785b      	ldrb	r3, [r3, #1]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d11b      	bne.n	800a9d6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800a99e:	693b      	ldr	r3, [r7, #16]
 800a9a0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800a9a2:	2b5e      	cmp	r3, #94	@ 0x5e
 800a9a4:	d117      	bne.n	800a9d6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	7b5b      	ldrb	r3, [r3, #13]
 800a9aa:	f043 0310 	orr.w	r3, r3, #16
 800a9ae:	b2da      	uxtb	r2, r3
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	735a      	strb	r2, [r3, #13]
 800a9b4:	e00f      	b.n	800a9d6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800a9b6:	693b      	ldr	r3, [r7, #16]
 800a9b8:	2206      	movs	r2, #6
 800a9ba:	4928      	ldr	r1, [pc, #160]	@ (800aa5c <ethernet_input+0x118>)
 800a9bc:	4618      	mov	r0, r3
 800a9be:	f000 f9a6 	bl	800ad0e <memcmp>
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d106      	bne.n	800a9d6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	7b5b      	ldrb	r3, [r3, #13]
 800a9cc:	f043 0308 	orr.w	r3, r3, #8
 800a9d0:	b2da      	uxtb	r2, r3
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800a9d6:	89fb      	ldrh	r3, [r7, #14]
 800a9d8:	2b08      	cmp	r3, #8
 800a9da:	d003      	beq.n	800a9e4 <ethernet_input+0xa0>
 800a9dc:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 800a9e0:	d014      	beq.n	800aa0c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800a9e2:	e032      	b.n	800aa4a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a9ea:	f003 0308 	and.w	r3, r3, #8
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d024      	beq.n	800aa3c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800a9f2:	8afb      	ldrh	r3, [r7, #22]
 800a9f4:	4619      	mov	r1, r3
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f7f8 faa4 	bl	8002f44 <pbuf_remove_header>
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d11e      	bne.n	800aa40 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800aa02:	6839      	ldr	r1, [r7, #0]
 800aa04:	6878      	ldr	r0, [r7, #4]
 800aa06:	f7fe ff1f 	bl	8009848 <ip4_input>
      break;
 800aa0a:	e013      	b.n	800aa34 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800aa12:	f003 0308 	and.w	r3, r3, #8
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d014      	beq.n	800aa44 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800aa1a:	8afb      	ldrh	r3, [r7, #22]
 800aa1c:	4619      	mov	r1, r3
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f7f8 fa90 	bl	8002f44 <pbuf_remove_header>
 800aa24:	4603      	mov	r3, r0
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d10e      	bne.n	800aa48 <ethernet_input+0x104>
        etharp_input(p, netif);
 800aa2a:	6839      	ldr	r1, [r7, #0]
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f7fe f8b9 	bl	8008ba4 <etharp_input>
      break;
 800aa32:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800aa34:	2300      	movs	r3, #0
 800aa36:	e00c      	b.n	800aa52 <ethernet_input+0x10e>
    goto free_and_return;
 800aa38:	bf00      	nop
 800aa3a:	e006      	b.n	800aa4a <ethernet_input+0x106>
        goto free_and_return;
 800aa3c:	bf00      	nop
 800aa3e:	e004      	b.n	800aa4a <ethernet_input+0x106>
        goto free_and_return;
 800aa40:	bf00      	nop
 800aa42:	e002      	b.n	800aa4a <ethernet_input+0x106>
        goto free_and_return;
 800aa44:	bf00      	nop
 800aa46:	e000      	b.n	800aa4a <ethernet_input+0x106>
        goto free_and_return;
 800aa48:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800aa4a:	6878      	ldr	r0, [r7, #4]
 800aa4c:	f7f8 faee 	bl	800302c <pbuf_free>
  return ERR_OK;
 800aa50:	2300      	movs	r3, #0
}
 800aa52:	4618      	mov	r0, r3
 800aa54:	3718      	adds	r7, #24
 800aa56:	46bd      	mov	sp, r7
 800aa58:	bd80      	pop	{r7, pc}
 800aa5a:	bf00      	nop
 800aa5c:	0800d6b8 	.word	0x0800d6b8

0800aa60 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b086      	sub	sp, #24
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	60f8      	str	r0, [r7, #12]
 800aa68:	60b9      	str	r1, [r7, #8]
 800aa6a:	607a      	str	r2, [r7, #4]
 800aa6c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800aa6e:	8c3b      	ldrh	r3, [r7, #32]
 800aa70:	4618      	mov	r0, r3
 800aa72:	f7f6 ffd1 	bl	8001a18 <lwip_htons>
 800aa76:	4603      	mov	r3, r0
 800aa78:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && (defined(LWIP_HOOK_VLAN_SET) || LWIP_VLAN_PCP) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800aa7a:	210e      	movs	r1, #14
 800aa7c:	68b8      	ldr	r0, [r7, #8]
 800aa7e:	f7f8 fa51 	bl	8002f24 <pbuf_add_header>
 800aa82:	4603      	mov	r3, r0
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d121      	bne.n	800aacc <ethernet_output+0x6c>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800aa88:	68bb      	ldr	r3, [r7, #8]
 800aa8a:	685b      	ldr	r3, [r3, #4]
 800aa8c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800aa8e:	693b      	ldr	r3, [r7, #16]
 800aa90:	8afa      	ldrh	r2, [r7, #22]
 800aa92:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800aa94:	693b      	ldr	r3, [r7, #16]
 800aa96:	2206      	movs	r2, #6
 800aa98:	6839      	ldr	r1, [r7, #0]
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	f000 f9c3 	bl	800ae26 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800aaa0:	693b      	ldr	r3, [r7, #16]
 800aaa2:	3306      	adds	r3, #6
 800aaa4:	2206      	movs	r2, #6
 800aaa6:	6879      	ldr	r1, [r7, #4]
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	f000 f9bc 	bl	800ae26 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800aab4:	2b06      	cmp	r3, #6
 800aab6:	d002      	beq.n	800aabe <ethernet_output+0x5e>
 800aab8:	4808      	ldr	r0, [pc, #32]	@ (800aadc <ethernet_output+0x7c>)
 800aaba:	f000 f8d3 	bl	800ac64 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	699b      	ldr	r3, [r3, #24]
 800aac2:	68b9      	ldr	r1, [r7, #8]
 800aac4:	68f8      	ldr	r0, [r7, #12]
 800aac6:	4798      	blx	r3
 800aac8:	4603      	mov	r3, r0
 800aaca:	e002      	b.n	800aad2 <ethernet_output+0x72>
      goto pbuf_header_failed;
 800aacc:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800aace:	f06f 0301 	mvn.w	r3, #1
}
 800aad2:	4618      	mov	r0, r3
 800aad4:	3718      	adds	r7, #24
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bd80      	pop	{r7, pc}
 800aada:	bf00      	nop
 800aadc:	0800d5b0 	.word	0x0800d5b0

0800aae0 <std>:
 800aae0:	2300      	movs	r3, #0
 800aae2:	b510      	push	{r4, lr}
 800aae4:	4604      	mov	r4, r0
 800aae6:	e9c0 3300 	strd	r3, r3, [r0]
 800aaea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aaee:	6083      	str	r3, [r0, #8]
 800aaf0:	8181      	strh	r1, [r0, #12]
 800aaf2:	6643      	str	r3, [r0, #100]	@ 0x64
 800aaf4:	81c2      	strh	r2, [r0, #14]
 800aaf6:	6183      	str	r3, [r0, #24]
 800aaf8:	4619      	mov	r1, r3
 800aafa:	2208      	movs	r2, #8
 800aafc:	305c      	adds	r0, #92	@ 0x5c
 800aafe:	f000 f916 	bl	800ad2e <memset>
 800ab02:	4b0d      	ldr	r3, [pc, #52]	@ (800ab38 <std+0x58>)
 800ab04:	6263      	str	r3, [r4, #36]	@ 0x24
 800ab06:	4b0d      	ldr	r3, [pc, #52]	@ (800ab3c <std+0x5c>)
 800ab08:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ab0a:	4b0d      	ldr	r3, [pc, #52]	@ (800ab40 <std+0x60>)
 800ab0c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ab0e:	4b0d      	ldr	r3, [pc, #52]	@ (800ab44 <std+0x64>)
 800ab10:	6323      	str	r3, [r4, #48]	@ 0x30
 800ab12:	4b0d      	ldr	r3, [pc, #52]	@ (800ab48 <std+0x68>)
 800ab14:	6224      	str	r4, [r4, #32]
 800ab16:	429c      	cmp	r4, r3
 800ab18:	d006      	beq.n	800ab28 <std+0x48>
 800ab1a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ab1e:	4294      	cmp	r4, r2
 800ab20:	d002      	beq.n	800ab28 <std+0x48>
 800ab22:	33d0      	adds	r3, #208	@ 0xd0
 800ab24:	429c      	cmp	r4, r3
 800ab26:	d105      	bne.n	800ab34 <std+0x54>
 800ab28:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ab2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab30:	f000 b976 	b.w	800ae20 <__retarget_lock_init_recursive>
 800ab34:	bd10      	pop	{r4, pc}
 800ab36:	bf00      	nop
 800ab38:	0800ac89 	.word	0x0800ac89
 800ab3c:	0800acab 	.word	0x0800acab
 800ab40:	0800ace3 	.word	0x0800ace3
 800ab44:	0800ad07 	.word	0x0800ad07
 800ab48:	24008c68 	.word	0x24008c68

0800ab4c <stdio_exit_handler>:
 800ab4c:	4a02      	ldr	r2, [pc, #8]	@ (800ab58 <stdio_exit_handler+0xc>)
 800ab4e:	4903      	ldr	r1, [pc, #12]	@ (800ab5c <stdio_exit_handler+0x10>)
 800ab50:	4803      	ldr	r0, [pc, #12]	@ (800ab60 <stdio_exit_handler+0x14>)
 800ab52:	f000 b869 	b.w	800ac28 <_fwalk_sglue>
 800ab56:	bf00      	nop
 800ab58:	24000010 	.word	0x24000010
 800ab5c:	0800b6dd 	.word	0x0800b6dd
 800ab60:	24000020 	.word	0x24000020

0800ab64 <cleanup_stdio>:
 800ab64:	6841      	ldr	r1, [r0, #4]
 800ab66:	4b0c      	ldr	r3, [pc, #48]	@ (800ab98 <cleanup_stdio+0x34>)
 800ab68:	4299      	cmp	r1, r3
 800ab6a:	b510      	push	{r4, lr}
 800ab6c:	4604      	mov	r4, r0
 800ab6e:	d001      	beq.n	800ab74 <cleanup_stdio+0x10>
 800ab70:	f000 fdb4 	bl	800b6dc <_fflush_r>
 800ab74:	68a1      	ldr	r1, [r4, #8]
 800ab76:	4b09      	ldr	r3, [pc, #36]	@ (800ab9c <cleanup_stdio+0x38>)
 800ab78:	4299      	cmp	r1, r3
 800ab7a:	d002      	beq.n	800ab82 <cleanup_stdio+0x1e>
 800ab7c:	4620      	mov	r0, r4
 800ab7e:	f000 fdad 	bl	800b6dc <_fflush_r>
 800ab82:	68e1      	ldr	r1, [r4, #12]
 800ab84:	4b06      	ldr	r3, [pc, #24]	@ (800aba0 <cleanup_stdio+0x3c>)
 800ab86:	4299      	cmp	r1, r3
 800ab88:	d004      	beq.n	800ab94 <cleanup_stdio+0x30>
 800ab8a:	4620      	mov	r0, r4
 800ab8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab90:	f000 bda4 	b.w	800b6dc <_fflush_r>
 800ab94:	bd10      	pop	{r4, pc}
 800ab96:	bf00      	nop
 800ab98:	24008c68 	.word	0x24008c68
 800ab9c:	24008cd0 	.word	0x24008cd0
 800aba0:	24008d38 	.word	0x24008d38

0800aba4 <global_stdio_init.part.0>:
 800aba4:	b510      	push	{r4, lr}
 800aba6:	4b0b      	ldr	r3, [pc, #44]	@ (800abd4 <global_stdio_init.part.0+0x30>)
 800aba8:	4c0b      	ldr	r4, [pc, #44]	@ (800abd8 <global_stdio_init.part.0+0x34>)
 800abaa:	4a0c      	ldr	r2, [pc, #48]	@ (800abdc <global_stdio_init.part.0+0x38>)
 800abac:	601a      	str	r2, [r3, #0]
 800abae:	4620      	mov	r0, r4
 800abb0:	2200      	movs	r2, #0
 800abb2:	2104      	movs	r1, #4
 800abb4:	f7ff ff94 	bl	800aae0 <std>
 800abb8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800abbc:	2201      	movs	r2, #1
 800abbe:	2109      	movs	r1, #9
 800abc0:	f7ff ff8e 	bl	800aae0 <std>
 800abc4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800abc8:	2202      	movs	r2, #2
 800abca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abce:	2112      	movs	r1, #18
 800abd0:	f7ff bf86 	b.w	800aae0 <std>
 800abd4:	24008da0 	.word	0x24008da0
 800abd8:	24008c68 	.word	0x24008c68
 800abdc:	0800ab4d 	.word	0x0800ab4d

0800abe0 <__sfp_lock_acquire>:
 800abe0:	4801      	ldr	r0, [pc, #4]	@ (800abe8 <__sfp_lock_acquire+0x8>)
 800abe2:	f000 b91e 	b.w	800ae22 <__retarget_lock_acquire_recursive>
 800abe6:	bf00      	nop
 800abe8:	24008da9 	.word	0x24008da9

0800abec <__sfp_lock_release>:
 800abec:	4801      	ldr	r0, [pc, #4]	@ (800abf4 <__sfp_lock_release+0x8>)
 800abee:	f000 b919 	b.w	800ae24 <__retarget_lock_release_recursive>
 800abf2:	bf00      	nop
 800abf4:	24008da9 	.word	0x24008da9

0800abf8 <__sinit>:
 800abf8:	b510      	push	{r4, lr}
 800abfa:	4604      	mov	r4, r0
 800abfc:	f7ff fff0 	bl	800abe0 <__sfp_lock_acquire>
 800ac00:	6a23      	ldr	r3, [r4, #32]
 800ac02:	b11b      	cbz	r3, 800ac0c <__sinit+0x14>
 800ac04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac08:	f7ff bff0 	b.w	800abec <__sfp_lock_release>
 800ac0c:	4b04      	ldr	r3, [pc, #16]	@ (800ac20 <__sinit+0x28>)
 800ac0e:	6223      	str	r3, [r4, #32]
 800ac10:	4b04      	ldr	r3, [pc, #16]	@ (800ac24 <__sinit+0x2c>)
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d1f5      	bne.n	800ac04 <__sinit+0xc>
 800ac18:	f7ff ffc4 	bl	800aba4 <global_stdio_init.part.0>
 800ac1c:	e7f2      	b.n	800ac04 <__sinit+0xc>
 800ac1e:	bf00      	nop
 800ac20:	0800ab65 	.word	0x0800ab65
 800ac24:	24008da0 	.word	0x24008da0

0800ac28 <_fwalk_sglue>:
 800ac28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac2c:	4607      	mov	r7, r0
 800ac2e:	4688      	mov	r8, r1
 800ac30:	4614      	mov	r4, r2
 800ac32:	2600      	movs	r6, #0
 800ac34:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ac38:	f1b9 0901 	subs.w	r9, r9, #1
 800ac3c:	d505      	bpl.n	800ac4a <_fwalk_sglue+0x22>
 800ac3e:	6824      	ldr	r4, [r4, #0]
 800ac40:	2c00      	cmp	r4, #0
 800ac42:	d1f7      	bne.n	800ac34 <_fwalk_sglue+0xc>
 800ac44:	4630      	mov	r0, r6
 800ac46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac4a:	89ab      	ldrh	r3, [r5, #12]
 800ac4c:	2b01      	cmp	r3, #1
 800ac4e:	d907      	bls.n	800ac60 <_fwalk_sglue+0x38>
 800ac50:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ac54:	3301      	adds	r3, #1
 800ac56:	d003      	beq.n	800ac60 <_fwalk_sglue+0x38>
 800ac58:	4629      	mov	r1, r5
 800ac5a:	4638      	mov	r0, r7
 800ac5c:	47c0      	blx	r8
 800ac5e:	4306      	orrs	r6, r0
 800ac60:	3568      	adds	r5, #104	@ 0x68
 800ac62:	e7e9      	b.n	800ac38 <_fwalk_sglue+0x10>

0800ac64 <iprintf>:
 800ac64:	b40f      	push	{r0, r1, r2, r3}
 800ac66:	b507      	push	{r0, r1, r2, lr}
 800ac68:	4906      	ldr	r1, [pc, #24]	@ (800ac84 <iprintf+0x20>)
 800ac6a:	ab04      	add	r3, sp, #16
 800ac6c:	6808      	ldr	r0, [r1, #0]
 800ac6e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac72:	6881      	ldr	r1, [r0, #8]
 800ac74:	9301      	str	r3, [sp, #4]
 800ac76:	f000 fa07 	bl	800b088 <_vfiprintf_r>
 800ac7a:	b003      	add	sp, #12
 800ac7c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac80:	b004      	add	sp, #16
 800ac82:	4770      	bx	lr
 800ac84:	2400001c 	.word	0x2400001c

0800ac88 <__sread>:
 800ac88:	b510      	push	{r4, lr}
 800ac8a:	460c      	mov	r4, r1
 800ac8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac90:	f000 f878 	bl	800ad84 <_read_r>
 800ac94:	2800      	cmp	r0, #0
 800ac96:	bfab      	itete	ge
 800ac98:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ac9a:	89a3      	ldrhlt	r3, [r4, #12]
 800ac9c:	181b      	addge	r3, r3, r0
 800ac9e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800aca2:	bfac      	ite	ge
 800aca4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800aca6:	81a3      	strhlt	r3, [r4, #12]
 800aca8:	bd10      	pop	{r4, pc}

0800acaa <__swrite>:
 800acaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acae:	461f      	mov	r7, r3
 800acb0:	898b      	ldrh	r3, [r1, #12]
 800acb2:	05db      	lsls	r3, r3, #23
 800acb4:	4605      	mov	r5, r0
 800acb6:	460c      	mov	r4, r1
 800acb8:	4616      	mov	r6, r2
 800acba:	d505      	bpl.n	800acc8 <__swrite+0x1e>
 800acbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acc0:	2302      	movs	r3, #2
 800acc2:	2200      	movs	r2, #0
 800acc4:	f000 f84c 	bl	800ad60 <_lseek_r>
 800acc8:	89a3      	ldrh	r3, [r4, #12]
 800acca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800acce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800acd2:	81a3      	strh	r3, [r4, #12]
 800acd4:	4632      	mov	r2, r6
 800acd6:	463b      	mov	r3, r7
 800acd8:	4628      	mov	r0, r5
 800acda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800acde:	f000 b863 	b.w	800ada8 <_write_r>

0800ace2 <__sseek>:
 800ace2:	b510      	push	{r4, lr}
 800ace4:	460c      	mov	r4, r1
 800ace6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acea:	f000 f839 	bl	800ad60 <_lseek_r>
 800acee:	1c43      	adds	r3, r0, #1
 800acf0:	89a3      	ldrh	r3, [r4, #12]
 800acf2:	bf15      	itete	ne
 800acf4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800acf6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800acfa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800acfe:	81a3      	strheq	r3, [r4, #12]
 800ad00:	bf18      	it	ne
 800ad02:	81a3      	strhne	r3, [r4, #12]
 800ad04:	bd10      	pop	{r4, pc}

0800ad06 <__sclose>:
 800ad06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad0a:	f000 b819 	b.w	800ad40 <_close_r>

0800ad0e <memcmp>:
 800ad0e:	b510      	push	{r4, lr}
 800ad10:	3901      	subs	r1, #1
 800ad12:	4402      	add	r2, r0
 800ad14:	4290      	cmp	r0, r2
 800ad16:	d101      	bne.n	800ad1c <memcmp+0xe>
 800ad18:	2000      	movs	r0, #0
 800ad1a:	e005      	b.n	800ad28 <memcmp+0x1a>
 800ad1c:	7803      	ldrb	r3, [r0, #0]
 800ad1e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ad22:	42a3      	cmp	r3, r4
 800ad24:	d001      	beq.n	800ad2a <memcmp+0x1c>
 800ad26:	1b18      	subs	r0, r3, r4
 800ad28:	bd10      	pop	{r4, pc}
 800ad2a:	3001      	adds	r0, #1
 800ad2c:	e7f2      	b.n	800ad14 <memcmp+0x6>

0800ad2e <memset>:
 800ad2e:	4402      	add	r2, r0
 800ad30:	4603      	mov	r3, r0
 800ad32:	4293      	cmp	r3, r2
 800ad34:	d100      	bne.n	800ad38 <memset+0xa>
 800ad36:	4770      	bx	lr
 800ad38:	f803 1b01 	strb.w	r1, [r3], #1
 800ad3c:	e7f9      	b.n	800ad32 <memset+0x4>
	...

0800ad40 <_close_r>:
 800ad40:	b538      	push	{r3, r4, r5, lr}
 800ad42:	4d06      	ldr	r5, [pc, #24]	@ (800ad5c <_close_r+0x1c>)
 800ad44:	2300      	movs	r3, #0
 800ad46:	4604      	mov	r4, r0
 800ad48:	4608      	mov	r0, r1
 800ad4a:	602b      	str	r3, [r5, #0]
 800ad4c:	f7f6 faf5 	bl	800133a <_close>
 800ad50:	1c43      	adds	r3, r0, #1
 800ad52:	d102      	bne.n	800ad5a <_close_r+0x1a>
 800ad54:	682b      	ldr	r3, [r5, #0]
 800ad56:	b103      	cbz	r3, 800ad5a <_close_r+0x1a>
 800ad58:	6023      	str	r3, [r4, #0]
 800ad5a:	bd38      	pop	{r3, r4, r5, pc}
 800ad5c:	24008da4 	.word	0x24008da4

0800ad60 <_lseek_r>:
 800ad60:	b538      	push	{r3, r4, r5, lr}
 800ad62:	4d07      	ldr	r5, [pc, #28]	@ (800ad80 <_lseek_r+0x20>)
 800ad64:	4604      	mov	r4, r0
 800ad66:	4608      	mov	r0, r1
 800ad68:	4611      	mov	r1, r2
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	602a      	str	r2, [r5, #0]
 800ad6e:	461a      	mov	r2, r3
 800ad70:	f7f6 fb0a 	bl	8001388 <_lseek>
 800ad74:	1c43      	adds	r3, r0, #1
 800ad76:	d102      	bne.n	800ad7e <_lseek_r+0x1e>
 800ad78:	682b      	ldr	r3, [r5, #0]
 800ad7a:	b103      	cbz	r3, 800ad7e <_lseek_r+0x1e>
 800ad7c:	6023      	str	r3, [r4, #0]
 800ad7e:	bd38      	pop	{r3, r4, r5, pc}
 800ad80:	24008da4 	.word	0x24008da4

0800ad84 <_read_r>:
 800ad84:	b538      	push	{r3, r4, r5, lr}
 800ad86:	4d07      	ldr	r5, [pc, #28]	@ (800ada4 <_read_r+0x20>)
 800ad88:	4604      	mov	r4, r0
 800ad8a:	4608      	mov	r0, r1
 800ad8c:	4611      	mov	r1, r2
 800ad8e:	2200      	movs	r2, #0
 800ad90:	602a      	str	r2, [r5, #0]
 800ad92:	461a      	mov	r2, r3
 800ad94:	f7f6 fa98 	bl	80012c8 <_read>
 800ad98:	1c43      	adds	r3, r0, #1
 800ad9a:	d102      	bne.n	800ada2 <_read_r+0x1e>
 800ad9c:	682b      	ldr	r3, [r5, #0]
 800ad9e:	b103      	cbz	r3, 800ada2 <_read_r+0x1e>
 800ada0:	6023      	str	r3, [r4, #0]
 800ada2:	bd38      	pop	{r3, r4, r5, pc}
 800ada4:	24008da4 	.word	0x24008da4

0800ada8 <_write_r>:
 800ada8:	b538      	push	{r3, r4, r5, lr}
 800adaa:	4d07      	ldr	r5, [pc, #28]	@ (800adc8 <_write_r+0x20>)
 800adac:	4604      	mov	r4, r0
 800adae:	4608      	mov	r0, r1
 800adb0:	4611      	mov	r1, r2
 800adb2:	2200      	movs	r2, #0
 800adb4:	602a      	str	r2, [r5, #0]
 800adb6:	461a      	mov	r2, r3
 800adb8:	f7f6 faa3 	bl	8001302 <_write>
 800adbc:	1c43      	adds	r3, r0, #1
 800adbe:	d102      	bne.n	800adc6 <_write_r+0x1e>
 800adc0:	682b      	ldr	r3, [r5, #0]
 800adc2:	b103      	cbz	r3, 800adc6 <_write_r+0x1e>
 800adc4:	6023      	str	r3, [r4, #0]
 800adc6:	bd38      	pop	{r3, r4, r5, pc}
 800adc8:	24008da4 	.word	0x24008da4

0800adcc <__errno>:
 800adcc:	4b01      	ldr	r3, [pc, #4]	@ (800add4 <__errno+0x8>)
 800adce:	6818      	ldr	r0, [r3, #0]
 800add0:	4770      	bx	lr
 800add2:	bf00      	nop
 800add4:	2400001c 	.word	0x2400001c

0800add8 <__libc_init_array>:
 800add8:	b570      	push	{r4, r5, r6, lr}
 800adda:	4d0d      	ldr	r5, [pc, #52]	@ (800ae10 <__libc_init_array+0x38>)
 800addc:	4c0d      	ldr	r4, [pc, #52]	@ (800ae14 <__libc_init_array+0x3c>)
 800adde:	1b64      	subs	r4, r4, r5
 800ade0:	10a4      	asrs	r4, r4, #2
 800ade2:	2600      	movs	r6, #0
 800ade4:	42a6      	cmp	r6, r4
 800ade6:	d109      	bne.n	800adfc <__libc_init_array+0x24>
 800ade8:	4d0b      	ldr	r5, [pc, #44]	@ (800ae18 <__libc_init_array+0x40>)
 800adea:	4c0c      	ldr	r4, [pc, #48]	@ (800ae1c <__libc_init_array+0x44>)
 800adec:	f000 fdc6 	bl	800b97c <_init>
 800adf0:	1b64      	subs	r4, r4, r5
 800adf2:	10a4      	asrs	r4, r4, #2
 800adf4:	2600      	movs	r6, #0
 800adf6:	42a6      	cmp	r6, r4
 800adf8:	d105      	bne.n	800ae06 <__libc_init_array+0x2e>
 800adfa:	bd70      	pop	{r4, r5, r6, pc}
 800adfc:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae00:	4798      	blx	r3
 800ae02:	3601      	adds	r6, #1
 800ae04:	e7ee      	b.n	800ade4 <__libc_init_array+0xc>
 800ae06:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae0a:	4798      	blx	r3
 800ae0c:	3601      	adds	r6, #1
 800ae0e:	e7f2      	b.n	800adf6 <__libc_init_array+0x1e>
 800ae10:	0800d704 	.word	0x0800d704
 800ae14:	0800d704 	.word	0x0800d704
 800ae18:	0800d704 	.word	0x0800d704
 800ae1c:	0800d708 	.word	0x0800d708

0800ae20 <__retarget_lock_init_recursive>:
 800ae20:	4770      	bx	lr

0800ae22 <__retarget_lock_acquire_recursive>:
 800ae22:	4770      	bx	lr

0800ae24 <__retarget_lock_release_recursive>:
 800ae24:	4770      	bx	lr

0800ae26 <memcpy>:
 800ae26:	440a      	add	r2, r1
 800ae28:	4291      	cmp	r1, r2
 800ae2a:	f100 33ff 	add.w	r3, r0, #4294967295
 800ae2e:	d100      	bne.n	800ae32 <memcpy+0xc>
 800ae30:	4770      	bx	lr
 800ae32:	b510      	push	{r4, lr}
 800ae34:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae38:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae3c:	4291      	cmp	r1, r2
 800ae3e:	d1f9      	bne.n	800ae34 <memcpy+0xe>
 800ae40:	bd10      	pop	{r4, pc}
	...

0800ae44 <_free_r>:
 800ae44:	b538      	push	{r3, r4, r5, lr}
 800ae46:	4605      	mov	r5, r0
 800ae48:	2900      	cmp	r1, #0
 800ae4a:	d041      	beq.n	800aed0 <_free_r+0x8c>
 800ae4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae50:	1f0c      	subs	r4, r1, #4
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	bfb8      	it	lt
 800ae56:	18e4      	addlt	r4, r4, r3
 800ae58:	f000 f8e0 	bl	800b01c <__malloc_lock>
 800ae5c:	4a1d      	ldr	r2, [pc, #116]	@ (800aed4 <_free_r+0x90>)
 800ae5e:	6813      	ldr	r3, [r2, #0]
 800ae60:	b933      	cbnz	r3, 800ae70 <_free_r+0x2c>
 800ae62:	6063      	str	r3, [r4, #4]
 800ae64:	6014      	str	r4, [r2, #0]
 800ae66:	4628      	mov	r0, r5
 800ae68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae6c:	f000 b8dc 	b.w	800b028 <__malloc_unlock>
 800ae70:	42a3      	cmp	r3, r4
 800ae72:	d908      	bls.n	800ae86 <_free_r+0x42>
 800ae74:	6820      	ldr	r0, [r4, #0]
 800ae76:	1821      	adds	r1, r4, r0
 800ae78:	428b      	cmp	r3, r1
 800ae7a:	bf01      	itttt	eq
 800ae7c:	6819      	ldreq	r1, [r3, #0]
 800ae7e:	685b      	ldreq	r3, [r3, #4]
 800ae80:	1809      	addeq	r1, r1, r0
 800ae82:	6021      	streq	r1, [r4, #0]
 800ae84:	e7ed      	b.n	800ae62 <_free_r+0x1e>
 800ae86:	461a      	mov	r2, r3
 800ae88:	685b      	ldr	r3, [r3, #4]
 800ae8a:	b10b      	cbz	r3, 800ae90 <_free_r+0x4c>
 800ae8c:	42a3      	cmp	r3, r4
 800ae8e:	d9fa      	bls.n	800ae86 <_free_r+0x42>
 800ae90:	6811      	ldr	r1, [r2, #0]
 800ae92:	1850      	adds	r0, r2, r1
 800ae94:	42a0      	cmp	r0, r4
 800ae96:	d10b      	bne.n	800aeb0 <_free_r+0x6c>
 800ae98:	6820      	ldr	r0, [r4, #0]
 800ae9a:	4401      	add	r1, r0
 800ae9c:	1850      	adds	r0, r2, r1
 800ae9e:	4283      	cmp	r3, r0
 800aea0:	6011      	str	r1, [r2, #0]
 800aea2:	d1e0      	bne.n	800ae66 <_free_r+0x22>
 800aea4:	6818      	ldr	r0, [r3, #0]
 800aea6:	685b      	ldr	r3, [r3, #4]
 800aea8:	6053      	str	r3, [r2, #4]
 800aeaa:	4408      	add	r0, r1
 800aeac:	6010      	str	r0, [r2, #0]
 800aeae:	e7da      	b.n	800ae66 <_free_r+0x22>
 800aeb0:	d902      	bls.n	800aeb8 <_free_r+0x74>
 800aeb2:	230c      	movs	r3, #12
 800aeb4:	602b      	str	r3, [r5, #0]
 800aeb6:	e7d6      	b.n	800ae66 <_free_r+0x22>
 800aeb8:	6820      	ldr	r0, [r4, #0]
 800aeba:	1821      	adds	r1, r4, r0
 800aebc:	428b      	cmp	r3, r1
 800aebe:	bf04      	itt	eq
 800aec0:	6819      	ldreq	r1, [r3, #0]
 800aec2:	685b      	ldreq	r3, [r3, #4]
 800aec4:	6063      	str	r3, [r4, #4]
 800aec6:	bf04      	itt	eq
 800aec8:	1809      	addeq	r1, r1, r0
 800aeca:	6021      	streq	r1, [r4, #0]
 800aecc:	6054      	str	r4, [r2, #4]
 800aece:	e7ca      	b.n	800ae66 <_free_r+0x22>
 800aed0:	bd38      	pop	{r3, r4, r5, pc}
 800aed2:	bf00      	nop
 800aed4:	24008db0 	.word	0x24008db0

0800aed8 <sbrk_aligned>:
 800aed8:	b570      	push	{r4, r5, r6, lr}
 800aeda:	4e0f      	ldr	r6, [pc, #60]	@ (800af18 <sbrk_aligned+0x40>)
 800aedc:	460c      	mov	r4, r1
 800aede:	6831      	ldr	r1, [r6, #0]
 800aee0:	4605      	mov	r5, r0
 800aee2:	b911      	cbnz	r1, 800aeea <sbrk_aligned+0x12>
 800aee4:	f000 fcb6 	bl	800b854 <_sbrk_r>
 800aee8:	6030      	str	r0, [r6, #0]
 800aeea:	4621      	mov	r1, r4
 800aeec:	4628      	mov	r0, r5
 800aeee:	f000 fcb1 	bl	800b854 <_sbrk_r>
 800aef2:	1c43      	adds	r3, r0, #1
 800aef4:	d103      	bne.n	800aefe <sbrk_aligned+0x26>
 800aef6:	f04f 34ff 	mov.w	r4, #4294967295
 800aefa:	4620      	mov	r0, r4
 800aefc:	bd70      	pop	{r4, r5, r6, pc}
 800aefe:	1cc4      	adds	r4, r0, #3
 800af00:	f024 0403 	bic.w	r4, r4, #3
 800af04:	42a0      	cmp	r0, r4
 800af06:	d0f8      	beq.n	800aefa <sbrk_aligned+0x22>
 800af08:	1a21      	subs	r1, r4, r0
 800af0a:	4628      	mov	r0, r5
 800af0c:	f000 fca2 	bl	800b854 <_sbrk_r>
 800af10:	3001      	adds	r0, #1
 800af12:	d1f2      	bne.n	800aefa <sbrk_aligned+0x22>
 800af14:	e7ef      	b.n	800aef6 <sbrk_aligned+0x1e>
 800af16:	bf00      	nop
 800af18:	24008dac 	.word	0x24008dac

0800af1c <_malloc_r>:
 800af1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af20:	1ccd      	adds	r5, r1, #3
 800af22:	f025 0503 	bic.w	r5, r5, #3
 800af26:	3508      	adds	r5, #8
 800af28:	2d0c      	cmp	r5, #12
 800af2a:	bf38      	it	cc
 800af2c:	250c      	movcc	r5, #12
 800af2e:	2d00      	cmp	r5, #0
 800af30:	4606      	mov	r6, r0
 800af32:	db01      	blt.n	800af38 <_malloc_r+0x1c>
 800af34:	42a9      	cmp	r1, r5
 800af36:	d904      	bls.n	800af42 <_malloc_r+0x26>
 800af38:	230c      	movs	r3, #12
 800af3a:	6033      	str	r3, [r6, #0]
 800af3c:	2000      	movs	r0, #0
 800af3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af42:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b018 <_malloc_r+0xfc>
 800af46:	f000 f869 	bl	800b01c <__malloc_lock>
 800af4a:	f8d8 3000 	ldr.w	r3, [r8]
 800af4e:	461c      	mov	r4, r3
 800af50:	bb44      	cbnz	r4, 800afa4 <_malloc_r+0x88>
 800af52:	4629      	mov	r1, r5
 800af54:	4630      	mov	r0, r6
 800af56:	f7ff ffbf 	bl	800aed8 <sbrk_aligned>
 800af5a:	1c43      	adds	r3, r0, #1
 800af5c:	4604      	mov	r4, r0
 800af5e:	d158      	bne.n	800b012 <_malloc_r+0xf6>
 800af60:	f8d8 4000 	ldr.w	r4, [r8]
 800af64:	4627      	mov	r7, r4
 800af66:	2f00      	cmp	r7, #0
 800af68:	d143      	bne.n	800aff2 <_malloc_r+0xd6>
 800af6a:	2c00      	cmp	r4, #0
 800af6c:	d04b      	beq.n	800b006 <_malloc_r+0xea>
 800af6e:	6823      	ldr	r3, [r4, #0]
 800af70:	4639      	mov	r1, r7
 800af72:	4630      	mov	r0, r6
 800af74:	eb04 0903 	add.w	r9, r4, r3
 800af78:	f000 fc6c 	bl	800b854 <_sbrk_r>
 800af7c:	4581      	cmp	r9, r0
 800af7e:	d142      	bne.n	800b006 <_malloc_r+0xea>
 800af80:	6821      	ldr	r1, [r4, #0]
 800af82:	1a6d      	subs	r5, r5, r1
 800af84:	4629      	mov	r1, r5
 800af86:	4630      	mov	r0, r6
 800af88:	f7ff ffa6 	bl	800aed8 <sbrk_aligned>
 800af8c:	3001      	adds	r0, #1
 800af8e:	d03a      	beq.n	800b006 <_malloc_r+0xea>
 800af90:	6823      	ldr	r3, [r4, #0]
 800af92:	442b      	add	r3, r5
 800af94:	6023      	str	r3, [r4, #0]
 800af96:	f8d8 3000 	ldr.w	r3, [r8]
 800af9a:	685a      	ldr	r2, [r3, #4]
 800af9c:	bb62      	cbnz	r2, 800aff8 <_malloc_r+0xdc>
 800af9e:	f8c8 7000 	str.w	r7, [r8]
 800afa2:	e00f      	b.n	800afc4 <_malloc_r+0xa8>
 800afa4:	6822      	ldr	r2, [r4, #0]
 800afa6:	1b52      	subs	r2, r2, r5
 800afa8:	d420      	bmi.n	800afec <_malloc_r+0xd0>
 800afaa:	2a0b      	cmp	r2, #11
 800afac:	d917      	bls.n	800afde <_malloc_r+0xc2>
 800afae:	1961      	adds	r1, r4, r5
 800afb0:	42a3      	cmp	r3, r4
 800afb2:	6025      	str	r5, [r4, #0]
 800afb4:	bf18      	it	ne
 800afb6:	6059      	strne	r1, [r3, #4]
 800afb8:	6863      	ldr	r3, [r4, #4]
 800afba:	bf08      	it	eq
 800afbc:	f8c8 1000 	streq.w	r1, [r8]
 800afc0:	5162      	str	r2, [r4, r5]
 800afc2:	604b      	str	r3, [r1, #4]
 800afc4:	4630      	mov	r0, r6
 800afc6:	f000 f82f 	bl	800b028 <__malloc_unlock>
 800afca:	f104 000b 	add.w	r0, r4, #11
 800afce:	1d23      	adds	r3, r4, #4
 800afd0:	f020 0007 	bic.w	r0, r0, #7
 800afd4:	1ac2      	subs	r2, r0, r3
 800afd6:	bf1c      	itt	ne
 800afd8:	1a1b      	subne	r3, r3, r0
 800afda:	50a3      	strne	r3, [r4, r2]
 800afdc:	e7af      	b.n	800af3e <_malloc_r+0x22>
 800afde:	6862      	ldr	r2, [r4, #4]
 800afe0:	42a3      	cmp	r3, r4
 800afe2:	bf0c      	ite	eq
 800afe4:	f8c8 2000 	streq.w	r2, [r8]
 800afe8:	605a      	strne	r2, [r3, #4]
 800afea:	e7eb      	b.n	800afc4 <_malloc_r+0xa8>
 800afec:	4623      	mov	r3, r4
 800afee:	6864      	ldr	r4, [r4, #4]
 800aff0:	e7ae      	b.n	800af50 <_malloc_r+0x34>
 800aff2:	463c      	mov	r4, r7
 800aff4:	687f      	ldr	r7, [r7, #4]
 800aff6:	e7b6      	b.n	800af66 <_malloc_r+0x4a>
 800aff8:	461a      	mov	r2, r3
 800affa:	685b      	ldr	r3, [r3, #4]
 800affc:	42a3      	cmp	r3, r4
 800affe:	d1fb      	bne.n	800aff8 <_malloc_r+0xdc>
 800b000:	2300      	movs	r3, #0
 800b002:	6053      	str	r3, [r2, #4]
 800b004:	e7de      	b.n	800afc4 <_malloc_r+0xa8>
 800b006:	230c      	movs	r3, #12
 800b008:	6033      	str	r3, [r6, #0]
 800b00a:	4630      	mov	r0, r6
 800b00c:	f000 f80c 	bl	800b028 <__malloc_unlock>
 800b010:	e794      	b.n	800af3c <_malloc_r+0x20>
 800b012:	6005      	str	r5, [r0, #0]
 800b014:	e7d6      	b.n	800afc4 <_malloc_r+0xa8>
 800b016:	bf00      	nop
 800b018:	24008db0 	.word	0x24008db0

0800b01c <__malloc_lock>:
 800b01c:	4801      	ldr	r0, [pc, #4]	@ (800b024 <__malloc_lock+0x8>)
 800b01e:	f7ff bf00 	b.w	800ae22 <__retarget_lock_acquire_recursive>
 800b022:	bf00      	nop
 800b024:	24008da8 	.word	0x24008da8

0800b028 <__malloc_unlock>:
 800b028:	4801      	ldr	r0, [pc, #4]	@ (800b030 <__malloc_unlock+0x8>)
 800b02a:	f7ff befb 	b.w	800ae24 <__retarget_lock_release_recursive>
 800b02e:	bf00      	nop
 800b030:	24008da8 	.word	0x24008da8

0800b034 <__sfputc_r>:
 800b034:	6893      	ldr	r3, [r2, #8]
 800b036:	3b01      	subs	r3, #1
 800b038:	2b00      	cmp	r3, #0
 800b03a:	b410      	push	{r4}
 800b03c:	6093      	str	r3, [r2, #8]
 800b03e:	da08      	bge.n	800b052 <__sfputc_r+0x1e>
 800b040:	6994      	ldr	r4, [r2, #24]
 800b042:	42a3      	cmp	r3, r4
 800b044:	db01      	blt.n	800b04a <__sfputc_r+0x16>
 800b046:	290a      	cmp	r1, #10
 800b048:	d103      	bne.n	800b052 <__sfputc_r+0x1e>
 800b04a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b04e:	f000 bb6d 	b.w	800b72c <__swbuf_r>
 800b052:	6813      	ldr	r3, [r2, #0]
 800b054:	1c58      	adds	r0, r3, #1
 800b056:	6010      	str	r0, [r2, #0]
 800b058:	7019      	strb	r1, [r3, #0]
 800b05a:	4608      	mov	r0, r1
 800b05c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b060:	4770      	bx	lr

0800b062 <__sfputs_r>:
 800b062:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b064:	4606      	mov	r6, r0
 800b066:	460f      	mov	r7, r1
 800b068:	4614      	mov	r4, r2
 800b06a:	18d5      	adds	r5, r2, r3
 800b06c:	42ac      	cmp	r4, r5
 800b06e:	d101      	bne.n	800b074 <__sfputs_r+0x12>
 800b070:	2000      	movs	r0, #0
 800b072:	e007      	b.n	800b084 <__sfputs_r+0x22>
 800b074:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b078:	463a      	mov	r2, r7
 800b07a:	4630      	mov	r0, r6
 800b07c:	f7ff ffda 	bl	800b034 <__sfputc_r>
 800b080:	1c43      	adds	r3, r0, #1
 800b082:	d1f3      	bne.n	800b06c <__sfputs_r+0xa>
 800b084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b088 <_vfiprintf_r>:
 800b088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b08c:	460d      	mov	r5, r1
 800b08e:	b09d      	sub	sp, #116	@ 0x74
 800b090:	4614      	mov	r4, r2
 800b092:	4698      	mov	r8, r3
 800b094:	4606      	mov	r6, r0
 800b096:	b118      	cbz	r0, 800b0a0 <_vfiprintf_r+0x18>
 800b098:	6a03      	ldr	r3, [r0, #32]
 800b09a:	b90b      	cbnz	r3, 800b0a0 <_vfiprintf_r+0x18>
 800b09c:	f7ff fdac 	bl	800abf8 <__sinit>
 800b0a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b0a2:	07d9      	lsls	r1, r3, #31
 800b0a4:	d405      	bmi.n	800b0b2 <_vfiprintf_r+0x2a>
 800b0a6:	89ab      	ldrh	r3, [r5, #12]
 800b0a8:	059a      	lsls	r2, r3, #22
 800b0aa:	d402      	bmi.n	800b0b2 <_vfiprintf_r+0x2a>
 800b0ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b0ae:	f7ff feb8 	bl	800ae22 <__retarget_lock_acquire_recursive>
 800b0b2:	89ab      	ldrh	r3, [r5, #12]
 800b0b4:	071b      	lsls	r3, r3, #28
 800b0b6:	d501      	bpl.n	800b0bc <_vfiprintf_r+0x34>
 800b0b8:	692b      	ldr	r3, [r5, #16]
 800b0ba:	b99b      	cbnz	r3, 800b0e4 <_vfiprintf_r+0x5c>
 800b0bc:	4629      	mov	r1, r5
 800b0be:	4630      	mov	r0, r6
 800b0c0:	f000 fb72 	bl	800b7a8 <__swsetup_r>
 800b0c4:	b170      	cbz	r0, 800b0e4 <_vfiprintf_r+0x5c>
 800b0c6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b0c8:	07dc      	lsls	r4, r3, #31
 800b0ca:	d504      	bpl.n	800b0d6 <_vfiprintf_r+0x4e>
 800b0cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b0d0:	b01d      	add	sp, #116	@ 0x74
 800b0d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0d6:	89ab      	ldrh	r3, [r5, #12]
 800b0d8:	0598      	lsls	r0, r3, #22
 800b0da:	d4f7      	bmi.n	800b0cc <_vfiprintf_r+0x44>
 800b0dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b0de:	f7ff fea1 	bl	800ae24 <__retarget_lock_release_recursive>
 800b0e2:	e7f3      	b.n	800b0cc <_vfiprintf_r+0x44>
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	9309      	str	r3, [sp, #36]	@ 0x24
 800b0e8:	2320      	movs	r3, #32
 800b0ea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b0ee:	f8cd 800c 	str.w	r8, [sp, #12]
 800b0f2:	2330      	movs	r3, #48	@ 0x30
 800b0f4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b2a4 <_vfiprintf_r+0x21c>
 800b0f8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b0fc:	f04f 0901 	mov.w	r9, #1
 800b100:	4623      	mov	r3, r4
 800b102:	469a      	mov	sl, r3
 800b104:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b108:	b10a      	cbz	r2, 800b10e <_vfiprintf_r+0x86>
 800b10a:	2a25      	cmp	r2, #37	@ 0x25
 800b10c:	d1f9      	bne.n	800b102 <_vfiprintf_r+0x7a>
 800b10e:	ebba 0b04 	subs.w	fp, sl, r4
 800b112:	d00b      	beq.n	800b12c <_vfiprintf_r+0xa4>
 800b114:	465b      	mov	r3, fp
 800b116:	4622      	mov	r2, r4
 800b118:	4629      	mov	r1, r5
 800b11a:	4630      	mov	r0, r6
 800b11c:	f7ff ffa1 	bl	800b062 <__sfputs_r>
 800b120:	3001      	adds	r0, #1
 800b122:	f000 80a7 	beq.w	800b274 <_vfiprintf_r+0x1ec>
 800b126:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b128:	445a      	add	r2, fp
 800b12a:	9209      	str	r2, [sp, #36]	@ 0x24
 800b12c:	f89a 3000 	ldrb.w	r3, [sl]
 800b130:	2b00      	cmp	r3, #0
 800b132:	f000 809f 	beq.w	800b274 <_vfiprintf_r+0x1ec>
 800b136:	2300      	movs	r3, #0
 800b138:	f04f 32ff 	mov.w	r2, #4294967295
 800b13c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b140:	f10a 0a01 	add.w	sl, sl, #1
 800b144:	9304      	str	r3, [sp, #16]
 800b146:	9307      	str	r3, [sp, #28]
 800b148:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b14c:	931a      	str	r3, [sp, #104]	@ 0x68
 800b14e:	4654      	mov	r4, sl
 800b150:	2205      	movs	r2, #5
 800b152:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b156:	4853      	ldr	r0, [pc, #332]	@ (800b2a4 <_vfiprintf_r+0x21c>)
 800b158:	f7f5 f8c2 	bl	80002e0 <memchr>
 800b15c:	9a04      	ldr	r2, [sp, #16]
 800b15e:	b9d8      	cbnz	r0, 800b198 <_vfiprintf_r+0x110>
 800b160:	06d1      	lsls	r1, r2, #27
 800b162:	bf44      	itt	mi
 800b164:	2320      	movmi	r3, #32
 800b166:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b16a:	0713      	lsls	r3, r2, #28
 800b16c:	bf44      	itt	mi
 800b16e:	232b      	movmi	r3, #43	@ 0x2b
 800b170:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b174:	f89a 3000 	ldrb.w	r3, [sl]
 800b178:	2b2a      	cmp	r3, #42	@ 0x2a
 800b17a:	d015      	beq.n	800b1a8 <_vfiprintf_r+0x120>
 800b17c:	9a07      	ldr	r2, [sp, #28]
 800b17e:	4654      	mov	r4, sl
 800b180:	2000      	movs	r0, #0
 800b182:	f04f 0c0a 	mov.w	ip, #10
 800b186:	4621      	mov	r1, r4
 800b188:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b18c:	3b30      	subs	r3, #48	@ 0x30
 800b18e:	2b09      	cmp	r3, #9
 800b190:	d94b      	bls.n	800b22a <_vfiprintf_r+0x1a2>
 800b192:	b1b0      	cbz	r0, 800b1c2 <_vfiprintf_r+0x13a>
 800b194:	9207      	str	r2, [sp, #28]
 800b196:	e014      	b.n	800b1c2 <_vfiprintf_r+0x13a>
 800b198:	eba0 0308 	sub.w	r3, r0, r8
 800b19c:	fa09 f303 	lsl.w	r3, r9, r3
 800b1a0:	4313      	orrs	r3, r2
 800b1a2:	9304      	str	r3, [sp, #16]
 800b1a4:	46a2      	mov	sl, r4
 800b1a6:	e7d2      	b.n	800b14e <_vfiprintf_r+0xc6>
 800b1a8:	9b03      	ldr	r3, [sp, #12]
 800b1aa:	1d19      	adds	r1, r3, #4
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	9103      	str	r1, [sp, #12]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	bfbb      	ittet	lt
 800b1b4:	425b      	neglt	r3, r3
 800b1b6:	f042 0202 	orrlt.w	r2, r2, #2
 800b1ba:	9307      	strge	r3, [sp, #28]
 800b1bc:	9307      	strlt	r3, [sp, #28]
 800b1be:	bfb8      	it	lt
 800b1c0:	9204      	strlt	r2, [sp, #16]
 800b1c2:	7823      	ldrb	r3, [r4, #0]
 800b1c4:	2b2e      	cmp	r3, #46	@ 0x2e
 800b1c6:	d10a      	bne.n	800b1de <_vfiprintf_r+0x156>
 800b1c8:	7863      	ldrb	r3, [r4, #1]
 800b1ca:	2b2a      	cmp	r3, #42	@ 0x2a
 800b1cc:	d132      	bne.n	800b234 <_vfiprintf_r+0x1ac>
 800b1ce:	9b03      	ldr	r3, [sp, #12]
 800b1d0:	1d1a      	adds	r2, r3, #4
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	9203      	str	r2, [sp, #12]
 800b1d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b1da:	3402      	adds	r4, #2
 800b1dc:	9305      	str	r3, [sp, #20]
 800b1de:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b2b4 <_vfiprintf_r+0x22c>
 800b1e2:	7821      	ldrb	r1, [r4, #0]
 800b1e4:	2203      	movs	r2, #3
 800b1e6:	4650      	mov	r0, sl
 800b1e8:	f7f5 f87a 	bl	80002e0 <memchr>
 800b1ec:	b138      	cbz	r0, 800b1fe <_vfiprintf_r+0x176>
 800b1ee:	9b04      	ldr	r3, [sp, #16]
 800b1f0:	eba0 000a 	sub.w	r0, r0, sl
 800b1f4:	2240      	movs	r2, #64	@ 0x40
 800b1f6:	4082      	lsls	r2, r0
 800b1f8:	4313      	orrs	r3, r2
 800b1fa:	3401      	adds	r4, #1
 800b1fc:	9304      	str	r3, [sp, #16]
 800b1fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b202:	4829      	ldr	r0, [pc, #164]	@ (800b2a8 <_vfiprintf_r+0x220>)
 800b204:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b208:	2206      	movs	r2, #6
 800b20a:	f7f5 f869 	bl	80002e0 <memchr>
 800b20e:	2800      	cmp	r0, #0
 800b210:	d03f      	beq.n	800b292 <_vfiprintf_r+0x20a>
 800b212:	4b26      	ldr	r3, [pc, #152]	@ (800b2ac <_vfiprintf_r+0x224>)
 800b214:	bb1b      	cbnz	r3, 800b25e <_vfiprintf_r+0x1d6>
 800b216:	9b03      	ldr	r3, [sp, #12]
 800b218:	3307      	adds	r3, #7
 800b21a:	f023 0307 	bic.w	r3, r3, #7
 800b21e:	3308      	adds	r3, #8
 800b220:	9303      	str	r3, [sp, #12]
 800b222:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b224:	443b      	add	r3, r7
 800b226:	9309      	str	r3, [sp, #36]	@ 0x24
 800b228:	e76a      	b.n	800b100 <_vfiprintf_r+0x78>
 800b22a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b22e:	460c      	mov	r4, r1
 800b230:	2001      	movs	r0, #1
 800b232:	e7a8      	b.n	800b186 <_vfiprintf_r+0xfe>
 800b234:	2300      	movs	r3, #0
 800b236:	3401      	adds	r4, #1
 800b238:	9305      	str	r3, [sp, #20]
 800b23a:	4619      	mov	r1, r3
 800b23c:	f04f 0c0a 	mov.w	ip, #10
 800b240:	4620      	mov	r0, r4
 800b242:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b246:	3a30      	subs	r2, #48	@ 0x30
 800b248:	2a09      	cmp	r2, #9
 800b24a:	d903      	bls.n	800b254 <_vfiprintf_r+0x1cc>
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d0c6      	beq.n	800b1de <_vfiprintf_r+0x156>
 800b250:	9105      	str	r1, [sp, #20]
 800b252:	e7c4      	b.n	800b1de <_vfiprintf_r+0x156>
 800b254:	fb0c 2101 	mla	r1, ip, r1, r2
 800b258:	4604      	mov	r4, r0
 800b25a:	2301      	movs	r3, #1
 800b25c:	e7f0      	b.n	800b240 <_vfiprintf_r+0x1b8>
 800b25e:	ab03      	add	r3, sp, #12
 800b260:	9300      	str	r3, [sp, #0]
 800b262:	462a      	mov	r2, r5
 800b264:	4b12      	ldr	r3, [pc, #72]	@ (800b2b0 <_vfiprintf_r+0x228>)
 800b266:	a904      	add	r1, sp, #16
 800b268:	4630      	mov	r0, r6
 800b26a:	f3af 8000 	nop.w
 800b26e:	4607      	mov	r7, r0
 800b270:	1c78      	adds	r0, r7, #1
 800b272:	d1d6      	bne.n	800b222 <_vfiprintf_r+0x19a>
 800b274:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b276:	07d9      	lsls	r1, r3, #31
 800b278:	d405      	bmi.n	800b286 <_vfiprintf_r+0x1fe>
 800b27a:	89ab      	ldrh	r3, [r5, #12]
 800b27c:	059a      	lsls	r2, r3, #22
 800b27e:	d402      	bmi.n	800b286 <_vfiprintf_r+0x1fe>
 800b280:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b282:	f7ff fdcf 	bl	800ae24 <__retarget_lock_release_recursive>
 800b286:	89ab      	ldrh	r3, [r5, #12]
 800b288:	065b      	lsls	r3, r3, #25
 800b28a:	f53f af1f 	bmi.w	800b0cc <_vfiprintf_r+0x44>
 800b28e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b290:	e71e      	b.n	800b0d0 <_vfiprintf_r+0x48>
 800b292:	ab03      	add	r3, sp, #12
 800b294:	9300      	str	r3, [sp, #0]
 800b296:	462a      	mov	r2, r5
 800b298:	4b05      	ldr	r3, [pc, #20]	@ (800b2b0 <_vfiprintf_r+0x228>)
 800b29a:	a904      	add	r1, sp, #16
 800b29c:	4630      	mov	r0, r6
 800b29e:	f000 f879 	bl	800b394 <_printf_i>
 800b2a2:	e7e4      	b.n	800b26e <_vfiprintf_r+0x1e6>
 800b2a4:	0800d6c6 	.word	0x0800d6c6
 800b2a8:	0800d6d0 	.word	0x0800d6d0
 800b2ac:	00000000 	.word	0x00000000
 800b2b0:	0800b063 	.word	0x0800b063
 800b2b4:	0800d6cc 	.word	0x0800d6cc

0800b2b8 <_printf_common>:
 800b2b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2bc:	4616      	mov	r6, r2
 800b2be:	4698      	mov	r8, r3
 800b2c0:	688a      	ldr	r2, [r1, #8]
 800b2c2:	690b      	ldr	r3, [r1, #16]
 800b2c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b2c8:	4293      	cmp	r3, r2
 800b2ca:	bfb8      	it	lt
 800b2cc:	4613      	movlt	r3, r2
 800b2ce:	6033      	str	r3, [r6, #0]
 800b2d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b2d4:	4607      	mov	r7, r0
 800b2d6:	460c      	mov	r4, r1
 800b2d8:	b10a      	cbz	r2, 800b2de <_printf_common+0x26>
 800b2da:	3301      	adds	r3, #1
 800b2dc:	6033      	str	r3, [r6, #0]
 800b2de:	6823      	ldr	r3, [r4, #0]
 800b2e0:	0699      	lsls	r1, r3, #26
 800b2e2:	bf42      	ittt	mi
 800b2e4:	6833      	ldrmi	r3, [r6, #0]
 800b2e6:	3302      	addmi	r3, #2
 800b2e8:	6033      	strmi	r3, [r6, #0]
 800b2ea:	6825      	ldr	r5, [r4, #0]
 800b2ec:	f015 0506 	ands.w	r5, r5, #6
 800b2f0:	d106      	bne.n	800b300 <_printf_common+0x48>
 800b2f2:	f104 0a19 	add.w	sl, r4, #25
 800b2f6:	68e3      	ldr	r3, [r4, #12]
 800b2f8:	6832      	ldr	r2, [r6, #0]
 800b2fa:	1a9b      	subs	r3, r3, r2
 800b2fc:	42ab      	cmp	r3, r5
 800b2fe:	dc26      	bgt.n	800b34e <_printf_common+0x96>
 800b300:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b304:	6822      	ldr	r2, [r4, #0]
 800b306:	3b00      	subs	r3, #0
 800b308:	bf18      	it	ne
 800b30a:	2301      	movne	r3, #1
 800b30c:	0692      	lsls	r2, r2, #26
 800b30e:	d42b      	bmi.n	800b368 <_printf_common+0xb0>
 800b310:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b314:	4641      	mov	r1, r8
 800b316:	4638      	mov	r0, r7
 800b318:	47c8      	blx	r9
 800b31a:	3001      	adds	r0, #1
 800b31c:	d01e      	beq.n	800b35c <_printf_common+0xa4>
 800b31e:	6823      	ldr	r3, [r4, #0]
 800b320:	6922      	ldr	r2, [r4, #16]
 800b322:	f003 0306 	and.w	r3, r3, #6
 800b326:	2b04      	cmp	r3, #4
 800b328:	bf02      	ittt	eq
 800b32a:	68e5      	ldreq	r5, [r4, #12]
 800b32c:	6833      	ldreq	r3, [r6, #0]
 800b32e:	1aed      	subeq	r5, r5, r3
 800b330:	68a3      	ldr	r3, [r4, #8]
 800b332:	bf0c      	ite	eq
 800b334:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b338:	2500      	movne	r5, #0
 800b33a:	4293      	cmp	r3, r2
 800b33c:	bfc4      	itt	gt
 800b33e:	1a9b      	subgt	r3, r3, r2
 800b340:	18ed      	addgt	r5, r5, r3
 800b342:	2600      	movs	r6, #0
 800b344:	341a      	adds	r4, #26
 800b346:	42b5      	cmp	r5, r6
 800b348:	d11a      	bne.n	800b380 <_printf_common+0xc8>
 800b34a:	2000      	movs	r0, #0
 800b34c:	e008      	b.n	800b360 <_printf_common+0xa8>
 800b34e:	2301      	movs	r3, #1
 800b350:	4652      	mov	r2, sl
 800b352:	4641      	mov	r1, r8
 800b354:	4638      	mov	r0, r7
 800b356:	47c8      	blx	r9
 800b358:	3001      	adds	r0, #1
 800b35a:	d103      	bne.n	800b364 <_printf_common+0xac>
 800b35c:	f04f 30ff 	mov.w	r0, #4294967295
 800b360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b364:	3501      	adds	r5, #1
 800b366:	e7c6      	b.n	800b2f6 <_printf_common+0x3e>
 800b368:	18e1      	adds	r1, r4, r3
 800b36a:	1c5a      	adds	r2, r3, #1
 800b36c:	2030      	movs	r0, #48	@ 0x30
 800b36e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b372:	4422      	add	r2, r4
 800b374:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b378:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b37c:	3302      	adds	r3, #2
 800b37e:	e7c7      	b.n	800b310 <_printf_common+0x58>
 800b380:	2301      	movs	r3, #1
 800b382:	4622      	mov	r2, r4
 800b384:	4641      	mov	r1, r8
 800b386:	4638      	mov	r0, r7
 800b388:	47c8      	blx	r9
 800b38a:	3001      	adds	r0, #1
 800b38c:	d0e6      	beq.n	800b35c <_printf_common+0xa4>
 800b38e:	3601      	adds	r6, #1
 800b390:	e7d9      	b.n	800b346 <_printf_common+0x8e>
	...

0800b394 <_printf_i>:
 800b394:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b398:	7e0f      	ldrb	r7, [r1, #24]
 800b39a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b39c:	2f78      	cmp	r7, #120	@ 0x78
 800b39e:	4691      	mov	r9, r2
 800b3a0:	4680      	mov	r8, r0
 800b3a2:	460c      	mov	r4, r1
 800b3a4:	469a      	mov	sl, r3
 800b3a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b3aa:	d807      	bhi.n	800b3bc <_printf_i+0x28>
 800b3ac:	2f62      	cmp	r7, #98	@ 0x62
 800b3ae:	d80a      	bhi.n	800b3c6 <_printf_i+0x32>
 800b3b0:	2f00      	cmp	r7, #0
 800b3b2:	f000 80d2 	beq.w	800b55a <_printf_i+0x1c6>
 800b3b6:	2f58      	cmp	r7, #88	@ 0x58
 800b3b8:	f000 80b9 	beq.w	800b52e <_printf_i+0x19a>
 800b3bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b3c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b3c4:	e03a      	b.n	800b43c <_printf_i+0xa8>
 800b3c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b3ca:	2b15      	cmp	r3, #21
 800b3cc:	d8f6      	bhi.n	800b3bc <_printf_i+0x28>
 800b3ce:	a101      	add	r1, pc, #4	@ (adr r1, 800b3d4 <_printf_i+0x40>)
 800b3d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b3d4:	0800b42d 	.word	0x0800b42d
 800b3d8:	0800b441 	.word	0x0800b441
 800b3dc:	0800b3bd 	.word	0x0800b3bd
 800b3e0:	0800b3bd 	.word	0x0800b3bd
 800b3e4:	0800b3bd 	.word	0x0800b3bd
 800b3e8:	0800b3bd 	.word	0x0800b3bd
 800b3ec:	0800b441 	.word	0x0800b441
 800b3f0:	0800b3bd 	.word	0x0800b3bd
 800b3f4:	0800b3bd 	.word	0x0800b3bd
 800b3f8:	0800b3bd 	.word	0x0800b3bd
 800b3fc:	0800b3bd 	.word	0x0800b3bd
 800b400:	0800b541 	.word	0x0800b541
 800b404:	0800b46b 	.word	0x0800b46b
 800b408:	0800b4fb 	.word	0x0800b4fb
 800b40c:	0800b3bd 	.word	0x0800b3bd
 800b410:	0800b3bd 	.word	0x0800b3bd
 800b414:	0800b563 	.word	0x0800b563
 800b418:	0800b3bd 	.word	0x0800b3bd
 800b41c:	0800b46b 	.word	0x0800b46b
 800b420:	0800b3bd 	.word	0x0800b3bd
 800b424:	0800b3bd 	.word	0x0800b3bd
 800b428:	0800b503 	.word	0x0800b503
 800b42c:	6833      	ldr	r3, [r6, #0]
 800b42e:	1d1a      	adds	r2, r3, #4
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	6032      	str	r2, [r6, #0]
 800b434:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b438:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b43c:	2301      	movs	r3, #1
 800b43e:	e09d      	b.n	800b57c <_printf_i+0x1e8>
 800b440:	6833      	ldr	r3, [r6, #0]
 800b442:	6820      	ldr	r0, [r4, #0]
 800b444:	1d19      	adds	r1, r3, #4
 800b446:	6031      	str	r1, [r6, #0]
 800b448:	0606      	lsls	r6, r0, #24
 800b44a:	d501      	bpl.n	800b450 <_printf_i+0xbc>
 800b44c:	681d      	ldr	r5, [r3, #0]
 800b44e:	e003      	b.n	800b458 <_printf_i+0xc4>
 800b450:	0645      	lsls	r5, r0, #25
 800b452:	d5fb      	bpl.n	800b44c <_printf_i+0xb8>
 800b454:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b458:	2d00      	cmp	r5, #0
 800b45a:	da03      	bge.n	800b464 <_printf_i+0xd0>
 800b45c:	232d      	movs	r3, #45	@ 0x2d
 800b45e:	426d      	negs	r5, r5
 800b460:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b464:	4859      	ldr	r0, [pc, #356]	@ (800b5cc <_printf_i+0x238>)
 800b466:	230a      	movs	r3, #10
 800b468:	e011      	b.n	800b48e <_printf_i+0xfa>
 800b46a:	6821      	ldr	r1, [r4, #0]
 800b46c:	6833      	ldr	r3, [r6, #0]
 800b46e:	0608      	lsls	r0, r1, #24
 800b470:	f853 5b04 	ldr.w	r5, [r3], #4
 800b474:	d402      	bmi.n	800b47c <_printf_i+0xe8>
 800b476:	0649      	lsls	r1, r1, #25
 800b478:	bf48      	it	mi
 800b47a:	b2ad      	uxthmi	r5, r5
 800b47c:	2f6f      	cmp	r7, #111	@ 0x6f
 800b47e:	4853      	ldr	r0, [pc, #332]	@ (800b5cc <_printf_i+0x238>)
 800b480:	6033      	str	r3, [r6, #0]
 800b482:	bf14      	ite	ne
 800b484:	230a      	movne	r3, #10
 800b486:	2308      	moveq	r3, #8
 800b488:	2100      	movs	r1, #0
 800b48a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b48e:	6866      	ldr	r6, [r4, #4]
 800b490:	60a6      	str	r6, [r4, #8]
 800b492:	2e00      	cmp	r6, #0
 800b494:	bfa2      	ittt	ge
 800b496:	6821      	ldrge	r1, [r4, #0]
 800b498:	f021 0104 	bicge.w	r1, r1, #4
 800b49c:	6021      	strge	r1, [r4, #0]
 800b49e:	b90d      	cbnz	r5, 800b4a4 <_printf_i+0x110>
 800b4a0:	2e00      	cmp	r6, #0
 800b4a2:	d04b      	beq.n	800b53c <_printf_i+0x1a8>
 800b4a4:	4616      	mov	r6, r2
 800b4a6:	fbb5 f1f3 	udiv	r1, r5, r3
 800b4aa:	fb03 5711 	mls	r7, r3, r1, r5
 800b4ae:	5dc7      	ldrb	r7, [r0, r7]
 800b4b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b4b4:	462f      	mov	r7, r5
 800b4b6:	42bb      	cmp	r3, r7
 800b4b8:	460d      	mov	r5, r1
 800b4ba:	d9f4      	bls.n	800b4a6 <_printf_i+0x112>
 800b4bc:	2b08      	cmp	r3, #8
 800b4be:	d10b      	bne.n	800b4d8 <_printf_i+0x144>
 800b4c0:	6823      	ldr	r3, [r4, #0]
 800b4c2:	07df      	lsls	r7, r3, #31
 800b4c4:	d508      	bpl.n	800b4d8 <_printf_i+0x144>
 800b4c6:	6923      	ldr	r3, [r4, #16]
 800b4c8:	6861      	ldr	r1, [r4, #4]
 800b4ca:	4299      	cmp	r1, r3
 800b4cc:	bfde      	ittt	le
 800b4ce:	2330      	movle	r3, #48	@ 0x30
 800b4d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b4d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b4d8:	1b92      	subs	r2, r2, r6
 800b4da:	6122      	str	r2, [r4, #16]
 800b4dc:	f8cd a000 	str.w	sl, [sp]
 800b4e0:	464b      	mov	r3, r9
 800b4e2:	aa03      	add	r2, sp, #12
 800b4e4:	4621      	mov	r1, r4
 800b4e6:	4640      	mov	r0, r8
 800b4e8:	f7ff fee6 	bl	800b2b8 <_printf_common>
 800b4ec:	3001      	adds	r0, #1
 800b4ee:	d14a      	bne.n	800b586 <_printf_i+0x1f2>
 800b4f0:	f04f 30ff 	mov.w	r0, #4294967295
 800b4f4:	b004      	add	sp, #16
 800b4f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4fa:	6823      	ldr	r3, [r4, #0]
 800b4fc:	f043 0320 	orr.w	r3, r3, #32
 800b500:	6023      	str	r3, [r4, #0]
 800b502:	4833      	ldr	r0, [pc, #204]	@ (800b5d0 <_printf_i+0x23c>)
 800b504:	2778      	movs	r7, #120	@ 0x78
 800b506:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b50a:	6823      	ldr	r3, [r4, #0]
 800b50c:	6831      	ldr	r1, [r6, #0]
 800b50e:	061f      	lsls	r7, r3, #24
 800b510:	f851 5b04 	ldr.w	r5, [r1], #4
 800b514:	d402      	bmi.n	800b51c <_printf_i+0x188>
 800b516:	065f      	lsls	r7, r3, #25
 800b518:	bf48      	it	mi
 800b51a:	b2ad      	uxthmi	r5, r5
 800b51c:	6031      	str	r1, [r6, #0]
 800b51e:	07d9      	lsls	r1, r3, #31
 800b520:	bf44      	itt	mi
 800b522:	f043 0320 	orrmi.w	r3, r3, #32
 800b526:	6023      	strmi	r3, [r4, #0]
 800b528:	b11d      	cbz	r5, 800b532 <_printf_i+0x19e>
 800b52a:	2310      	movs	r3, #16
 800b52c:	e7ac      	b.n	800b488 <_printf_i+0xf4>
 800b52e:	4827      	ldr	r0, [pc, #156]	@ (800b5cc <_printf_i+0x238>)
 800b530:	e7e9      	b.n	800b506 <_printf_i+0x172>
 800b532:	6823      	ldr	r3, [r4, #0]
 800b534:	f023 0320 	bic.w	r3, r3, #32
 800b538:	6023      	str	r3, [r4, #0]
 800b53a:	e7f6      	b.n	800b52a <_printf_i+0x196>
 800b53c:	4616      	mov	r6, r2
 800b53e:	e7bd      	b.n	800b4bc <_printf_i+0x128>
 800b540:	6833      	ldr	r3, [r6, #0]
 800b542:	6825      	ldr	r5, [r4, #0]
 800b544:	6961      	ldr	r1, [r4, #20]
 800b546:	1d18      	adds	r0, r3, #4
 800b548:	6030      	str	r0, [r6, #0]
 800b54a:	062e      	lsls	r6, r5, #24
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	d501      	bpl.n	800b554 <_printf_i+0x1c0>
 800b550:	6019      	str	r1, [r3, #0]
 800b552:	e002      	b.n	800b55a <_printf_i+0x1c6>
 800b554:	0668      	lsls	r0, r5, #25
 800b556:	d5fb      	bpl.n	800b550 <_printf_i+0x1bc>
 800b558:	8019      	strh	r1, [r3, #0]
 800b55a:	2300      	movs	r3, #0
 800b55c:	6123      	str	r3, [r4, #16]
 800b55e:	4616      	mov	r6, r2
 800b560:	e7bc      	b.n	800b4dc <_printf_i+0x148>
 800b562:	6833      	ldr	r3, [r6, #0]
 800b564:	1d1a      	adds	r2, r3, #4
 800b566:	6032      	str	r2, [r6, #0]
 800b568:	681e      	ldr	r6, [r3, #0]
 800b56a:	6862      	ldr	r2, [r4, #4]
 800b56c:	2100      	movs	r1, #0
 800b56e:	4630      	mov	r0, r6
 800b570:	f7f4 feb6 	bl	80002e0 <memchr>
 800b574:	b108      	cbz	r0, 800b57a <_printf_i+0x1e6>
 800b576:	1b80      	subs	r0, r0, r6
 800b578:	6060      	str	r0, [r4, #4]
 800b57a:	6863      	ldr	r3, [r4, #4]
 800b57c:	6123      	str	r3, [r4, #16]
 800b57e:	2300      	movs	r3, #0
 800b580:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b584:	e7aa      	b.n	800b4dc <_printf_i+0x148>
 800b586:	6923      	ldr	r3, [r4, #16]
 800b588:	4632      	mov	r2, r6
 800b58a:	4649      	mov	r1, r9
 800b58c:	4640      	mov	r0, r8
 800b58e:	47d0      	blx	sl
 800b590:	3001      	adds	r0, #1
 800b592:	d0ad      	beq.n	800b4f0 <_printf_i+0x15c>
 800b594:	6823      	ldr	r3, [r4, #0]
 800b596:	079b      	lsls	r3, r3, #30
 800b598:	d413      	bmi.n	800b5c2 <_printf_i+0x22e>
 800b59a:	68e0      	ldr	r0, [r4, #12]
 800b59c:	9b03      	ldr	r3, [sp, #12]
 800b59e:	4298      	cmp	r0, r3
 800b5a0:	bfb8      	it	lt
 800b5a2:	4618      	movlt	r0, r3
 800b5a4:	e7a6      	b.n	800b4f4 <_printf_i+0x160>
 800b5a6:	2301      	movs	r3, #1
 800b5a8:	4632      	mov	r2, r6
 800b5aa:	4649      	mov	r1, r9
 800b5ac:	4640      	mov	r0, r8
 800b5ae:	47d0      	blx	sl
 800b5b0:	3001      	adds	r0, #1
 800b5b2:	d09d      	beq.n	800b4f0 <_printf_i+0x15c>
 800b5b4:	3501      	adds	r5, #1
 800b5b6:	68e3      	ldr	r3, [r4, #12]
 800b5b8:	9903      	ldr	r1, [sp, #12]
 800b5ba:	1a5b      	subs	r3, r3, r1
 800b5bc:	42ab      	cmp	r3, r5
 800b5be:	dcf2      	bgt.n	800b5a6 <_printf_i+0x212>
 800b5c0:	e7eb      	b.n	800b59a <_printf_i+0x206>
 800b5c2:	2500      	movs	r5, #0
 800b5c4:	f104 0619 	add.w	r6, r4, #25
 800b5c8:	e7f5      	b.n	800b5b6 <_printf_i+0x222>
 800b5ca:	bf00      	nop
 800b5cc:	0800d6d7 	.word	0x0800d6d7
 800b5d0:	0800d6e8 	.word	0x0800d6e8

0800b5d4 <__sflush_r>:
 800b5d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b5d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5dc:	0716      	lsls	r6, r2, #28
 800b5de:	4605      	mov	r5, r0
 800b5e0:	460c      	mov	r4, r1
 800b5e2:	d454      	bmi.n	800b68e <__sflush_r+0xba>
 800b5e4:	684b      	ldr	r3, [r1, #4]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	dc02      	bgt.n	800b5f0 <__sflush_r+0x1c>
 800b5ea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	dd48      	ble.n	800b682 <__sflush_r+0xae>
 800b5f0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b5f2:	2e00      	cmp	r6, #0
 800b5f4:	d045      	beq.n	800b682 <__sflush_r+0xae>
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b5fc:	682f      	ldr	r7, [r5, #0]
 800b5fe:	6a21      	ldr	r1, [r4, #32]
 800b600:	602b      	str	r3, [r5, #0]
 800b602:	d030      	beq.n	800b666 <__sflush_r+0x92>
 800b604:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b606:	89a3      	ldrh	r3, [r4, #12]
 800b608:	0759      	lsls	r1, r3, #29
 800b60a:	d505      	bpl.n	800b618 <__sflush_r+0x44>
 800b60c:	6863      	ldr	r3, [r4, #4]
 800b60e:	1ad2      	subs	r2, r2, r3
 800b610:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b612:	b10b      	cbz	r3, 800b618 <__sflush_r+0x44>
 800b614:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b616:	1ad2      	subs	r2, r2, r3
 800b618:	2300      	movs	r3, #0
 800b61a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b61c:	6a21      	ldr	r1, [r4, #32]
 800b61e:	4628      	mov	r0, r5
 800b620:	47b0      	blx	r6
 800b622:	1c43      	adds	r3, r0, #1
 800b624:	89a3      	ldrh	r3, [r4, #12]
 800b626:	d106      	bne.n	800b636 <__sflush_r+0x62>
 800b628:	6829      	ldr	r1, [r5, #0]
 800b62a:	291d      	cmp	r1, #29
 800b62c:	d82b      	bhi.n	800b686 <__sflush_r+0xb2>
 800b62e:	4a2a      	ldr	r2, [pc, #168]	@ (800b6d8 <__sflush_r+0x104>)
 800b630:	410a      	asrs	r2, r1
 800b632:	07d6      	lsls	r6, r2, #31
 800b634:	d427      	bmi.n	800b686 <__sflush_r+0xb2>
 800b636:	2200      	movs	r2, #0
 800b638:	6062      	str	r2, [r4, #4]
 800b63a:	04d9      	lsls	r1, r3, #19
 800b63c:	6922      	ldr	r2, [r4, #16]
 800b63e:	6022      	str	r2, [r4, #0]
 800b640:	d504      	bpl.n	800b64c <__sflush_r+0x78>
 800b642:	1c42      	adds	r2, r0, #1
 800b644:	d101      	bne.n	800b64a <__sflush_r+0x76>
 800b646:	682b      	ldr	r3, [r5, #0]
 800b648:	b903      	cbnz	r3, 800b64c <__sflush_r+0x78>
 800b64a:	6560      	str	r0, [r4, #84]	@ 0x54
 800b64c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b64e:	602f      	str	r7, [r5, #0]
 800b650:	b1b9      	cbz	r1, 800b682 <__sflush_r+0xae>
 800b652:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b656:	4299      	cmp	r1, r3
 800b658:	d002      	beq.n	800b660 <__sflush_r+0x8c>
 800b65a:	4628      	mov	r0, r5
 800b65c:	f7ff fbf2 	bl	800ae44 <_free_r>
 800b660:	2300      	movs	r3, #0
 800b662:	6363      	str	r3, [r4, #52]	@ 0x34
 800b664:	e00d      	b.n	800b682 <__sflush_r+0xae>
 800b666:	2301      	movs	r3, #1
 800b668:	4628      	mov	r0, r5
 800b66a:	47b0      	blx	r6
 800b66c:	4602      	mov	r2, r0
 800b66e:	1c50      	adds	r0, r2, #1
 800b670:	d1c9      	bne.n	800b606 <__sflush_r+0x32>
 800b672:	682b      	ldr	r3, [r5, #0]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d0c6      	beq.n	800b606 <__sflush_r+0x32>
 800b678:	2b1d      	cmp	r3, #29
 800b67a:	d001      	beq.n	800b680 <__sflush_r+0xac>
 800b67c:	2b16      	cmp	r3, #22
 800b67e:	d11e      	bne.n	800b6be <__sflush_r+0xea>
 800b680:	602f      	str	r7, [r5, #0]
 800b682:	2000      	movs	r0, #0
 800b684:	e022      	b.n	800b6cc <__sflush_r+0xf8>
 800b686:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b68a:	b21b      	sxth	r3, r3
 800b68c:	e01b      	b.n	800b6c6 <__sflush_r+0xf2>
 800b68e:	690f      	ldr	r7, [r1, #16]
 800b690:	2f00      	cmp	r7, #0
 800b692:	d0f6      	beq.n	800b682 <__sflush_r+0xae>
 800b694:	0793      	lsls	r3, r2, #30
 800b696:	680e      	ldr	r6, [r1, #0]
 800b698:	bf08      	it	eq
 800b69a:	694b      	ldreq	r3, [r1, #20]
 800b69c:	600f      	str	r7, [r1, #0]
 800b69e:	bf18      	it	ne
 800b6a0:	2300      	movne	r3, #0
 800b6a2:	eba6 0807 	sub.w	r8, r6, r7
 800b6a6:	608b      	str	r3, [r1, #8]
 800b6a8:	f1b8 0f00 	cmp.w	r8, #0
 800b6ac:	dde9      	ble.n	800b682 <__sflush_r+0xae>
 800b6ae:	6a21      	ldr	r1, [r4, #32]
 800b6b0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b6b2:	4643      	mov	r3, r8
 800b6b4:	463a      	mov	r2, r7
 800b6b6:	4628      	mov	r0, r5
 800b6b8:	47b0      	blx	r6
 800b6ba:	2800      	cmp	r0, #0
 800b6bc:	dc08      	bgt.n	800b6d0 <__sflush_r+0xfc>
 800b6be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b6c6:	81a3      	strh	r3, [r4, #12]
 800b6c8:	f04f 30ff 	mov.w	r0, #4294967295
 800b6cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6d0:	4407      	add	r7, r0
 800b6d2:	eba8 0800 	sub.w	r8, r8, r0
 800b6d6:	e7e7      	b.n	800b6a8 <__sflush_r+0xd4>
 800b6d8:	dfbffffe 	.word	0xdfbffffe

0800b6dc <_fflush_r>:
 800b6dc:	b538      	push	{r3, r4, r5, lr}
 800b6de:	690b      	ldr	r3, [r1, #16]
 800b6e0:	4605      	mov	r5, r0
 800b6e2:	460c      	mov	r4, r1
 800b6e4:	b913      	cbnz	r3, 800b6ec <_fflush_r+0x10>
 800b6e6:	2500      	movs	r5, #0
 800b6e8:	4628      	mov	r0, r5
 800b6ea:	bd38      	pop	{r3, r4, r5, pc}
 800b6ec:	b118      	cbz	r0, 800b6f6 <_fflush_r+0x1a>
 800b6ee:	6a03      	ldr	r3, [r0, #32]
 800b6f0:	b90b      	cbnz	r3, 800b6f6 <_fflush_r+0x1a>
 800b6f2:	f7ff fa81 	bl	800abf8 <__sinit>
 800b6f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d0f3      	beq.n	800b6e6 <_fflush_r+0xa>
 800b6fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b700:	07d0      	lsls	r0, r2, #31
 800b702:	d404      	bmi.n	800b70e <_fflush_r+0x32>
 800b704:	0599      	lsls	r1, r3, #22
 800b706:	d402      	bmi.n	800b70e <_fflush_r+0x32>
 800b708:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b70a:	f7ff fb8a 	bl	800ae22 <__retarget_lock_acquire_recursive>
 800b70e:	4628      	mov	r0, r5
 800b710:	4621      	mov	r1, r4
 800b712:	f7ff ff5f 	bl	800b5d4 <__sflush_r>
 800b716:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b718:	07da      	lsls	r2, r3, #31
 800b71a:	4605      	mov	r5, r0
 800b71c:	d4e4      	bmi.n	800b6e8 <_fflush_r+0xc>
 800b71e:	89a3      	ldrh	r3, [r4, #12]
 800b720:	059b      	lsls	r3, r3, #22
 800b722:	d4e1      	bmi.n	800b6e8 <_fflush_r+0xc>
 800b724:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b726:	f7ff fb7d 	bl	800ae24 <__retarget_lock_release_recursive>
 800b72a:	e7dd      	b.n	800b6e8 <_fflush_r+0xc>

0800b72c <__swbuf_r>:
 800b72c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b72e:	460e      	mov	r6, r1
 800b730:	4614      	mov	r4, r2
 800b732:	4605      	mov	r5, r0
 800b734:	b118      	cbz	r0, 800b73e <__swbuf_r+0x12>
 800b736:	6a03      	ldr	r3, [r0, #32]
 800b738:	b90b      	cbnz	r3, 800b73e <__swbuf_r+0x12>
 800b73a:	f7ff fa5d 	bl	800abf8 <__sinit>
 800b73e:	69a3      	ldr	r3, [r4, #24]
 800b740:	60a3      	str	r3, [r4, #8]
 800b742:	89a3      	ldrh	r3, [r4, #12]
 800b744:	071a      	lsls	r2, r3, #28
 800b746:	d501      	bpl.n	800b74c <__swbuf_r+0x20>
 800b748:	6923      	ldr	r3, [r4, #16]
 800b74a:	b943      	cbnz	r3, 800b75e <__swbuf_r+0x32>
 800b74c:	4621      	mov	r1, r4
 800b74e:	4628      	mov	r0, r5
 800b750:	f000 f82a 	bl	800b7a8 <__swsetup_r>
 800b754:	b118      	cbz	r0, 800b75e <__swbuf_r+0x32>
 800b756:	f04f 37ff 	mov.w	r7, #4294967295
 800b75a:	4638      	mov	r0, r7
 800b75c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b75e:	6823      	ldr	r3, [r4, #0]
 800b760:	6922      	ldr	r2, [r4, #16]
 800b762:	1a98      	subs	r0, r3, r2
 800b764:	6963      	ldr	r3, [r4, #20]
 800b766:	b2f6      	uxtb	r6, r6
 800b768:	4283      	cmp	r3, r0
 800b76a:	4637      	mov	r7, r6
 800b76c:	dc05      	bgt.n	800b77a <__swbuf_r+0x4e>
 800b76e:	4621      	mov	r1, r4
 800b770:	4628      	mov	r0, r5
 800b772:	f7ff ffb3 	bl	800b6dc <_fflush_r>
 800b776:	2800      	cmp	r0, #0
 800b778:	d1ed      	bne.n	800b756 <__swbuf_r+0x2a>
 800b77a:	68a3      	ldr	r3, [r4, #8]
 800b77c:	3b01      	subs	r3, #1
 800b77e:	60a3      	str	r3, [r4, #8]
 800b780:	6823      	ldr	r3, [r4, #0]
 800b782:	1c5a      	adds	r2, r3, #1
 800b784:	6022      	str	r2, [r4, #0]
 800b786:	701e      	strb	r6, [r3, #0]
 800b788:	6962      	ldr	r2, [r4, #20]
 800b78a:	1c43      	adds	r3, r0, #1
 800b78c:	429a      	cmp	r2, r3
 800b78e:	d004      	beq.n	800b79a <__swbuf_r+0x6e>
 800b790:	89a3      	ldrh	r3, [r4, #12]
 800b792:	07db      	lsls	r3, r3, #31
 800b794:	d5e1      	bpl.n	800b75a <__swbuf_r+0x2e>
 800b796:	2e0a      	cmp	r6, #10
 800b798:	d1df      	bne.n	800b75a <__swbuf_r+0x2e>
 800b79a:	4621      	mov	r1, r4
 800b79c:	4628      	mov	r0, r5
 800b79e:	f7ff ff9d 	bl	800b6dc <_fflush_r>
 800b7a2:	2800      	cmp	r0, #0
 800b7a4:	d0d9      	beq.n	800b75a <__swbuf_r+0x2e>
 800b7a6:	e7d6      	b.n	800b756 <__swbuf_r+0x2a>

0800b7a8 <__swsetup_r>:
 800b7a8:	b538      	push	{r3, r4, r5, lr}
 800b7aa:	4b29      	ldr	r3, [pc, #164]	@ (800b850 <__swsetup_r+0xa8>)
 800b7ac:	4605      	mov	r5, r0
 800b7ae:	6818      	ldr	r0, [r3, #0]
 800b7b0:	460c      	mov	r4, r1
 800b7b2:	b118      	cbz	r0, 800b7bc <__swsetup_r+0x14>
 800b7b4:	6a03      	ldr	r3, [r0, #32]
 800b7b6:	b90b      	cbnz	r3, 800b7bc <__swsetup_r+0x14>
 800b7b8:	f7ff fa1e 	bl	800abf8 <__sinit>
 800b7bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7c0:	0719      	lsls	r1, r3, #28
 800b7c2:	d422      	bmi.n	800b80a <__swsetup_r+0x62>
 800b7c4:	06da      	lsls	r2, r3, #27
 800b7c6:	d407      	bmi.n	800b7d8 <__swsetup_r+0x30>
 800b7c8:	2209      	movs	r2, #9
 800b7ca:	602a      	str	r2, [r5, #0]
 800b7cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b7d0:	81a3      	strh	r3, [r4, #12]
 800b7d2:	f04f 30ff 	mov.w	r0, #4294967295
 800b7d6:	e033      	b.n	800b840 <__swsetup_r+0x98>
 800b7d8:	0758      	lsls	r0, r3, #29
 800b7da:	d512      	bpl.n	800b802 <__swsetup_r+0x5a>
 800b7dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b7de:	b141      	cbz	r1, 800b7f2 <__swsetup_r+0x4a>
 800b7e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b7e4:	4299      	cmp	r1, r3
 800b7e6:	d002      	beq.n	800b7ee <__swsetup_r+0x46>
 800b7e8:	4628      	mov	r0, r5
 800b7ea:	f7ff fb2b 	bl	800ae44 <_free_r>
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	6363      	str	r3, [r4, #52]	@ 0x34
 800b7f2:	89a3      	ldrh	r3, [r4, #12]
 800b7f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b7f8:	81a3      	strh	r3, [r4, #12]
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	6063      	str	r3, [r4, #4]
 800b7fe:	6923      	ldr	r3, [r4, #16]
 800b800:	6023      	str	r3, [r4, #0]
 800b802:	89a3      	ldrh	r3, [r4, #12]
 800b804:	f043 0308 	orr.w	r3, r3, #8
 800b808:	81a3      	strh	r3, [r4, #12]
 800b80a:	6923      	ldr	r3, [r4, #16]
 800b80c:	b94b      	cbnz	r3, 800b822 <__swsetup_r+0x7a>
 800b80e:	89a3      	ldrh	r3, [r4, #12]
 800b810:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b814:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b818:	d003      	beq.n	800b822 <__swsetup_r+0x7a>
 800b81a:	4621      	mov	r1, r4
 800b81c:	4628      	mov	r0, r5
 800b81e:	f000 f84f 	bl	800b8c0 <__smakebuf_r>
 800b822:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b826:	f013 0201 	ands.w	r2, r3, #1
 800b82a:	d00a      	beq.n	800b842 <__swsetup_r+0x9a>
 800b82c:	2200      	movs	r2, #0
 800b82e:	60a2      	str	r2, [r4, #8]
 800b830:	6962      	ldr	r2, [r4, #20]
 800b832:	4252      	negs	r2, r2
 800b834:	61a2      	str	r2, [r4, #24]
 800b836:	6922      	ldr	r2, [r4, #16]
 800b838:	b942      	cbnz	r2, 800b84c <__swsetup_r+0xa4>
 800b83a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b83e:	d1c5      	bne.n	800b7cc <__swsetup_r+0x24>
 800b840:	bd38      	pop	{r3, r4, r5, pc}
 800b842:	0799      	lsls	r1, r3, #30
 800b844:	bf58      	it	pl
 800b846:	6962      	ldrpl	r2, [r4, #20]
 800b848:	60a2      	str	r2, [r4, #8]
 800b84a:	e7f4      	b.n	800b836 <__swsetup_r+0x8e>
 800b84c:	2000      	movs	r0, #0
 800b84e:	e7f7      	b.n	800b840 <__swsetup_r+0x98>
 800b850:	2400001c 	.word	0x2400001c

0800b854 <_sbrk_r>:
 800b854:	b538      	push	{r3, r4, r5, lr}
 800b856:	4d06      	ldr	r5, [pc, #24]	@ (800b870 <_sbrk_r+0x1c>)
 800b858:	2300      	movs	r3, #0
 800b85a:	4604      	mov	r4, r0
 800b85c:	4608      	mov	r0, r1
 800b85e:	602b      	str	r3, [r5, #0]
 800b860:	f7f5 fda0 	bl	80013a4 <_sbrk>
 800b864:	1c43      	adds	r3, r0, #1
 800b866:	d102      	bne.n	800b86e <_sbrk_r+0x1a>
 800b868:	682b      	ldr	r3, [r5, #0]
 800b86a:	b103      	cbz	r3, 800b86e <_sbrk_r+0x1a>
 800b86c:	6023      	str	r3, [r4, #0]
 800b86e:	bd38      	pop	{r3, r4, r5, pc}
 800b870:	24008da4 	.word	0x24008da4

0800b874 <__swhatbuf_r>:
 800b874:	b570      	push	{r4, r5, r6, lr}
 800b876:	460c      	mov	r4, r1
 800b878:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b87c:	2900      	cmp	r1, #0
 800b87e:	b096      	sub	sp, #88	@ 0x58
 800b880:	4615      	mov	r5, r2
 800b882:	461e      	mov	r6, r3
 800b884:	da0d      	bge.n	800b8a2 <__swhatbuf_r+0x2e>
 800b886:	89a3      	ldrh	r3, [r4, #12]
 800b888:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b88c:	f04f 0100 	mov.w	r1, #0
 800b890:	bf14      	ite	ne
 800b892:	2340      	movne	r3, #64	@ 0x40
 800b894:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b898:	2000      	movs	r0, #0
 800b89a:	6031      	str	r1, [r6, #0]
 800b89c:	602b      	str	r3, [r5, #0]
 800b89e:	b016      	add	sp, #88	@ 0x58
 800b8a0:	bd70      	pop	{r4, r5, r6, pc}
 800b8a2:	466a      	mov	r2, sp
 800b8a4:	f000 f848 	bl	800b938 <_fstat_r>
 800b8a8:	2800      	cmp	r0, #0
 800b8aa:	dbec      	blt.n	800b886 <__swhatbuf_r+0x12>
 800b8ac:	9901      	ldr	r1, [sp, #4]
 800b8ae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b8b2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b8b6:	4259      	negs	r1, r3
 800b8b8:	4159      	adcs	r1, r3
 800b8ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b8be:	e7eb      	b.n	800b898 <__swhatbuf_r+0x24>

0800b8c0 <__smakebuf_r>:
 800b8c0:	898b      	ldrh	r3, [r1, #12]
 800b8c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b8c4:	079d      	lsls	r5, r3, #30
 800b8c6:	4606      	mov	r6, r0
 800b8c8:	460c      	mov	r4, r1
 800b8ca:	d507      	bpl.n	800b8dc <__smakebuf_r+0x1c>
 800b8cc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b8d0:	6023      	str	r3, [r4, #0]
 800b8d2:	6123      	str	r3, [r4, #16]
 800b8d4:	2301      	movs	r3, #1
 800b8d6:	6163      	str	r3, [r4, #20]
 800b8d8:	b003      	add	sp, #12
 800b8da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b8dc:	ab01      	add	r3, sp, #4
 800b8de:	466a      	mov	r2, sp
 800b8e0:	f7ff ffc8 	bl	800b874 <__swhatbuf_r>
 800b8e4:	9f00      	ldr	r7, [sp, #0]
 800b8e6:	4605      	mov	r5, r0
 800b8e8:	4639      	mov	r1, r7
 800b8ea:	4630      	mov	r0, r6
 800b8ec:	f7ff fb16 	bl	800af1c <_malloc_r>
 800b8f0:	b948      	cbnz	r0, 800b906 <__smakebuf_r+0x46>
 800b8f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8f6:	059a      	lsls	r2, r3, #22
 800b8f8:	d4ee      	bmi.n	800b8d8 <__smakebuf_r+0x18>
 800b8fa:	f023 0303 	bic.w	r3, r3, #3
 800b8fe:	f043 0302 	orr.w	r3, r3, #2
 800b902:	81a3      	strh	r3, [r4, #12]
 800b904:	e7e2      	b.n	800b8cc <__smakebuf_r+0xc>
 800b906:	89a3      	ldrh	r3, [r4, #12]
 800b908:	6020      	str	r0, [r4, #0]
 800b90a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b90e:	81a3      	strh	r3, [r4, #12]
 800b910:	9b01      	ldr	r3, [sp, #4]
 800b912:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b916:	b15b      	cbz	r3, 800b930 <__smakebuf_r+0x70>
 800b918:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b91c:	4630      	mov	r0, r6
 800b91e:	f000 f81d 	bl	800b95c <_isatty_r>
 800b922:	b128      	cbz	r0, 800b930 <__smakebuf_r+0x70>
 800b924:	89a3      	ldrh	r3, [r4, #12]
 800b926:	f023 0303 	bic.w	r3, r3, #3
 800b92a:	f043 0301 	orr.w	r3, r3, #1
 800b92e:	81a3      	strh	r3, [r4, #12]
 800b930:	89a3      	ldrh	r3, [r4, #12]
 800b932:	431d      	orrs	r5, r3
 800b934:	81a5      	strh	r5, [r4, #12]
 800b936:	e7cf      	b.n	800b8d8 <__smakebuf_r+0x18>

0800b938 <_fstat_r>:
 800b938:	b538      	push	{r3, r4, r5, lr}
 800b93a:	4d07      	ldr	r5, [pc, #28]	@ (800b958 <_fstat_r+0x20>)
 800b93c:	2300      	movs	r3, #0
 800b93e:	4604      	mov	r4, r0
 800b940:	4608      	mov	r0, r1
 800b942:	4611      	mov	r1, r2
 800b944:	602b      	str	r3, [r5, #0]
 800b946:	f7f5 fd04 	bl	8001352 <_fstat>
 800b94a:	1c43      	adds	r3, r0, #1
 800b94c:	d102      	bne.n	800b954 <_fstat_r+0x1c>
 800b94e:	682b      	ldr	r3, [r5, #0]
 800b950:	b103      	cbz	r3, 800b954 <_fstat_r+0x1c>
 800b952:	6023      	str	r3, [r4, #0]
 800b954:	bd38      	pop	{r3, r4, r5, pc}
 800b956:	bf00      	nop
 800b958:	24008da4 	.word	0x24008da4

0800b95c <_isatty_r>:
 800b95c:	b538      	push	{r3, r4, r5, lr}
 800b95e:	4d06      	ldr	r5, [pc, #24]	@ (800b978 <_isatty_r+0x1c>)
 800b960:	2300      	movs	r3, #0
 800b962:	4604      	mov	r4, r0
 800b964:	4608      	mov	r0, r1
 800b966:	602b      	str	r3, [r5, #0]
 800b968:	f7f5 fd03 	bl	8001372 <_isatty>
 800b96c:	1c43      	adds	r3, r0, #1
 800b96e:	d102      	bne.n	800b976 <_isatty_r+0x1a>
 800b970:	682b      	ldr	r3, [r5, #0]
 800b972:	b103      	cbz	r3, 800b976 <_isatty_r+0x1a>
 800b974:	6023      	str	r3, [r4, #0]
 800b976:	bd38      	pop	{r3, r4, r5, pc}
 800b978:	24008da4 	.word	0x24008da4

0800b97c <_init>:
 800b97c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b97e:	bf00      	nop
 800b980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b982:	bc08      	pop	{r3}
 800b984:	469e      	mov	lr, r3
 800b986:	4770      	bx	lr

0800b988 <_fini>:
 800b988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b98a:	bf00      	nop
 800b98c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b98e:	bc08      	pop	{r3}
 800b990:	469e      	mov	lr, r3
 800b992:	4770      	bx	lr
